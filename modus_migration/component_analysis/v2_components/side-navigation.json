{
  "component_name": "modus-wc-side-navigation",
  "version": "v2",
  "props": [
    {
      "name": "collapseOnClickOutside",
      "description": "/**\n * A customizable side navigation component for organizing primary navigation and content areas in an application.\n */\n@Component({\n  tag: 'modus-wc-side-navigation',\n  styleUrl: 'modus-wc-side-navigation.scss',\n  shadow: false,\n})\nexport class ModusWcSideNavigation {\n  private inheritedAttributes: Attributes = {};\n  private minWidth = '4rem';\n  private navRef?: HTMLElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Whether the side navigation should collapse when clicking outside of it. */",
      "type": ""
    },
    {
      "name": "customClass",
      "description": "/**\n * A customizable side navigation component for organizing primary navigation and content areas in an application.\n */\n@Component({\n  tag: 'modus-wc-side-navigation',\n  styleUrl: 'modus-wc-side-navigation.scss',\n  shadow: false,\n})\nexport class ModusWcSideNavigation {\n  private inheritedAttributes: Attributes = {};\n  private minWidth = '4rem';\n  private navRef?: HTMLElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Whether the side navigation should collapse when clicking outside of it. */",
      "type": ": string"
    },
    {
      "name": "expanded",
      "description": "/**\n * A customizable side navigation component for organizing primary navigation and content areas in an application.\n */\n@Component({\n  tag: 'modus-wc-side-navigation',\n  styleUrl: 'modus-wc-side-navigation.scss',\n  shadow: false,\n})\nexport class ModusWcSideNavigation {\n  private inheritedAttributes: Attributes = {};\n  private minWidth = '4rem';\n  private navRef?: HTMLElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Whether the side navigation should collapse when clicking outside of it. */",
      "type": "this.expanded,\n    })"
    },
    {
      "name": "maxWidth",
      "description": "/**\n * A customizable side navigation component for organizing primary navigation and content areas in an application.\n */\n@Component({\n  tag: 'modus-wc-side-navigation',\n  styleUrl: 'modus-wc-side-navigation.scss',\n  shadow: false,\n})\nexport class ModusWcSideNavigation {\n  private inheritedAttributes: Attributes = {};\n  private minWidth = '4rem';\n  private navRef?: HTMLElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Whether the side navigation should collapse when clicking outside of it. */",
      "type": "this.minWidth"
    },
    {
      "name": "mode",
      "description": "/**\n * A customizable side navigation component for organizing primary navigation and content areas in an application.\n */\n@Component({\n  tag: 'modus-wc-side-navigation',\n  styleUrl: 'modus-wc-side-navigation.scss',\n  shadow: false,\n})\nexport class ModusWcSideNavigation {\n  private inheritedAttributes: Attributes = {};\n  private minWidth = '4rem';\n  private navRef?: HTMLElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Whether the side navigation should collapse when clicking outside of it. */",
      "type": "'overlay' | 'push'"
    },
    {
      "name": "targetContent",
      "description": "/**\n * A customizable side navigation component for organizing primary navigation and content areas in an application.\n */\n@Component({\n  tag: 'modus-wc-side-navigation',\n  styleUrl: 'modus-wc-side-navigation.scss',\n  shadow: false,\n})\nexport class ModusWcSideNavigation {\n  private inheritedAttributes: Attributes = {};\n  private minWidth = '4rem';\n  private navRef?: HTMLElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Whether the side navigation should collapse when clicking outside of it. */",
      "type": "string"
    }
  ],
  "events": [
    {
      "name": "expandedChange",
      "description": "/**\n * A customizable side navigation component for organizing primary navigation and content areas in an application.\n */\n@Component({\n  tag: 'modus-wc-side-navigation',\n  styleUrl: 'modus-wc-side-navigation.scss',\n  shadow: false,\n})\nexport class ModusWcSideNavigation {\n  private inheritedAttributes: Attributes = {};\n  private minWidth = '4rem';\n  private navRef?: HTMLElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Whether the side navigation should collapse when clicking outside of it. */\n  @Prop() collapseOnClickOutside = true;\n\n  /** Custom CSS class to apply to the inner div. */\n  @Prop() customClass?: string = '';\n\n  /** Whether the side navigation is expanded. */\n  @Prop({ mutable: true, reflect: true }) expanded = false;\n\n  /** Maximum width of the side navigation panel in an expanded state. */\n  @Prop() maxWidth = '256px';\n\n  /** Mode to make side navigation either overlay or push the content for the selector specified in targetContent */\n  @Prop() mode: 'overlay' | 'push' = 'overlay';\n\n  /** (optional) Specify the selector for the page's content for which paddings and margins will be set by side navigation based on the mode. */\n  @Prop() targetContent: string = '';\n\n  /** Event emitted when the expanded state changes (expanded/collapsed). */"
    }
  ],
  "slots": [],
  "default_values": {
    "collapseOnClickOutside": "true",
    "customClass": "''",
    "expanded": "false",
    "maxWidth": "'256px'",
    "mode": "'overlay'",
    "targetContent": "''"
  },
  "documentation": "\n\n--- modus-wc-side-navigation.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\n\ninterface SideNavigationArgs {\n  'custom-class'?: string;\n  expanded: boolean;\n  'max-width': string;\n  'collapse-on-click-outside'?: boolean;\n  mode: 'overlay' | 'push';\n  'target-content'?: string;\n}\n\nconst meta: Meta<SideNavigationArgs> = {\n  title: 'Components/Side Navigation',\n  component: 'modus-wc-side-navigation',\n  args: {\n    'collapse-on-click-outside': true,\n    expanded: false,\n    'max-width': '256px',\n    mode: 'push',\n    'target-content': '.panel-content',\n  },\n  argTypes: {\n    'max-width': {\n      control: { type: 'text' },\n      description:\n        'Maximum width of the side navigation panel in an expanded state.',\n    },\n    mode: {\n      control: { type: 'select' },\n      options: ['overlay', 'push'],\n      description: 'Display mode of the side navigation (overlay or push).',\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    layout: 'padded',\n    actions: {\n      handles: ['expandedChange'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<SideNavigationArgs>;\n\nexport const Default: Story = {\n  render: (args) => {\n    const handleMenuOpenChange = (e: CustomEvent) => {\n      const eventSource = e.target as HTMLElement;\n      const storyContainer = eventSource?.closest('.layout-with-navbar');\n      let sideNav: Element | null;\n\n      if (storyContainer) {\n        sideNav = storyContainer.querySelector('modus-wc-side-navigation');\n      } else {\n        sideNav = document.querySelector('modus-wc-side-navigation');\n      }\n\n      if (sideNav) {\n        (sideNav as HTMLElement & { expanded: boolean }).expanded = e.detail;\n      }\n    };\n\n    return html`\n      <style>\n        .layout-with-navbar {\n          display: flex;\n          flex-direction: column;\n          height: 100%;\n        }\n        .main-content-row {\n          display: flex;\n          flex: 1;\n          overflow: hidden;\n        }\n        .modus-wc-menu-item-labels {\n          padding: 0 16px;\n        }\n        .navbar {\n          box-shadow: none;\n        }\n        .panel-content {\n          margin-left: 4rem;\n          padding: 10px;\n        }\n        .side-navigation {\n          height: 500px;\n          align-self: flex-start;\n          position: relative;\n        }\n      </style>\n      <script>\n        document.addEventListener('DOMContentLoaded', () => {\n          const menuItems = document.querySelectorAll('modus-wc-menu-item');\n\n          menuItems.forEach((item) => {\n            item.addEventListener('itemSelect', () => {\n              menuItems.forEach((i) => i.removeAttribute('selected'));\n              item.setAttribute('selected', '');\n            });\n          });\n        });\n\n        function handleMenuOpenChange(e) {\n          const eventSource = e.target;\n          const storyContainer = eventSource?.closest('.layout-with-navbar');\n\n          let sideNav;\n\n          if (storyContainer) {\n            sideNav = storyContainer.querySelector('modus-wc-side-navigation');\n          } else {\n            sideNav = document.querySelector('modus-wc-side-navigation');\n          }\n\n          if (sideNav) {\n            sideNav.expanded = e.detail;\n          }\n        }\n      </script>\n      <div class=\"layout-with-navbar\">\n        <modus-wc-navbar\n          app-title=\"Modus App\"\n          class=\"navbar\"\n          logo=\"/assets/logo.svg\"\n          @mainMenuOpenChange=${handleMenuOpenChange}\n          .userCard=${{\n            avatarAlt: 'User Avatar',\n            avatarSrc:\n              'https://i1.sndcdn.com/artworks-000405996468-wmh3uv-t500x500.jpg',\n            email: 'user@trimble.com',\n            name: 'Sonic the Hedgehog',\n          }}\n          .visibility=${{\n            ai: true,\n            apps: true,\n            help: true,\n            mainMenu: true,\n            notifications: true,\n            search: true,\n            searchInput: false,\n            user: true,\n          }}\n          style=\"z-index: 2;\"\n        ></modus-wc-navbar>\n        <div class=\"main-content-row\">\n          <modus-wc-side-navigation\n            class=\"side-navigation\"\n            collapse-on-click-outside=${args['collapse-on-click-outside']}\n            custom-class=${ifDefined(args['custom-class'])}\n            expanded=${args.expanded}\n            max-width=${args['max-width']}\n            mode=${ifDefined(args.mode)}\n            target-content=${ifDefined(args['target-content'])}\n          >\n            <modus-wc-menu size=\"lg\">\n              <modus-wc-menu-item label=\"home\" selected>\n                <modus-wc-icon slot=\"start-icon\" name=\"home\"></modus-wc-icon>\n              </modus-wc-menu-item>\n              <modus-wc-menu-item label=\"profile\">\n                <modus-wc-icon slot=\"start-icon\" name=\"person\"></modus-wc-icon>\n              </modus-wc-menu-item>\n              <modus-wc-menu-item label=\"settings\">\n                <modus-wc-icon slot=\"start-icon\" name=\"gears\"></modus-wc-icon>\n              </modus-wc-menu-item>\n            </modus-wc-menu>\n          </modus-wc-side-navigation>\n          <div class=\"panel-content\">\n            <div id=\"overview\">\n              <p>\n                The side navigation of an application provides context through\n                accessible menu options and positions a consistent component to\n                connect to various pages in the application.\n              </p>\n              <p>\n                The side navigation is a collapsible side content of the site\u2019s\n                pages. It is located alongside the page\u2019s primary content. The\n                component is designed to add side content to a fullscreen\n                application. It is activated through the \u201chamburger\u201d menu in the\n                Navbar.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n  },\n};\n\nexport const collapsibleMenu: Story = {\n  render: (args) => {\n    const handleMenuOpenChange = (e: CustomEvent) => {\n      const eventSource = e.target as HTMLElement;\n      const storyContainer = eventSource?.closest('.layout-with-navbar');\n      let sideNav: Element | null;\n\n      if (storyContainer) {\n        sideNav = storyContainer.querySelector('modus-wc-side-navigation');\n      } else {\n        sideNav = document.querySelector('modus-wc-side-navigation');\n      }\n\n      if (sideNav) {\n        (sideNav as HTMLElement & { expanded: boolean }).expanded = e.detail;\n      }\n    };\n\n    const handleExpandChange = (e: CustomEvent) => {\n      if (!e.detail) {\n        const eventSource = e.target as HTMLElement;\n        const container = eventSource?.closest('.layout-with-navbar');\n\n        if (container) {\n          const childrenContainers = container.querySelectorAll(\n            '.children-container'\n          );\n          childrenContainers.forEach((container) => {\n            container.classList.add('hidden');\n            container.setAttribute('aria-hidden', 'true');\n          });\n\n          const collapseIcons = container.querySelectorAll('.dropdown-toggle');\n          collapseIcons.forEach((icon) => {\n            if (icon.getAttribute('name') === 'expand_less') {\n              icon.setAttribute('name', 'expand_more');\n            }\n          });\n        }\n      }\n    };\n\n    return html`\n      <style>\n        .children-container {\n          transition: height 0.2s ease-out;\n        }\n\n        .collapse-icon {\n          min-width: 24px;\n          padding-inline-start: 0.2rem;\n        }\n\n        .dropdown-menu {\n          overflow: hidden;\n          text-overflow: ellipsis;\n          white-space: nowrap;\n        }\n\n        .flex-row {\n          align-items: center;\n          display: flex;\n          gap: 1.3rem;\n          padding: 0.8rem 0.25rem;\n          padding-inline-start: 1rem;\n        }\n\n        .hidden {\n          display: none;\n        }\n\n        .justify-end {\n          margin-left: auto;\n        }\n\n        .layout-with-navbar {\n          box-shadow: rgba(36, 35, 45, 0.3) 1px 0 4px;\n          display: flex;\n          flex-direction: column;\n          height: 100%;\n        }\n\n        .main-content-row {\n          display: flex;\n          flex: 1;\n          overflow: hidden;\n        }\n\n        .menu-icon {\n          margin-right: 1rem;\n        }\n\n        .menu-item {\n          color: var(--modus-wc-color-gray-9);\n          display: block;\n          font-size: 16px;\n          line-height: 1.5;\n          padding: 0.5rem 1rem;\n          text-decoration: none;\n        }\n\n        .menu-width {\n          width: 100%;\n        }\n\n        .modus-wc-menu li ul {\n          margin-inline-start: 1.8rem;\n        }\n\n        .modus-wc-menu-dropdown {\n          padding-left: 1rem;\n        }\n\n        .modus-wc-menu-dropdown-toggle {\n          align-items: center;\n          cursor: pointer;\n          font-size: 16px;\n          line-height: 1.5;\n          padding: 0.7rem 1.25rem;\n        }\n\n        .nested-row {\n          padding-inline-start: 2.5rem;\n        }\n\n        .panel-content {\n          margin-left: 4rem;\n          padding: 10px;\n        }\n\n        .side-navigation {\n          align-self: flex-start;\n          height: 500px;\n          position: relative;\n        }\n\n        ul {\n          list-style: none;\n          margin: 0;\n          padding: 0;\n        }\n      </style>\n      <script>\n        function handleMenuOpenChange(e) {\n          const eventSource = e.target;\n          const storyContainer = eventSource?.closest('.layout-with-navbar');\n\n          let sideNav;\n\n          if (storyContainer) {\n            sideNav = storyContainer.querySelector('modus-wc-side-navigation');\n          } else {\n            sideNav = document.querySelector('modus-wc-side-navigation');\n          }\n\n          if (sideNav) {\n            sideNav.expanded = e.detail;\n          }\n        }\n\n        function handleCollapseToggle(e) {\n          const clickedEl = e.currentTarget;\n          const parentLi = clickedEl.closest('li');\n          if (!parentLi) return;\n\n          // Find the icon element that needs to be toggled using the dropdown-toggle class\n          const iconEl = clickedEl.querySelector('.dropdown-toggle');\n          if (!iconEl) return;\n\n          // Find the parent side nav element\n          const parentContainer = clickedEl.closest('.layout-with-navbar');\n          const sideNav = parentContainer?.querySelector(\n            'modus-wc-side-navigation'\n          );\n\n          // Toggle between expand_more and expand_less icons only if side nav is expanded\n          const isExpanded = iconEl.getAttribute('name') === 'expand_more';\n          if (sideNav?.expanded) {\n            iconEl.setAttribute(\n              'name',\n              isExpanded ? 'expand_less' : 'expand_more'\n            );\n          }\n\n          // Find and toggle children visibility\n          const childContainer =\n            parentLi.nextElementSibling?.classList.contains(\n              'children-container'\n            )\n              ? parentLi.nextElementSibling\n              : null;\n\n          if (childContainer && sideNav?.expanded) {\n            childContainer.classList.toggle('hidden');\n            childContainer.setAttribute(\n              'aria-hidden',\n              !isExpanded ? 'true' : 'false'\n            );\n          }\n        }\n\n        function handleExpandChange(e) {\n          if (!e.detail) {\n            const eventSource = e.target;\n            const container = eventSource?.closest('.layout-with-navbar');\n\n            if (container) {\n              // Collapse all child containers if the side navigation is collapsed\n              const childrenContainers = container.querySelectorAll(\n                '.children-container'\n              );\n              childrenContainers.forEach((container) => {\n                container.classList.add('hidden');\n                container.setAttribute('aria-hidden', 'true');\n              });\n\n              // Reset all collapse icons to expand_more\n              const collapseIcons =\n                container.querySelectorAll('.dropdown-toggle');\n              collapseIcons.forEach((icon) => {\n                if (icon.getAttribute('name') === 'expand_less') {\n                  icon.setAttribute('name', 'expand_more');\n                }\n              });\n            }\n          }\n        }\n      </script>\n      <div class=\"layout-with-navbar\">\n        <modus-wc-navbar\n          app-title=\"Modus App\"\n          class=\"navbar\"\n          logo=\"/assets/logo.svg\"\n          @mainMenuOpenChange=${handleMenuOpenChange}\n          .userCard=${{\n            avatarAlt: 'User Avatar',\n            avatarSrc:\n              'https://i1.sndcdn.com/artworks-000405996468-wmh3uv-t500x500.jpg',\n            email: 'user@trimble.com',\n            name: 'Sonic the Hedgehog',\n          }}\n          .visibility=${{\n            ai: true,\n            apps: true,\n            help: true,\n            mainMenu: true,\n            notifications: true,\n            search: true,\n            searchInput: false,\n            user: true,\n          }}\n          style=\"z-index: 2;\"\n        ></modus-wc-navbar>\n        <div class=\"main-content-row\">\n          <modus-wc-side-navigation\n            class=\"side-navigation\"\n            collapse-on-click-outside=${args['collapse-on-click-outside']}\n            custom-class=${ifDefined(args['custom-class'])}\n            expanded=${args.expanded}\n            max-width=${args['max-width']}\n            mode=${ifDefined(args.mode)}\n            target-content=${ifDefined(args['target-content'])}\n            @expandedChange=${handleExpandChange}\n          >\n            <modus-wc-menu aria-label=\"Custom menu\" custom-class=\"menu-width\">\n              <li>\n                <div class=\"flex-row\" onClick=\"handleCollapseToggle(event)\">\n                  <modus-wc-icon\n                    decorative=\"true\"\n                    name=\"bar_graph\"\n                    class=\"collapse-icon icon-left\"\n                  ></modus-wc-icon>\n                  <div class=\"dropdown-menu\">Charts</div>\n                  <div class=\"justify-end\">\n                    <modus-wc-icon\n                      decorative=\"true\"\n                      name=\"expand_more\"\n                      class=\"collapse-icon dropdown-toggle\"\n                    ></modus-wc-icon>\n                  </div>\n                </div>\n              </li>\n              <li class=\"children-container hidden\" aria-hidden=\"true\">\n                <ul>\n                  <li>\n                    <div class=\"flex-row nested-row\">\n                      <div>Bar Chart</div>\n                    </div>\n                  </li>\n                  <li>\n                    <div class=\"flex-row nested-row\">\n                      <div>Line Chart</div>\n                    </div>\n                  </li>\n                </ul>\n              </li>\n\n              <!-- Item without children -->\n              <li>\n                <div class=\"flex-row\">\n                  <modus-wc-icon\n                    decorative=\"true\"\n                    name=\"calendar\"\n                    class=\"collapse-icon icon-left\"\n                  ></modus-wc-icon>\n                  <div class=\"dropdown-menu\">Calendar</div>\n                </div>\n              </li>\n              <!-- Second parent group (collapsed) -->\n              <li>\n                <div class=\"flex-row\" onClick=\"handleCollapseToggle(event)\">\n                  <modus-wc-icon\n                    decorative=\"true\"\n                    name=\"compass\"\n                    class=\"collapse-icon icon-left\"\n                  ></modus-wc-icon>\n                  <div class=\"dropdown-menu\">Maps</div>\n                  <div class=\"justify-end\">\n                    <modus-wc-icon\n                      decorative=\"true\"\n                      name=\"expand_more\"\n                      class=\"collapse-icon dropdown-toggle\"\n                    ></modus-wc-icon>\n                  </div>\n                </div>\n              </li>\n              <li class=\"children-container hidden\" aria-hidden=\"true\">\n                <ul>\n                  <li>\n                    <div class=\"flex-row nested-row\">\n                      <div>Map 1</div>\n                    </div>\n                  </li>\n                  <li>\n                    <div\n                      class=\"flex-row nested-row\"\n                      onClick=\"handleCollapseToggle(event)\"\n                    >\n                      <div>Map 2</div>\n                      <div class=\"justify-end\">\n                        <modus-wc-icon\n                          decorative=\"true\"\n                          name=\"expand_more\"\n                          class=\"collapse-icon dropdown-toggle\"\n                        ></modus-wc-icon>\n                      </div>\n                    </div>\n                  </li>\n                  <li class=\"children-container hidden\" aria-hidden=\"true\">\n                    <ul>\n                      <li>\n                        <div\n                          class=\"flex-row\"\n                          style=\"padding-inline-start: 2rem;\"\n                        >\n                          <div>Map 1</div>\n                        </div>\n                      </li>\n                      <li>\n                        <div\n                          class=\"flex-row\"\n                          style=\"padding-inline-start: 2rem;\"\n                        >\n                          <div>Map 2</div>\n                        </div>\n                      </li>\n                    </ul>\n                  </li>\n                  <li>\n                    <div class=\"flex-row nested-row\">\n                      <div>Map 3</div>\n                    </div>\n                  </li>\n                </ul>\n              </li>\n            </modus-wc-menu>\n          </modus-wc-side-navigation>\n          <div class=\"panel-content\">\n            <div id=\"overview\">\n              <p>\n                The side navigation of an application provides context through\n                accessible menu options and positions a consistent component to\n                connect to various pages in the application.\n              </p>\n              <p>\n                The side navigation is a collapsible side content of the site's\n                pages. It is located alongside the page's primary content. The\n                component is designed to add side content to a fullscreen\n                application. It is activated through the \"hamburger\" menu in the\n                Navbar.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n  },\n};\n",
  "storybook": {
    "examples": [
      "<modus-wc-navbar\n          app-title=\"Modus App\"\n          class=\"navbar\"\n          logo=\"/assets/logo.svg\"\n          @mainMenuOpenChange=${handleMenuOpenChange}\n          .userCard=${{\n            avatarAlt: 'User Avatar',\n            avatarSrc:\n              'https://i1.sndcdn.com/artworks-000405996468-wmh3uv-t500x500.jpg',\n            email: 'user@trimble.com',\n            name: 'Sonic the Hedgehog',\n          }}\n          .visibility=${{\n            ai: true,\n            apps: true,\n            help: true,\n            mainMenu: true,\n            notifications: true,\n            search: true,\n            searchInput: false,\n            user: true,\n          }}\n          style=\"z-index: 2;\"\n        ></modus-wc-navbar>",
      "<modus-wc-icon slot=\"start-icon\" name=\"home\"></modus-wc-icon>",
      "<modus-wc-icon slot=\"start-icon\" name=\"person\"></modus-wc-icon>",
      "<modus-wc-icon slot=\"start-icon\" name=\"gears\"></modus-wc-icon>",
      "<modus-wc-navbar\n          app-title=\"Modus App\"\n          class=\"navbar\"\n          logo=\"/assets/logo.svg\"\n          @mainMenuOpenChange=${handleMenuOpenChange}\n          .userCard=${{\n            avatarAlt: 'User Avatar',\n            avatarSrc:\n              'https://i1.sndcdn.com/artworks-000405996468-wmh3uv-t500x500.jpg',\n            email: 'user@trimble.com',\n            name: 'Sonic the Hedgehog',\n          }}\n          .visibility=${{\n            ai: true,\n            apps: true,\n            help: true,\n            mainMenu: true,\n            notifications: true,\n            search: true,\n            searchInput: false,\n            user: true,\n          }}\n          style=\"z-index: 2;\"\n        ></modus-wc-navbar>"
    ],
    "variants": [],
    "prop_usage": {
      "class": [
        "layout-with-navbar",
        "navbar",
        "main-content-row",
        "side-navigation",
        "panel-content",
        "menu-width",
        "flex-row",
        "collapse-icon icon-left",
        "dropdown-menu",
        "justify-end",
        "collapse-icon dropdown-toggle",
        "children-container hidden",
        "flex-row nested-row"
      ],
      "title": [
        "Modus App"
      ],
      "logo": [
        "/assets/logo.svg"
      ],
      "style": [
        "z-index: 2;",
        "padding-inline-start: 2rem;"
      ],
      "size": [
        "lg"
      ],
      "label": [
        "home",
        "profile",
        "settings",
        "Custom menu"
      ],
      "slot": [
        "start-icon"
      ],
      "name": [
        "home",
        "person",
        "gears",
        "bar_graph",
        "expand_more",
        "calendar",
        "compass"
      ],
      "id": [
        "overview"
      ],
      "onClick": [
        "handleCollapseToggle(event)"
      ],
      "decorative": [
        "true"
      ],
      "hidden": [
        "true"
      ]
    }
  },
  "tag_name": "modus-wc-side-navigation"
}
{
  "component_name": "modus-wc-theme-switcher",
  "version": "v2",
  "props": [
    {
      "name": "customClass",
      "description": "/**\n * A theme switcher component used to toggle the application theme and/or mode.\n *\n * Allows consumers to set the initial theme (Modus Classic, Modus Modern, etc.) and end-users to toggle modes (Light, Dark).\n */\n@Component({\n  tag: 'modus-wc-theme-switcher',\n  styleUrl: 'modus-wc-theme-switcher.scss',\n  shadow: false,\n})\nexport class ModusWcThemeSwitcher {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the theme switcher element. */",
      "type": ": string"
    }
  ],
  "events": [],
  "slots": [],
  "default_values": {
    "customClass": "''"
  },
  "documentation": "\n\n--- modus-wc-theme-switcher.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { IThemeConfig } from '../../providers/theme/theme.types';\n\ninterface ThemeSwitcherArgs {\n  'custom-class'?: string;\n  'initial-theme'?: Partial<IThemeConfig>;\n}\n\ninterface ThemeTestArgs {\n  theme: 'modus-modern' | 'modus-classic';\n  mode: 'light' | 'dark';\n}\n\nconst meta: Meta<ThemeSwitcherArgs> = {\n  title: 'Components/ThemeSwitcher',\n  component: 'modus-wc-theme-switcher',\n  args: {\n    'custom-class': undefined,\n    'initial-theme': undefined,\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['themeChange'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<ThemeSwitcherArgs>;\n\nconst Template: Story = {\n  // prettier-ignore\n  render: (args) => html`\n<modus-wc-theme-provider .initialTheme=${args['initial-theme']}>\n  <modus-wc-theme-switcher\n    aria-label=\"Theme toggle\"\n    custom-class=${ifDefined(args['custom-class'])}\n  ></modus-wc-theme-switcher>\n</modus-wc-theme-provider>\n  `,\n};\n\nexport const Default: Story = { ...Template };\n\n// New story for testing theme configurations\ntype ThemeTestStory = StoryObj<ThemeTestArgs>;\n\nconst ThemeTestTemplate: ThemeTestStory = {\n  args: {\n    theme: 'modus-modern',\n    mode: 'light',\n  },\n  argTypes: {\n    theme: {\n      control: { type: 'select' },\n      options: ['modus-modern', 'modus-classic'],\n      description: 'The theme to apply',\n    },\n    mode: {\n      control: { type: 'select' },\n      options: ['light', 'dark'],\n      description: 'The theme mode (light or dark)',\n    },\n  },\n  render: (args) => html`\n    <modus-wc-theme-provider\n      .initialTheme=${{ theme: args.theme, mode: args.mode }}\n    >\n      <div style=\"padding: 40px\">\n        <h2 style=\"text-align: center; color: var(--mwc-color-on-surface);\">\n          Theme Configuration Test\n        </h2>\n        <p\n          style=\"text-align: center; color: var(--mwc-color-on-surface-secondary); margin-bottom: 30px;\"\n        >\n          Testing ${args.mode} mode with ${args.theme} theme\n        </p>\n\n        <div\n          style=\"display: flex; gap: 10px; flex-wrap: wrap; justify-content: center; margin-bottom: 30px;\"\n        >\n          <modus-wc-button color=\"primary\">Primary Button</modus-wc-button>\n          <modus-wc-button color=\"secondary\">Secondary Button</modus-wc-button>\n          <modus-wc-button color=\"tertiary\">Tertiary Button</modus-wc-button>\n          <modus-wc-button color=\"danger\">Danger Button</modus-wc-button>\n        </div>\n\n        <div\n          style=\"display: flex; gap: 15px; flex-wrap: wrap; justify-content: center; align-items: center;\"\n        >\n          <modus-wc-badge color=\"primary\">Badge</modus-wc-badge>\n          <modus-wc-badge color=\"secondary\">Badge 2</modus-wc-badge>\n          <modus-wc-chip label=\"Chip 1\"></modus-wc-chip>\n          <modus-wc-chip label=\"Chip 2\" active></modus-wc-chip>\n          <modus-wc-switch label=\"Switch\"></modus-wc-switch>\n        </div>\n      </div>\n    </modus-wc-theme-provider>\n  `,\n};\n\nexport const ThemeTest: ThemeTestStory = {\n  ...ThemeTestTemplate,\n  parameters: {\n    docs: {\n      description: {\n        story:\n          'Test different theme and mode combinations. Use the controls to switch between themes and modes.',\n      },\n    },\n  },\n};\n",
  "storybook": {
    "examples": [
      "<modus-wc-theme-switcher\n    aria-label=\"Theme toggle\"\n    custom-class=${ifDefined(args['custom-class'])}\n  ></modus-wc-theme-switcher>",
      "<modus-wc-button color=\"primary\">Primary Button</modus-wc-button>",
      "<modus-wc-button color=\"secondary\">Secondary Button</modus-wc-button>",
      "<modus-wc-button color=\"tertiary\">Tertiary Button</modus-wc-button>",
      "<modus-wc-button color=\"danger\">Danger Button</modus-wc-button>"
    ],
    "variants": [],
    "prop_usage": {
      "label": [
        "Theme toggle",
        "Chip 1",
        "Chip 2",
        "Switch"
      ],
      "style": [
        "padding: 40px",
        "text-align: center; color: var(--mwc-color-on-surface);",
        "text-align: center; color: var(--mwc-color-on-surface-secondary); margin-bottom: 30px;",
        "display: flex; gap: 10px; flex-wrap: wrap; justify-content: center; margin-bottom: 30px;",
        "display: flex; gap: 15px; flex-wrap: wrap; justify-content: center; align-items: center;"
      ],
      "color": [
        "primary",
        "secondary",
        "tertiary",
        "danger"
      ]
    }
  },
  "tag_name": "modus-wc-theme-switcher"
}
{
  "component_name": "modus-wc-text-input",
  "version": "v2",
  "props": [
    {
      "name": "autoCapitalize",
      "description": "/**\n * A customizable input component used to create text inputs with types.\n */\n@Component({\n  tag: 'modus-wc-text-input',\n  styleUrl: 'modus-wc-text-input.scss',\n  shadow: false,\n})\nexport class ModusWcTextInput {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic capitalization in inputted text. */",
      "type": ":\n    | 'off'\n    | 'none'\n    | 'on'\n    | 'sentences'\n    | 'words'\n    | 'characters'"
    },
    {
      "name": "autoComplete",
      "description": "/**\n * A customizable input component used to create text inputs with types.\n */\n@Component({\n  tag: 'modus-wc-text-input',\n  styleUrl: 'modus-wc-text-input.scss',\n  shadow: false,\n})\nexport class ModusWcTextInput {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic capitalization in inputted text. */",
      "type": ": AutocompleteTypes"
    },
    {
      "name": "autoCorrect",
      "description": "/**\n * A customizable input component used to create text inputs with types.\n */\n@Component({\n  tag: 'modus-wc-text-input',\n  styleUrl: 'modus-wc-text-input.scss',\n  shadow: false,\n})\nexport class ModusWcTextInput {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic capitalization in inputted text. */",
      "type": ": 'on' | 'off'"
    },
    {
      "name": "bordered",
      "description": "/**\n * A customizable input component used to create text inputs with types.\n */\n@Component({\n  tag: 'modus-wc-text-input',\n  styleUrl: 'modus-wc-text-input.scss',\n  shadow: false,\n})\nexport class ModusWcTextInput {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic capitalization in inputted text. */",
      "type": ": boolean"
    },
    {
      "name": "clearAriaLabel",
      "description": "/**\n * A customizable input component used to create text inputs with types.\n */\n@Component({\n  tag: 'modus-wc-text-input',\n  styleUrl: 'modus-wc-text-input.scss',\n  shadow: false,\n})\nexport class ModusWcTextInput {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic capitalization in inputted text. */",
      "type": ": string"
    },
    {
      "name": "customClass",
      "description": "/**\n * A customizable input component used to create text inputs with types.\n */\n@Component({\n  tag: 'modus-wc-text-input',\n  styleUrl: 'modus-wc-text-input.scss',\n  shadow: false,\n})\nexport class ModusWcTextInput {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic capitalization in inputted text. */",
      "type": ": string"
    },
    {
      "name": "disabled",
      "description": "/**\n * A customizable input component used to create text inputs with types.\n */\n@Component({\n  tag: 'modus-wc-text-input',\n  styleUrl: 'modus-wc-text-input.scss',\n  shadow: false,\n})\nexport class ModusWcTextInput {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic capitalization in inputted text. */",
      "type": ": boolean"
    },
    {
      "name": "enterkeyhint",
      "description": "/**\n * A customizable input component used to create text inputs with types.\n */\n@Component({\n  tag: 'modus-wc-text-input',\n  styleUrl: 'modus-wc-text-input.scss',\n  shadow: false,\n})\nexport class ModusWcTextInput {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic capitalization in inputted text. */",
      "type": ":\n    | 'enter'\n    | 'done'\n    | 'go'\n    | 'next'\n    | 'previous'\n    | 'search'\n    | 'send'"
    },
    {
      "name": "feedback",
      "description": "/**\n * A customizable input component used to create text inputs with types.\n */\n@Component({\n  tag: 'modus-wc-text-input',\n  styleUrl: 'modus-wc-text-input.scss',\n  shadow: false,\n})\nexport class ModusWcTextInput {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic capitalization in inputted text. */",
      "type": ": IInputFeedbackProp"
    },
    {
      "name": "includeClear",
      "description": "/**\n * A customizable input component used to create text inputs with types.\n */\n@Component({\n  tag: 'modus-wc-text-input',\n  styleUrl: 'modus-wc-text-input.scss',\n  shadow: false,\n})\nexport class ModusWcTextInput {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic capitalization in inputted text. */",
      "type": ": boolean"
    },
    {
      "name": "includeSearch",
      "description": "/**\n * A customizable input component used to create text inputs with types.\n */\n@Component({\n  tag: 'modus-wc-text-input',\n  styleUrl: 'modus-wc-text-input.scss',\n  shadow: false,\n})\nexport class ModusWcTextInput {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic capitalization in inputted text. */",
      "type": ": boolean"
    },
    {
      "name": "inputId",
      "description": "/**\n * A customizable input component used to create text inputs with types.\n */\n@Component({\n  tag: 'modus-wc-text-input',\n  styleUrl: 'modus-wc-text-input.scss',\n  shadow: false,\n})\nexport class ModusWcTextInput {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic capitalization in inputted text. */",
      "type": ": string"
    },
    {
      "name": "inputTabIndex",
      "description": "/**\n * A customizable input component used to create text inputs with types.\n */\n@Component({\n  tag: 'modus-wc-text-input',\n  styleUrl: 'modus-wc-text-input.scss',\n  shadow: false,\n})\nexport class ModusWcTextInput {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic capitalization in inputted text. */",
      "type": ": number"
    },
    {
      "name": "label",
      "description": "/**\n * A customizable input component used to create text inputs with types.\n */\n@Component({\n  tag: 'modus-wc-text-input',\n  styleUrl: 'modus-wc-text-input.scss',\n  shadow: false,\n})\nexport class ModusWcTextInput {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic capitalization in inputted text. */",
      "type": ": string"
    },
    {
      "name": "maxLength",
      "description": "/**\n * A customizable input component used to create text inputs with types.\n */\n@Component({\n  tag: 'modus-wc-text-input',\n  styleUrl: 'modus-wc-text-input.scss',\n  shadow: false,\n})\nexport class ModusWcTextInput {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic capitalization in inputted text. */",
      "type": ": number"
    },
    {
      "name": "minLength",
      "description": "/**\n * A customizable input component used to create text inputs with types.\n */\n@Component({\n  tag: 'modus-wc-text-input',\n  styleUrl: 'modus-wc-text-input.scss',\n  shadow: false,\n})\nexport class ModusWcTextInput {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic capitalization in inputted text. */",
      "type": ": number"
    },
    {
      "name": "name",
      "description": "/**\n * A customizable input component used to create text inputs with types.\n */\n@Component({\n  tag: 'modus-wc-text-input',\n  styleUrl: 'modus-wc-text-input.scss',\n  shadow: false,\n})\nexport class ModusWcTextInput {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic capitalization in inputted text. */",
      "type": ": string"
    },
    {
      "name": "pattern",
      "description": "/**\n * A customizable input component used to create text inputs with types.\n */\n@Component({\n  tag: 'modus-wc-text-input',\n  styleUrl: 'modus-wc-text-input.scss',\n  shadow: false,\n})\nexport class ModusWcTextInput {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic capitalization in inputted text. */",
      "type": ": string"
    },
    {
      "name": "placeholder",
      "description": "/**\n * A customizable input component used to create text inputs with types.\n */\n@Component({\n  tag: 'modus-wc-text-input',\n  styleUrl: 'modus-wc-text-input.scss',\n  shadow: false,\n})\nexport class ModusWcTextInput {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic capitalization in inputted text. */",
      "type": ": string"
    },
    {
      "name": "readOnly",
      "description": "/**\n * A customizable input component used to create text inputs with types.\n */\n@Component({\n  tag: 'modus-wc-text-input',\n  styleUrl: 'modus-wc-text-input.scss',\n  shadow: false,\n})\nexport class ModusWcTextInput {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic capitalization in inputted text. */",
      "type": ": boolean"
    },
    {
      "name": "required",
      "description": "/**\n * A customizable input component used to create text inputs with types.\n */\n@Component({\n  tag: 'modus-wc-text-input',\n  styleUrl: 'modus-wc-text-input.scss',\n  shadow: false,\n})\nexport class ModusWcTextInput {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic capitalization in inputted text. */",
      "type": ": boolean"
    },
    {
      "name": "size",
      "description": "/**\n * A customizable input component used to create text inputs with types.\n */\n@Component({\n  tag: 'modus-wc-text-input',\n  styleUrl: 'modus-wc-text-input.scss',\n  shadow: false,\n})\nexport class ModusWcTextInput {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic capitalization in inputted text. */",
      "type": ": ModusSize"
    },
    {
      "name": "type",
      "description": "/**\n * A customizable input component used to create text inputs with types.\n */\n@Component({\n  tag: 'modus-wc-text-input',\n  styleUrl: 'modus-wc-text-input.scss',\n  shadow: false,\n})\nexport class ModusWcTextInput {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic capitalization in inputted text. */",
      "type": ": TextFieldTypes"
    },
    {
      "name": "value",
      "description": "/**\n * A customizable input component used to create text inputs with types.\n */\n@Component({\n  tag: 'modus-wc-text-input',\n  styleUrl: 'modus-wc-text-input.scss',\n  shadow: false,\n})\nexport class ModusWcTextInput {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic capitalization in inputted text. */",
      "type": "string"
    }
  ],
  "events": [
    {
      "name": "inputBlur",
      "description": "/**\n * A customizable input component used to create text inputs with types.\n */\n@Component({\n  tag: 'modus-wc-text-input',\n  styleUrl: 'modus-wc-text-input.scss',\n  shadow: false,\n})\nexport class ModusWcTextInput {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic capitalization in inputted text. */\n  @Prop() autoCapitalize?:\n    | 'off'\n    | 'none'\n    | 'on'\n    | 'sentences'\n    | 'words'\n    | 'characters';\n\n  /** Hint for form autofill feature. */\n  @Prop() autoComplete?: AutocompleteTypes;\n\n  /** Controls automatic correction in inputted text. Support by browser varies. */\n  @Prop() autoCorrect?: 'on' | 'off';\n\n  /** Indicates that the input should have a border. */\n  @Prop() bordered?: boolean = true;\n\n  /** Aria label for the clear icon button. */\n  @Prop() clearAriaLabel?: string = 'Clear text';\n\n  /** Custom CSS class to apply to the input. */\n  @Prop() customClass?: string = '';\n\n  /** Whether the form control is disabled. */\n  @Prop() disabled?: boolean = false;\n\n  /** A hint to the browser for which enter key to display. */\n  @Prop() enterkeyhint?:\n    | 'enter'\n    | 'done'\n    | 'go'\n    | 'next'\n    | 'previous'\n    | 'search'\n    | 'send';\n\n  /** Feedback to render below the input. */\n  @Prop() feedback?: IInputFeedbackProp;\n\n  /** Show the clear button within the input field. */\n  @Prop() includeClear?: boolean = false;\n\n  /** Show the search icon within the input field. */\n  @Prop() includeSearch?: boolean = false;\n\n  /** The ID of the input element. */\n  @Prop() inputId?: string;\n\n  /** Determine the control's relative ordering for sequential focus navigation (typically with the Tab key). */\n  @Prop() inputTabIndex?: number;\n\n  /** The text to display within the label. */\n  @Prop() label?: string;\n\n  /** Maximum length (number of characters) of value. */\n  @Prop() maxLength?: number;\n\n  /** Minimum length (number of characters) of value. */\n  @Prop() minLength?: number;\n\n  /** Name of the form control. Submitted with the form as part of a name/value pair. */\n  @Prop() name?: string;\n\n  /** Pattern the value must match to be valid */\n  @Prop() pattern?: string;\n\n  /** Text that appears in the form control when it has no value set. */\n  @Prop() placeholder?: string = '';\n\n  /** Whether the value is editable. */\n  @Prop() readOnly?: boolean = false;\n\n  /** A value is required for the form to be submittable. */\n  @Prop() required?: boolean = false;\n\n  /** The size of the input. */\n  @Prop() size?: ModusSize = 'md';\n\n  /** Type of form control. */\n  @Prop() type?: TextFieldTypes = 'text';\n\n  /** The value of the control. */\n  @Prop({ mutable: true, reflect: true }) value: string = '';\n\n  /** Event emitted when the input loses focus. */"
    },
    {
      "name": "inputChange",
      "description": "/**\n * A customizable input component used to create text inputs with types.\n */\n@Component({\n  tag: 'modus-wc-text-input',\n  styleUrl: 'modus-wc-text-input.scss',\n  shadow: false,\n})\nexport class ModusWcTextInput {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic capitalization in inputted text. */\n  @Prop() autoCapitalize?:\n    | 'off'\n    | 'none'\n    | 'on'\n    | 'sentences'\n    | 'words'\n    | 'characters';\n\n  /** Hint for form autofill feature. */\n  @Prop() autoComplete?: AutocompleteTypes;\n\n  /** Controls automatic correction in inputted text. Support by browser varies. */\n  @Prop() autoCorrect?: 'on' | 'off';\n\n  /** Indicates that the input should have a border. */\n  @Prop() bordered?: boolean = true;\n\n  /** Aria label for the clear icon button. */\n  @Prop() clearAriaLabel?: string = 'Clear text';\n\n  /** Custom CSS class to apply to the input. */\n  @Prop() customClass?: string = '';\n\n  /** Whether the form control is disabled. */\n  @Prop() disabled?: boolean = false;\n\n  /** A hint to the browser for which enter key to display. */\n  @Prop() enterkeyhint?:\n    | 'enter'\n    | 'done'\n    | 'go'\n    | 'next'\n    | 'previous'\n    | 'search'\n    | 'send';\n\n  /** Feedback to render below the input. */\n  @Prop() feedback?: IInputFeedbackProp;\n\n  /** Show the clear button within the input field. */\n  @Prop() includeClear?: boolean = false;\n\n  /** Show the search icon within the input field. */\n  @Prop() includeSearch?: boolean = false;\n\n  /** The ID of the input element. */\n  @Prop() inputId?: string;\n\n  /** Determine the control's relative ordering for sequential focus navigation (typically with the Tab key). */\n  @Prop() inputTabIndex?: number;\n\n  /** The text to display within the label. */\n  @Prop() label?: string;\n\n  /** Maximum length (number of characters) of value. */\n  @Prop() maxLength?: number;\n\n  /** Minimum length (number of characters) of value. */\n  @Prop() minLength?: number;\n\n  /** Name of the form control. Submitted with the form as part of a name/value pair. */\n  @Prop() name?: string;\n\n  /** Pattern the value must match to be valid */\n  @Prop() pattern?: string;\n\n  /** Text that appears in the form control when it has no value set. */\n  @Prop() placeholder?: string = '';\n\n  /** Whether the value is editable. */\n  @Prop() readOnly?: boolean = false;\n\n  /** A value is required for the form to be submittable. */\n  @Prop() required?: boolean = false;\n\n  /** The size of the input. */\n  @Prop() size?: ModusSize = 'md';\n\n  /** Type of form control. */\n  @Prop() type?: TextFieldTypes = 'text';\n\n  /** The value of the control. */\n  @Prop({ mutable: true, reflect: true }) value: string = '';\n\n  /** Event emitted when the input loses focus. */"
    },
    {
      "name": "inputFocus",
      "description": "/**\n * A customizable input component used to create text inputs with types.\n */\n@Component({\n  tag: 'modus-wc-text-input',\n  styleUrl: 'modus-wc-text-input.scss',\n  shadow: false,\n})\nexport class ModusWcTextInput {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic capitalization in inputted text. */\n  @Prop() autoCapitalize?:\n    | 'off'\n    | 'none'\n    | 'on'\n    | 'sentences'\n    | 'words'\n    | 'characters';\n\n  /** Hint for form autofill feature. */\n  @Prop() autoComplete?: AutocompleteTypes;\n\n  /** Controls automatic correction in inputted text. Support by browser varies. */\n  @Prop() autoCorrect?: 'on' | 'off';\n\n  /** Indicates that the input should have a border. */\n  @Prop() bordered?: boolean = true;\n\n  /** Aria label for the clear icon button. */\n  @Prop() clearAriaLabel?: string = 'Clear text';\n\n  /** Custom CSS class to apply to the input. */\n  @Prop() customClass?: string = '';\n\n  /** Whether the form control is disabled. */\n  @Prop() disabled?: boolean = false;\n\n  /** A hint to the browser for which enter key to display. */\n  @Prop() enterkeyhint?:\n    | 'enter'\n    | 'done'\n    | 'go'\n    | 'next'\n    | 'previous'\n    | 'search'\n    | 'send';\n\n  /** Feedback to render below the input. */\n  @Prop() feedback?: IInputFeedbackProp;\n\n  /** Show the clear button within the input field. */\n  @Prop() includeClear?: boolean = false;\n\n  /** Show the search icon within the input field. */\n  @Prop() includeSearch?: boolean = false;\n\n  /** The ID of the input element. */\n  @Prop() inputId?: string;\n\n  /** Determine the control's relative ordering for sequential focus navigation (typically with the Tab key). */\n  @Prop() inputTabIndex?: number;\n\n  /** The text to display within the label. */\n  @Prop() label?: string;\n\n  /** Maximum length (number of characters) of value. */\n  @Prop() maxLength?: number;\n\n  /** Minimum length (number of characters) of value. */\n  @Prop() minLength?: number;\n\n  /** Name of the form control. Submitted with the form as part of a name/value pair. */\n  @Prop() name?: string;\n\n  /** Pattern the value must match to be valid */\n  @Prop() pattern?: string;\n\n  /** Text that appears in the form control when it has no value set. */\n  @Prop() placeholder?: string = '';\n\n  /** Whether the value is editable. */\n  @Prop() readOnly?: boolean = false;\n\n  /** A value is required for the form to be submittable. */\n  @Prop() required?: boolean = false;\n\n  /** The size of the input. */\n  @Prop() size?: ModusSize = 'md';\n\n  /** Type of form control. */\n  @Prop() type?: TextFieldTypes = 'text';\n\n  /** The value of the control. */\n  @Prop({ mutable: true, reflect: true }) value: string = '';\n\n  /** Event emitted when the input loses focus. */"
    }
  ],
  "slots": [],
  "default_values": {
    "bordered": "true",
    "clearAriaLabel": "'Clear text'",
    "customClass": "''",
    "disabled": "false",
    "enterkeyhint": "{this.enterkeyhint}\n            id={effectiveId}\n            maxlength={this.maxLength}\n            minlength={this.minLength}\n            name={this.name}\n            onBlur={this.handleBlur}\n            onFocus={this.handleFocus}\n            onInput={this.handleInput}\n            pattern={this.pattern}\n            placeholder={this.placeholder}\n            readonly={this.readOnly}\n            required={this.required}\n            tabIndex={this.inputTabIndex}\n            type={this.type}\n            value={this.value}\n            {...this.inheritedAttributes}\n          />\n          {this.includeClear && (\n            <div\n              class={`modus-wc-clear-icon-container ${showClear ? 'modus-wc-clear-icon-visible' : 'modus-wc-clear-icon-hidden'}`}\n            >\n              <CloseSolidIcon\n                ariaLabel={this.clearAriaLabel}\n                className=\"modus-wc-text-input-icon modus-wc-text-input-icon-clear\"\n                decorative={false}\n                onClear={this.handleClearText}\n              />\n            </div>\n          )}\n        </label>\n        {this.feedback && (\n          <modus-wc-input-feedback\n            level={this.feedback.level}\n            message={this.feedback.message}\n            size={this.size}\n          />\n        )}\n      </Host>\n    )",
    "includeClear": "false",
    "includeSearch": "false",
    "name": "\"custom-icon\" />\n            </div>\n          ) : (\n            this.includeSearch && (\n              <SearchSolidIcon className=\"modus-wc-text-input-icon modus-wc-text-input-icon-search\" />\n            )\n          )}\n          <input\n            aria-required={this.required}\n            autocapitalize={this.autoCapitalize}\n            autocomplete={this.autoComplete}\n            autocorrect={this.autoCorrect}\n            class=\"modus-wc-grow\"\n            disabled={this.disabled}\n            enterkeyhint={this.enterkeyhint}\n            id={effectiveId}\n            maxlength={this.maxLength}\n            minlength={this.minLength}\n            name={this.name}\n            onBlur={this.handleBlur}\n            onFocus={this.handleFocus}\n            onInput={this.handleInput}\n            pattern={this.pattern}\n            placeholder={this.placeholder}\n            readonly={this.readOnly}\n            required={this.required}\n            tabIndex={this.inputTabIndex}\n            type={this.type}\n            value={this.value}\n            {...this.inheritedAttributes}\n          />\n          {this.includeClear && (\n            <div\n              class={`modus-wc-clear-icon-container ${showClear ? 'modus-wc-clear-icon-visible' : 'modus-wc-clear-icon-hidden'}`}\n            >\n              <CloseSolidIcon\n                ariaLabel={this.clearAriaLabel}\n                className=\"modus-wc-text-input-icon modus-wc-text-input-icon-clear\"\n                decorative={false}\n                onClear={this.handleClearText}\n              />\n            </div>\n          )}\n        </label>\n        {this.feedback && (\n          <modus-wc-input-feedback\n            level={this.feedback.level}\n            message={this.feedback.message}\n            size={this.size}\n          />\n        )}\n      </Host>\n    )",
    "pattern": "{this.pattern}\n            placeholder={this.placeholder}\n            readonly={this.readOnly}\n            required={this.required}\n            tabIndex={this.inputTabIndex}\n            type={this.type}\n            value={this.value}\n            {...this.inheritedAttributes}\n          />\n          {this.includeClear && (\n            <div\n              class={`modus-wc-clear-icon-container ${showClear ? 'modus-wc-clear-icon-visible' : 'modus-wc-clear-icon-hidden'}`}\n            >\n              <CloseSolidIcon\n                ariaLabel={this.clearAriaLabel}\n                className=\"modus-wc-text-input-icon modus-wc-text-input-icon-clear\"\n                decorative={false}\n                onClear={this.handleClearText}\n              />\n            </div>\n          )}\n        </label>\n        {this.feedback && (\n          <modus-wc-input-feedback\n            level={this.feedback.level}\n            message={this.feedback.message}\n            size={this.size}\n          />\n        )}\n      </Host>\n    )",
    "placeholder": "''",
    "readOnly": "false",
    "required": "false",
    "size": "'md'",
    "type": "'text'",
    "value": "''"
  },
  "documentation": "\n\n--- modus-wc-text-input.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { AutocompleteTypes, IInputFeedbackProp, ModusSize } from '../types';\n\ninterface TextInputArgs {\n  'auto-capitalize'?:\n    | 'off'\n    | 'none'\n    | 'on'\n    | 'sentences'\n    | 'words'\n    | 'characters';\n  'auto-complete'?: AutocompleteTypes;\n  'auto-correct'?: 'on' | 'off';\n  bordered?: boolean;\n  'clear-aria-label'?: string;\n  'custom-class'?: string;\n  disabled?: boolean;\n  enterkeyhint?:\n    | 'enter'\n    | 'done'\n    | 'go'\n    | 'next'\n    | 'previous'\n    | 'search'\n    | 'send';\n  feedback?: IInputFeedbackProp;\n  'include-clear'?: boolean;\n  'include-search'?: boolean;\n  'input-id'?: string;\n  inputmode?:\n    | 'decimal'\n    | 'email'\n    | 'none'\n    | 'numeric'\n    | 'search'\n    | 'tel'\n    | 'text'\n    | 'url';\n  'input-tab-index'?: number;\n  label?: string;\n  'max-length': number;\n  'min-length': number;\n  name?: string;\n  pattern?: string;\n  placeholder?: string;\n  'read-only'?: boolean;\n  required?: boolean;\n  size?: ModusSize;\n  spellcheck?: boolean;\n  type?: 'email' | 'password' | 'search' | 'tel' | 'text' | 'url';\n  value: string;\n}\n\nconst meta: Meta<TextInputArgs> = {\n  title: 'Components/Forms/Text Input',\n  component: 'modus-wc-text-input',\n  args: {\n    bordered: true,\n    disabled: false,\n    'include-clear': false,\n    'include-search': false,\n    inputmode: 'text',\n    label: 'Label',\n    size: 'md',\n    spellcheck: false,\n    type: 'text',\n    value: '',\n  },\n  argTypes: {\n    'auto-capitalize': {\n      options: ['off', 'none', 'on', 'sentences', 'words', 'characters'],\n    },\n    'auto-complete': {\n      control: { type: 'text' },\n    },\n    'auto-correct': {\n      options: ['on', 'off'],\n    },\n    enterkeyhint: {\n      options: ['enter', 'done', 'go', 'next', 'previous', 'search', 'send'],\n    },\n    feedback: {\n      description: 'Feedback prop for input components',\n      table: {\n        type: {\n          detail: `\n            Interface: IInputFeedbackProp\n            Properties:\n            - level ('error' | 'info' | 'success' | 'warning'): The feedback level\n            - message (string, optional): The feedback message\n          `,\n        },\n      },\n    },\n    inputmode: {\n      control: { type: 'select' },\n      options: [\n        'decimal',\n        'email',\n        'none',\n        'numeric',\n        'search',\n        'tel',\n        'text',\n        'url',\n      ],\n    },\n    size: {\n      options: ['sm', 'md', 'lg'],\n    },\n    spellcheck: {\n      description:\n        'Whether the element may be checked for spelling errors. A hint for the browser, not a guarantee.',\n      table: {\n        category: 'attributes',\n        defaultValue: { summary: 'false' },\n      },\n    },\n    type: {\n      options: ['email', 'password', 'search', 'tel', 'text', 'url'],\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['inputBlur', 'inputChange', 'inputFocus'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<TextInputArgs>;\n\nconst Template: Story = {\n  render: (args) => html`\n    <modus-wc-text-input\n      aria-label=\"Text input\"\n      auto-capitalize=${ifDefined(args['auto-capitalize'])}\n      auto-complete=${ifDefined(args['auto-complete'])}\n      auto-correct=${ifDefined(args['auto-correct'])}\n      ?bordered=${args.bordered}\n      clear-aria-label=${ifDefined(args['clear-aria-label'])}\n      custom-class=${ifDefined(args['custom-class'])}\n      ?disabled=${args.disabled}\n      enterkeyhint=${ifDefined(args.enterkeyhint)}\n      .feedback=${args.feedback}\n      include-clear=${ifDefined(args['include-clear'])}\n      include-search=${ifDefined(args['include-search'])}\n      input-aria-invalid=${ifDefined(args['input-aria-invalid'])}\n      input-id=${ifDefined(args['input-id'])}\n      inputmode=${ifDefined(args.inputmode)}\n      input-tab-index=${ifDefined(args['input-tab-index'])}\n      label=${ifDefined(args.label)}\n      max-length=${ifDefined(args['max-length'])}\n      min-length=${ifDefined(args['min-length'])}\n      name=${ifDefined(args.name)}\n      pattern=${ifDefined(args.pattern)}\n      placeholder=${ifDefined(args.placeholder)}\n      ?read-only=${args['read-only']}\n      ?required=${args.required}\n      size=${ifDefined(args.size)}\n      spellcheck=${ifDefined(args.spellcheck)}\n      type=${ifDefined(args.type)}\n      .value=${args.value}\n    ></modus-wc-text-input>\n  `,\n};\n\nexport const Default: Story = { ...Template };\n\nconst errorFeedback: IInputFeedbackProp = {\n  level: 'error',\n  message: 'Value is required.',\n};\n\nexport const WithErrorFeedback: Story = {\n  ...Template,\n  args: { feedback: errorFeedback, required: true },\n};\n\nexport const WithCustomIconSlot: Story = {\n  // prettier-ignore\n  render: (args) => html`\n<modus-wc-text-input\n  aria-label=\"Text input with custom icon\"\n  auto-capitalize=${ifDefined(args['auto-capitalize'])}\n  auto-complete=${ifDefined(args['auto-complete'])}\n  auto-correct=${ifDefined(args['auto-correct'])}\n  ?bordered=${args.bordered}\n  clear-aria-label=${ifDefined(args['clear-aria-label'])}\n  custom-class=${ifDefined(args['custom-class'])}\n  ?disabled=${args.disabled}\n  enterkeyhint=${ifDefined(args.enterkeyhint)}\n  .feedback=${args.feedback}\n  include-clear=${ifDefined(args['include-clear'])}\n  include-search=${ifDefined(args['include-search'])}\n  input-id=${ifDefined(args['input-id'])}\n  inputmode=${ifDefined(args.inputmode)}\n  input-tab-index=${ifDefined(args['input-tab-index'])}\n  label=${ifDefined(args.label)}\n  max-length=${ifDefined(args['max-length'])}\n  min-length=${ifDefined(args['min-length'])}\n  name=${ifDefined(args.name)}\n  pattern=${ifDefined(args.pattern)}\n  placeholder=${ifDefined(args.placeholder)}\n  ?read-only=${args['read-only']}\n  ?required=${args.required}\n  size=${ifDefined(args.size)}\n  spellcheck=${ifDefined(args.spellcheck)}\n  type=${ifDefined(args.type)}\n  .value=${args.value}\n>\n  <modus-wc-icon slot=\"custom-icon\" name=\"heart\" size=\"sm\"></modus-wc-icon>\n</modus-wc-text-input>\n  `,\n  args: {\n    placeholder: 'Enter text here...',\n  },\n};\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - In 1.0 input state was maintained by the component. 2.0 components encourage users to follow a controlled\n  input model. See the Form Inputs [documentation]([Angular](?path=/docs/documentation-form-inputs--docs) for\n  additional info and examples.\n  - Size values have changed from verbose names (\\`small\\`, \\`medium\\`, \\`large\\`) to abbreviations (\\`sm\\`, \\`md\\`, \\`lg\\`).\n\n#### Prop Mapping\n\n| 1.0 Prop                     | 2.0 Prop            | Notes                                                       |\n|------------------------------|---------------------|-------------------------------------------------------------|\n| aria-label                   | aria-label          |                                                             |\n| autocapitalize               | auto-capitalize     |                                                             |\n| autocorrect                  | auto-correct        |                                                             |\n| autocomplete                 | autocomplete        |                                                             |\n| auto-focus-input             | autofocus           |                                                             |\n| clearable                    | include-clear       |                                                             |\n| disabled                     | disabled            |                                                             |\n| enter-key-hint               | enterkeyhint        |                                                             |\n| error-text                   | feedback.message    | Use \\`feedback\\` level                                      |\n| helper-text                  |                     | Not carried over                                            |\n| include-error-icon           |                     | Not carried over                                            |\n| include-search-icon          | include-search      |                                                             |\n| include-password-text-toggle |                     | Not carried over                                            |\n| inputmode                    | inputmode          |                                                             |\n| label                        | label               |                                                             |\n| max-length                   | max-length          |                                                             |\n| pattern                      | pattern             |                                                             |\n| placeholder                  | placeholder         |                                                             |\n| read-only                    | read-only           |                                                             |\n| required                     | required            |                                                             |\n| size                         | size                | \\`small\\` \u2192 \\`sm\\`, \\`medium\\` \u2192 \\`md\\`, \\`large\\` \u2192 \\`lg\\` |\n| spellcheck                   | spellcheck          |                                                             |\n| text-align                   |                     | Not carried over, use CSS instead                           |\n| type                         | type                |                                                             |\n| valid-text                   | feedback.message    | Use \\`feedback\\` level                                      |\n| value                        | value               |                                                             |\n\n#### Event Mapping\n\n| 1.0 Event   | 2.0 Event   | Notes            |\n|-------------|-------------|------------------|\n| valueChange | inputChange |                  |\n        `,\n      },\n    },\n    // To hide the actual story rendering and only show docs:\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  // Simple render function or leave it empty\n  render: () => html`<div></div>`,\n};\n",
  "storybook": {
    "examples": [
      "<modus-wc-text-input\n      aria-label=\"Text input\"\n      auto-capitalize=${ifDefined(args['auto-capitalize'])}\n      auto-complete=${ifDefined(args['auto-complete'])}\n      auto-correct=${ifDefined(args['auto-correct'])}\n      ?bordered=${args.bordered}\n      clear-aria-label=${ifDefined(args['clear-aria-label'])}\n      custom-class=${ifDefined(args['custom-class'])}\n      ?disabled=${args.disabled}\n      enterkeyhint=${ifDefined(args.enterkeyhint)}\n      .feedback=${args.feedback}\n      include-clear=${ifDefined(args['include-clear'])}\n      include-search=${ifDefined(args['include-search'])}\n      input-aria-invalid=${ifDefined(args['input-aria-invalid'])}\n      input-id=${ifDefined(args['input-id'])}\n      inputmode=${ifDefined(args.inputmode)}\n      input-tab-index=${ifDefined(args['input-tab-index'])}\n      label=${ifDefined(args.label)}\n      max-length=${ifDefined(args['max-length'])}\n      min-length=${ifDefined(args['min-length'])}\n      name=${ifDefined(args.name)}\n      pattern=${ifDefined(args.pattern)}\n      placeholder=${ifDefined(args.placeholder)}\n      ?read-only=${args['read-only']}\n      ?required=${args.required}\n      size=${ifDefined(args.size)}\n      spellcheck=${ifDefined(args.spellcheck)}\n      type=${ifDefined(args.type)}\n      .value=${args.value}\n    ></modus-wc-text-input>",
      "<modus-wc-icon slot=\"custom-icon\" name=\"heart\" size=\"sm\"></modus-wc-icon>",
      "\n    <modus-wc-text-input\n      aria-label=\"Text input\"\n      auto-capitalize=${ifDefined(args['auto-capitalize'])}\n      auto-complete=${ifDefined(args['auto-complete'])}\n      auto-correct=${ifDefined(args['auto-correct'])}\n      ?bordered=${args.bordered}\n      clear-aria-label=${ifDefined(args['clear-aria-label'])}\n      custom-class=${ifDefined(args['custom-class'])}\n      ?disabled=${args.disabled}\n      enterkeyhint=${ifDefined(args.enterkeyhint)}\n      .feedback=${args.feedback}\n      include-clear=${ifDefined(args['include-clear'])}\n      include-search=${ifDefined(args['include-search'])}\n      input-aria-invalid=${ifDefined(args['input-aria-invalid'])}\n      input-id=${ifDefined(args['input-id'])}\n      inputmode=${ifDefined(args.inputmode)}\n      input-tab-index=${ifDefined(args['input-tab-index'])}\n      label=${ifDefined(args.label)}\n      max-length=${ifDefined(args['max-length'])}\n      min-length=${ifDefined(args['min-length'])}\n      name=${ifDefined(args.name)}\n      pattern=${ifDefined(args.pattern)}\n      placeholder=${ifDefined(args.placeholder)}\n      ?read-only=${args['read-only']}\n      ?required=${args.required}\n      size=${ifDefined(args.size)}\n      spellcheck=${ifDefined(args.spellcheck)}\n      type=${ifDefined(args.type)}\n      .value=${args.value}\n    ></modus-wc-text-input>\n  ",
      "\n<modus-wc-text-input\n  aria-label=\"Text input with custom icon\"\n  auto-capitalize=${ifDefined(args['auto-capitalize'])}\n  auto-complete=${ifDefined(args['auto-complete'])}\n  auto-correct=${ifDefined(args['auto-correct'])}\n  ?bordered=${args.bordered}\n  clear-aria-label=${ifDefined(args['clear-aria-label'])}\n  custom-class=${ifDefined(args['custom-class'])}\n  ?disabled=${args.disabled}\n  enterkeyhint=${ifDefined(args.enterkeyhint)}\n  .feedback=${args.feedback}\n  include-clear=${ifDefined(args['include-clear'])}\n  include-search=${ifDefined(args['include-search'])}\n  input-id=${ifDefined(args['input-id'])}\n  inputmode=${ifDefined(args.inputmode)}\n  input-tab-index=${ifDefined(args['input-tab-index'])}\n  label=${ifDefined(args.label)}\n  max-length=${ifDefined(args['max-length'])}\n  min-length=${ifDefined(args['min-length'])}\n  name=${ifDefined(args.name)}\n  pattern=${ifDefined(args.pattern)}\n  placeholder=${ifDefined(args.placeholder)}\n  ?read-only=${args['read-only']}\n  ?required=${args.required}\n  size=${ifDefined(args.size)}\n  spellcheck=${ifDefined(args.spellcheck)}\n  type=${ifDefined(args.type)}\n  .value=${args.value}\n>\n  <modus-wc-icon slot=\"custom-icon\" name=\"heart\" size=\"sm\"></modus-wc-icon>\n</modus-wc-text-input>\n  "
    ],
    "variants": [],
    "prop_usage": {
      "label": [
        "Text input",
        "Text input with custom icon"
      ],
      "slot": [
        "custom-icon"
      ],
      "name": [
        "heart"
      ],
      "size": [
        "sm"
      ]
    }
  },
  "tag_name": "modus-wc-text-input"
}
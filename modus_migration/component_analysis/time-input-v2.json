{
  "component_name": "modus-wc-time-input",
  "version": "v2",
  "props": [
    {
      "name": "autoComplete",
      "description": "/**\n * A customizable input component used to create time inputs.\n */\n@Component({\n  tag: 'modus-wc-time-input',\n  styleUrl: 'modus-wc-time-input.scss',\n  shadow: false,\n})\nexport class ModusWcTimeInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */",
      "type": ": 'on' | 'off'"
    },
    {
      "name": "bordered",
      "description": "/**\n * A customizable input component used to create time inputs.\n */\n@Component({\n  tag: 'modus-wc-time-input',\n  styleUrl: 'modus-wc-time-input.scss',\n  shadow: false,\n})\nexport class ModusWcTimeInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */",
      "type": ": boolean"
    },
    {
      "name": "customClass",
      "description": "/**\n * A customizable input component used to create time inputs.\n */\n@Component({\n  tag: 'modus-wc-time-input',\n  styleUrl: 'modus-wc-time-input.scss',\n  shadow: false,\n})\nexport class ModusWcTimeInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */",
      "type": ": string"
    },
    {
      "name": "datalistOptions",
      "description": "/**\n * A customizable input component used to create time inputs.\n */\n@Component({\n  tag: 'modus-wc-time-input',\n  styleUrl: 'modus-wc-time-input.scss',\n  shadow: false,\n})\nexport class ModusWcTimeInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */",
      "type": "string[]"
    },
    {
      "name": "disabled",
      "description": "/**\n * A customizable input component used to create time inputs.\n */\n@Component({\n  tag: 'modus-wc-time-input',\n  styleUrl: 'modus-wc-time-input.scss',\n  shadow: false,\n})\nexport class ModusWcTimeInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */",
      "type": ": boolean"
    },
    {
      "name": "feedback",
      "description": "/**\n * A customizable input component used to create time inputs.\n */\n@Component({\n  tag: 'modus-wc-time-input',\n  styleUrl: 'modus-wc-time-input.scss',\n  shadow: false,\n})\nexport class ModusWcTimeInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */",
      "type": ": IInputFeedbackProp"
    },
    {
      "name": "inputId",
      "description": "/**\n * A customizable input component used to create time inputs.\n */\n@Component({\n  tag: 'modus-wc-time-input',\n  styleUrl: 'modus-wc-time-input.scss',\n  shadow: false,\n})\nexport class ModusWcTimeInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */",
      "type": ": string"
    },
    {
      "name": "inputTabIndex",
      "description": "/**\n * A customizable input component used to create time inputs.\n */\n@Component({\n  tag: 'modus-wc-time-input',\n  styleUrl: 'modus-wc-time-input.scss',\n  shadow: false,\n})\nexport class ModusWcTimeInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */",
      "type": ": number"
    },
    {
      "name": "datalistId",
      "description": "/**\n * A customizable input component used to create time inputs.\n */\n@Component({\n  tag: 'modus-wc-time-input',\n  styleUrl: 'modus-wc-time-input.scss',\n  shadow: false,\n})\nexport class ModusWcTimeInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */",
      "type": ": string"
    },
    {
      "name": "label",
      "description": "/**\n * A customizable input component used to create time inputs.\n */\n@Component({\n  tag: 'modus-wc-time-input',\n  styleUrl: 'modus-wc-time-input.scss',\n  shadow: false,\n})\nexport class ModusWcTimeInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */",
      "type": ": string"
    },
    {
      "name": "max",
      "description": "/**\n * A customizable input component used to create time inputs.\n */\n@Component({\n  tag: 'modus-wc-time-input',\n  styleUrl: 'modus-wc-time-input.scss',\n  shadow: false,\n})\nexport class ModusWcTimeInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */",
      "type": ": string"
    },
    {
      "name": "min",
      "description": "/**\n * A customizable input component used to create time inputs.\n */\n@Component({\n  tag: 'modus-wc-time-input',\n  styleUrl: 'modus-wc-time-input.scss',\n  shadow: false,\n})\nexport class ModusWcTimeInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */",
      "type": ": string"
    },
    {
      "name": "name",
      "description": "/**\n * A customizable input component used to create time inputs.\n */\n@Component({\n  tag: 'modus-wc-time-input',\n  styleUrl: 'modus-wc-time-input.scss',\n  shadow: false,\n})\nexport class ModusWcTimeInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */",
      "type": ": string"
    },
    {
      "name": "readOnly",
      "description": "/**\n * A customizable input component used to create time inputs.\n */\n@Component({\n  tag: 'modus-wc-time-input',\n  styleUrl: 'modus-wc-time-input.scss',\n  shadow: false,\n})\nexport class ModusWcTimeInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */",
      "type": ": boolean"
    },
    {
      "name": "required",
      "description": "/**\n * A customizable input component used to create time inputs.\n */\n@Component({\n  tag: 'modus-wc-time-input',\n  styleUrl: 'modus-wc-time-input.scss',\n  shadow: false,\n})\nexport class ModusWcTimeInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */",
      "type": ": boolean"
    },
    {
      "name": "showSeconds",
      "description": "/**\n * A customizable input component used to create time inputs.\n */\n@Component({\n  tag: 'modus-wc-time-input',\n  styleUrl: 'modus-wc-time-input.scss',\n  shadow: false,\n})\nexport class ModusWcTimeInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */",
      "type": ": boolean"
    },
    {
      "name": "size",
      "description": "/**\n * A customizable input component used to create time inputs.\n */\n@Component({\n  tag: 'modus-wc-time-input',\n  styleUrl: 'modus-wc-time-input.scss',\n  shadow: false,\n})\nexport class ModusWcTimeInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */",
      "type": ": ModusSize"
    },
    {
      "name": "step",
      "description": "/**\n * A customizable input component used to create time inputs.\n */\n@Component({\n  tag: 'modus-wc-time-input',\n  styleUrl: 'modus-wc-time-input.scss',\n  shadow: false,\n})\nexport class ModusWcTimeInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */",
      "type": ": number"
    },
    {
      "name": "value",
      "description": "/**\n * A customizable input component used to create time inputs.\n */\n@Component({\n  tag: 'modus-wc-time-input',\n  styleUrl: 'modus-wc-time-input.scss',\n  shadow: false,\n})\nexport class ModusWcTimeInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */",
      "type": "string"
    }
  ],
  "events": [
    {
      "name": "inputBlur",
      "description": "/**\n * A customizable input component used to create time inputs.\n */\n@Component({\n  tag: 'modus-wc-time-input',\n  styleUrl: 'modus-wc-time-input.scss',\n  shadow: false,\n})\nexport class ModusWcTimeInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */\n  @Prop() autoComplete?: 'on' | 'off';\n\n  /** Indicates that the input should have a border. */\n  @Prop() bordered?: boolean = true;\n\n  /** Custom CSS class to apply to the input. */\n  @Prop() customClass?: string = '';\n\n  /** The options to display in the time input dropdown. Options must be in `HH:mm` or `HH:mm:ss` format. */\n  @Prop() datalistOptions: string[] = [];\n\n  /** Whether the form control is disabled. */\n  @Prop() disabled?: boolean = false;\n\n  /** Feedback to render below the input. */\n  @Prop() feedback?: IInputFeedbackProp;\n\n  /** The ID of the input element. */\n  @Prop() inputId?: string;\n\n  /** Determine the control's relative ordering for sequential focus navigation (typically with the Tab key). */\n  @Prop() inputTabIndex?: number;\n\n  /**\n   * ID of a `<datalist>` element that contains pre-defined time options.\n   * The value must be the ID of a `<datalist>` element in the same document.\n   */\n  @Prop({ mutable: true }) datalistId?: string;\n\n  /** The text to display within the label. */\n  @Prop() label?: string;\n\n  /** Maximum value. Format: `HH:mm`, `HH:mm:ss`. */\n  @Prop() max?: string;\n\n  /** Minimum value. Format: `HH:mm`, `HH:mm:ss.`*/\n  @Prop() min?: string;\n\n  /** Name of the form control. Submitted with the form as part of a name/value pair. */\n  @Prop() name?: string;\n\n  /** Whether the value is editable. */\n  @Prop() readOnly?: boolean = false;\n\n  /** A value is required for the form to be submittable. */\n  @Prop() required?: boolean = false;\n\n  /**\n   * Displays the time input format as `HH:mm:ss` if `true`.\n   * Internally sets the `step` to 1 second.\n   * If a `step` value is provided, it will override this attribute.\n   */\n  @Prop() showSeconds?: boolean = false;\n\n  /** The size of the input. */\n  @Prop() size?: ModusSize = 'md';\n\n  /**\n   * Specifies the granularity that the `value` must adhere to.\n   * Value of step given in seconds. Default value is 60 seconds.\n   * Overrides the `seconds` attribute if both are provided.\n   */\n  @Prop() step?: number;\n\n  /**\n   * The value of the time input.\n   * Always in 24-hour format that includes leading zeros:\n   * `HH:mm` or `HH:mm:ss`, regardless of input format which is likely\n   * to be selected based on user's locale (or by the user agent).\n   * If time includes seconds the format is always `HH:mm:ss`.\n   */\n  @Prop({ mutable: true, reflect: true }) value: string = '';\n\n  /** Event emitted when the input loses focus. */"
    },
    {
      "name": "inputChange",
      "description": "/**\n * A customizable input component used to create time inputs.\n */\n@Component({\n  tag: 'modus-wc-time-input',\n  styleUrl: 'modus-wc-time-input.scss',\n  shadow: false,\n})\nexport class ModusWcTimeInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */\n  @Prop() autoComplete?: 'on' | 'off';\n\n  /** Indicates that the input should have a border. */\n  @Prop() bordered?: boolean = true;\n\n  /** Custom CSS class to apply to the input. */\n  @Prop() customClass?: string = '';\n\n  /** The options to display in the time input dropdown. Options must be in `HH:mm` or `HH:mm:ss` format. */\n  @Prop() datalistOptions: string[] = [];\n\n  /** Whether the form control is disabled. */\n  @Prop() disabled?: boolean = false;\n\n  /** Feedback to render below the input. */\n  @Prop() feedback?: IInputFeedbackProp;\n\n  /** The ID of the input element. */\n  @Prop() inputId?: string;\n\n  /** Determine the control's relative ordering for sequential focus navigation (typically with the Tab key). */\n  @Prop() inputTabIndex?: number;\n\n  /**\n   * ID of a `<datalist>` element that contains pre-defined time options.\n   * The value must be the ID of a `<datalist>` element in the same document.\n   */\n  @Prop({ mutable: true }) datalistId?: string;\n\n  /** The text to display within the label. */\n  @Prop() label?: string;\n\n  /** Maximum value. Format: `HH:mm`, `HH:mm:ss`. */\n  @Prop() max?: string;\n\n  /** Minimum value. Format: `HH:mm`, `HH:mm:ss.`*/\n  @Prop() min?: string;\n\n  /** Name of the form control. Submitted with the form as part of a name/value pair. */\n  @Prop() name?: string;\n\n  /** Whether the value is editable. */\n  @Prop() readOnly?: boolean = false;\n\n  /** A value is required for the form to be submittable. */\n  @Prop() required?: boolean = false;\n\n  /**\n   * Displays the time input format as `HH:mm:ss` if `true`.\n   * Internally sets the `step` to 1 second.\n   * If a `step` value is provided, it will override this attribute.\n   */\n  @Prop() showSeconds?: boolean = false;\n\n  /** The size of the input. */\n  @Prop() size?: ModusSize = 'md';\n\n  /**\n   * Specifies the granularity that the `value` must adhere to.\n   * Value of step given in seconds. Default value is 60 seconds.\n   * Overrides the `seconds` attribute if both are provided.\n   */\n  @Prop() step?: number;\n\n  /**\n   * The value of the time input.\n   * Always in 24-hour format that includes leading zeros:\n   * `HH:mm` or `HH:mm:ss`, regardless of input format which is likely\n   * to be selected based on user's locale (or by the user agent).\n   * If time includes seconds the format is always `HH:mm:ss`.\n   */\n  @Prop({ mutable: true, reflect: true }) value: string = '';\n\n  /** Event emitted when the input loses focus. */"
    },
    {
      "name": "inputFocus",
      "description": "/**\n * A customizable input component used to create time inputs.\n */\n@Component({\n  tag: 'modus-wc-time-input',\n  styleUrl: 'modus-wc-time-input.scss',\n  shadow: false,\n})\nexport class ModusWcTimeInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */\n  @Prop() autoComplete?: 'on' | 'off';\n\n  /** Indicates that the input should have a border. */\n  @Prop() bordered?: boolean = true;\n\n  /** Custom CSS class to apply to the input. */\n  @Prop() customClass?: string = '';\n\n  /** The options to display in the time input dropdown. Options must be in `HH:mm` or `HH:mm:ss` format. */\n  @Prop() datalistOptions: string[] = [];\n\n  /** Whether the form control is disabled. */\n  @Prop() disabled?: boolean = false;\n\n  /** Feedback to render below the input. */\n  @Prop() feedback?: IInputFeedbackProp;\n\n  /** The ID of the input element. */\n  @Prop() inputId?: string;\n\n  /** Determine the control's relative ordering for sequential focus navigation (typically with the Tab key). */\n  @Prop() inputTabIndex?: number;\n\n  /**\n   * ID of a `<datalist>` element that contains pre-defined time options.\n   * The value must be the ID of a `<datalist>` element in the same document.\n   */\n  @Prop({ mutable: true }) datalistId?: string;\n\n  /** The text to display within the label. */\n  @Prop() label?: string;\n\n  /** Maximum value. Format: `HH:mm`, `HH:mm:ss`. */\n  @Prop() max?: string;\n\n  /** Minimum value. Format: `HH:mm`, `HH:mm:ss.`*/\n  @Prop() min?: string;\n\n  /** Name of the form control. Submitted with the form as part of a name/value pair. */\n  @Prop() name?: string;\n\n  /** Whether the value is editable. */\n  @Prop() readOnly?: boolean = false;\n\n  /** A value is required for the form to be submittable. */\n  @Prop() required?: boolean = false;\n\n  /**\n   * Displays the time input format as `HH:mm:ss` if `true`.\n   * Internally sets the `step` to 1 second.\n   * If a `step` value is provided, it will override this attribute.\n   */\n  @Prop() showSeconds?: boolean = false;\n\n  /** The size of the input. */\n  @Prop() size?: ModusSize = 'md';\n\n  /**\n   * Specifies the granularity that the `value` must adhere to.\n   * Value of step given in seconds. Default value is 60 seconds.\n   * Overrides the `seconds` attribute if both are provided.\n   */\n  @Prop() step?: number;\n\n  /**\n   * The value of the time input.\n   * Always in 24-hour format that includes leading zeros:\n   * `HH:mm` or `HH:mm:ss`, regardless of input format which is likely\n   * to be selected based on user's locale (or by the user agent).\n   * If time includes seconds the format is always `HH:mm:ss`.\n   */\n  @Prop({ mutable: true, reflect: true }) value: string = '';\n\n  /** Event emitted when the input loses focus. */"
    }
  ],
  "slots": [],
  "default_values": {
    "bordered": "true",
    "customClass": "''",
    "datalistOptions": "[]",
    "disabled": "false",
    "datalistId": "this.internalDatalistId",
    "max": "{this.max}\n          min={this.min}\n          name={this.name}\n          onBlur={this.handleBlur}\n          onFocus={this.handleFocus}\n          onInput={this.handleInput}\n          readonly={this.readOnly}\n          required={this.required}\n          step={this.step || this.showSeconds ? 1 : 60}\n          tabIndex={this.inputTabIndex}\n          type=\"time\"\n          value={this.value}\n          {...this.inheritedAttributes}\n        />\n        {this.renderDatalist()}\n        {this.feedback && (\n          <modus-wc-input-feedback\n            level={this.feedback.level}\n            message={this.feedback.message}\n            size={this.size}\n          />\n        )}\n      </Host>\n    )",
    "min": "{this.min}\n          name={this.name}\n          onBlur={this.handleBlur}\n          onFocus={this.handleFocus}\n          onInput={this.handleInput}\n          readonly={this.readOnly}\n          required={this.required}\n          step={this.step || this.showSeconds ? 1 : 60}\n          tabIndex={this.inputTabIndex}\n          type=\"time\"\n          value={this.value}\n          {...this.inheritedAttributes}\n        />\n        {this.renderDatalist()}\n        {this.feedback && (\n          <modus-wc-input-feedback\n            level={this.feedback.level}\n            message={this.feedback.message}\n            size={this.size}\n          />\n        )}\n      </Host>\n    )",
    "name": "{this.name}\n          onBlur={this.handleBlur}\n          onFocus={this.handleFocus}\n          onInput={this.handleInput}\n          readonly={this.readOnly}\n          required={this.required}\n          step={this.step || this.showSeconds ? 1 : 60}\n          tabIndex={this.inputTabIndex}\n          type=\"time\"\n          value={this.value}\n          {...this.inheritedAttributes}\n        />\n        {this.renderDatalist()}\n        {this.feedback && (\n          <modus-wc-input-feedback\n            level={this.feedback.level}\n            message={this.feedback.message}\n            size={this.size}\n          />\n        )}\n      </Host>\n    )",
    "readOnly": "false",
    "required": "false",
    "showSeconds": "false",
    "size": "'md'",
    "step": "{this.step || this.showSeconds ? 1 : 60}\n          tabIndex={this.inputTabIndex}\n          type=\"time\"\n          value={this.value}\n          {...this.inheritedAttributes}\n        />\n        {this.renderDatalist()}\n        {this.feedback && (\n          <modus-wc-input-feedback\n            level={this.feedback.level}\n            message={this.feedback.message}\n            size={this.size}\n          />\n        )}\n      </Host>\n    )",
    "value": "''"
  },
  "documentation": "\n\n--- modus-wc-time-input.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { IInputFeedbackProp, ModusSize } from '../types';\n\n// const timeOptions = ['08:00', '12:00', '17:00'];\n\ninterface TimeInputArgs {\n  'auto-complete'?: 'on' | 'off';\n  bordered?: boolean;\n  'custom-class'?: string;\n  'datalist-id'?: string;\n  'datalist-options'?: string[];\n  disabled?: boolean;\n  feedback?: IInputFeedbackProp;\n  'input-id'?: string;\n  'input-tab-index'?: number;\n  label?: string;\n  max?: string;\n  min?: string;\n  name?: string;\n  'read-only'?: boolean;\n  required?: boolean;\n  'show-seconds'?: boolean;\n  size?: ModusSize;\n  step?: number;\n  value: string;\n}\n\nconst meta: Meta<TimeInputArgs> = {\n  title: 'Components/Forms/Time Input',\n  component: 'modus-wc-time-input',\n  args: {\n    disabled: false,\n    label: 'Label',\n    size: 'md',\n  },\n  argTypes: {\n    'auto-complete': {\n      control: { type: 'select' },\n      options: ['on', 'off'],\n    },\n    feedback: {\n      description: 'Feedback prop for input components',\n      table: {\n        type: {\n          detail: `\n            Interface: IInputFeedbackProp\n            Properties:\n            - level ('error' | 'info' | 'success' | 'warning'): The feedback level\n            - message (string, optional): The feedback message\n          `,\n        },\n      },\n    },\n    size: {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg'],\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['inputBlur', 'inputChange', 'inputFocus'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<TimeInputArgs>;\n\nexport const Template: Story = {\n  render: (args) => html`\n    <modus-wc-time-input\n      aria-label=\"Time input\"\n      auto-complete=${ifDefined(args['auto-complete'])}\n      bordered=${ifDefined(args.bordered)}\n      custom-class=${ifDefined(args['custom-class'])}\n      datalist-id=${ifDefined(args['datalist-id'])}\n      ?disabled=${args.disabled}\n      .feedback=${args.feedback}\n      input-id=${ifDefined(args['input-id'])}\n      input-tab-index=${ifDefined(args['input-tab-index'])}\n      label=${ifDefined(args.label)}\n      max=${ifDefined(args.max)}\n      min=${ifDefined(args.min)}\n      name=${ifDefined(args.name)}\n      ?read-only=${args['read-only']}\n      ?required=${args.required}\n      show-seconds=${ifDefined(args['show-seconds'])}\n      size=${ifDefined(args.size)}\n      step=${ifDefined(args.step)}\n      .datalistOptions=${args['datalist-options']}\n      .value=${args.value}\n    ></modus-wc-time-input>\n  `,\n};\n\nexport const WithSeconds: Story = {\n  render: () => {\n    return html`\n      <modus-wc-time-input\n        aria-label=\"Example time input\"\n        show-seconds=\"true\"\n      ></modus-wc-time-input>\n    `;\n  },\n};\n\nexport const WithDatalist: Story = {\n  render: () => {\n    // prettier-ignore\n    return html`\n<modus-wc-time-input\n  aria-label=\"Example time input\"\n  datalist-id=\"datalist-id-1\"\n></modus-wc-time-input>\n<datalist id=\"datalist-id-1\">\n  <option value=\"06:00\"></option>\n  <option value=\"12:00\"></option>\n  <option value=\"17:00\"></option>\n</datalist>\n    `;\n  },\n};\n\nexport const WithDatalistOptions: Story = {\n  render: () => {\n    // prettier-ignore\n    return html`\n<script>\n  document.addEventListener('DOMContentLoaded', () => {\n    // Example of programmatically adding 'datalistOptions'\n    const preferredTimes = ['09:30', '12:00', '17:30'];\n    document.querySelector('#time-input-with-options').datalistOptions = preferredTimes;\n  });\n</script>\n<modus-wc-time-input\n  aria-label=\"Example time input\"\n  id=\"time-input-with-options\"\n></modus-wc-time-input>\n    `;\n  },\n};\n\nconst errorFeedback: IInputFeedbackProp = {\n  level: 'error',\n  message: 'Value is required.',\n};\n\nexport const WithErrorFeedback: Story = {\n  render: (args) => html`\n    <modus-wc-time-input\n      aria-label=\"Time input\"\n      .feedback=${errorFeedback}\n      label=${ifDefined(args.label)}\n      ?required=${true}\n      .value=${args.value}\n    ></modus-wc-time-input>\n  `,\n};\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - In 1.0 input state was maintained by the component. 2.0 components encourage users to follow a controlled\n  input model. See the Form Inputs [documentation](/docs/documentation-form-inputs--docs) for\n  additional info and examples.\n  - Size values have changed from verbose names (\\`medium\\`, \\`large\\`) to abbreviations (\\`sm\\`, \\`md\\`, \\`lg\\`).\n\n#### Prop Mapping\n\n| 1.0 Prop                | 2.0 Prop            | Notes                                   |\n|-------------------------|---------------------|-----------------------------------------|\n| allowed-chars-regex     |                     | Not carried over                        |\n| ampm                    |                     | Not carried over                        |\n| aria-label              | aria-label          |                                         |\n| auto-focus-input        | autofocus           |                                         |\n| auto-format             |                     | Not carried over                        |\n| disable-validation      |                     | Not carried over                        |\n| disabled                | disabled            |                                         |\n| error-text              | feedback.message    | Use \\`feedback\\` level                  |\n| helper-text             |                     | Not carried over                        |\n| label                   | label               |                                         |\n| max                     | max                 |                                         |\n| min                     | min                 |                                         |\n| placeholder             |                     | Not carried over                        |\n| read-only               | read-only           |                                         |\n| required                | required            |                                         |\n| size                    | size                | \\`medium\\` \u2192 \\`md\\`, \\`large\\` \u2192 \\`lg\\` |\n| valid-text              | feedback.message    | Use \\`feedback\\` level                  |\n| value                   | value               |                                         |\n\n#### Event Mapping\n\n| 1.0 Event      | 2.0 Event   | Notes                                                |\n|----------------|-------------|------------------------------------------------------|\n| timeInputBlur  | inputBlur   |                                                      |\n| valueChange    | inputChange |                                                      |\n        `,\n      },\n    },\n    // To hide the actual story rendering and only show docs:\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  // Simple render function or leave it empty\n  render: () => html`<div></div>`,\n};\n",
  "storybook": {
    "examples": [
      "<modus-wc-time-input\n      aria-label=\"Time input\"\n      auto-complete=${ifDefined(args['auto-complete'])}\n      bordered=${ifDefined(args.bordered)}\n      custom-class=${ifDefined(args['custom-class'])}\n      datalist-id=${ifDefined(args['datalist-id'])}\n      ?disabled=${args.disabled}\n      .feedback=${args.feedback}\n      input-id=${ifDefined(args['input-id'])}\n      input-tab-index=${ifDefined(args['input-tab-index'])}\n      label=${ifDefined(args.label)}\n      max=${ifDefined(args.max)}\n      min=${ifDefined(args.min)}\n      name=${ifDefined(args.name)}\n      ?read-only=${args['read-only']}\n      ?required=${args.required}\n      show-seconds=${ifDefined(args['show-seconds'])}\n      size=${ifDefined(args.size)}\n      step=${ifDefined(args.step)}\n      .datalistOptions=${args['datalist-options']}\n      .value=${args.value}\n    ></modus-wc-time-input>",
      "<modus-wc-time-input\n        aria-label=\"Example time input\"\n        show-seconds=\"true\"\n      ></modus-wc-time-input>",
      "<modus-wc-time-input\n  aria-label=\"Example time input\"\n  datalist-id=\"datalist-id-1\"\n></modus-wc-time-input>",
      "<modus-wc-time-input\n  aria-label=\"Example time input\"\n  id=\"time-input-with-options\"\n></modus-wc-time-input>",
      "<modus-wc-time-input\n      aria-label=\"Time input\"\n      .feedback=${errorFeedback}\n      label=${ifDefined(args.label)}\n      ?required=${true}\n      .value=${args.value}\n    ></modus-wc-time-input>"
    ],
    "variants": [],
    "prop_usage": {
      "label": [
        "Time input",
        "Example time input"
      ],
      "seconds": [
        "true"
      ],
      "id": [
        "datalist-id-1",
        "time-input-with-options"
      ],
      "value": [
        "06:00",
        "12:00",
        "17:00"
      ]
    }
  },
  "tag_name": "modus-wc-time-input"
}
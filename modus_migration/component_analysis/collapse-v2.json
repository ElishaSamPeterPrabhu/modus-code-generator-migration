{
  "component_name": "modus-wc-collapse",
  "version": "v2",
  "props": [
    {
      "name": "bordered",
      "description": "/** The description to render in the collapse header. */\n  description?: string;\n  /** The Modus icon name to render in the collapse header. */\n  icon?: string;\n  /** The icon's aria-label. */\n  iconAriaLabel?: string;\n  /** The size of the collapse header. */\n  size?: DaisySize;\n  /** The title to render in the collapse header. */\n  title: string;\n}\n\n/**\n * A customizable collapse component used for showing and hiding content.\n *\n * The component supports a 'header' and 'content' `<slot>` for injecting custom HTML.\n * Do not set\n */\n@Component({\n  tag: 'modus-wc-collapse',\n  styleUrl: 'modus-wc-collapse.scss',\n  shadow: false,\n})\nexport class ModusWcCollapse {\n  private inheritedAttributes: Attributes = {};\n  private detailsRef?: HTMLDetailsElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the component should have a border. */",
      "type": ": boolean"
    },
    {
      "name": "customClass",
      "description": "/** The description to render in the collapse header. */\n  description?: string;\n  /** The Modus icon name to render in the collapse header. */\n  icon?: string;\n  /** The icon's aria-label. */\n  iconAriaLabel?: string;\n  /** The size of the collapse header. */\n  size?: DaisySize;\n  /** The title to render in the collapse header. */\n  title: string;\n}\n\n/**\n * A customizable collapse component used for showing and hiding content.\n *\n * The component supports a 'header' and 'content' `<slot>` for injecting custom HTML.\n * Do not set\n */\n@Component({\n  tag: 'modus-wc-collapse',\n  styleUrl: 'modus-wc-collapse.scss',\n  shadow: false,\n})\nexport class ModusWcCollapse {\n  private inheritedAttributes: Attributes = {};\n  private detailsRef?: HTMLDetailsElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the component should have a border. */",
      "type": ": string"
    },
    {
      "name": "expanded",
      "description": "/** The description to render in the collapse header. */\n  description?: string;\n  /** The Modus icon name to render in the collapse header. */\n  icon?: string;\n  /** The icon's aria-label. */\n  iconAriaLabel?: string;\n  /** The size of the collapse header. */\n  size?: DaisySize;\n  /** The title to render in the collapse header. */\n  title: string;\n}\n\n/**\n * A customizable collapse component used for showing and hiding content.\n *\n * The component supports a 'header' and 'content' `<slot>` for injecting custom HTML.\n * Do not set\n */\n@Component({\n  tag: 'modus-wc-collapse',\n  styleUrl: 'modus-wc-collapse.scss',\n  shadow: false,\n})\nexport class ModusWcCollapse {\n  private inheritedAttributes: Attributes = {};\n  private detailsRef?: HTMLDetailsElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the component should have a border. */",
      "type": ": boolean"
    },
    {
      "name": "collapseId",
      "description": "/** The description to render in the collapse header. */\n  description?: string;\n  /** The Modus icon name to render in the collapse header. */\n  icon?: string;\n  /** The icon's aria-label. */\n  iconAriaLabel?: string;\n  /** The size of the collapse header. */\n  size?: DaisySize;\n  /** The title to render in the collapse header. */\n  title: string;\n}\n\n/**\n * A customizable collapse component used for showing and hiding content.\n *\n * The component supports a 'header' and 'content' `<slot>` for injecting custom HTML.\n * Do not set\n */\n@Component({\n  tag: 'modus-wc-collapse',\n  styleUrl: 'modus-wc-collapse.scss',\n  shadow: false,\n})\nexport class ModusWcCollapse {\n  private inheritedAttributes: Attributes = {};\n  private detailsRef?: HTMLDetailsElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the component should have a border. */",
      "type": ": string"
    },
    {
      "name": "options",
      "description": "/** The description to render in the collapse header. */\n  description?: string;\n  /** The Modus icon name to render in the collapse header. */\n  icon?: string;\n  /** The icon's aria-label. */\n  iconAriaLabel?: string;\n  /** The size of the collapse header. */\n  size?: DaisySize;\n  /** The title to render in the collapse header. */\n  title: string;\n}\n\n/**\n * A customizable collapse component used for showing and hiding content.\n *\n * The component supports a 'header' and 'content' `<slot>` for injecting custom HTML.\n * Do not set\n */\n@Component({\n  tag: 'modus-wc-collapse',\n  styleUrl: 'modus-wc-collapse.scss',\n  shadow: false,\n})\nexport class ModusWcCollapse {\n  private inheritedAttributes: Attributes = {};\n  private detailsRef?: HTMLDetailsElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the component should have a border. */",
      "type": ": ICollapseOptions"
    }
  ],
  "events": [
    {
      "name": "expandedChange",
      "description": "/** The description to render in the collapse header. */\n  description?: string;\n  /** The Modus icon name to render in the collapse header. */\n  icon?: string;\n  /** The icon's aria-label. */\n  iconAriaLabel?: string;\n  /** The size of the collapse header. */\n  size?: DaisySize;\n  /** The title to render in the collapse header. */\n  title: string;\n}\n\n/**\n * A customizable collapse component used for showing and hiding content.\n *\n * The component supports a 'header' and 'content' `<slot>` for injecting custom HTML.\n * Do not set\n */\n@Component({\n  tag: 'modus-wc-collapse',\n  styleUrl: 'modus-wc-collapse.scss',\n  shadow: false,\n})\nexport class ModusWcCollapse {\n  private inheritedAttributes: Attributes = {};\n  private detailsRef?: HTMLDetailsElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the component should have a border. */\n  @Prop() bordered?: boolean = false;\n\n  /** Custom CSS class to apply to the outer div. */\n  @Prop() customClass?: string = '';\n\n  /** Controls whether the collapse is expanded or not. */\n  @Prop({ mutable: true }) expanded?: boolean = false;\n\n  /** A unique identifier used to set the id attributes of various elements.  */\n  @Prop({ mutable: true }) collapseId?: string;\n\n  /**\n   * Configuration options for rendering the pre-laid out collapse component.\n   * Do not set this prop if you intend to use the 'header' slot.\n   */\n  @Prop() options?: ICollapseOptions;\n\n  /** Event emitted when the expanded prop is internally changed. */"
    }
  ],
  "slots": [
    "header",
    "content"
  ],
  "default_values": {
    "bordered": "false",
    "customClass": "''",
    "expanded": "false",
    "collapseId": "generateRandomId()",
    "options": "{this.getTitleChildDivClasses()}>\n                  {this.options.icon && (\n                    <modus-wc-icon\n                      aria-label={this.options.iconAriaLabel}\n                      decorative={true}\n                      name={this.options.icon}\n                      size={this.options.size}\n                    ></modus-wc-icon>\n                  )}\n                  {this.options.title}\n                </div>\n                {this.options.description && (\n                  <div class={this.getDescriptionDivClasses()}>\n                    {this.options.description}\n                  </div>\n                )}\n              </Fragment>\n            ) : (\n              <slot name=\"header\" />\n            )}\n          </summary>\n          <div\n            aria-labelledby={titleId}\n            class=\"modus-wc-collapse-content modus-wc-cursor-default\"\n            id={contentId}\n          >\n            <slot name=\"content\" />\n          </div>\n        </details>\n      </Host>\n    )"
  },
  "documentation": "\n\n--- modus-wc-collapse.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { ICollapseOptions } from './modus-wc-collapse';\n\ninterface CollapseArgs {\n  bordered?: boolean;\n  'custom-class'?: string;\n  expanded?: boolean;\n  id?: string;\n  options?: ICollapseOptions;\n}\n\nconst options: ICollapseOptions = {\n  title: 'Collapse Title',\n  description: 'Collapse description',\n  icon: 'alert',\n  iconAriaLabel: 'Alert',\n};\n\nconst meta: Meta<CollapseArgs> = {\n  title: 'Components/Collapse',\n  component: 'modus-wc-collapse',\n  args: { bordered: false, expanded: false, options },\n  argTypes: {\n    options: {\n      description: 'Configuration options for the collapse component',\n      table: {\n        type: {\n          detail: `\n            Interface: ICollapseOptions\n            Properties:\n            - description (string, optional): The description to render in the collapse header\n            - icon (string, optional): The Modus icon name to render in the collapse header\n            - iconAriaLabel (string, optional): The icon's aria-label\n            - size (DaisySize, optional): The size of the collapse header\n            - title (string): The title to render in the collapse header\n          `,\n        },\n      },\n    },\n  },\n  decorators: [withActions],\n  parameters: { actions: { handles: ['expandedChange'] }, layout: 'padded' },\n};\n\nexport default meta;\n\ntype Story = StoryObj<CollapseArgs>;\n\nconst Template: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<modus-wc-collapse\n  ?bordered=${args.bordered}\n  custom-class=${ifDefined(args['custom-class'])}\n  ?expanded=${args.expanded}\n  id=${ifDefined(args.id)}\n  .options=${args.options}\n>\n  <div slot=\"content\">Collapse content</div>\n</modus-wc-collapse>\n    `;\n  },\n};\n\nexport const Default: Story = { ...Template };\n\nexport const WithCustomClickableHeader = {\n  render: (args) => {\n    const handleButtonClick = () => {\n      window.alert('Button was clicked!');\n    };\n\n    // prettier-ignore\n    return html`\n<style>\n  .clickable-div {\n    position: relative;\n    width: fit-content;\n    z-index: 99;\n  }\n</style>\n<modus-wc-collapse\n  ?bordered=${args.bordered}\n  custom-class=${ifDefined(args['custom-class'])}\n  ?expanded=${args.expanded}\n  id=\"123\"\n>\n  <div slot=\"header\" class=\"modus-wc-collapse-title\" id=\"123\">\n    <div class=\"clickable-div\">\n      <modus-wc-button @buttonClick=${handleButtonClick}>Alert 1</modus-wc-button>\n      <modus-wc-button @buttonClick=${handleButtonClick}>Alert 2</modus-wc-button>\n    </div>\n  </div>\n  <div slot=\"content\">Collapse content</div>\n</modus-wc-collapse>\n    `;\n  },\n};\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - The 1.0 accordion-item component maps to the 2.0 collapse component. See the [Accordion component](?path=/docs/components-accordion--docs).\n  - Size values have changed from \\`condensed\\`, \\`standard\\` in 1.0 to abbreviations (\\`xs\\`, \\`sm\\`, \\`md\\`, \\`lg\\`) in 2.0.\n\n#### Prop Mapping\n\n##### accordion-item (1.0) \u2192 collapse (2.0)\n\n| 1.0 Prop           | 2.0 Prop            | Notes            |\n|--------------------|---------------------|------------------|\n| aria-label         | aria-label          |                  |\n| disabled           |                     | Not carried over |\n| expand-button-type |                     | Not carried over |\n| expanded           | expanded            |                  |\n| header-text        | options.title       |                  |\n| icon               | options.icon        |                  |\n| size               | options.size        |                  |\n| supporting-label   | options.description |                  |\n\n#### Event Mapping\n\n| 1.0 Event | 2.0 Event      | Notes            |\n|-----------|----------------|------------------|\n| closed    | expandedChange |                  |\n| opened    | expandedChange |                  |\n        `,\n      },\n    },\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  render: () => html`<div></div>`,\n};\n",
  "storybook": {
    "examples": [
      "<modus-wc-button @buttonClick=${handleButtonClick}>Alert 1</modus-wc-button>",
      "<modus-wc-button @buttonClick=${handleButtonClick}>Alert 2</modus-wc-button>",
      "\n<modus-wc-collapse\n  ?bordered=${args.bordered}\n  custom-class=${ifDefined(args['custom-class'])}\n  ?expanded=${args.expanded}\n  id=${ifDefined(args.id)}\n  .options=${args.options}\n>\n  <div slot=\"content\">Collapse content</div>\n</modus-wc-collapse>\n    ",
      "\n<style>\n  .clickable-div {\n    position: relative;\n    width: fit-content;\n    z-index: 99;\n  }\n</style>\n<modus-wc-collapse\n  ?bordered=${args.bordered}\n  custom-class=${ifDefined(args['custom-class'])}\n  ?expanded=${args.expanded}\n  id=\"123\"\n>\n  <div slot=\"header\" class=\"modus-wc-collapse-title\" id=\"123\">\n    <div class=\"clickable-div\">\n      <modus-wc-button @buttonClick=${handleButtonClick}>Alert 1</modus-wc-button>\n      <modus-wc-button @buttonClick=${handleButtonClick}>Alert 2</modus-wc-button>\n    </div>\n  </div>\n  <div slot=\"content\">Collapse content</div>\n</modus-wc-collapse>\n    "
    ],
    "variants": [],
    "prop_usage": {
      "slot": [
        "content",
        "header"
      ],
      "id": [
        "123"
      ],
      "class": [
        "modus-wc-collapse-title",
        "clickable-div"
      ]
    }
  },
  "tag_name": "modus-wc-collapse"
}
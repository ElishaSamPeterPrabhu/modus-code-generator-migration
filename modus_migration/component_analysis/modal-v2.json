{
  "component_name": "modus-wc-modal",
  "version": "v2",
  "props": [
    {
      "name": "backdrop",
      "description": "/**\n * A customizable modal component used to display content in a dialog.\n *\n * The component supports a 'header', 'content', and 'footer' <slot> for injecting custom HTML\n */\n@Component({\n  tag: 'modus-wc-modal',\n  styleUrl: 'modus-wc-modal.scss',\n  shadow: false,\n})\nexport class ModusWcModal {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /**\n   * The modal's backdrop.\n   * Specify 'static' for a backdrop that doesn't close the modal when clicked outside the modal content.\n   */",
      "type": ": 'default' | 'static'"
    },
    {
      "name": "customClass",
      "description": "/**\n * A customizable modal component used to display content in a dialog.\n *\n * The component supports a 'header', 'content', and 'footer' <slot> for injecting custom HTML\n */\n@Component({\n  tag: 'modus-wc-modal',\n  styleUrl: 'modus-wc-modal.scss',\n  shadow: false,\n})\nexport class ModusWcModal {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /**\n   * The modal's backdrop.\n   * Specify 'static' for a backdrop that doesn't close the modal when clicked outside the modal content.\n   */",
      "type": ": string"
    },
    {
      "name": "fullscreen",
      "description": "/**\n * A customizable modal component used to display content in a dialog.\n *\n * The component supports a 'header', 'content', and 'footer' <slot> for injecting custom HTML\n */\n@Component({\n  tag: 'modus-wc-modal',\n  styleUrl: 'modus-wc-modal.scss',\n  shadow: false,\n})\nexport class ModusWcModal {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /**\n   * The modal's backdrop.\n   * Specify 'static' for a backdrop that doesn't close the modal when clicked outside the modal content.\n   */",
      "type": ": boolean"
    },
    {
      "name": "modalId",
      "description": "/**\n * A customizable modal component used to display content in a dialog.\n *\n * The component supports a 'header', 'content', and 'footer' <slot> for injecting custom HTML\n */\n@Component({\n  tag: 'modus-wc-modal',\n  styleUrl: 'modus-wc-modal.scss',\n  shadow: false,\n})\nexport class ModusWcModal {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /**\n   * The modal's backdrop.\n   * Specify 'static' for a backdrop that doesn't close the modal when clicked outside the modal content.\n   */",
      "type": ": string"
    },
    {
      "name": "position",
      "description": "/**\n * A customizable modal component used to display content in a dialog.\n *\n * The component supports a 'header', 'content', and 'footer' <slot> for injecting custom HTML\n */\n@Component({\n  tag: 'modus-wc-modal',\n  styleUrl: 'modus-wc-modal.scss',\n  shadow: false,\n})\nexport class ModusWcModal {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /**\n   * The modal's backdrop.\n   * Specify 'static' for a backdrop that doesn't close the modal when clicked outside the modal content.\n   */",
      "type": ": 'bottom' | 'center' | 'top'"
    },
    {
      "name": "showClose",
      "description": "/**\n * A customizable modal component used to display content in a dialog.\n *\n * The component supports a 'header', 'content', and 'footer' <slot> for injecting custom HTML\n */\n@Component({\n  tag: 'modus-wc-modal',\n  styleUrl: 'modus-wc-modal.scss',\n  shadow: false,\n})\nexport class ModusWcModal {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /**\n   * The modal's backdrop.\n   * Specify 'static' for a backdrop that doesn't close the modal when clicked outside the modal content.\n   */",
      "type": ": boolean"
    },
    {
      "name": "showFullscreenToggle",
      "description": "/**\n * A customizable modal component used to display content in a dialog.\n *\n * The component supports a 'header', 'content', and 'footer' <slot> for injecting custom HTML\n */\n@Component({\n  tag: 'modus-wc-modal',\n  styleUrl: 'modus-wc-modal.scss',\n  shadow: false,\n})\nexport class ModusWcModal {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /**\n   * The modal's backdrop.\n   * Specify 'static' for a backdrop that doesn't close the modal when clicked outside the modal content.\n   */",
      "type": ": boolean"
    }
  ],
  "events": [],
  "slots": [
    "header",
    "content",
    "footer"
  ],
  "default_values": {
    "backdrop": "'default'",
    "customClass": "''",
    "fullscreen": "false",
    "position": "'center'",
    "showClose": "true",
    "showFullscreenToggle": "false"
  },
  "documentation": "\n\n--- modus-wc-modal.stories.ts ---\n\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { generateRandomId } from '../utils';\n\ninterface ModalArgs {\n  backdrop: 'default' | 'static';\n  'custom-class'?: string;\n  fullscreen: boolean;\n  'modal-id'?: string;\n  position: 'bottom' | 'center' | 'top';\n  'show-close': boolean;\n  'show-fullscreen-toggle': boolean;\n}\n\nconst meta: Meta<ModalArgs> = {\n  title: 'Components/Modal',\n  component: 'modus-wc-modal',\n  args: {\n    backdrop: 'default',\n    'custom-class': '',\n    fullscreen: false,\n    'modal-id': 'my_modal_1',\n    position: 'center',\n    'show-close': true,\n    'show-fullscreen-toggle': false,\n  },\n  argTypes: {\n    backdrop: {\n      control: { type: 'select' },\n      options: ['default', 'static'],\n    },\n    position: {\n      control: { type: 'select' },\n      options: ['bottom', 'center', 'top'],\n    },\n  },\n  parameters: {\n    layout: 'centered',\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<ModalArgs>;\n\nexport const Default: Story = {\n  render: (args) => {\n    const modalId = `${args['modal-id']}${generateRandomId(4)}}`;\n\n    const handleModalVisibility = (action: 'show' | 'hide') => {\n      const modal = document.getElementById(modalId) as HTMLDialogElement;\n      if (modal) {\n        if (action === 'show') {\n          modal.showModal();\n        } else {\n          modal.close();\n        }\n      }\n    };\n\n    // prettier-ignore\n    return html`\n<modus-wc-button @buttonClick=${() => handleModalVisibility('show')}>\n  Open modal\n</modus-wc-button>\n<modus-wc-modal\n  aria-label=\"Example modal\"\n  custom-class=${ifDefined(args['custom-class'])}\n  fullscreen=${args.fullscreen}\n  modal-id=${modalId}\n  backdrop=${args.backdrop}\n  position=${args.position}\n  show-close=${args['show-close']}\n  show-fullscreen-toggle=${args['show-fullscreen-toggle']}\n>\n  <span slot=\"header\">Modal Title</span>\n  <span slot=\"content\"> This is sample modal content. </span>\n  <modus-wc-button slot=\"footer\" @buttonClick=${() => handleModalVisibility('hide')}>\n    Close\n  </modus-wc-button>\n</modus-wc-modal>\n    `;\n  },\n};\n\nexport const CustomWidthAndHeight: Story = {\n  render: (args) => {\n    const modalId = `${args['modal-id']}${generateRandomId(4)}}`;\n\n    const handleModalVisibility = (action: 'show' | 'hide') => {\n      const modal = document.getElementById(modalId) as HTMLDialogElement;\n      if (modal) {\n        if (action === 'show') {\n          modal.showModal();\n        } else {\n          modal.close();\n        }\n      }\n    };\n\n    // prettier-ignore\n    return html`\n<style>\n  .expanded-modal .modus-wc-modal-box {\n    width: 80%;\n    max-width: none;\n    height: 60%;\n    max-height: none;\n  }\n</style>\n<modus-wc-button @buttonClick=${() => handleModalVisibility('show')}>\n  Open modal\n</modus-wc-button>\n<modus-wc-modal\n  aria-label=\"Example modal\"\n  custom-class=\"expanded-modal\"\n  modal-id=${modalId}\n  backdrop=${ifDefined(args.backdrop)}\n  position=${ifDefined(args.position)}\n  show-close=${ifDefined(args['show-close'])}\n>\n  <span slot=\"header\">Modal Title</span>\n  <p slot=\"content\">Sample modal content.</p>\n  <modus-wc-button slot=\"footer\" @buttonClick=${() => handleModalVisibility('hide')}>\n    Close\n  </modus-wc-button>\n</modus-wc-modal>\n    `;\n  },\n};\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - Modal identification is now required via the \\`modal-id\\` prop.\n  - 2.0 requires the use of slots for a fully customizable \\`header\\`, \\`content\\`, and \\`footer\\`.\n  Primary and secondary buttons as well as \\`header-text\\` are no longer built-in.\n  - In 1.0, modals had built-in open/close state management with methods. 2.0 uses the native HTML dialog\n  element with \\`modal-id\\` to target the dialog with native \\`showModal()\\` and \\`close()\\` methods.\n\n#### Prop Mapping\n\n| 1.0 Prop                     | 2.0 Prop                | Notes                                         |\n|------------------------------|-------------------------|-----------------------------------------------|\n| aria-label                   | aria-label              |                                               |\n| backdrop                     | backdrop                |                                               |\n| fullscreen                   | fullscreen              |                                               |\n| header-text                  |                         | Not carried over, use \\`header\\` slot instead |\n| primary-button-aria-label    |                         | Not carried over, use \\`footer\\` slot instead |\n| primary-button-disabled      |                         | Not carried over, use \\`footer\\` slot instead |\n| primary-button-text          |                         | Not carried over, use \\`footer\\` slot instead |\n| secondary-button-aria-label  |                         | Not carried over, use \\`footer\\` slot instead |\n| secondary-button-disabled    |                         | Not carried over, use \\`footer\\` slot instead |\n| secondary-button-text        |                         | Not carried over, use \\`footer\\` slot instead |\n| show-fullscreen-toggle       | show-fullscreen-toggle  |                                               |\n| z-index                      |                         | Not carried over, use CSS instead             |\n\n#### Event Mapping\n\n| 1.0 Event            | 2.0 Event | Notes                                                                             |\n|----------------------|-----------|-----------------------------------------------------------------------------------|\n| closed               |           | Not carried over, use dialog \\`close()\\` event instead                            |\n| opened               |           | Not carried over, use dialog \\`showModal()\\` event instead                        |\n| primaryButtonClick   |           | Not carried over, handle with events on custom buttons in \\`footer\\` slot instead |\n| secondaryButtonClick |           | Not carried over, handle with events on custom buttons in \\`footer\\` slot instead |\n        `,\n      },\n    },\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  render: () => html`<div></div>`,\n};\n",
  "storybook": {
    "examples": [
      "<modus-wc-button @buttonClick=${() => handleModalVisibility('show')}>\n  Open modal\n</modus-wc-button>",
      "<modus-wc-button slot=\"footer\" @buttonClick=${() => handleModalVisibility('hide')}>\n    Close\n  </modus-wc-button>",
      "<modus-wc-button @buttonClick=${() => handleModalVisibility('show')}>\n  Open modal\n</modus-wc-button>",
      "<modus-wc-button slot=\"footer\" @buttonClick=${() => handleModalVisibility('hide')}>\n    Close\n  </modus-wc-button>",
      "\n<modus-wc-button @buttonClick=${() => handleModalVisibility('show')}>\n  Open modal\n</modus-wc-button>\n<modus-wc-modal\n  aria-label=\"Example modal\"\n  custom-class=${ifDefined(args['custom-class'])}\n  fullscreen=${args.fullscreen}\n  modal-id=${modalId}\n  backdrop=${args.backdrop}\n  position=${args.position}\n  show-close=${args['show-close']}\n  show-fullscreen-toggle=${args['show-fullscreen-toggle']}\n>\n  <span slot=\"header\">Modal Title</span>\n  <span slot=\"content\"> This is sample modal content. </span>\n  <modus-wc-button slot=\"footer\" @buttonClick=${() => handleModalVisibility('hide')}>\n    Close\n  </modus-wc-button>\n</modus-wc-modal>\n    "
    ],
    "variants": [],
    "prop_usage": {
      "label": [
        "Example modal"
      ],
      "slot": [
        "header",
        "content",
        "footer"
      ],
      "class": [
        "expanded-modal"
      ]
    }
  },
  "tag_name": "modus-wc-modal"
}
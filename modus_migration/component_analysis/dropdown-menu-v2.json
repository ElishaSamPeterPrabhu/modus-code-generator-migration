{
  "component_name": "modus-wc-dropdown-menu",
  "version": "v2",
  "props": [
    {
      "name": "buttonAriaLabel",
      "description": "/**\n * A customizable dropdown menu component used to render a button and toggleable menu.\n *\n * The component supports a 'button' and 'menu' `<slot>` for injecting custom HTML content.\n */\n@Component({\n  tag: 'modus-wc-dropdown-menu',\n  styleUrl: 'modus-wc-dropdown-menu.scss',\n  shadow: false,\n})\nexport class ModusWcDropdownMenu {\n  private buttonRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The aria-label for the dropdown button. */",
      "type": ": string"
    },
    {
      "name": "buttonColor",
      "description": "/**\n * A customizable dropdown menu component used to render a button and toggleable menu.\n *\n * The component supports a 'button' and 'menu' `<slot>` for injecting custom HTML content.\n */\n@Component({\n  tag: 'modus-wc-dropdown-menu',\n  styleUrl: 'modus-wc-dropdown-menu.scss',\n  shadow: false,\n})\nexport class ModusWcDropdownMenu {\n  private buttonRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The aria-label for the dropdown button. */",
      "type": ":\n    | 'primary'\n    | 'secondary'\n    | 'tertiary'\n    | 'warning'\n    | 'danger'"
    },
    {
      "name": "buttonSize",
      "description": "/**\n * A customizable dropdown menu component used to render a button and toggleable menu.\n *\n * The component supports a 'button' and 'menu' `<slot>` for injecting custom HTML content.\n */\n@Component({\n  tag: 'modus-wc-dropdown-menu',\n  styleUrl: 'modus-wc-dropdown-menu.scss',\n  shadow: false,\n})\nexport class ModusWcDropdownMenu {\n  private buttonRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The aria-label for the dropdown button. */",
      "type": ": DaisySize"
    },
    {
      "name": "buttonVariant",
      "description": "/**\n * A customizable dropdown menu component used to render a button and toggleable menu.\n *\n * The component supports a 'button' and 'menu' `<slot>` for injecting custom HTML content.\n */\n@Component({\n  tag: 'modus-wc-dropdown-menu',\n  styleUrl: 'modus-wc-dropdown-menu.scss',\n  shadow: false,\n})\nexport class ModusWcDropdownMenu {\n  private buttonRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The aria-label for the dropdown button. */",
      "type": ": 'borderless' | 'filled' | 'outlined'"
    },
    {
      "name": "customClass",
      "description": "/**\n * A customizable dropdown menu component used to render a button and toggleable menu.\n *\n * The component supports a 'button' and 'menu' `<slot>` for injecting custom HTML content.\n */\n@Component({\n  tag: 'modus-wc-dropdown-menu',\n  styleUrl: 'modus-wc-dropdown-menu.scss',\n  shadow: false,\n})\nexport class ModusWcDropdownMenu {\n  private buttonRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The aria-label for the dropdown button. */",
      "type": ": string"
    },
    {
      "name": "disabled",
      "description": "/**\n * A customizable dropdown menu component used to render a button and toggleable menu.\n *\n * The component supports a 'button' and 'menu' `<slot>` for injecting custom HTML content.\n */\n@Component({\n  tag: 'modus-wc-dropdown-menu',\n  styleUrl: 'modus-wc-dropdown-menu.scss',\n  shadow: false,\n})\nexport class ModusWcDropdownMenu {\n  private buttonRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The aria-label for the dropdown button. */",
      "type": ": boolean"
    },
    {
      "name": "menuBordered",
      "description": "/**\n * A customizable dropdown menu component used to render a button and toggleable menu.\n *\n * The component supports a 'button' and 'menu' `<slot>` for injecting custom HTML content.\n */\n@Component({\n  tag: 'modus-wc-dropdown-menu',\n  styleUrl: 'modus-wc-dropdown-menu.scss',\n  shadow: false,\n})\nexport class ModusWcDropdownMenu {\n  private buttonRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The aria-label for the dropdown button. */",
      "type": ": boolean"
    },
    {
      "name": "menuOffset",
      "description": "/**\n * A customizable dropdown menu component used to render a button and toggleable menu.\n *\n * The component supports a 'button' and 'menu' `<slot>` for injecting custom HTML content.\n */\n@Component({\n  tag: 'modus-wc-dropdown-menu',\n  styleUrl: 'modus-wc-dropdown-menu.scss',\n  shadow: false,\n})\nexport class ModusWcDropdownMenu {\n  private buttonRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The aria-label for the dropdown button. */",
      "type": ": number"
    },
    {
      "name": "menuPlacement",
      "description": "/**\n * A customizable dropdown menu component used to render a button and toggleable menu.\n *\n * The component supports a 'button' and 'menu' `<slot>` for injecting custom HTML content.\n */\n@Component({\n  tag: 'modus-wc-dropdown-menu',\n  styleUrl: 'modus-wc-dropdown-menu.scss',\n  shadow: false,\n})\nexport class ModusWcDropdownMenu {\n  private buttonRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The aria-label for the dropdown button. */",
      "type": ": PopoverPlacement"
    },
    {
      "name": "menuSize",
      "description": "/**\n * A customizable dropdown menu component used to render a button and toggleable menu.\n *\n * The component supports a 'button' and 'menu' `<slot>` for injecting custom HTML content.\n */\n@Component({\n  tag: 'modus-wc-dropdown-menu',\n  styleUrl: 'modus-wc-dropdown-menu.scss',\n  shadow: false,\n})\nexport class ModusWcDropdownMenu {\n  private buttonRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The aria-label for the dropdown button. */",
      "type": ": ModusSize"
    },
    {
      "name": "menuVisible",
      "description": "/**\n * A customizable dropdown menu component used to render a button and toggleable menu.\n *\n * The component supports a 'button' and 'menu' `<slot>` for injecting custom HTML content.\n */\n@Component({\n  tag: 'modus-wc-dropdown-menu',\n  styleUrl: 'modus-wc-dropdown-menu.scss',\n  shadow: false,\n})\nexport class ModusWcDropdownMenu {\n  private buttonRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The aria-label for the dropdown button. */",
      "type": "boolean"
    }
  ],
  "events": [
    {
      "name": "menuVisibilityChange",
      "description": "/**\n * A customizable dropdown menu component used to render a button and toggleable menu.\n *\n * The component supports a 'button' and 'menu' `<slot>` for injecting custom HTML content.\n */\n@Component({\n  tag: 'modus-wc-dropdown-menu',\n  styleUrl: 'modus-wc-dropdown-menu.scss',\n  shadow: false,\n})\nexport class ModusWcDropdownMenu {\n  private buttonRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The aria-label for the dropdown button. */\n  @Prop() buttonAriaLabel?: string;\n\n  /** The color variant of the button. */\n  @Prop() buttonColor?:\n    | 'primary'\n    | 'secondary'\n    | 'tertiary'\n    | 'warning'\n    | 'danger' = 'primary';\n\n  /** The size of the button. */\n  @Prop() buttonSize?: DaisySize = 'md';\n\n  /** The variant of the button. */\n  @Prop() buttonVariant?: 'borderless' | 'filled' | 'outlined' = 'filled';\n\n  /** Custom CSS class to apply to the host element. */\n  @Prop() customClass?: string = '';\n\n  /** If true, the button will be disabled. */\n  @Prop() disabled?: boolean = false;\n\n  /** Indicates that the menu should have a border. */\n  @Prop() menuBordered?: boolean = true;\n\n  /** Distance between the button and menu in pixels. */\n  @Prop() menuOffset?: number = 10;\n\n  /** The placement of the menu relative to the button. */\n  @Prop() menuPlacement?: PopoverPlacement = 'bottom-start';\n\n  /** The size of the menu. */\n  @Prop() menuSize?: ModusSize = 'md';\n\n  /** Indicates that the menu is visible. */\n  @Prop({ mutable: true }) menuVisible: boolean = false;\n\n  /** Event emitted when the menuVisible prop changes. */"
    }
  ],
  "slots": [
    "button",
    "menu"
  ],
  "default_values": {
    "buttonColor": "'primary'",
    "buttonSize": "'md'",
    "buttonVariant": "'filled'",
    "customClass": "''",
    "disabled": "false",
    "menuBordered": "true",
    "menuOffset": "10",
    "menuPlacement": "'bottom-start'",
    "menuSize": "'md'",
    "menuVisible": "false"
  },
  "documentation": "\n\n--- modus-wc-dropdown-menu.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { DaisySize, ModusSize, PopoverPlacement } from '../types';\n\ninterface DropdownMenuArgs {\n  'button-aria-label'?: string;\n  'button-color'?: 'primary' | 'secondary' | 'tertiary' | 'warning' | 'danger';\n  'button-size'?: DaisySize;\n  'button-variant'?: 'borderless' | 'filled' | 'outlined';\n  'custom-class'?: string;\n  disabled?: boolean;\n  'menu-bordered'?: boolean;\n  'menu-offset'?: number;\n  'menu-placement'?: PopoverPlacement;\n  'menu-size'?: ModusSize;\n  'menu-visible': boolean;\n}\n\nconst meta: Meta<DropdownMenuArgs> = {\n  title: 'Components/Dropdown Menu',\n  component: 'modus-wc-dropdown-menu',\n  args: {\n    'button-aria-label': 'Dropdown menu button',\n    'button-color': 'primary',\n    'button-size': 'md',\n    'button-variant': 'filled',\n    disabled: false,\n    'menu-bordered': true,\n    'menu-offset': 14,\n    'menu-placement': 'bottom-start',\n    'menu-size': 'md',\n    'menu-visible': false,\n  },\n  argTypes: {\n    'button-color': {\n      control: { type: 'select' },\n      options: ['primary', 'secondary', 'tertiary', 'warning', 'danger'],\n    },\n    'button-size': {\n      control: { type: 'select' },\n      options: ['xs', 'sm', 'md', 'lg'],\n    },\n    'button-variant': {\n      control: { type: 'select' },\n      options: ['borderless', 'filled', 'outlined'],\n    },\n    'menu-placement': {\n      control: { type: 'select' },\n      options: [\n        'top',\n        'top-start',\n        'top-end',\n        'bottom',\n        'bottom-start',\n        'bottom-end',\n        'left',\n        'left-start',\n        'left-end',\n        'right',\n        'right-start',\n        'right-end',\n      ],\n    },\n    'menu-size': {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg'],\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['menuVisibilityChange'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<DropdownMenuArgs>;\n\nconst Template: Story = {\n  render: (args) => {\n    let selectedValue = '';\n\n    const handleItemSelect = (event: CustomEvent) => {\n      selectedValue = event.detail.value;\n      const displayElement = document.querySelector('#selected-value');\n      if (displayElement) {\n        displayElement.textContent = selectedValue;\n      }\n\n      // Close the dropdown menu when an item is selected\n      const dropdownMenu = event.target as HTMLElement;\n      const dropdownMenuElement = dropdownMenu.closest(\n        'modus-wc-dropdown-menu'\n      );\n      if (dropdownMenuElement) {\n        dropdownMenuElement.menuVisible = false;\n      }\n    };\n\n    // prettier-ignore\n    return html`\n<style>\n  /* Storybook styling */\n  div#story--components-dropdown-menu--default--primary-inner {\n    display: flex;\n    align-items: center;\n    height: 240px;\n  }\n\n  [slot=\"button\"] {\n    display: flex;\n    align-items: center;\n    gap: 4px;\n  }\n\n  .value {\n    font-size: 14px;\n    padding-top: 12px;\n  }\n</style>\n\n<script>\n  let selectedValue = '';\n\n  const handleItemSelect = (event: CustomEvent) => {\n    // Update the \"Selected Value\" label\n    selectedValue = event.detail.value;\n    const displayElement = document.querySelector('#selected-value');\n    if (displayElement) {\n      displayElement.textContent = selectedValue;\n    }\n\n    // Close the dropdown menu when an item is selected\n    const dropdownMenu = event.target as HTMLElement;\n    const dropdownMenuElement = dropdownMenu.closest(\n      'modus-wc-dropdown-menu'\n    );\n    if (dropdownMenuElement) {\n      dropdownMenuElement.menuVisible = false;\n    }\n  };\n</script>\n\n<modus-wc-dropdown-menu\n  button-aria-label=${ifDefined(args['button-aria-label'])}\n  button-color=${ifDefined(args['button-color'])}\n  button-size=${ifDefined(args['button-size'])}\n  button-variant=${ifDefined(args['button-variant'])}\n  custom-class=${ifDefined(args['custom-class'])}\n  ?disabled=${args.disabled}\n  ?menu-bordered=${args['menu-bordered']}\n  menu-offset=${ifDefined(args['menu-offset'])}\n  menu-placement=${ifDefined(args['menu-placement'])}\n  menu-size=${ifDefined(args['menu-size'])}\n  ?menu-visible=${args['menu-visible']}\n>\n  <div slot=\"button\">\n    Button\n    <modus-wc-icon name=\"expand_more\" size=\"sm\" />\n  </div>\n\n  <div slot=\"menu\">\n    <modus-wc-menu-item label=\"Item One\" value=\"1\" @itemSelect=${handleItemSelect}></modus-wc-menu-item>\n    <modus-wc-menu-item label=\"Item Two\" value=\"2\" @itemSelect=${handleItemSelect} /></modus-wc-menu-item>\n    <modus-wc-menu-item label=\"Item Three\" value=\"3\" @itemSelect=${handleItemSelect} /></modus-wc-menu-item>\n  </div>\n</modus-wc-dropdown-menu>\n\n<div class=\"value\">\n  Selected Value:\n  <span id=\"selected-value\"></span>\n</div>\n    `;\n  },\n};\n\nexport const Default: Story = { ...Template };\n",
  "storybook": {
    "examples": [
      "<modus-wc-menu-item label=\"Item One\" value=\"1\" @itemSelect=${handleItemSelect}></modus-wc-menu-item>",
      "<modus-wc-menu-item label=\"Item Two\" value=\"2\" @itemSelect=${handleItemSelect} /></modus-wc-menu-item>",
      "<modus-wc-menu-item label=\"Item Three\" value=\"3\" @itemSelect=${handleItemSelect} /></modus-wc-menu-item>",
      "<modus-wc-icon name=\"expand_more\" size=\"sm\" />",
      "<modus-wc-menu-item label=\"Item Two\" value=\"2\" @itemSelect=${handleItemSelect} />"
    ],
    "variants": [],
    "prop_usage": {
      "slot": [
        "button",
        "menu"
      ],
      "name": [
        "expand_more"
      ],
      "size": [
        "sm"
      ],
      "label": [
        "Item One",
        "Item Two",
        "Item Three"
      ],
      "value": [
        "1",
        "2",
        "3"
      ],
      "class": [
        "value"
      ],
      "id": [
        "selected-value"
      ]
    }
  },
  "tag_name": "modus-wc-dropdown-menu"
}
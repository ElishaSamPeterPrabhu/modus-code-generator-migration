{
  "component_name": "modus-table",
  "version": "v1",
  "props": [
    {
      "name": "columns",
      "description": "/**\n * @slot customFooter - Slot for custom footer.\n * @slot groupLeft - Slot for custom toolbar options added to the left.\n * @slot groupRight - Slot for custom toolbar options added to the right.\n */\n@Component({\n  tag: 'modus-table',\n  styleUrl: 'modus-table.scss',\n  shadow: true,\n})\nexport class ModusTable {\n  @Element() element: HTMLElement;\n\n  /** (Required) To display headers in the table. */",
      "type": ": ModusTableColumn<unknown>[]"
    },
    {
      "name": "columnResize",
      "description": "/**\n * @slot customFooter - Slot for custom footer.\n * @slot groupLeft - Slot for custom toolbar options added to the left.\n * @slot groupRight - Slot for custom toolbar options added to the right.\n */\n@Component({\n  tag: 'modus-table',\n  styleUrl: 'modus-table.scss',\n  shadow: true,\n})\nexport class ModusTable {\n  @Element() element: HTMLElement;\n\n  /** (Required) To display headers in the table. */",
      "type": "this.columnResize,\n      rowSelectionChange: this.rowSelectionChange,\n      rowExpanded: this.rowExpanded,\n      rowActionClick: this.rowActionClick,\n      rowActionSize: this.rowActionsConfig?.width,\n      rowActionHeader: this.rowActionsConfig?.header,\n      sortChange: this.sortChange,\n      paginationChange: this.paginationChange,\n      columnSizingChange: this.columnSizingChange,\n      columnVisibilityChange: this.columnVisibilityChange,\n      columnOrderChange: this.columnOrderChange,\n      cellValueChange: this.cellValueChange,\n      cellLinkClick: this.cellLinkClick,\n      showSortIconOnHover: this.showSortIconOnHover,\n      displayOptions: this.displayOptions,\n      toolbarOptions: this.toolbarOptions,\n      toolbar: this.toolbar,\n      summaryRow: this.summaryRow,\n      fullWidth: this.fullWidth,\n      maxHeight: this.maxHeight,\n      maxWidth: this.maxWidth,\n      frozenColumns: this.frozenColumns,\n      isColumnResizing: this.isColumnResizing,\n      tableCore: this.tableCore,\n      tableInstance: this.tableCore.getTableInstance(),\n      wrapText: this.wrapText,\n      onColumnsChange: this.onColumnsChange,\n      onColumnResizeChange: this.onColumnResizeChange,\n      onColumnReorderChange: this.onColumnReorderChange,\n      onDataChange: this.onDataChange,\n      onRowsExpandableChange: this.onRowsExpandableChange,\n      onRowSelectionOptionsChange: this.onRowSelectionOptionsChange,\n      onSortChange: this.onSortChange,\n      onToolbarOptionsChange: this.onToolbarOptionsChange,\n      getRowId: this.getRowId,\n      updateData: this.updateData.bind(this),\n      updateSelectedRows: this.updateSelectedRows.bind(this),\n      updateClickedRows: this.updateClickedRows.bind(this),\n      rowSelectionDisabled: this.rowSelectionDisabled,\n    }"
    },
    {
      "name": "columnReorder",
      "description": "/**\n * @slot customFooter - Slot for custom footer.\n * @slot groupLeft - Slot for custom toolbar options added to the left.\n * @slot groupRight - Slot for custom toolbar options added to the right.\n */\n@Component({\n  tag: 'modus-table',\n  styleUrl: 'modus-table.scss',\n  shadow: true,\n})\nexport class ModusTable {\n  @Element() element: HTMLElement;\n\n  /** (Required) To display headers in the table. */",
      "type": "this.columnReorder,\n      columnResize: this.columnResize,\n      rowSelectionChange: this.rowSelectionChange,\n      rowExpanded: this.rowExpanded,\n      rowActionClick: this.rowActionClick,\n      rowActionSize: this.rowActionsConfig?.width,\n      rowActionHeader: this.rowActionsConfig?.header,\n      sortChange: this.sortChange,\n      paginationChange: this.paginationChange,\n      columnSizingChange: this.columnSizingChange,\n      columnVisibilityChange: this.columnVisibilityChange,\n      columnOrderChange: this.columnOrderChange,\n      cellValueChange: this.cellValueChange,\n      cellLinkClick: this.cellLinkClick,\n      showSortIconOnHover: this.showSortIconOnHover,\n      displayOptions: this.displayOptions,\n      toolbarOptions: this.toolbarOptions,\n      toolbar: this.toolbar,\n      summaryRow: this.summaryRow,\n      fullWidth: this.fullWidth,\n      maxHeight: this.maxHeight,\n      maxWidth: this.maxWidth,\n      frozenColumns: this.frozenColumns,\n      isColumnResizing: this.isColumnResizing,\n      tableCore: this.tableCore,\n      tableInstance: this.tableCore.getTableInstance(),\n      wrapText: this.wrapText,\n      onColumnsChange: this.onColumnsChange,\n      onColumnResizeChange: this.onColumnResizeChange,\n      onColumnReorderChange: this.onColumnReorderChange,\n      onDataChange: this.onDataChange,\n      onRowsExpandableChange: this.onRowsExpandableChange,\n      onRowSelectionOptionsChange: this.onRowSelectionOptionsChange,\n      onSortChange: this.onSortChange,\n      onToolbarOptionsChange: this.onToolbarOptionsChange,\n      getRowId: this.getRowId,\n      updateData: this.updateData.bind(this),\n      updateSelectedRows: this.updateSelectedRows.bind(this),\n      updateClickedRows: this.updateClickedRows.bind(this),\n      rowSelectionDisabled: this.rowSelectionDisabled,\n    }"
    },
    {
      "name": "data",
      "description": "/**\n * @slot customFooter - Slot for custom footer.\n * @slot groupLeft - Slot for custom toolbar options added to the left.\n * @slot groupRight - Slot for custom toolbar options added to the right.\n */\n@Component({\n  tag: 'modus-table',\n  styleUrl: 'modus-table.scss',\n  shadow: true,\n})\nexport class ModusTable {\n  @Element() element: HTMLElement;\n\n  /** (Required) To display headers in the table. */",
      "type": ": unknown[]"
    },
    {
      "name": "density",
      "description": "/**\n * @slot customFooter - Slot for custom footer.\n * @slot groupLeft - Slot for custom toolbar options added to the left.\n * @slot groupRight - Slot for custom toolbar options added to the right.\n */\n@Component({\n  tag: 'modus-table',\n  styleUrl: 'modus-table.scss',\n  shadow: true,\n})\nexport class ModusTable {\n  @Element() element: HTMLElement;\n\n  /** (Required) To display headers in the table. */",
      "type": "'relaxed' | 'comfortable' | 'compact'"
    },
    {
      "name": "displayOptions",
      "description": "/**\n * @slot customFooter - Slot for custom footer.\n * @slot groupLeft - Slot for custom toolbar options added to the left.\n * @slot groupRight - Slot for custom toolbar options added to the right.\n */\n@Component({\n  tag: 'modus-table',\n  styleUrl: 'modus-table.scss',\n  shadow: true,\n})\nexport class ModusTable {\n  @Element() element: HTMLElement;\n\n  /** (Required) To display headers in the table. */",
      "type": ": ModusTableDisplayOptions"
    },
    {
      "name": "errors",
      "description": "/**\n * @slot customFooter - Slot for custom footer.\n * @slot groupLeft - Slot for custom toolbar options added to the left.\n * @slot groupRight - Slot for custom toolbar options added to the right.\n */\n@Component({\n  tag: 'modus-table',\n  styleUrl: 'modus-table.scss',\n  shadow: true,\n})\nexport class ModusTable {\n  @Element() element: HTMLElement;\n\n  /** (Required) To display headers in the table. */",
      "type": "ModusTableErrors"
    },
    {
      "name": "hover",
      "description": "/**\n * @slot customFooter - Slot for custom footer.\n * @slot groupLeft - Slot for custom toolbar options added to the left.\n * @slot groupRight - Slot for custom toolbar options added to the right.\n */\n@Component({\n  tag: 'modus-table',\n  styleUrl: 'modus-table.scss',\n  shadow: true,\n})\nexport class ModusTable {\n  @Element() element: HTMLElement;\n\n  /** (Required) To display headers in the table. */",
      "type": "this.hover,\n      pagination: this.pagination,\n      pageSizeList: this.pageSizeList,\n      manualPaginationOptions: this.manualPaginationOptions,\n      rowActions: this.getRowActionsWithOverflow(),\n      rowSelection: this.rowSelection,\n      rowSelectionOptions: this.rowSelectionOptions,\n      rowsExpandable: this.rowsExpandable,\n      columns: this.columns,\n      errors: this.errors,\n      columnReorder: this.columnReorder,\n      columnResize: this.columnResize,\n      rowSelectionChange: this.rowSelectionChange,\n      rowExpanded: this.rowExpanded,\n      rowActionClick: this.rowActionClick,\n      rowActionSize: this.rowActionsConfig?.width,\n      rowActionHeader: this.rowActionsConfig?.header,\n      sortChange: this.sortChange,\n      paginationChange: this.paginationChange,\n      columnSizingChange: this.columnSizingChange,\n      columnVisibilityChange: this.columnVisibilityChange,\n      columnOrderChange: this.columnOrderChange,\n      cellValueChange: this.cellValueChange,\n      cellLinkClick: this.cellLinkClick,\n      showSortIconOnHover: this.showSortIconOnHover,\n      displayOptions: this.displayOptions,\n      toolbarOptions: this.toolbarOptions,\n      toolbar: this.toolbar,\n      summaryRow: this.summaryRow,\n      fullWidth: this.fullWidth,\n      maxHeight: this.maxHeight,\n      maxWidth: this.maxWidth,\n      frozenColumns: this.frozenColumns,\n      isColumnResizing: this.isColumnResizing,\n      tableCore: this.tableCore,\n      tableInstance: this.tableCore.getTableInstance(),\n      wrapText: this.wrapText,\n      onColumnsChange: this.onColumnsChange,\n      onColumnResizeChange: this.onColumnResizeChange,\n      onColumnReorderChange: this.onColumnReorderChange,\n      onDataChange: this.onDataChange,\n      onRowsExpandableChange: this.onRowsExpandableChange,\n      onRowSelectionOptionsChange: this.onRowSelectionOptionsChange,\n      onSortChange: this.onSortChange,\n      onToolbarOptionsChange: this.onToolbarOptionsChange,\n      getRowId: this.getRowId,\n      updateData: this.updateData.bind(this),\n      updateSelectedRows: this.updateSelectedRows.bind(this),\n      updateClickedRows: this.updateClickedRows.bind(this),\n      rowSelectionDisabled: this.rowSelectionDisabled,\n    }"
    },
    {
      "name": "fullWidth",
      "description": "/**\n * @slot customFooter - Slot for custom footer.\n * @slot groupLeft - Slot for custom toolbar options added to the left.\n * @slot groupRight - Slot for custom toolbar options added to the right.\n */\n@Component({\n  tag: 'modus-table',\n  styleUrl: 'modus-table.scss',\n  shadow: true,\n})\nexport class ModusTable {\n  @Element() element: HTMLElement;\n\n  /** (Required) To display headers in the table. */",
      "type": "this.fullWidth,\n      maxHeight: this.maxHeight,\n      maxWidth: this.maxWidth,\n      frozenColumns: this.frozenColumns,\n      isColumnResizing: this.isColumnResizing,\n      tableCore: this.tableCore,\n      tableInstance: this.tableCore.getTableInstance(),\n      wrapText: this.wrapText,\n      onColumnsChange: this.onColumnsChange,\n      onColumnResizeChange: this.onColumnResizeChange,\n      onColumnReorderChange: this.onColumnReorderChange,\n      onDataChange: this.onDataChange,\n      onRowsExpandableChange: this.onRowsExpandableChange,\n      onRowSelectionOptionsChange: this.onRowSelectionOptionsChange,\n      onSortChange: this.onSortChange,\n      onToolbarOptionsChange: this.onToolbarOptionsChange,\n      getRowId: this.getRowId,\n      updateData: this.updateData.bind(this),\n      updateSelectedRows: this.updateSelectedRows.bind(this),\n      updateClickedRows: this.updateClickedRows.bind(this),\n      rowSelectionDisabled: this.rowSelectionDisabled,\n    }"
    },
    {
      "name": "maxHeight",
      "description": "/**\n * @slot customFooter - Slot for custom footer.\n * @slot groupLeft - Slot for custom toolbar options added to the left.\n * @slot groupRight - Slot for custom toolbar options added to the right.\n */\n@Component({\n  tag: 'modus-table',\n  styleUrl: 'modus-table.scss',\n  shadow: true,\n})\nexport class ModusTable {\n  @Element() element: HTMLElement;\n\n  /** (Required) To display headers in the table. */",
      "type": "string"
    },
    {
      "name": "maxWidth",
      "description": "/**\n * @slot customFooter - Slot for custom footer.\n * @slot groupLeft - Slot for custom toolbar options added to the left.\n * @slot groupRight - Slot for custom toolbar options added to the right.\n */\n@Component({\n  tag: 'modus-table',\n  styleUrl: 'modus-table.scss',\n  shadow: true,\n})\nexport class ModusTable {\n  @Element() element: HTMLElement;\n\n  /** (Required) To display headers in the table. */",
      "type": "string"
    },
    {
      "name": "pageSizeList",
      "description": "/**\n * @slot customFooter - Slot for custom footer.\n * @slot groupLeft - Slot for custom toolbar options added to the left.\n * @slot groupRight - Slot for custom toolbar options added to the right.\n */\n@Component({\n  tag: 'modus-table',\n  styleUrl: 'modus-table.scss',\n  shadow: true,\n})\nexport class ModusTable {\n  @Element() element: HTMLElement;\n\n  /** (Required) To display headers in the table. */",
      "type": "number[]"
    },
    {
      "name": "pagination",
      "description": "/**\n * @slot customFooter - Slot for custom footer.\n * @slot groupLeft - Slot for custom toolbar options added to the left.\n * @slot groupRight - Slot for custom toolbar options added to the right.\n */\n@Component({\n  tag: 'modus-table',\n  styleUrl: 'modus-table.scss',\n  shadow: true,\n})\nexport class ModusTable {\n  @Element() element: HTMLElement;\n\n  /** (Required) To display headers in the table. */",
      "type": "this.tableState.pagination.pageSize\n          : this.rowsExpandable\n            ? this.pageSizeList[0]\n            : this.data.length,\n      })"
    },
    {
      "name": "rowActions",
      "description": "/**\n * @slot customFooter - Slot for custom footer.\n * @slot groupLeft - Slot for custom toolbar options added to the left.\n * @slot groupRight - Slot for custom toolbar options added to the right.\n */\n@Component({\n  tag: 'modus-table',\n  styleUrl: 'modus-table.scss',\n  shadow: true,\n})\nexport class ModusTable {\n  @Element() element: HTMLElement;\n\n  /** (Required) To display headers in the table. */",
      "type": "ModusTableRowAction[]"
    },
    {
      "name": "rowActionsConfig",
      "description": "/**\n * @slot customFooter - Slot for custom footer.\n * @slot groupLeft - Slot for custom toolbar options added to the left.\n * @slot groupRight - Slot for custom toolbar options added to the right.\n */\n@Component({\n  tag: 'modus-table',\n  styleUrl: 'modus-table.scss',\n  shadow: true,\n})\nexport class ModusTable {\n  @Element() element: HTMLElement;\n\n  /** (Required) To display headers in the table. */",
      "type": "ModusTableRowActionConfig"
    },
    {
      "name": "rowsExpandable",
      "description": "/**\n * @slot customFooter - Slot for custom footer.\n * @slot groupLeft - Slot for custom toolbar options added to the left.\n * @slot groupRight - Slot for custom toolbar options added to the right.\n */\n@Component({\n  tag: 'modus-table',\n  styleUrl: 'modus-table.scss',\n  shadow: true,\n})\nexport class ModusTable {\n  @Element() element: HTMLElement;\n\n  /** (Required) To display headers in the table. */",
      "type": "this.pageSizeList[0]\n            : this.data.length,\n      })"
    },
    {
      "name": "rowSelection",
      "description": "/**\n * @slot customFooter - Slot for custom footer.\n * @slot groupLeft - Slot for custom toolbar options added to the left.\n * @slot groupRight - Slot for custom toolbar options added to the right.\n */\n@Component({\n  tag: 'modus-table',\n  styleUrl: 'modus-table.scss',\n  shadow: true,\n})\nexport class ModusTable {\n  @Element() element: HTMLElement;\n\n  /** (Required) To display headers in the table. */",
      "type": "{},\n  }"
    },
    {
      "name": "manualPaginationOptions",
      "description": "/**\n * @slot customFooter - Slot for custom footer.\n * @slot groupLeft - Slot for custom toolbar options added to the left.\n * @slot groupRight - Slot for custom toolbar options added to the right.\n */\n@Component({\n  tag: 'modus-table',\n  styleUrl: 'modus-table.scss',\n  shadow: true,\n})\nexport class ModusTable {\n  @Element() element: HTMLElement;\n\n  /** (Required) To display headers in the table. */",
      "type": "ModusTableManualPaginationOptions"
    },
    {
      "name": "manualSortingOptions",
      "description": "/**\n * @slot customFooter - Slot for custom footer.\n * @slot groupLeft - Slot for custom toolbar options added to the left.\n * @slot groupRight - Slot for custom toolbar options added to the right.\n */\n@Component({\n  tag: 'modus-table',\n  styleUrl: 'modus-table.scss',\n  shadow: true,\n})\nexport class ModusTable {\n  @Element() element: HTMLElement;\n\n  /** (Required) To display headers in the table. */",
      "type": "ModusTableManualSortingOptions"
    },
    {
      "name": "rowSelectionOptions",
      "description": "/**\n * @slot customFooter - Slot for custom footer.\n * @slot groupLeft - Slot for custom toolbar options added to the left.\n * @slot groupRight - Slot for custom toolbar options added to the right.\n */\n@Component({\n  tag: 'modus-table',\n  styleUrl: 'modus-table.scss',\n  shadow: true,\n})\nexport class ModusTable {\n  @Element() element: HTMLElement;\n\n  /** (Required) To display headers in the table. */",
      "type": "ModusTableRowSelectionOptions"
    },
    {
      "name": "showSortIconOnHover",
      "description": "/**\n * @slot customFooter - Slot for custom footer.\n * @slot groupLeft - Slot for custom toolbar options added to the left.\n * @slot groupRight - Slot for custom toolbar options added to the right.\n */\n@Component({\n  tag: 'modus-table',\n  styleUrl: 'modus-table.scss',\n  shadow: true,\n})\nexport class ModusTable {\n  @Element() element: HTMLElement;\n\n  /** (Required) To display headers in the table. */",
      "type": "this.showSortIconOnHover,\n      displayOptions: this.displayOptions,\n      toolbarOptions: this.toolbarOptions,\n      toolbar: this.toolbar,\n      summaryRow: this.summaryRow,\n      fullWidth: this.fullWidth,\n      maxHeight: this.maxHeight,\n      maxWidth: this.maxWidth,\n      frozenColumns: this.frozenColumns,\n      isColumnResizing: this.isColumnResizing,\n      tableCore: this.tableCore,\n      tableInstance: this.tableCore.getTableInstance(),\n      wrapText: this.wrapText,\n      onColumnsChange: this.onColumnsChange,\n      onColumnResizeChange: this.onColumnResizeChange,\n      onColumnReorderChange: this.onColumnReorderChange,\n      onDataChange: this.onDataChange,\n      onRowsExpandableChange: this.onRowsExpandableChange,\n      onRowSelectionOptionsChange: this.onRowSelectionOptionsChange,\n      onSortChange: this.onSortChange,\n      onToolbarOptionsChange: this.onToolbarOptionsChange,\n      getRowId: this.getRowId,\n      updateData: this.updateData.bind(this),\n      updateSelectedRows: this.updateSelectedRows.bind(this),\n      updateClickedRows: this.updateClickedRows.bind(this),\n      rowSelectionDisabled: this.rowSelectionDisabled,\n    }"
    },
    {
      "name": "sort",
      "description": "/**\n * @slot customFooter - Slot for custom footer.\n * @slot groupLeft - Slot for custom toolbar options added to the left.\n * @slot groupRight - Slot for custom toolbar options added to the right.\n */\n@Component({\n  tag: 'modus-table',\n  styleUrl: 'modus-table.scss',\n  shadow: true,\n})\nexport class ModusTable {\n  @Element() element: HTMLElement;\n\n  /** (Required) To display headers in the table. */",
      "type": "this.sort,\n      sortIconStyle: this.sortIconStyle,\n      componentId: this._id,\n      hover: this.hover,\n      pagination: this.pagination,\n      pageSizeList: this.pageSizeList,\n      manualPaginationOptions: this.manualPaginationOptions,\n      rowActions: this.getRowActionsWithOverflow(),\n      rowSelection: this.rowSelection,\n      rowSelectionOptions: this.rowSelectionOptions,\n      rowsExpandable: this.rowsExpandable,\n      columns: this.columns,\n      errors: this.errors,\n      columnReorder: this.columnReorder,\n      columnResize: this.columnResize,\n      rowSelectionChange: this.rowSelectionChange,\n      rowExpanded: this.rowExpanded,\n      rowActionClick: this.rowActionClick,\n      rowActionSize: this.rowActionsConfig?.width,\n      rowActionHeader: this.rowActionsConfig?.header,\n      sortChange: this.sortChange,\n      paginationChange: this.paginationChange,\n      columnSizingChange: this.columnSizingChange,\n      columnVisibilityChange: this.columnVisibilityChange,\n      columnOrderChange: this.columnOrderChange,\n      cellValueChange: this.cellValueChange,\n      cellLinkClick: this.cellLinkClick,\n      showSortIconOnHover: this.showSortIconOnHover,\n      displayOptions: this.displayOptions,\n      toolbarOptions: this.toolbarOptions,\n      toolbar: this.toolbar,\n      summaryRow: this.summaryRow,\n      fullWidth: this.fullWidth,\n      maxHeight: this.maxHeight,\n      maxWidth: this.maxWidth,\n      frozenColumns: this.frozenColumns,\n      isColumnResizing: this.isColumnResizing,\n      tableCore: this.tableCore,\n      tableInstance: this.tableCore.getTableInstance(),\n      wrapText: this.wrapText,\n      onColumnsChange: this.onColumnsChange,\n      onColumnResizeChange: this.onColumnResizeChange,\n      onColumnReorderChange: this.onColumnReorderChange,\n      onDataChange: this.onDataChange,\n      onRowsExpandableChange: this.onRowsExpandableChange,\n      onRowSelectionOptionsChange: this.onRowSelectionOptionsChange,\n      onSortChange: this.onSortChange,\n      onToolbarOptionsChange: this.onToolbarOptionsChange,\n      getRowId: this.getRowId,\n      updateData: this.updateData.bind(this),\n      updateSelectedRows: this.updateSelectedRows.bind(this),\n      updateClickedRows: this.updateClickedRows.bind(this),\n      rowSelectionDisabled: this.rowSelectionDisabled,\n    }"
    },
    {
      "name": "sortIconStyle",
      "description": "/**\n * @slot customFooter - Slot for custom footer.\n * @slot groupLeft - Slot for custom toolbar options added to the left.\n * @slot groupRight - Slot for custom toolbar options added to the right.\n */\n@Component({\n  tag: 'modus-table',\n  styleUrl: 'modus-table.scss',\n  shadow: true,\n})\nexport class ModusTable {\n  @Element() element: HTMLElement;\n\n  /** (Required) To display headers in the table. */",
      "type": "'alphabetical' | 'directional'"
    },
    {
      "name": "summaryRow",
      "description": "/**\n * @slot customFooter - Slot for custom footer.\n * @slot groupLeft - Slot for custom toolbar options added to the left.\n * @slot groupRight - Slot for custom toolbar options added to the right.\n */\n@Component({\n  tag: 'modus-table',\n  styleUrl: 'modus-table.scss',\n  shadow: true,\n})\nexport class ModusTable {\n  @Element() element: HTMLElement;\n\n  /** (Required) To display headers in the table. */",
      "type": "this.summaryRow,\n      fullWidth: this.fullWidth,\n      maxHeight: this.maxHeight,\n      maxWidth: this.maxWidth,\n      frozenColumns: this.frozenColumns,\n      isColumnResizing: this.isColumnResizing,\n      tableCore: this.tableCore,\n      tableInstance: this.tableCore.getTableInstance(),\n      wrapText: this.wrapText,\n      onColumnsChange: this.onColumnsChange,\n      onColumnResizeChange: this.onColumnResizeChange,\n      onColumnReorderChange: this.onColumnReorderChange,\n      onDataChange: this.onDataChange,\n      onRowsExpandableChange: this.onRowsExpandableChange,\n      onRowSelectionOptionsChange: this.onRowSelectionOptionsChange,\n      onSortChange: this.onSortChange,\n      onToolbarOptionsChange: this.onToolbarOptionsChange,\n      getRowId: this.getRowId,\n      updateData: this.updateData.bind(this),\n      updateSelectedRows: this.updateSelectedRows.bind(this),\n      updateClickedRows: this.updateClickedRows.bind(this),\n      rowSelectionDisabled: this.rowSelectionDisabled,\n    }"
    },
    {
      "name": "toolbar",
      "description": "/**\n * @slot customFooter - Slot for custom footer.\n * @slot groupLeft - Slot for custom toolbar options added to the left.\n * @slot groupRight - Slot for custom toolbar options added to the right.\n */\n@Component({\n  tag: 'modus-table',\n  styleUrl: 'modus-table.scss',\n  shadow: true,\n})\nexport class ModusTable {\n  @Element() element: HTMLElement;\n\n  /** (Required) To display headers in the table. */",
      "type": "this.toolbar,\n      summaryRow: this.summaryRow,\n      fullWidth: this.fullWidth,\n      maxHeight: this.maxHeight,\n      maxWidth: this.maxWidth,\n      frozenColumns: this.frozenColumns,\n      isColumnResizing: this.isColumnResizing,\n      tableCore: this.tableCore,\n      tableInstance: this.tableCore.getTableInstance(),\n      wrapText: this.wrapText,\n      onColumnsChange: this.onColumnsChange,\n      onColumnResizeChange: this.onColumnResizeChange,\n      onColumnReorderChange: this.onColumnReorderChange,\n      onDataChange: this.onDataChange,\n      onRowsExpandableChange: this.onRowsExpandableChange,\n      onRowSelectionOptionsChange: this.onRowSelectionOptionsChange,\n      onSortChange: this.onSortChange,\n      onToolbarOptionsChange: this.onToolbarOptionsChange,\n      getRowId: this.getRowId,\n      updateData: this.updateData.bind(this),\n      updateSelectedRows: this.updateSelectedRows.bind(this),\n      updateClickedRows: this.updateClickedRows.bind(this),\n      rowSelectionDisabled: this.rowSelectionDisabled,\n    }"
    },
    {
      "name": "toolbarOptions",
      "description": "/**\n * @slot customFooter - Slot for custom footer.\n * @slot groupLeft - Slot for custom toolbar options added to the left.\n * @slot groupRight - Slot for custom toolbar options added to the right.\n */\n@Component({\n  tag: 'modus-table',\n  styleUrl: 'modus-table.scss',\n  shadow: true,\n})\nexport class ModusTable {\n  @Element() element: HTMLElement;\n\n  /** (Required) To display headers in the table. */",
      "type": "ModusTableToolbarOptions | null"
    },
    {
      "name": "defaultSort",
      "description": "/**\n * @slot customFooter - Slot for custom footer.\n * @slot groupLeft - Slot for custom toolbar options added to the left.\n * @slot groupRight - Slot for custom toolbar options added to the right.\n */\n@Component({\n  tag: 'modus-table',\n  styleUrl: 'modus-table.scss',\n  shadow: true,\n})\nexport class ModusTable {\n  @Element() element: HTMLElement;\n\n  /** (Required) To display headers in the table. */",
      "type": "ModusTableColumnSort"
    },
    {
      "name": "wrapText",
      "description": "/**\n * @slot customFooter - Slot for custom footer.\n * @slot groupLeft - Slot for custom toolbar options added to the left.\n * @slot groupRight - Slot for custom toolbar options added to the right.\n */\n@Component({\n  tag: 'modus-table',\n  styleUrl: 'modus-table.scss',\n  shadow: true,\n})\nexport class ModusTable {\n  @Element() element: HTMLElement;\n\n  /** (Required) To display headers in the table. */",
      "type": "this.wrapText,\n      onColumnsChange: this.onColumnsChange,\n      onColumnResizeChange: this.onColumnResizeChange,\n      onColumnReorderChange: this.onColumnReorderChange,\n      onDataChange: this.onDataChange,\n      onRowsExpandableChange: this.onRowsExpandableChange,\n      onRowSelectionOptionsChange: this.onRowSelectionOptionsChange,\n      onSortChange: this.onSortChange,\n      onToolbarOptionsChange: this.onToolbarOptionsChange,\n      getRowId: this.getRowId,\n      updateData: this.updateData.bind(this),\n      updateSelectedRows: this.updateSelectedRows.bind(this),\n      updateClickedRows: this.updateClickedRows.bind(this),\n      rowSelectionDisabled: this.rowSelectionDisabled,\n    }"
    },
    {
      "name": "rowSelectionDisabled",
      "description": "/**\n * @slot customFooter - Slot for custom footer.\n * @slot groupLeft - Slot for custom toolbar options added to the left.\n * @slot groupRight - Slot for custom toolbar options added to the right.\n */\n@Component({\n  tag: 'modus-table',\n  styleUrl: 'modus-table.scss',\n  shadow: true,\n})\nexport class ModusTable {\n  @Element() element: HTMLElement;\n\n  /** (Required) To display headers in the table. */",
      "type": ": (row: Row<unknown>)"
    }
  ],
  "events": [],
  "slots": [
    "groupLeft",
    "groupRight",
    "customFooter"
  ],
  "default_values": {
    "columns": "this.columns?.map((column) => ({\n      ...column,\n      sortingFn: column.sortingFn ?? 'alphanumeric',\n    }))",
    "columnResize": "false",
    "columnReorder": "false",
    "data": "> this.getRowId(originalRow, index, parent),\n      // setData: (updater: Updater<unknown[]>) => this.updateData(updater),\n      setExpanded: (updater: Updater<ExpandedState>) => this.updateTableCore(updater, EXPANDED_STATE_KEY, this.rowExpanded),\n      setSorting: (updater: Updater<SortingState>) => this.updateTableCore(updater, SORTING_STATE_KEY, this.sortChange),\n      setRowSelection: (updater: Updater<RowSelectionState>) => this.updateRowSelection(updater),\n      setPagination: (updater: Updater<PaginationState>) =>\n        this.updateTableCore(updater, PAGINATION_STATE_KEY, this.paginationChange),\n      setColumnSizing: (updater: Updater<ColumnSizingState>) =>\n        this.updateTableCore(updater, COLUMN_SIZING_STATE_KEY, this.columnSizingChange),\n      setColumnSizingInfo: (updater: Updater<ColumnSizingInfoState>) => this.updateColumnSizingInfo(updater),\n      setColumnVisibility: (updater: Updater<VisibilityState>) =>\n        this.updateTableCore(updater, COLUMN_VISIBILITY_STATE_KEY, this.columnVisibilityChange),\n      setColumnOrder: (updater: Updater<ColumnOrderState>) => {\n        this.updateTableCore(updater, COLUMN_ORDER_STATE_KEY)",
    "density": "'relaxed'",
    "displayOptions": "{\n    borderless: false,\n    cellBorderless: false,\n    cellVerticalBorderless: false,\n  }",
    "hover": "false",
    "fullWidth": "false",
    "maxHeight": "{this.element}\n              summary-row={this.summaryRow}\n              cell-borderless={cellBorderless}></modus-table-filler-column>\n          )}\n        </div>\n        <slot name=\"customFooter\" />\n      </Fragment>\n    )",
    "maxWidth": "{this.itemDragState} />\n          <ModusTableColumnDropIndicator position={this.itemDragState?.dropIndicator} />\n          <modus-table-row-actions-menu context={this._context}></modus-table-row-actions-menu>\n        </div>\n      </Host>\n    )",
    "pageSizeList": "PAGINATION_DEFAULT_SIZES",
    "pagination": "{\n        ...this.tableState.pagination,\n        pageSize: this.manualPaginationOptions.currentPageSize,\n      }",
    "rowActions": "[]",
    "rowActionsConfig": "> ({ ...action, isOverflow: true }))",
    "rowsExpandable": "false",
    "rowSelection": "false",
    "manualPaginationOptions": "{\n        ...this.tableState.pagination,\n        pageSize: this.manualPaginationOptions.currentPageSize,\n      }",
    "manualSortingOptions": "{ ...newVal }",
    "rowSelectionOptions": "{\n    multiple: false,\n    subRowSelection: false,\n  }",
    "showSortIconOnHover": "false",
    "sort": "false",
    "sortIconStyle": "'alphabetical'",
    "summaryRow": "false",
    "toolbar": "false",
    "toolbarOptions": "null",
    "defaultSort": "> this.getRowId(originalRow, index, parent),\n      // setData: (updater: Updater<unknown[]>) => this.updateData(updater),\n      setExpanded: (updater: Updater<ExpandedState>) => this.updateTableCore(updater, EXPANDED_STATE_KEY, this.rowExpanded),\n      setSorting: (updater: Updater<SortingState>) => this.updateTableCore(updater, SORTING_STATE_KEY, this.sortChange),\n      setRowSelection: (updater: Updater<RowSelectionState>) => this.updateRowSelection(updater),\n      setPagination: (updater: Updater<PaginationState>) =>\n        this.updateTableCore(updater, PAGINATION_STATE_KEY, this.paginationChange),\n      setColumnSizing: (updater: Updater<ColumnSizingState>) =>\n        this.updateTableCore(updater, COLUMN_SIZING_STATE_KEY, this.columnSizingChange),\n      setColumnSizingInfo: (updater: Updater<ColumnSizingInfoState>) => this.updateColumnSizingInfo(updater),\n      setColumnVisibility: (updater: Updater<VisibilityState>) =>\n        this.updateTableCore(updater, COLUMN_VISIBILITY_STATE_KEY, this.columnVisibilityChange),\n      setColumnOrder: (updater: Updater<ColumnOrderState>) => {\n        this.updateTableCore(updater, COLUMN_ORDER_STATE_KEY)",
    "wrapText": "false",
    "rowSelectionDisabled": "> boolean"
  },
  "documentation": "\n\n--- modus-table-storybook-docs.mdx ---\n\nimport { Story } from '@storybook/addon-docs';\n\n# Table\n\n---\n\n[Modus Table](https://modus.trimble.com/components/tables/) web components are wrappers around the HTML table element. Modus Table is reusable and customizable UI element that can be used to display data in a tabular format. They are referenced using the `<modus-table>` custom HTML element.\n\n## Overview\n\n- [Default](#default)\n- [Hover](#hover)\n- [Custom Cell](#custom-cell)\n- [Borderless](#borderless)\n- [Sorting](#sorting)\n- [Manual Sorting](#manual-sorting)\n- [Custom Sorting](#custom-sorting)\n- [Value Formatter](#value-formatter)\n- [Hyperlink](#hyperlink)\n- [Badge](#badge)\n- [Column Resize](#column-resize)\n- [Column Reorder](#column-reorder)\n- [Pagination](#pagination)\n- [Manual Pagination](#manual-pagination)\n- [Summary Row](#summary-row)\n- [Column Visibility](#column-visibility)\n- [Expandable Rows](#Expandable-rows)\n- [Checkbox Row Selection](#checkbox-row-selection)\n- [Disable selection on certain rows](#disable-selection-on-certain-rows)\n- [Row Actions](#row-actions)\n- [Inline Editing](#inline-editing)\n- [Inline Editing - Autocomplete with Dynamic Filtering](#inline-editing---autocomplete-with-dynamic-filtering)\n- [Inline Editing - Disabling a Cell or Row](#inline-editing---disabling-a-cell-or-row)\n- [Types](#types)\n- [Accessibility](#accessibility)\n- [Properties](#properties)\n- [Events](#events)\n- [Slot](#slot)\n- [Methods](#methods)\n- [Text Wrapping](#text-wrapping)\n- [Upcoming features](#upcoming-features-)\n\n---\n\n### Default\n\nBasic table that outputs data in tabular format after accepting `data` and `column` as input.\n\n<Story id=\"components-table--default\" height={'350px'} />\n\n```html\n  <div style=\"width: 950px\">\n    <modus-table hover=\"false\" sort=\"false\" />\n  </div>\n<script>\n  document.querySelector('modus-table').columns = [\n    {\n      header: 'First Name',\n      accessorKey: 'firstName',\n      id: 'first-name',\n      dataType: 'text',\n    },\n    {\n      header: 'Last Name',\n      accessorKey: 'lastName',\n      id: 'last-name',\n      dataType: 'text',\n    },\n    { header: 'Age', accessorKey: 'age', id: 'age', dataType: 'integer' },\n    {\n      header: 'Visits',\n      accessorKey: 'visits',\n      id: 'visits',\n      dataType: 'integer',\n    },\n    { header: 'Status', accessorKey: 'status', id: 'status', dataType: 'text' },\n    {\n      header: 'Profile Progress',\n      accessorKey: 'progress',\n      id: 'progress',\n      dataType: 'integer',\n    },\n    {\n      header: 'Created At',\n      accessorKey: 'createdAt',\n      id: 'createdAt',\n      dataType: 'date',\n    },\n  ];\n  document.querySelector('modus-table').data = [\n    {\n      firstName: 'Gordon',\n      lastName: 'Lemke',\n      age: 40,\n      visits: 434,\n      progress: 97,\n      status: 'single',\n      createdAt: '2002-11-21T12:48:51.739Z',\n    },\n    {\n      firstName: 'Elliott',\n      lastName: 'Bosco',\n      age: 21,\n      visits: 348,\n      progress: 60,\n      status: 'complicated',\n      createdAt: '2012-02-08T12:14:22.776Z',\n    },\n    {\n      firstName: 'Agnes',\n      lastName: 'Breitenberg',\n      age: 34,\n      visits: 639,\n      progress: 84,\n      status: 'single',\n      createdAt: '1995-04-07T07:24:57.577Z',\n    },\n    {\n      firstName: 'Nicolette',\n      lastName: 'Stamm',\n      age: 13,\n      visits: 518,\n      progress: 28,\n      status: 'relationship',\n      createdAt: '2009-07-28T14:29:51.505Z',\n    },\n  ];\n</script>\n</html>\n```\n\n### Hover\n\nThis displays the highlighted row where the cursor is currently located.\n\n- Hover is disable by default, set `hover` to `true` to enable hover.\n\n### Custom Cell\n\nUsers can input `HTML` data to display any kind of Custom data in the table cells.\n\n- Pass the data in `HTML` format and specify `custom` as the column type.\n\n```html\n<div style=\"width: 950px\">\n  <modus-table hover=\"false\" sort=\"false\" />\n</div>\n<script>\n  document.querySelector('modus-table').columns = [\n    {\n      header: 'First Name',\n      accessorKey: 'firstName',\n      id: 'first-name',\n      dataType: 'text',\n    },\n    {\n      header: 'Last Name',\n      accessorKey: 'lastName',\n      id: 'last-name',\n      dataType: 'text',\n    },\n    { header: 'Age', accessorKey: 'age', id: 'age', dataType: 'integer' },\n    {\n      header: 'Visits',\n      accessorKey: 'visits',\n      id: 'visits',\n      dataType: 'integer',\n    },\n    { header: 'Status', accessorKey: 'status', id: 'status', dataType: 'text' },\n    {\n      header: 'Profile Progress',\n      accessorKey: 'progress',\n      id: 'progress',\n      dataType: 'integer',\n    },\n    {\n      header: 'Created At',\n      accessorKey: 'createdAt',\n      id: 'createdAt',\n      dataType: 'date',\n    },\n    {\n      header: 'Custom',\n      accessorKey: 'custom',\n      id: 'custom',\n      dataType: 'custom',\n    },\n  ];\n  document.querySelector('modus-table').data = [\n    {\n      firstName: 'Gordon',\n      lastName: 'Lemke',\n      age: 40,\n      visits: 434,\n      progress: 97,\n      status: 'single',\n      createdAt: '2002-11-21T12:48:51.739Z',\n      custom: \"<modus-button color='primary'>Custom1</modus-button>\",\n    },\n    {\n      firstName: 'Elliott',\n      lastName: 'Bosco',\n      age: 21,\n      visits: 348,\n      progress: 60,\n      status: 'complicated',\n      createdAt: '2012-02-08T12:14:22.776Z',\n      custom: \"<modus-button color='secondary'>Custom2</modus-button>\",\n    },\n    {\n      firstName: 'Agnes',\n      lastName: 'Breitenberg',\n      age: 34,\n      visits: 639,\n      progress: 84,\n      status: 'single',\n      createdAt: '1995-04-07T07:24:57.577Z',\n      custom: \"<modus-button color='tertiary'>Custom3</modus-button>\",\n    },\n    {\n      firstName: 'Nicolette',\n      lastName: 'Stamm',\n      age: 13,\n      visits: 518,\n      progress: 28,\n      status: 'relationship',\n      createdAt: '2009-07-28T14:29:51.505Z',\n      custom: \"<modus-button color='danger'>Custom4</modus-button>\",\n    },\n  ];\n</script>\n```\n\n### Borderless\n\nTable has two views one with border and another is borderless.\n\n- Table with a border is shown by default. There are three options under `displayOptions`: `borderless` , `cellborderless` and `cellVerticalBorderless`.\n- To eliminate the outer table border, set `borderless` to `true`.\n- Set `cellborderless` to `true` remove the innter table border i.e. for the border for cells.\n- Set `cellVerticalBorderless` to `true` to remove the vertical border for cells. When both `cellborderless` and `cellVerticalBorderless` are set to `true`, `cellBorderless` will take precedence.\n\n### Sorting\n\nUsers can arrange data in a table by sorting it in either ascending or descending order. The sort icon will be visible when enabled.\n\n- Sorting is disabled by default. The way to activate it is to set `sort` to `true`.\n- Every column has sorting turned on by default. Setting `enableSorting` `true` or `false` for a certain column will enable or disable it.\n- When enabled, the sort icon's initial click will sort in ascending order, while its second click will sort in descending order.\n- Set `showSortIconOnHover` to `true` to enable sort on hover as well.\n- A default sorting can be set by setting `defaultSort` with the column `id` and sorting direction.\n\n### Manual Sorting\n\nManual Sorting allows users to handle sorting in server-side mode.\n\n- Manual Sorting can be enabled using the `manualSortingOptions` prop.\n- The `currentSortingState` represents how the data is sorted (column and direction).\n\n### Custom Sorting\n\nCustom sorting allows you to define your own logic for sorting table data.Custom sorting can be implemented by defining a sorting function `sortingFn` and assigning it to the relevant columns in your table configuration.\n\nA custom sorting function receives two arguments: the row values for the column being sorted, and the column id.\n\n```javascript\n\n\nconst myCustomSortingFn(rowA, rowB, columnId) => {\n  return //-1, 0, or 1 - access any row data using rowA.original and rowB.original\n}\n\n\n```\n\nIt should return -1 if the first argument should come before the second, 1 if it should come after, or 0 if they are equal.\n\n```javascript\nconst columns = [\n  {\n    header: () => 'Name',\n    accessorKey: 'name',\n    sortingFn: 'alphanumeric', // use built-in sorting function by name\n  },\n  {\n    header: () => 'Age',\n    accessorKey: 'age',\n    sortingFn: 'myCustomSortingFn', // use custom global sorting function\n  },\n  {\n    header: () => 'Birthday',\n    accessorKey: 'birthday',\n    sortingFn: 'datetime', // recommended for date columns\n  },\n  {\n    header: () => 'Profile',\n    accessorKey: 'profile',\n    // use custom sorting function directly\n    sortingFn: (rowA, rowB, columnId) => {\n      return rowA.original.someProperty - rowB.original.someProperty;\n    },\n  },\n];\n```\n\nCustom Sorting Function\n\n```javascript\nconst myCustomSortingFn: SortingFn<Person> = (rowA, rowB, _columnId) => {\n  const statusA = rowA.original.status\n  const statusB = rowB.original.status\n  const statusOrder = ['single', 'complicated', 'relationship']\n  return statusOrder.indexOf(statusA) - statusOrder.indexOf(statusB)\n}\n\n```\n\nThe `myCustomSortingFn` function sorts rows based on the status property of each row's data. The status property can have one of three values: 'single', 'complicated', or 'relationship'. The function ensures that rows are sorted in the order specified by the statusOrder array.\n\n### Value Formatter\n\nUser can take the data of a cell and apply any string-based formatting logic.\n\n- Need to pass a custom formatter function that returns a string, to the `cell` property on the `columns` array, example, `cell: (props) => formatCurrency(props)`.\n\n```javascript\n// e.g. for currency formatting `cell: (props) => formatCurrency(props)`\nfunction formatCurrency(props) {\n  const value = props.cell.getValue();\n  return '$' + formatNumber(value);\n}\n\n// e.g. for decimal number formatting `cell: (props) =>formatNumber(props)`\nfunction formatNumber(props) {\n  const value = props.cell.getValue();\n  return Number(value)\n    .toFixed(2)\n    .replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\n}\n\n// e.g. for date formatting `cell: (props) => formatDate(props)`\nfunction formatDate(props) {\n  const value = props.cell.getValue();\n  const date = new Date(value);\n  return (\n    (date.getMonth() > 8 ? date.getMonth() + 1 : '0' + (date.getMonth() + 1)) +\n    '/' +\n    (date.getDate() > 9 ? date.getDate() : '0' + date.getDate()) +\n    '/' +\n    date.getFullYear()\n  );\n}\n\n// NOTE: One can use their own custom functions to format data as per their requirements.\n```\n\n### Hyperlink\n\nUser can display hyperlink in a table column.\n\n- Pass the data in `ModusTableCellLink` format and specify `ModusTableColumnDataType.Link` as the column type.\n- `_type: ModusTableColumnDataType.Link` is used to override the column data type in order to display a hyperlink only in a specific cell and not on the entire column.\n- As a link is an object, the default sorting is ineffective. We must pass `sortingFn:'sortForHyperlink'` along with the column information in order to sort a column with the `ModusTableCellLink` datatype or if '\\_type' is used to override the datatype.\n\n### Badge\n\nUser can display badge in a table column.\n\n- Pass the data in `ModusTableCellBadge` format and specify `ModusTableCellBadge.badge` as the column type.\n- As a badge is an object, the default sorting is ineffective. We must pass `sortingFn:'sortForBadge'` along with the column information in order to sort a column with the `ModusTableCellBadge` datatype or if '\\_type' is used to override the datatype.\n\n```html\n<div style=\"width: 950px\">\n   <modus-table column-resize=\"true\" />\n</div>\n <script>\n    document.querySelector('modus-table').columns = [\n      {\n        header: 'First Name',\n        accessorKey: 'firstName',\n        id: 'first-name',\n        dataType: 'text',\n        size: 150,\n        minSize: 80\n      },\n      {\n        header: 'Last Name',\n        accessorKey: 'lastName',\n        id: 'last-name',\n        dataType: 'text',\n        size: 150,\n        minSize: 80\n      },\n      {\n        header: 'Age',\n        accessorKey: 'age',\n        id: 'age',\n        dataType: 'integer',\n        size: 60,\n        minSize: 60\n      },\n      {\n        header: 'Visits',\n        accessorKey: 'visits',\n        id: 'visits',\n        dataType: 'integer',\n        maxSize: 80,\n        minSize: 80,\n        enableResizing: false,\n      },\n      {\n        header: 'Priority',\n        accessorKey: 'priority',\n        id: 'priority',\n        dataType: 'badge',\n        minSize: 80\n      },\n      {\n        header: 'Profile Progress',\n        accessorKey: 'progress',\n        id: 'progress',\n        dataType: 'integer',\n        minSize: 100,\n      },\n      {\n        header: 'Created At',\n        accessorKey: 'createdAt',\n        id: 'createdAt',\n        dataType: 'date',\n        size: 210,\n        minSize: 100,\n      },\n    ];\n    document.querySelector('modus-table').data = [\n      {\n        firstName: 'Gordon',\n        lastName: 'Lemke',\n        age: 40,\n        visits: 434,\n        progress: 97,\n        priority: {\n          size: 'medium',\n          type: 'counter',\n          text: 'Low',\n          color: 'danger'\n        },\n        createdAt: '2002-11-21T12:48:51.739Z',\n      },\n      ...\n    ];\n  </script>\n</html>\n```\n\n### Column Resize\n\nThe column sizing feature allows users to dynamically change the width of all columns by dragging the column headers. When hovering above the dividing line between two columns, there is a visual indicator that shows the column is adjustable.\n\n- By default, the table will get a fixed size by calculating the sum of the sizes of all columns and resizing a column will not impact others.\n- By setting `fullWidth` to true, a column can be resized with table responsiveness and other columns will be adjusted to fit within the confines of the table.\n- Optionally you can specify the width of each column using `size`, `minSize` and `maxSize` to limit the resizing of a column to a specific value.\n\n```html\n<div style=\"width: 950px\">\n   <modus-table column-resize=\"true\" />\n</div>\n <script>\n    document.querySelector('modus-table').columns = [\n      {\n        header: 'First Name',\n        accessorKey: 'firstName',\n        id: 'first-name',\n        dataType: 'text',\n        size: 150,\n        minSize: 80\n      },\n      {\n        header: 'Last Name',\n        accessorKey: 'lastName',\n        id: 'last-name',\n        dataType: 'text',\n        size: 150,\n        minSize: 80\n      },\n      {\n        header: 'Age',\n        accessorKey: 'age',\n        id: 'age',\n        dataType: 'integer',\n        size: 60,\n        minSize: 60\n      },\n      {\n        header: 'Visits',\n        accessorKey: 'visits',\n        id: 'visits',\n        dataType: 'integer',\n        maxSize: 80,\n        minSize: 80,\n        enableResizing: false,\n      },\n      {\n        header: 'Status',\n        accessorKey: 'status',\n        id: 'status',\n        dataType: 'text',\n        minSize: 80\n      },\n      {\n        header: 'Profile Progress',\n        accessorKey: 'progress',\n        id: 'progress',\n        dataType: 'integer',\n        minSize: 100,\n      },\n      {\n        header: 'Created At',\n        accessorKey: 'createdAt',\n        id: 'createdAt',\n        dataType: 'date',\n        size: 210,\n        minSize: 100,\n      },\n    ];\n    document.querySelector('modus-table').data = [\n      {\n        firstName: 'Gordon',\n        lastName: 'Lemke',\n        age: 40,\n        visits: 434,\n        progress: 97,\n        status: 'single',\n        createdAt: '2002-11-21T12:48:51.739Z',\n      },\n      ...\n    ];\n  </script>\n</html>\n```\n\n### Column Reorder\n\nUsers can rearrange the column headers.\n\n- Column reorder is disabled by default. The way to activate it is to set `columnReorder` to `true`.\n\n### Pagination\n\nPagination allows users to navigate between pages\n\n- Modus Table uses `modus-pagination` component to navigate between pages.\n- Pagination can be enabled using the `pagination` prop. The `pageSizeList` takes an array for page size options.\n\n### Manual Pagination\n\nEnabling manual pagination mode for a table allows users to manually paginate rows instead of having the table automatically paginate them. Users will need to pass details such as the current page index, page size, page count, and total record to paginate the rows. This feature is particularly useful when implementing server-side pagination.\n\n- Manual Pagination can be enabled using the `manualPaginationOptions` prop.\n- The `currentPageIndex` takes a number to specify the current page number, indicating which page should appear as selected from the server side.\n- The `currentPageSize` takes a number to specify the current page view number, determining how many records the table will display from the server side.\n- The `pageCount` takes a number to specify the total number of pages, in order to display the corresponding number of pages in the table.\n- The `totalRecords` takes a number to specify the total number of records, in order to display the total count results in the table.\n\n### Summary Row\n\nUser can opt for this summary row, which can be used as footer or a row to view total of column data.\n\n- Summary row is disabled by default. Set `summary-row` to `true` to enable it.\n- Pass any text in `footer` property of `columns` to be display in the summary row.\n- Set `showTotal` as `true` in the `columns` array for the specific column to display the total value that column.\n\n### Column Visibility\n\nA toolbar is used to perform operations like hiding/showing the columns. It is enabled by `toolbar` and is shown above the table. By setting `toolbarOptions.columnsVisibility` a meatball icon appears at the right corner, and clicking on it shows a dropdown menu with columns for selection. Additionally, users can use `slot='groupLeft'` and `slot='groupRight'` to add custom content to the toolbar.\n\n```html\n<div style=\"width: 950px\">\n   <modus-table\n      hover=\"true\"\n      sort=\"true\"\n      column-resize=\"true\"\n      pagination=\"true\"\n      show-sort-icon-hover=\"true\"\n      toolbar=\"true\" />\n</div>\n <script>\n    document.querySelector('modus-table').toolbarOptions = {\n        columnsVisibility: {\n          title: '',\n          requiredColumns: ['first-name'],\n          hiddenColumns: ['last-name']\n        }\n      };\n    document.querySelector('modus-table').columns = [\n      {\n        header: 'First Name',\n        accessorKey: 'firstName',\n        id: 'first-name',\n        dataType: 'text',\n        size: 150,\n        minSize: 80\n      },\n      {\n        header: 'Last Name',\n        accessorKey: 'lastName',\n        id: 'last-name',\n        dataType: 'text',\n        size: 150,\n        minSize: 80\n      },\n      ...\n    ];\n    document.querySelector('modus-table').data = [\n      {\n        firstName: 'Gordon',\n        lastName: 'Lemke',\n        age: 40,\n        visits: 434,\n        progress: 97,\n        status: 'single',\n        createdAt: '2002-11-21T12:48:51.739Z',\n      },\n      ...\n    ];\n  </script>\n</html>\n```\n\n### Expandable Rows\n\nUser can expand rows to display as child/sub row data.\n\n- Expandable row is disabled by default. Set `rowsExpandable` to `true` to enable it.\n- Pass data to `subRows` property in `columns`.\n\n### Checkbox Row Selection\n\nTo select rows, users can use the checkbox provided on each row.The Modus table uses the `rowSelectionOptions` to configure the selection behavior. When the `multiple` setting is set to false, only one row can be selected at a time. However, this can be adjusted to allow multiple row selections by modifying the `rowSelectionOptions`.\n\n- To enable multiple row selection, set `multiple` to `true`.\n- Sub-rows will also be selected if the parent is selected by setting `subRowSelection` to `true`.\n- To load the table with pre selected rows, set preSelectedRows to a list of row ids. **Row ids default to the row index, but can also be set by passing an id value in data.**\n\n### Disable selection on certain rows\n\nUse the `rowSelectionDisabled` prop to disable row selection for specific rows in the table.The `rowSelectionDisabled` prop accepts a function that is called for each row. This function should return a boolean indicating whether the row should have its selection disabled.\n\n```javascript\ndocument.querySelector('modus-table').columns = [\n  {\n    header: 'First Name',\n    accessorKey: 'firstName',\n    id: 'first-name',\n    dataType: 'text',\n  },\n  {\n    header: 'Last Name',\n    accessorKey: 'lastName',\n    id: 'last-name',\n    dataType: 'text',\n  },\n  { header: 'Age', accessorKey: 'age', id: 'age', dataType: 'integer' },\n  {\n    header: 'Visits',\n    accessorKey: 'visits',\n    id: 'visits',\n    dataType: 'integer',\n  },\n  { header: 'Status', accessorKey: 'status', id: 'status', dataType: 'text' },\n  {\n    header: 'Profile Progress',\n    accessorKey: 'progress',\n    id: 'progress',\n    dataType: 'integer',\n  },\n  {\n    header: 'Created At',\n    accessorKey: 'createdAt',\n    id: 'createdAt',\n    dataType: 'date',\n  },\n];\ndocument.querySelector('modus-table').data = [\n  {\n    firstName: 'Gordon',\n    lastName: 'Lemke',\n    age: 40,\n    visits: 434,\n    progress: 97,\n    status: 'active',\n    createdAt: '2002-11-21T12:48:51.739Z',\n  },\n  {\n    firstName: 'Elliott',\n    lastName: 'Bosco',\n    age: 21,\n    visits: 348,\n    progress: 60,\n    status: 'Inactive',\n    createdAt: '2012-02-08T12:14:22.776Z',\n  },\n  {\n    firstName: 'Agnes',\n    lastName: 'Breitenberg',\n    age: 34,\n    visits: 639,\n    progress: 84,\n    status: 'active',\n    createdAt: '1995-04-07T07:24:57.577Z',\n  },\n  {\n    firstName: 'Nicolette',\n    lastName: 'Stamm',\n    age: 13,\n    visits: 518,\n    progress: 28,\n    status: 'Inactive',\n    createdAt: '2009-07-28T14:29:51.505Z',\n  },\n];\n\ndocument.querySelector('modus-table').rowSelectionDisabled = (row) => {\n  // Disable row selection for rows where the status is 'Inactive'\n  return row.original.status === 'Inactive';\n};\n```\n\n### Inline Editing\n\nTo enable Cell Editing for a Column use the `cellEditable` property on the Column object. The component renders a text box by default based on column's `dataType`. To render a select, use the `cellEditorType` property on the Column object. The `cellEditorArgs` property can be used to pass additional arguments to the editor. After editing a cell, the table automatically updates the `data` and emits a `cellValueChanged` event.\nNote: If rows are nested, the table will be able to save the changes up to 2 levels of nested data.\nRefer to the [Accessibility](#accessibility) section for how to use keyboard for inline editing.\n\n```javascript\n {\n    header: 'Status',\n    accessorKey: 'status',\n    id: 'status',\n    dataType: 'text',\n    minSize: 80,\n    cellEditable:true,\n    cellEditorType: 'select',\n    cellEditorArgs: {\n      options:[\n      { display: 'Verified' },\n      { display: 'Pending' },\n      { display: 'Rejected' },\n      ]\n    },\n  },\n  {\n  header: 'Priority',\n  accessorKey: 'priority',\n  id: 'priority',\n  dataType: 'badge',\n  cellEditable: true,\n  cellEditorType: 'autocomplete',\n  cellEditorArgs: {\n    options: [\n      { size: 'medium', type: 'counter', text: 'High', color: 'success' },\n      { size: 'medium', type: 'counter', text: 'Low', color: 'danger' },\n      { size: 'medium', type: 'counter', text: 'Medium', color: 'warning' },\n    ]\n  },\n},\n{\n  header: 'Email',\n  accessorKey: 'email',\n  id: 'email',\n  dataType: 'link',\n  size: 230,\n  minSize: 80,\n  cellEditable: true,\n  cellEditorType: 'autocomplete',\n  cellEditorArgs: {\n    options: [\n      { display: 'Google', url: 'https://www.google.com' },\n      { display: 'Yahoo', url: 'https://www.yahoo.com' },\n      { display: 'Bing', url: 'https://www.bing.com' },\n    ]\n  },\n},\n{\n  header: 'Priority',\n  accessorKey: 'priority',\n  id: 'priority',\n  dataType: 'badge',\n  cellEditable: true,\n  cellEditorType: 'select',\n  cellEditorArgs: {\n    options: [\n      { size: 'medium', type: 'counter', display: 'High', color: 'success' },\n      { size: 'medium', type: 'counter', display: 'Low', color: 'danger' },\n      { size: 'medium', type: 'counter', display: 'Medium', color: 'warning' },\n    ]\n  },\n},\n{\n  header: 'Email',\n  accessorKey: 'email',\n  id: 'email',\n  dataType: 'link',\n  size: 230,\n  minSize: 80,\n  cellEditable: true,\n  cellEditorType: 'select',\n  cellEditorArgs: {\n    options: [\n      { display: 'Google', url: 'https://www.google.com' },\n      { display: 'Yahoo', url: 'https://www.yahoo.com' },\n      { display: 'Bing', url: 'https://www.bing.com' },\n    ]\n  },\n},\n{\n  header: 'Date',\n  accessorKey: 'date',\n  id: 'date',\n  dataType: 'date',\n  cellEditable: true,\n  cellEditorType: 'date',\n},\n\n```\n\n### Inline Editing - Autocomplete with Dynamic Filtering\n\nThis feature extends support for dynamic options within the table's autocomplete editor. Consumers can implement custom/dynamic filtering using the `filterOptions` function, the loading state is handled internally.\n\n```javascript\nconst options = ['Mickey', 'Bugs', 'Homer', 'Fred', 'Daffy'];\nconst dynamicFilterOptions = ['Scooby', 'Tom', 'Jerry'];\n\nconst table = document.querySelector('modus-table');\ntable.columns = [\n  {\n    header: 'First Name',\n    accessorKey: 'firstName',\n    id: 'first-name',\n    dataType: 'text',\n    cellEditable: true,\n    cellEditorType: 'autocomplete', // Autocomplete input type\n    cellEditorArgs: {\n      filterOptions: filterDynamicOptions, // Function to dynamically filter options\n      options: options, // Default options\n    },\n  },\n  {\n    header: 'Status',\n    accessorKey: 'status',\n    id: 'status',\n    dataType: 'text',\n    minSize: 80,\n    cellEditable: true,\n    cellEditorType: 'select',\n    cellEditorArgs: {\n      options: [{ display: 'Verified' }, { display: 'Pending' }, { display: 'Rejected' }],\n    },\n  },\n  {\n    header: 'Priority',\n    accessorKey: 'priority',\n    id: 'priority',\n    dataType: 'badge',\n    cellEditable: true,\n    cellEditorType: 'select',\n    cellEditorArgs: {\n      options: [\n        { size: 'medium', type: 'counter', display: 'High', color: 'success' },\n        { size: 'medium', type: 'counter', display: 'Low', color: 'danger' },\n        { size: 'medium', type: 'counter', display: 'Medium', color: 'warning' },\n      ],\n    },\n  },\n  {\n    header: 'Email',\n    accessorKey: 'email',\n    id: 'email',\n    dataType: 'link',\n    size: 230,\n    minSize: 80,\n    cellEditable: true,\n    cellEditorType: 'select',\n    cellEditorArgs: {\n      options: [\n        { display: 'Google', url: 'https://www.google.com' },\n        { display: 'Yahoo', url: 'https://www.yahoo.com' },\n        { display: 'Bing', url: 'https://www.bing.com' },\n      ],\n    },\n  },\n  {\n    header: 'Date',\n    accessorKey: 'date',\n    id: 'date',\n    dataType: 'date', // Date type column\n    cellEditable: true,\n    cellEditorType: 'date',\n  },\n];\n\ntable.data = [\n  {\n    firstName: 'John',\n    status: 'Verified',\n    email: { display: 'Google', url: 'https://www.google.com' },\n    priority: { size: 'medium', type: 'counter', display: 'High', color: 'success' },\n    date: '2022-01-01',\n  },\n  {\n    firstName: 'Jane',\n    status: 'Pending',\n    email: { display: 'Yahoo', url: 'https://www.yahoo.com' },\n    priority: { size: 'medium', type: 'counter', display: 'Medium', color: 'warning' },\n    date: '2022-02-01',\n  },\n  {\n    firstName: 'Bob',\n    status: 'Rejected',\n    email: { display: 'Bing', url: 'https://www.bing.com' },\n    priority: { size: 'medium', type: 'counter', display: 'Low', color: 'danger' },\n    date: '2022-03-01',\n  },\n];\n\n/**\n * Function to dynamically filter options for the 'autocomplete' editor\n * @param {string} value - The input value to filter the options\n * @returns {Promise<string[]>} - A promise that resolves with the filtered options\n */\nfunction filterDynamicOptions(value) {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      // Filter options based on the input value\n      const filteredOptions = [...options, ...dynamicFilterOptions].filter((option) =>\n        option.toLowerCase().includes(value.toLowerCase())\n      );\n\n      // Resolve the promise with filtered options\n      resolve(filteredOptions);\n    }, 1000); // Simulate API delay\n  });\n}\n```\n\n### Inline Editing - Disabling a Cell or Row\n\nYou can disable specific cells or rows from being edited by using the `isCellDisabled` function in the `cellEditorArgs` property of a column. This function takes the row data as an argument and returns a boolean indicating whether the cell should be disabled.For best results, ensure that this is a pure function it should not produce side effects or rely on external mutable state.\n\n```javascript\n{\n  header: 'Status',\n  accessorKey: 'status',\n  id: 'status',\n  dataType: 'text',\n  cellEditable: true,\n  cellEditorType: 'select',\n  cellEditorArgs: {\n    options: [\n      { display: 'Active' },\n      { display: 'Inactive' },\n      { display: 'Pending' },\n    ],\n    isCellDisabled: (row) => row.status === 'Inactive', // Disable editing for 'Inactive' rows\n  },\n},\n```\n\n### Row Actions\n\nUsers can add actions to rows. These actions will be shown in the first column as icons. A maximum of 4 icons will be shown, including the expand icon for expandable rows, if there more actions are provided, an overflow menu will be shown with a list of the remaining actions displayed as their label.\n\n- Clicking a row action button will emit a rowActionClick with the action id and the row.\n- To disable actions for specific rows, use the isDisabled(row) method.\n\n### Types\n\n```ts\ntype ModusTableRowData = unknown | object | any[];\ntype ModusTableSortingState = ColumnSort {\n    id: string;\n    desc: boolean;\n}[];\ntype ModusTableColumnSort {\n    id: string;\n    desc: boolean;\n};\ntype ModusTableExpandedState = true | Record<string, boolean>;\ntype ModusTablePaginationState = {\n    pageIndex: number;\n    pageSize: number;\n};\ntype ModusTableColumnSizingState = Record<string, number>;\ntype ModusTableColumnVisibilityState = Record<string, boolean>;\ntype ModusTableColumnOrderState =  string[];\ntype ModusTableCellData = CellContext<unknown, unknown>;\ntype ModusTableColumnDataType =\n  | typeof COLUMN_DEF_DATATYPE_TEXT\n  | typeof COLUMN_DEF_DATATYPE_INTEGER\n  | typeof COLUMN_DEF_DATATYPE_LINK;\ntype ModusTableCellEditorType =\n  | typeof CELL_EDIT_TYPE_SELECT\n  | typeof CELL_EDIT_TYPE_TEXT\n  | typeof CELL_EDIT_TYPE_INT\n  | typeof CELL_EDIT_TYPE_AUTOCOMPLETE\n  | typeof CELL_EDIT_TYPE_DATE;\ntype ModusTableCellDateEditorArgs = { format: string; isCellDisabled?: (row: unknown) => boolean  };\ntype ModusTableCellSelectEditorArgs = {\n  options: unknown[];\n  optionsDisplayProp?: string;\n  placeholder?: string;\n  isCellDisabled?: (row: unknown) => boolean;\n};\ntype ModusTableCellAutocompleteEditorArgs = {\n  options: ModusAutocompleteOption[];\n  noResultsFoundText: string;\n  noResultsFoundSubtext: string;\n  showNoResultsFoundMessage: boolean;\n  showOptionsOnFocus: boolean;\n  filterOptions: (value: string) => Promise<ModusAutocompleteOption[] | string[]>;\n};\ntype ModusTableCellEditorArgs = ModusTableCellSelectEditorArgs | ModusTableCellDateEditorArgs;\ntype ModusTableDataUpdaterProps = { rowId: string; accessorKey: string; newValue: string; oldValue?: string };\ntype ModusTableSortingFunction<TData extends RowData> = SortingFnOption<TData> | 'sortForHyperlink' | 'sortForBadge';\n\ninterface ModusTableColumn<TData extends RowData, TValue = unknown> {\n  header: string;\n  accessorKey: string;\n  dataType: ModusTableColumnDataType;\n  id?: string;\n  cell?: ColumnDefTemplate<ModusTableCellData>;\n  footer?: string;\n  enableSorting?: boolean;\n  enableResizing?: boolean;\n  size?: number;\n  minSize?: number;\n  maxSize?: number;\n  showTotal?: boolean;\n  subRows?: ModusTableColumn<TData, TValue>[];\n  sortingFn?: ModusTableSortingFunction<TData>;\n  cellEditable?: boolean;\n  cellEditorType?: ModusTableCellEditorType;\n  cellEditorArgs?: ModusTableCellEditorArgs;\n}\n\ninterface ModusTableDisplayOptions {\n  borderless?: boolean;\n  cellBorderless?: boolean;\n  cellVerticalBorderless?: boolean;\n}\n\ninterface ModusTableToolbarOptions {\n  columnsVisibility?: ModusTableColumnsVisibilityOptions;\n}\n\ninterface ModusTableColumnsVisibilityOptions {\n  title: string;\n  requiredColumns?: string[];\n  hiddenColumns?: string[];\n}\n\ninterface ModusTableCellLink {\n  display: string;\n  url: string;\n  _type?: typeof COLUMN_DEF_DATATYPE_LINK;\n}\n\ninterface ModusTableCellBadge {\n  _type: string;\n  text: string;\n  ariaLabel?: string | null;\n  color?: string;\n  size?: string;\n  type?: string;\n}\n\ninterface ModusTableCellValueChange {\n  row: unknown;\n  accessorKey: string;\n  newValue: string;\n  oldValue?: string;\n  data: unknown[];\n}\n\ninterface ModusTableRowSelectionOptions {\n  multiple?: boolean;\n  subRowSelection?: boolean;\n  preSelectedRows?: string[];\n}\n\ninterface ModusTableRowAction {\n  id: string;\n  icon?: string;\n  label?: string;\n  tooltipText?: string;\n  buttonStyle?: 'borderless' | 'fill' | 'outline';\n  color?: 'danger' |'primary' | 'secondary' | 'tertiary' | 'special'\n  index: number;\n  iconColor?: string;\n  isDisabled?: (row: unknown) => boolean;\n}\n\ninterface ModusTableRowActionConfig {\n  header?: string;\n  width?: number;\n  menuOnly?:boolean;\n}\n\ninterface ModusTableManualPaginationOptions {\n  currentPageIndex: number;\n  currentPageSize: number;\n  pageCount: number;\n  totalRecords: number;\n}\n\ninterface ModusTableManualSortingOptions {\n  currentSortingState: ModusTableSortingState\n}\n\ninterface ModusTableErrors {\n  [rowIndex: number]: {\n    [accessorKey: string]: string;\n  }\n}\n\n```\n\n### Accessibility\n\nUsers can use keyboard navigation to perform different actions.\n\n| Name              | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                   |\n| ----------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Sorting           | The <kbd>Tab</kbd> key is used for navigating between the sort icons, while the <kbd>Enter</kbd> key is used to interact with the icon.                                                                                                                                                                                                                                                                                                                       |\n| Pagination        | Users can change page size and page number using keyboard navigation. The <kbd>Tab</kbd> key brings focus to an element and the Enter key is used to perform an action like selecting a page size and page number.                                                                                                                                                                                                                                            |\n| Column Resize     | Users can select the column for resizing by using the <kbd>Tab</kbd> key, and by pressing the <kbd>Spacebar</kbd> or <kbd>Enter</kbd> key to enable the column resize for the selected column. To resize, use the `left`/`right` MediaKeySession. When the <kbd>Enter</kbd> key is pressed, its position is saved.                                                                                                                                            |\n| Column Reorder    | Users can navigate to the column to be reorder by using the <kbd>Tab</kbd> key. By pressing <kbd>Enter</kbd> key selects the column header, to move to the desired location user can use `left`/`right` keys and the column can be dropped by <kbd>Enter</kbd> key.                                                                                                                                                                                           |\n| Column Visibility | The meatball icon buttom will get focus by using the <kbd>Tab</kbd> key. By pressing <kbd>Enter</kbd> or <kbd>Space</kbd>, a dropdown will be opened; press the <kbd>Escape</kbd> key to close the dropdown. Using `Tab or Shift+Tab` / `ArrowUp or ArrowDown`, column checkboxes/items can get focus to change state by pressing the <kbd>Enter</kbd> or <kbd>Space</kbd>.                                                                                   |\n| Cell Navigation   | Table cells can be navigated using keys like <kbd>Tab</kbd>, `Shift+Tab`, `ArrowUp`, and `ArrowDown`. Additionally, the <kbd>Tab</kbd> key can be used to focus on elements inside a cell.                                                                                                                                                                                                                                                                    |\n| Inline Editing    | When a cell is in focus, pressing the <kbd>Enter</kbd> key will activate the cell editor. The cell's value will be saved either when the focus shifts to another cell or when the <kbd>Enter</kbd> key is pressed again, which will also move the focus to the cell below in the same row. <kbd>Escape</kbd> key reverts the cell value to its original state and closes the editor. Note: Select cell editor saves the value only when the cell loses focus. |\n| Row Selection     | When multiple selection is enabled in the row selection options, users can continuously select or deselect items by using Shift + Arrow Up/Arrow Down. Additionally, if an item is selected and the Shift key is held while selecting another item, it allows for the continuous selection of all items between the two selected items. In the case of expanded items, the `subRowSelection` option should be set to true to support this behavior.           |\n\n## Properties\n\n| Property                  | Attribute                 | Description                                                                                                                                                                                   | Type                                   | Default                                                                                     |\n| ------------------------- | ------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------- | ------------------------------------------------------------------------------------------- |\n| `columnReorder`           | `column-reorder`          | (Optional) To allow column reordering.                                                                                                                                                        | `boolean`                              | `false`                                                                                     |\n| `columnResize`            | `column-resize`           |                                                                                                                                                                                               | `boolean`                              | `false`                                                                                     |\n| `columns` _(required)_    | --                        | (Required) To display headers in the table.                                                                                                                                                   | `ModusTableColumn<unknown, unknown>[]` | `undefined`                                                                                 |\n| `data` _(required)_       | --                        | (Required) To display data in the table.                                                                                                                                                      | `unknown[]`                            | `undefined`                                                                                 |\n| `defaultSort`             | `default-sort`            | (Optional) To control the default column to be used to sort the table.                                                                                                                        | `ModusTableColumnSort`                 | `undefined`                                                                                 |\n| `density`                 | `density`                 | (Optional) To control the density in the table. This is the row height.                                                                                                                       | `\"relaxed\", \"comfortable\", \"compact\"`  | `\"relaxed\"`                                                                                 |\n| `displayOptions`          | --                        | (Optional) To control display options of table.                                                                                                                                               | `ModusTableDisplayOptions`             | `{     borderless: false,     cellBorderless: false,     cellVerticalBorderless:false,   }` |\n| `fullWidth`               | `full-width`              |                                                                                                                                                                                               | `boolean`                              | `false`                                                                                     |\n| `hover`                   | `hover`                   | (Optional) To enable row hover in table.                                                                                                                                                      | `boolean`                              | `false`                                                                                     |\n| `manualPaginationOptions` | --                        | (Optional) To enable manual pagination mode. When enabled, the table will not automatically paginate rows, instead will expect the current page index and other details to be passed.         | `ModusTableManualPaginationOptions`    | `undefined`                                                                                 |\n| `manualSortingOptions`    | --                        | (Optional) To enable manual sorting mode. When enabled, the table will not automatically sort rows, instead will expect the current sorting state (sorted column and direction) to be passed. | `ModusTableManualSortingOptions`       | `undefined`                                                                                 |\n| `maxHeight`               | `max-height`              | (Optional) To display a vertical scrollbar when the height is exceeded.                                                                                                                       | `string`                               | `undefined`                                                                                 |\n| `maxWidth`                | `max-width`               | (Optional) To display a horizontal scrollbar when the width is exceeded.                                                                                                                      | `string`                               | `undefined`                                                                                 |\n| `pageSizeList`            | --                        |                                                                                                                                                                                               | `number[]`                             | `PAGINATION_DEFAULT_SIZES`                                                                  |\n| `pagination`              | `pagination`              |                                                                                                                                                                                               | `boolean`                              | `undefined`                                                                                 |\n| `rowActions`              | --                        | (Optional) Actions that can be performed on each row. A maximum of 4 icons will be shown, including overflow menu and expand icons.                                                           | `ModusTableRowAction[]`                | `[]`                                                                                        |\n| `rowActionsConfig`        | --                        | (Optional) The configuration for the row action's column                                                                                                                                      | `ModusTableRowActionConfig`            | `undefined`                                                                                 |\n| `rowSelection`            | `row-selection`           | (Optional) To display checkbox.                                                                                                                                                               | `boolean`                              | `false`                                                                                     |\n| `rowSelectionOptions`     | --                        | (Optional) To control multiple row selection.                                                                                                                                                 | `ModusTableRowSelectionOptions`        | `{     multiple: false,     subRowSelection: false,   }`                                    |\n| `rowsExpandable`          | `rows-expandable`         | (Optional) To display expanded rows.                                                                                                                                                          | `boolean`                              | `false`                                                                                     |\n| `showSortIconOnHover`     | `show-sort-icon-on-hover` | (Optional) To display sort icon on hover.                                                                                                                                                     | `boolean`                              | `false`                                                                                     |\n| `sort`                    | `sort`                    | (Optional) To sort data in table.                                                                                                                                                             | `boolean`                              | `false`                                                                                     |\n| `summaryRow`              | `summary-row`             | (Optional) To display summary row.                                                                                                                                                            | `boolean`                              | `false`                                                                                     |\n| `toolbar`                 | `toolbar`                 | (Optional) To display a toolbar for the table.                                                                                                                                                | `boolean`                              | `false`                                                                                     |\n| `toolbarOptions`          | --                        | (Optional) To display a toolbar, which allows access to table operations like hiding columns.                                                                                                 | `ModusTableToolbarOptions`             | `null`                                                                                      |\n| `wrapText`                | `wrap-text`               | (Optional) To wrap text that overflows the cell.                                                                                                                                              | `boolean`                              | `false`                                                                                     |\n\n## Events\n\n| Event                    | Description                                           | Type                                                |\n| ------------------------ | ----------------------------------------------------- | --------------------------------------------------- |\n| `cellLinkClick`          | Emits the link that was clicked                       | `CustomEvent<ModusTableCellLink>`                   |\n| `cellValueChange`        | Emits the cell value that was edited                  | `CustomEvent<ModusTableCellValueChange>`            |\n| `columnOrderChange`      | Emits columns in the updated order                    | `CustomEvent<string[]>`                             |\n| `columnSizingChange`     | Emits latest column size                              | `CustomEvent<{ [x: string]: number; }>`             |\n| `columnVisibilityChange` | Emits visibility state of each column                 | `CustomEvent<{ [x: string]: boolean; }>`            |\n| `paginationChange`       | Emits selected page index and size                    | `CustomEvent<PaginationState>`                      |\n| `rowActionClick`         | An event that fires when a row action is clicked.     | `CustomEvent<ModusTableRowActionClick>`             |\n| `rowExpanded`            | Emits expanded state of the columns                   | `CustomEvent<boolean \\| { [x: string]: boolean; }>` |\n| `rowSelectionChange`     | Emits rows selected                                   | `CustomEvent<unknown>`                              |\n| `sortChange`             | Emits column sort order                               | `CustomEvent<ColumnSort[]>`                         |\n| `cellInputValueChange`   | Emits the current cell input value on every keystroke | `CustomEvent<ModusTableCellValueChange>`            |\n\n### Slot\n\nUsers can use this to provide custom elements.\n\n| Slot             | Description                                         |\n| ---------------- | --------------------------------------------------- |\n| `\"customFooter\"` | Slot for custom footer.                             |\n| `\"groupLeft\"`    | Slot for custom toolbar options added to the left.  |\n| `\"groupRight\"`   | Slot for custom toolbar options added to the right. |\n\n### Methods\n\n| Method name              | Description                                 | Parameter                              | Return               |\n| ------------------------ | ------------------------------------------- | -------------------------------------- | -------------------- |\n| `getColumnData`          | Gets data of a particular column.           | `accessorKey: string`                  | `Promise<unknown[]>` |\n| `toggleColumnVisibility` | Decides the Data table column visibility.   | `columnId: string`, `show: boolean`    | `Promise<void>`      |\n| `getEditableCell`        | Handle the editability of a specific cell.  | `rowIndex: string`, `columnId: string` | `Promise<void>`      |\n| `toggleAllRowSelection`  | Selects or deselects all rows in the table. | `select: boolean`                      | `Promise<void>`      |\n\n### Text Wrapping\n\nThis wraps overflowing text of table cell.\n\n- Text wrapping is disable by default, set `wrapText` to `true` to enable wrapping.\n\n## Upcoming features \ud83d\udea7\n\nThere are still additional features that we plan to implement. Some of them:\n\n- Column Filtering\n- Save Filter Preferences\n\nYou can also refer to the [Table Roadmap](https://github.com/orgs/trimble-oss/projects/16/views/19) to track the development status for the above features and some known [issues](https://github.com/trimble-oss/modus-web-components/issues?q=is%3Aopen+is%3Aissue+label%3AQA+label%3Atable).\n",
  "storybook_content": "\n\n--- modus-table.stories.tsx ---\n\nimport { html } from 'lit-html';\n// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-table-storybook-docs.mdx';\nimport { withActions } from '@storybook/addon-actions/decorator';\n\n// Helpers\n// for the data generator makeData function\nfunction range(len) {\n  const arr: number[] = [];\n  for (let i = 0; i < len; i++) {\n    arr.push(i);\n  }\n  return arr;\n}\n\nfunction randomNumber(min, max) {\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\nfunction randomButtonVariant() {\n  const variants = ['danger', 'primary', 'secondary', 'tertiary', 'special'];\n  return variants[randomNumber(0, 5)];\n}\n\nfunction newPerson() {\n  const namesIndex = randomNumber(0, 17);\n  const firstName = Names[namesIndex].split(' ')[0];\n  const lastName = Names[namesIndex].split(' ')[1];\n  const email: string = `${firstName}${lastName}@example.com`.toLowerCase();\n  const randomDate = new Date(randomNumber(1990, 2020), randomNumber(0, 11), randomNumber(1, 30));\n  const formattedDate = `${randomDate.getFullYear()}-${(randomDate.getMonth() + 1).toString().padStart(2, '0')}-${randomDate.getDate().toString().padStart(2, '0')}`;\n  const customCell = `<modus-button color='${randomButtonVariant()}'>Custom ${namesIndex}</modus-button>`;\n  return {\n    firstName,\n    lastName,\n    age: randomNumber(20, 80) * 30,\n    visits: randomNumber(1, 100) * 100,\n    email: { display: email, url: email },\n    progress: randomNumber(1, 100) * 100,\n    status: randomNumber(1, 100) > 66 ? 'Verified' : randomNumber(0, 100) > 33 ? 'Pending' : 'Rejected',\n    createdAt: formattedDate,\n    priority: Priorities[randomNumber(1, 100) > 66 ? 'high' : randomNumber(0, 100) > 33 ? 'medium' : 'low'],\n    custom: customCell,\n  };\n}\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nfunction makeData(...lens): object[] {\n  const makeDataLevel = (depth = 0) => {\n    const len = lens[depth];\n    return range(len).map(() => {\n      return {\n        ...newPerson(),\n        subRows: lens[depth + 1] ? makeDataLevel(depth + 1) : undefined,\n      };\n    });\n  };\n\n  return makeDataLevel();\n}\n\nfunction initializeTable(props) {\n  const {\n    columns,\n    data,\n    pageSizeList,\n    toolbarOptions,\n    displayOptions,\n    rowSelectionOptions,\n    rowActions,\n    rowActionsConfig,\n    manualPaginationOptions,\n    manualSortingOptions,\n    defaultSort,\n    customSort,\n    errors,\n    isInlineEditing,\n  } = props;\n\n  const tag = document.createElement('script');\n  tag.innerHTML = `\n  var modusTable = document.querySelector('modus-table');\n  modusTable.columns = ${JSON.stringify(columns)};\n  modusTable.data = ${JSON.stringify(data)};\n  modusTable.pageSizeList = ${JSON.stringify(pageSizeList)};\n  modusTable.toolbarOptions = ${JSON.stringify(toolbarOptions)};\n  modusTable.displayOptions = ${JSON.stringify(displayOptions)};\n  modusTable.rowSelectionOptions = ${JSON.stringify(rowSelectionOptions)};\n  modusTable.rowActions = ${JSON.stringify(rowActions)};\n  modusTable.rowActionsConfig= ${JSON.stringify(rowActionsConfig)};\n  modusTable.manualPaginationOptions = ${JSON.stringify(manualPaginationOptions)};\n  modusTable.manualSortingOptions = ${JSON.stringify(manualSortingOptions)};\n  modusTable.defaultSort = ${JSON.stringify(defaultSort)};\n  modusTable.customSort = ${JSON.stringify(customSort)};\n  modusTable.errors = ${JSON.stringify(errors)};\n  modusTable.isInlineEditing = ${JSON.stringify(isInlineEditing)};\n\n  var globalData = ${JSON.stringify(data)};\n\n  function sortStatusFn(rowA, rowB, _columnId) {\n    const statusA = rowA.original.status;\n    const statusB = rowB.original.status;\n    const statusOrder = modusTable.customSort;\n    return statusOrder.indexOf(statusA) - statusOrder.indexOf(statusB);\n  }\n\n  function addSortingFn(columns) {\n    return columns.map((col) => (col.accessorKey === 'status' ? { ...col, sortingFn: sortStatusFn } : col));\n  }\n\n  if(!!modusTable.manualSortingOptions){\n    let currentData = globalData;\n    const accessorKey = getAccessortKey(modusTable.columns, modusTable.manualSortingOptions.currentSortingState[0].id);\n    currentData.sort(compareValues(accessorKey, modusTable.manualSortingOptions.currentSortingState[0].desc));\n    if(!!modusTable.manualPaginationOptions){\n      modusTable.data = currentData.slice((modusTable.manualPaginationOptions.currentPageIndex - 1) * modusTable.manualPaginationOptions.currentPageSize,\n        modusTable.manualPaginationOptions.currentPageIndex * modusTable.manualPaginationOptions.currentPageSize);\n    } else {\n      modusTable.data = currentData;\n    }\n  } else if(!!modusTable.manualPaginationOptions){\n    modusTable.data = globalData.slice((modusTable.manualPaginationOptions.currentPageIndex - 1) * modusTable.manualPaginationOptions.currentPageSize,\n      modusTable.manualPaginationOptions.currentPageIndex * modusTable.manualPaginationOptions.currentPageSize);\n  } else if(modusTable.customSort.length > 0){\n    modusTable.columns = addSortingFn(modusTable.columns);\n  } else {\n    modusTable.data = globalData;\n  }\n\n  function compareValues(key, desc) {\n    return function innerSort(a, b) {\n      if (!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) {\n        // property doesn't exist on either object\n        return 0;\n      }\n      let varA = '';\n      let varB = '';\n\n      if (typeof a[key] === 'string'){\n        varA = a[key].toUpperCase();\n      } else if (typeof a[key] === 'object'){\n        varA = a[key].display;\n      } else {\n        varA = a[key];\n      }\n      if (typeof b[key] === 'string'){\n        varB = b[key].toUpperCase();\n      } else if (typeof b[key] === 'object'){\n        varB = b[key].display;\n      } else {\n        varB = b[key];\n      }\n\n      let comparison = 0;\n      if (varA > varB) {\n        comparison = 1;\n      } else if (varA < varB) {\n        comparison = -1;\n      }\n      return (\n        desc ? (comparison * -1) : comparison\n      );\n    };\n  }\n\n  function getAccessortKey(array, id){\n    return array.find((c) => c.id === id)?.accessorKey;\n  }\n\n  modusTable.addEventListener(\n    \"paginationChange\", (ev)=> {\n      if(!!modusTable.manualPaginationOptions){\n        let currentData = ${JSON.stringify(data)};\n        modusTable.manualPaginationOptions = {\n          currentPageIndex : ev.detail.pageIndex + 1,\n          currentPageSize : ev.detail.pageSize,\n          pageCount: Math.ceil( currentData.length / ev.detail.pageSize),\n          totalRecords: currentData.length\n        }\n        if(!!modusTable.manualSortingOptions && modusTable.manualSortingOptions.currentSortingState.length > 0){\n          const accessorKey = getAccessortKey(modusTable.columns, modusTable.manualSortingOptions.currentSortingState[0].id);\n          currentData.sort(compareValues(accessorKey, modusTable.manualSortingOptions.currentSortingState[0].desc));\n        }\n        modusTable.data = currentData.slice((modusTable.manualPaginationOptions.currentPageIndex - 1) * modusTable.manualPaginationOptions.currentPageSize,\n          modusTable.manualPaginationOptions.currentPageIndex * modusTable.manualPaginationOptions.currentPageSize);\n      }\n   });\n\n  modusTable.addEventListener(\n    \"sortChange\", (ev)=> {\n      if(!!modusTable.manualSortingOptions){\n        modusTable.manualSortingOptions = {\n          currentSortingState : ev.detail\n        };\n        let currentData = ${JSON.stringify(data)};\n        if(modusTable.manualSortingOptions.currentSortingState.length > 0) {\n          const accessorKey = getAccessortKey(modusTable.columns, modusTable.manualSortingOptions.currentSortingState[0].id);\n          currentData.sort(compareValues(accessorKey, modusTable.manualSortingOptions.currentSortingState[0].desc));\n        }\n        if(!!modusTable.manualPaginationOptions){\n          modusTable.data = currentData.slice((modusTable.manualPaginationOptions.currentPageIndex - 1) * modusTable.manualPaginationOptions.currentPageSize,\n            modusTable.manualPaginationOptions.currentPageIndex * modusTable.manualPaginationOptions.currentPageSize);\n        } else {\n          modusTable.data = currentData;\n        }\n      }\n  });\n`;\n\n  return tag;\n}\n\nconst Names = [\n  'Mickey Mouse',\n  'Bugs Bunny',\n  'Homer Simpson',\n  'Fred Flintstone',\n  'Sponge Bob',\n  'Daffy Duck',\n  'Charlie Brown',\n  'Scooby Doo',\n  'Tom Cat',\n  'Jerry Mouse',\n  'Mighty Mouse',\n  'Wile E Coyote',\n  'Tweety Bird',\n  'Pink Panther',\n  'Road Runner',\n  'Patrick Star',\n  'Roger Rabbit',\n  'Papa Smurf',\n  'Buzz Lightyear',\n];\n\nconst Priorities = {\n  high: {\n    size: 'medium',\n    type: 'counter',\n    text: 'High',\n    color: 'success',\n  },\n  medium: {\n    size: 'medium',\n    type: 'counter',\n    text: 'Medium',\n    color: 'warning',\n  },\n  low: {\n    size: 'medium',\n    type: 'counter',\n    text: 'Low',\n    color: 'danger',\n  },\n};\n\nconst DefaultColumns = [\n  {\n    header: 'First Name',\n    accessorKey: 'firstName',\n    id: 'first-name',\n    dataType: 'text',\n    size: 150,\n    minSize: 80,\n    footer: 'Total',\n  },\n  {\n    header: 'Last Name',\n    accessorKey: 'lastName',\n    id: 'last-name',\n    dataType: 'text',\n    size: 150,\n    minSize: 80,\n  },\n  {\n    header: 'Age',\n    accessorKey: 'age',\n    id: 'age',\n    dataType: 'integer',\n    size: 80,\n    minSize: 60,\n  },\n  {\n    header: 'Visits',\n    accessorKey: 'visits',\n    id: 'visits',\n    dataType: 'integer',\n    maxSize: 80,\n    showTotal: true,\n    minSize: 80,\n  },\n  {\n    header: 'Email',\n    accessorKey: 'email',\n    id: 'email',\n    dataType: 'link',\n    size: 230,\n    minSize: 80,\n    sortingFn: 'sortForHyperlink',\n  },\n  {\n    header: 'Status',\n    accessorKey: 'status',\n    id: 'status',\n    dataType: 'text',\n  },\n  {\n    header: 'Profile Progress',\n    accessorKey: 'progress',\n    id: 'progress',\n    dataType: 'integer',\n    minSize: 100,\n  },\n  {\n    header: 'Created At',\n    accessorKey: 'createdAt',\n    id: 'createdAt',\n    dataType: 'date',\n    size: 150,\n    minSize: 150,\n  },\n];\n\nconst DefaultArgs = {\n  hover: false,\n  sort: false,\n  sortIconStyle: 'alphabetical',\n  columnResize: false,\n  columnReorder: false,\n  pagination: false,\n  showSortIconOnHover: false,\n  summaryRow: false,\n  fullWidth: false,\n  pageSizeList: [7, 10, 20],\n  toolbar: false,\n  columns: DefaultColumns,\n  data: makeData(5),\n  toolbarOptions: {},\n  displayOptions: {},\n  rowsExpandable: false,\n  maxHeight: '',\n  maxWidth: '',\n  rowActions: [],\n  rowActionsConfig: {},\n  rowSelection: false,\n  rowSelectionOptions: {},\n  wrapText: false,\n  customSort: [],\n};\n\nexport default {\n  title: 'Components/Table',\n  argTypes: {\n    columns: {\n      name: 'columns',\n      description: 'Table header columns',\n      table: {\n        type: { summary: 'ModusTableColumn[]' },\n      },\n      type: { required: true },\n    },\n    data: {\n      name: 'data',\n      description: 'Table data',\n      table: {\n        type: { summary: 'Data[]' },\n      },\n      type: { required: true },\n    },\n    hover: {\n      name: 'hover',\n      description: 'Enables hover on table rows',\n      control: 'boolean',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n      type: { required: false },\n    },\n    sort: {\n      name: 'sort',\n      description: 'Enables sort for table columns',\n      control: 'boolean',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n      type: { required: false },\n    },\n    sortIconStyle: {\n      name: 'sortIconStyle',\n      description: 'Display alphabetical or directional arrow icons when sort is enabled',\n      options: ['alphabetical', 'directional'],\n      type: 'select',\n      table: {\n        defaultValue: { summary: `'alphabetical'` },\n        type: { summary: `'alphabetical', 'directional'` },\n      },\n    },\n    showSortIconOnHover: {\n      name: 'showSortIconOnHover',\n      description: 'Enables sort for table columns and sort icon appears when you hover over a column header',\n      control: 'boolean',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n      type: { required: false },\n    },\n    summaryRow: {\n      name: 'summaryRow',\n      description: 'Enables a summary row as footer',\n      control: 'boolean',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n      type: { required: false },\n    },\n    pagination: {\n      name: 'pagination',\n      description: 'Enable pagination on table data',\n      control: 'boolean',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n      type: { required: false },\n    },\n    columnResize: {\n      name: 'columnResize',\n      description: 'Enables the column resizing for table',\n      control: 'boolean',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n      type: { required: false },\n    },\n    columnReorder: {\n      name: 'columnReorder',\n      description: 'Enables the column reordering for table',\n      control: 'boolean',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n      type: { required: false },\n    },\n    density: {\n      name: 'density',\n      description: 'Manage table density.',\n      options: ['relaxed', 'comfortable', 'compact'],\n      type: 'select',\n      table: {\n        defaultValue: { summary: `'relaxed'` },\n        type: { summary: `'relaxed', 'comfortable', 'compact'` },\n      },\n    },\n    fullWidth: {\n      name: 'fullWidth',\n      description: 'Manage table width.',\n      control: 'boolean',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n      type: { required: false },\n    },\n    toolbar: {\n      name: 'toolbar',\n      description: 'Enables the toolbar.',\n      control: 'boolean',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n      type: { required: false },\n    },\n    toolbarOptions: {\n      name: 'toolbarOptions',\n      description: 'To display toolbar options, which allows access to table operations like hiding columns.',\n      table: {\n        type: { summary: 'ModusTableToolbarOptions' },\n      },\n      type: { required: false },\n    },\n    rowsExpandable: {\n      name: 'rowsExpandable',\n      description: 'Enables expanded rows.',\n      control: 'boolean',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n      type: { required: false },\n    },\n    rowSelection: {\n      name: 'rowSelection',\n      description: 'Enables row selection.',\n      control: 'boolean',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n      type: { required: false },\n    },\n    rowActions: {\n      name: 'rowActions',\n      description: 'Control row actions.',\n      table: {\n        type: { summary: 'ModusTableRowAction[]' },\n      },\n      type: { required: false },\n    },\n    rowActionsConfig: {\n      name: 'rowActionsConfig',\n      description: \"The configuration for the row action's column \",\n      table: {\n        type: { summary: 'ModusTableRowActionConfig' },\n      },\n      type: { required: false },\n    },\n    maxHeight: {\n      name: 'maxHeight',\n      description: 'To display a vertical scrollbar when the height is exceeded.',\n      control: 'string',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'string' },\n      },\n      type: { required: false },\n    },\n    maxWidth: {\n      name: 'maxWidth',\n      description: 'To display a horizontal scrollbar when the width is exceeded.',\n      control: 'string',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'string' },\n      },\n      type: { required: false },\n    },\n    pageSizeList: {\n      name: 'pageSizeList',\n      description: 'To set page size options for the pagination.',\n      table: {\n        type: { summary: 'number[]' },\n      },\n      type: { required: false },\n    },\n    rowSelectionOptions: {\n      name: 'rowSelectionOptions',\n      description: 'To control multiple row selection.',\n      table: {\n        type: { summary: 'ModusTableRowSelectionOptions' },\n      },\n      type: { required: false },\n    },\n    manualPaginationOptions: {\n      name: 'manualPaginationOptions',\n      description: 'To switch to manual pagination mode.',\n      table: {\n        type: { summary: 'ModusTableManualPaginationOptions' },\n      },\n      type: { required: false },\n    },\n    manualSortingOptions: {\n      name: 'manualSortingOptions',\n      description: 'To switch to manual sorting mode.',\n      table: {\n        type: { summary: 'ModusTableManualSortingOptions' },\n      },\n      type: { required: false },\n    },\n    customSort: {\n      name: 'customSorting',\n      description:\n        'This property is for demonstration purposes only and is not available on the component. This demo illustrates how to implement custom sorting for the status column based on a given order.',\n      table: {\n        // type: { summary: 'customSort'},\n      },\n      type: { required: false },\n    },\n    defaultSort: {\n      name: 'defaultSort',\n      description: 'To set the default sorting of the table',\n      table: {\n        type: { summary: 'ModusTableColumnSort' },\n      },\n      type: { required: false },\n    },\n    wrapText: {\n      name: 'wrapText',\n      description: 'To wrap text that overflows the cell',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n      type: { required: false },\n    },\n    errors: {\n      name: 'errors',\n      description: 'To display errors on the table',\n      table: {\n        type: { summary: 'ModusTableErrors' },\n      },\n      type: { required: false },\n    },\n  },\n\n  parameters: {\n    actions: {\n      handles: [\n        'cellValueChange',\n        'cellLinkClick',\n        'columnOrderChange',\n        'columnSizingChange',\n        'columnVisibilityChange',\n        'paginationChange',\n        'rowExpanded',\n        'rowSelectionChange',\n        'rowUpdated',\n        'sortChange',\n        'rowActionClick',\n        'cellInputValueChange',\n      ],\n    },\n    controls: { expanded: true, sort: 'requiredFirst' },\n    docs: {\n      inlineStories: false,\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n      enableShortcuts: false,\n    },\n    design: {\n      type: 'figma',\n      url: 'https://www.figma.com/design/wyfVJUHWRMkeCfdB38HFEE/Modus---Web?node-id=2072-16701&m=dev',\n    },\n  },\n  decorators: [withActions],\n};\n\nconst Template = ({\n  hover,\n  sort,\n  sortIconStyle,\n  columnResize,\n  columnReorder,\n  pagination,\n  showSortIconOnHover,\n  summaryRow,\n  fullWidth,\n  pageSizeList,\n  toolbar,\n  columns,\n  data,\n  errors,\n  toolbarOptions,\n  displayOptions,\n  rowsExpandable,\n  maxHeight,\n  maxWidth,\n  rowActions,\n  rowActionsConfig,\n  rowSelection,\n  rowSelectionOptions,\n  manualPaginationOptions,\n  manualSortingOptions,\n  defaultSort,\n  density,\n  wrapText,\n  customSort,\n  isInlineEditing,\n}) => html`\n  <div style=\"width: 950px\">\n    <modus-table\n      hover=\"${hover}\"\n      sort=\"${sort}\"\n      sort-icon-style=\"${sortIconStyle}\"\n      column-resize=\"${columnResize}\"\n      column-reorder=\"${columnReorder}\"\n      density=\"${density}\"\n      pagination=\"${pagination}\"\n      show-sort-icon-on-hover=\"${showSortIconOnHover}\"\n      summary-row=\"${summaryRow}\"\n      full-width=\"${fullWidth}\"\n      toolbar=\"${toolbar}\"\n      rows-expandable=\"${rowsExpandable}\"\n      max-height=\"${maxHeight}\"\n      max-width=\"${maxWidth}\"\n      row-selection=\"${rowSelection}\"\n      wrap-text=\"${wrapText}\" />\n  </div>\n  ${initializeTable({\n    columns,\n    data,\n    pageSizeList,\n    toolbarOptions,\n    displayOptions,\n    rowSelectionOptions,\n    rowActions,\n    rowActionsConfig,\n    manualPaginationOptions,\n    manualSortingOptions,\n    defaultSort,\n    customSort,\n    errors,\n    isInlineEditing,\n  })}\n`;\n\nexport const Default = Template.bind({});\nDefault.args = DefaultArgs;\n\nexport const Hover = Template.bind({});\nHover.args = { ...DefaultArgs, hover: true };\n\nexport const Borderless = Template.bind({});\nBorderless.args = {\n  ...DefaultArgs,\n  displayOptions: {\n    borderless: true,\n    cellBorderless: true,\n    cellVerticalBorderless: true,\n  },\n};\n\nexport const Sorting = Template.bind({});\nSorting.args = { ...DefaultArgs, sort: true };\n\nexport const ManualSorting = Template.bind({});\nManualSorting.args = {\n  ...DefaultArgs,\n  sort: true,\n  manualSortingOptions: {\n    currentSortingState: [\n      {\n        id: 'first-name',\n        desc: false,\n      },\n    ],\n  },\n};\n\nexport const CustomSorting = Template.bind({});\nCustomSorting.args = { ...DefaultArgs, customSort: ['Rejected', 'Verified', 'Pending'], sort: true, data: makeData(5) };\n\nexport const ValueFormatter = ({\n  hover,\n  sort,\n  sortIconStyle,\n  columnResize,\n  pagination,\n  showSortIconOnHover,\n  summaryRow,\n  fullWidth,\n  pageSizeList,\n  toolbar,\n  columnReorder,\n  toolbarOptions,\n  displayOptions,\n  maxHeight,\n  maxWidth,\n  rowSelection,\n  rowSelectionOptions,\n  density,\n  wrapText,\n}) => html`\n  <div style=\"width: 950px\">\n    <modus-table\n      hover=\"${hover}\"\n      sort=\"${sort}\"\n      sort=\"${sortIconStyle}\"\n      column-resize=\"${columnResize}\"\n      density=\"${density}\"\n      pagination=\"${pagination}\"\n      show-sort-icon-on-hover=\"${showSortIconOnHover}\"\n      summary-row=\"${summaryRow}\"\n      full-width=\"${fullWidth}\"\n      column-reorder=\"${columnReorder}\"\n      toolbar=\"${toolbar}\"\n      max-height=\"${maxHeight}\"\n      max-width=\"${maxWidth}\"\n      row-selection=\"${rowSelection}\"\n      wrap-text=\"${wrapText}\" />\n  </div>\n  ${valueFormatterTable(pageSizeList, toolbarOptions, displayOptions, rowSelectionOptions)}\n`;\nValueFormatter.args = {\n  hover: false,\n  sort: false,\n  sortIconStyle: 'alphabetical',\n  columnResize: false,\n  columnReorder: false,\n  pagination: false,\n  showSortIconOnHover: false,\n  summaryRow: false,\n  fullWidth: false,\n  pageSizeList: [7, 10, 20],\n  toolbar: false,\n  toolbarOptions: {},\n  displayOptions: {},\n  maxHeight: '',\n  maxWidth: '',\n  rowSelection: false,\n  rowSelectionOptions: {},\n  wrapText: false,\n};\nconst valueFormatterTable = (pageSizeList, toolbarOptions, displayOptions, rowSelectionOptions) => {\n  const tag = document.createElement('script');\n  tag.innerHTML = `\n   document.querySelector('modus-table').columns = [{ header: 'First Name', accessorKey: 'firstName', id: 'first-name', dataType: 'text' , footer: 'Total', size: 150,minSize: 80}, { header: 'Last Name', accessorKey: 'lastName', id: 'last-name', dataType: 'text', size: 150,minSize: 80}, { header: 'Age', accessorKey: 'age', id: 'age', dataType: 'integer', showTotal: true, size: 100,minSize: 60 }, { header: 'Amount', accessorKey: 'amount', id: 'amount', dataType: 'integer',size: 150,minSize: 80, cell: (props) => { return '$' + Number(props.cell.getValue()).toFixed(2).replace(/\\\\d(?=(\\\\d{3})+\\\\.)/g, '$&,') }, }, { header: 'Status', accessorKey: 'status', id: 'status', dataType: 'text', minSize: 80}, { header: 'Profile Progress', accessorKey: 'progress', id: 'progress', dataType: 'integer',minSize: 100, cell: (props) => { return  Number(props.cell.getValue()).toFixed(2).replace(/\\\\d(?=(\\\\d{3})+\\\\.)/g, '$&,') }, }, { header: 'Created At', accessorKey: 'createdAt', id: 'createdAt', dataType: 'text', cell: (props) => { const date = new Date(props.cell.getValue()); return ((date.getMonth() > 8) ? (date.getMonth() + 1) : ('0' + (date.getMonth() + 1))) + '/' + ((date.getDate() > 9) ? date.getDate() : ('0' + date.getDate())) + '/' + date.getFullYear(); }, }];\n   document.querySelector('modus-table').data = [{ \"firstName\": \"Chaim\", \"lastName\": \"Lubowitz\", \"age\": 30, \"amount\": 330160, \"progress\": 99, \"status\": \"single\", \"createdAt\": \"2002-11-19T12:48:51.739Z\" }, { \"firstName\": \"Vicky\", \"lastName\": \"Lehner\", \"age\": 2, \"amount\": 41900, \"progress\": 36, \"status\": \"single\", \"createdAt\": \"2003-10-02T12:48:51.739Z\" }, { \"firstName\": \"Nellie\", \"lastName\": \"Leuschke\", \"age\": 15, \"amount\": 883112, \"progress\": 68, \"status\": \"single\", \"createdAt\": \"2004-09-21T12:48:51.739Z\" }, { \"firstName\": \"Judy\", \"lastName\": \"Ritchie\", \"age\": 3, \"amount\": 900293, \"progress\": 10, \"status\": \"relationship\", \"createdAt\": \"2005-08-11T12:48:51.739Z\" }, { \"firstName\": \"Hertha\", \"lastName\": \"Bradtke\", \"age\": 19, \"amount\": 112116, \"progress\": 87, \"status\": \"relationship\", \"createdAt\": \"2006-07-13T12:48:51.739Z\" }];\n\n   document.querySelector('modus-table').pageSizeList = ${JSON.stringify(pageSizeList)};\n  document.querySelector('modus-table').toolbarOptions = ${JSON.stringify(toolbarOptions)};\n  document.querySelector('modus-table').displayOptions = ${JSON.stringify(displayOptions)};\n  document.querySelector('modus-table').rowSelectionOptions = ${JSON.stringify(rowSelectionOptions)};\n  `;\n  return tag;\n};\n\nexport const Hyperlink = Template.bind({});\nHyperlink.args = { ...DefaultArgs, columns: DefaultColumns, data: makeData(7) };\n\nexport const CustomCell = Template.bind({});\nCustomCell.args = {\n  ...DefaultArgs,\n  columns: [\n    ...DefaultColumns.slice(0, DefaultColumns.length - 1),\n    {\n      header: 'Custom Cell',\n      accessorKey: 'custom',\n      id: 'custom',\n      dataType: 'custom',\n    },\n  ],\n  data: makeData(7),\n};\n\nexport const Badge = Template.bind({});\nBadge.args = {\n  ...DefaultArgs,\n  columns: [\n    ...DefaultColumns.slice(0, DefaultColumns.length - 2),\n    {\n      header: 'Priority',\n      accessorKey: 'priority',\n      sortingFn: 'sortForBadge',\n      id: 'priority',\n      dataType: 'badge',\n      maxSize: 100,\n    },\n    ...DefaultColumns.slice(DefaultColumns.length - 1),\n  ],\n  data: makeData(7),\n};\n\nexport const ColumnResize = Template.bind({});\nColumnResize.args = { ...DefaultArgs, columnResize: true };\n\nexport const Pagination = Template.bind({});\nPagination.args = { ...DefaultArgs, pagination: true, data: makeData(50), pageSizeList: [5, 10, 50] };\n\nexport const ManualPagination = Template.bind({});\nManualPagination.args = {\n  ...DefaultArgs,\n  pagination: true,\n  data: makeData(50),\n  manualPaginationOptions: {\n    currentPageIndex: 1,\n    currentPageSize: 5,\n    pageCount: 10,\n    totalRecords: 50,\n  },\n  pageSizeList: [5, 10, 50],\n};\n\nexport const SummaryRow = Template.bind({});\nSummaryRow.args = { ...DefaultArgs, summaryRow: true };\n\nexport const ColumnVisibility = Template.bind({});\nColumnVisibility.args = {\n  ...DefaultArgs,\n  toolbarOptions: {\n    columnsVisibility: {\n      title: '',\n      requiredColumns: ['age', 'visits'],\n      hiddenColumns: ['progress', 'createdAt'],\n    },\n  },\n  toolbar: true,\n};\n\nexport const ColumnReorder = Template.bind({});\nColumnReorder.args = { ...DefaultArgs, columnReorder: true };\n\nexport const ExpandableRows = Template.bind({});\nExpandableRows.args = { ...DefaultArgs, rowsExpandable: true, data: makeData(7, 4, 3, 2, 1), fullWidth: true };\n\nexport const CheckboxRowSelection = Template.bind({});\nCheckboxRowSelection.args = {\n  ...DefaultArgs,\n  rowSelection: true,\n  rowSelectionOptions: {\n    multiple: true,\n    subRowSelection: true,\n    preSelectedRows: undefined,\n  },\n  data: makeData(7),\n};\n\nconst DefaultColumnsWithPriority = [\n  ...DefaultColumns,\n  {\n    header: 'Priority',\n    accessorKey: 'priority',\n    sortingFn: 'sortForBadge',\n    id: 'priority',\n    dataType: 'badge',\n    maxSize: 100,\n  },\n];\nconst EditableColumns = DefaultColumnsWithPriority.map((col) => {\n  if (col.accessorKey === 'status') {\n    return {\n      ...col,\n      cellEditable: true,\n      cellEditorType: 'select',\n      cellEditorArgs: {\n        options: [{ display: 'Verified' }, { display: 'Pending' }, { display: 'Rejected' }],\n      },\n    };\n  }\n  if (col.accessorKey === 'firstName') {\n    const nameOptions = Names.map((name) => name.split(' ')[0]);\n    return {\n      ...col,\n      cellEditable: true,\n      cellEditorType: 'autocomplete',\n      cellEditorArgs: {\n        options: nameOptions,\n      },\n    };\n  }\n  if (col.accessorKey === 'email') {\n    const emailOptions = Names.map((name) => ({\n      display: `${name.split(' ')[0]}${name.split(' ')[1]}@example.com`,\n      url: `${name.split(' ')[0]}${name.split(' ')[1]}@example.com`,\n    }));\n    return {\n      ...col,\n      cellEditable: true,\n      cellEditorType: 'autocomplete',\n      cellEditorArgs: {\n        options: emailOptions,\n      },\n    };\n  }\n  if (col.accessorKey === 'priority') {\n    return {\n      ...col,\n      cellEditable: true,\n      cellEditorType: 'select',\n      cellEditorArgs: {\n        options: [\n          { display: 'Low', type: 'counter', color: 'danger', size: 'medium' },\n          { display: 'Medium', type: 'counter', color: 'primary', size: 'medium' },\n          { display: 'High', type: 'counter', color: 'success', size: 'medium' },\n        ],\n      },\n    };\n  }\n  if (col.accessorKey === 'createdAt') {\n    return {\n      ...col,\n      cellEditable: true,\n      cellEditorType: 'date',\n      cellEditorArgs: {\n        format: 'yyyy-mm-dd',\n      },\n    };\n  } else return { ...col, cellEditable: true };\n});\nexport const InlineEditing = Template.bind({});\nInlineEditing.args = { ...DefaultArgs, columns: EditableColumns, data: makeData(7), errors: {}, isInlineEditing: true };\n\nexport const LargeDataset = Template.bind({});\n\nLargeDataset.args = {\n  ...DefaultArgs,\n  columns: EditableColumns,\n  data: makeData(10000, 1, 1),\n  pagination: true,\n  pageSizeList: [5, 10, 50],\n  sort: true,\n  hover: true,\n  rowsExpandable: true,\n  summaryRow: true,\n  columnReorder: true,\n  columnResize: true,\n  toolbar: true,\n  toolbarOptions: {\n    columnsVisibility: {\n      title: '',\n      requiredColumns: ['age', 'visits'],\n    },\n  },\n  rowSelection: true,\n  rowSelectionOptions: {\n    multiple: true,\n    subRowSelection: true,\n  },\n};\n\nexport const RowActions = Template.bind({});\nRowActions.args = {\n  ...DefaultArgs,\n  rowActionsConfig: {\n    header: 'Row Actions Column',\n    width: 160,\n    menuOnly: false,\n  },\n  rowActions: [\n    {\n      id: '1',\n      label: 'Add',\n      tooltipText: 'Add',\n      index: 0,\n    },\n\n    {\n      id: '2',\n      icon: 'calendar',\n      label: 'calendar',\n      tooltipText: 'Calendar',\n      index: 1,\n    },\n\n    {\n      id: '3',\n      icon: 'cancel_circle',\n      label: 'Cancel',\n      tooltipText: 'Cancel',\n      index: 2,\n    },\n    {\n      id: '4',\n      index: 3,\n      icon: 'add',\n      label: 'Add',\n      tooltipText: 'Add',\n    },\n    {\n      id: '5',\n      index: 4,\n      icon: 'delete',\n      label: 'Delete',\n      tooltipText: 'Delete',\n    },\n  ],\n  data: makeData(7),\n  fullWidth: true,\n};\n\nexport const WrapText = Template.bind({});\nWrapText.args = {\n  ...DefaultArgs,\n  data: [\n    {\n      ...newPerson(),\n      lastName: 'This is an example of long text',\n    },\n    ...makeData(4),\n  ],\n  wrapText: true,\n};\n",
  "storybook": {
    "examples": [
      "<modus-button color='${randomButtonVariant()}'>Custom ${namesIndex}</modus-button>",
      "<modus-table\n      hover=\"${hover}\"\n      sort=\"${sort}\"\n      sort-icon-style=\"${sortIconStyle}\"\n      column-resize=\"${columnResize}\"\n      column-reorder=\"${columnReorder}\"\n      density=\"${density}\"\n      pagination=\"${pagination}\"\n      show-sort-icon-on-hover=\"${showSortIconOnHover}\"\n      summary-row=\"${summaryRow}\"\n      full-width=\"${fullWidth}\"\n      toolbar=\"${toolbar}\"\n      rows-expandable=\"${rowsExpandable}\"\n      max-height=\"${maxHeight}\"\n      max-width=\"${maxWidth}\"\n      row-selection=\"${rowSelection}\"\n      wrap-text=\"${wrapText}\" />",
      "<modus-table\n      hover=\"${hover}\"\n      sort=\"${sort}\"\n      sort=\"${sortIconStyle}\"\n      column-resize=\"${columnResize}\"\n      density=\"${density}\"\n      pagination=\"${pagination}\"\n      show-sort-icon-on-hover=\"${showSortIconOnHover}\"\n      summary-row=\"${summaryRow}\"\n      full-width=\"${fullWidth}\"\n      column-reorder=\"${columnReorder}\"\n      toolbar=\"${toolbar}\"\n      max-height=\"${maxHeight}\"\n      max-width=\"${maxWidth}\"\n      row-selection=\"${rowSelection}\"\n      wrap-text=\"${wrapText}\" />",
      "<modus-button color='${randomButtonVariant()}'>Custom ${namesIndex}</modus-button>",
      "\n  <div style=\"width: 950px\">\n    <modus-table\n      hover=\"${hover}\"\n      sort=\"${sort}\"\n      sort-icon-style=\"${sortIconStyle}\"\n      column-resize=\"${columnResize}\"\n      column-reorder=\"${columnReorder}\"\n      density=\"${density}\"\n      pagination=\"${pagination}\"\n      show-sort-icon-on-hover=\"${showSortIconOnHover}\"\n      summary-row=\"${summaryRow}\"\n      full-width=\"${fullWidth}\"\n      toolbar=\"${toolbar}\"\n      rows-expandable=\"${rowsExpandable}\"\n      max-height=\"${maxHeight}\"\n      max-width=\"${maxWidth}\"\n      row-selection=\"${rowSelection}\"\n      wrap-text=\"${wrapText}\" />\n  </div>\n  ${initializeTable({\n    columns,\n    data,\n    pageSizeList,\n    toolbarOptions,\n    displayOptions,\n    rowSelectionOptions,\n    rowActions,\n    rowActionsConfig,\n    manualPaginationOptions,\n    manualSortingOptions,\n    defaultSort,\n    customSort,\n    errors,\n    isInlineEditing,\n  })}\n"
    ],
    "variants": [],
    "prop_usage": {
      "color": [
        "${randomButtonVariant()}"
      ],
      "style": [
        "width: 950px",
        "${sortIconStyle}"
      ],
      "hover": [
        "${hover}",
        "${showSortIconOnHover}"
      ],
      "sort": [
        "${sort}",
        "${sortIconStyle}"
      ],
      "resize": [
        "${columnResize}"
      ],
      "reorder": [
        "${columnReorder}"
      ],
      "density": [
        "${density}"
      ],
      "pagination": [
        "${pagination}"
      ],
      "row": [
        "${summaryRow}"
      ],
      "width": [
        "${fullWidth}",
        "${maxWidth}"
      ],
      "toolbar": [
        "${toolbar}"
      ],
      "expandable": [
        "${rowsExpandable}"
      ],
      "height": [
        "${maxHeight}"
      ],
      "selection": [
        "${rowSelection}"
      ],
      "text": [
        "${wrapText}"
      ]
    }
  },
  "tag_name": "modus-table"
}
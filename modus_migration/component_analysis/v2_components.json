{
  "modus-wc-progress": {
    "props": [
      {
        "name": "customClass",
        "description": "/**\n * A customizable progress component used to show the progress of a task or show the passing of time.\n *\n * The radial variant supports slotting in custom HTML to be displayed within the progress circle\n */\n@Component({\n  tag: 'modus-wc-progress',\n  styleUrl: 'modus-wc-progress.scss',\n  shadow: false,\n})\nexport class ModusWcProgress {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the progress element. */",
        "type": ": string"
      },
      {
        "name": "indeterminate",
        "description": "/**\n * A customizable progress component used to show the progress of a task or show the passing of time.\n *\n * The radial variant supports slotting in custom HTML to be displayed within the progress circle\n */\n@Component({\n  tag: 'modus-wc-progress',\n  styleUrl: 'modus-wc-progress.scss',\n  shadow: false,\n})\nexport class ModusWcProgress {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the progress element. */",
        "type": "boolean"
      },
      {
        "name": "label",
        "description": "/**\n * A customizable progress component used to show the progress of a task or show the passing of time.\n *\n * The radial variant supports slotting in custom HTML to be displayed within the progress circle\n */\n@Component({\n  tag: 'modus-wc-progress',\n  styleUrl: 'modus-wc-progress.scss',\n  shadow: false,\n})\nexport class ModusWcProgress {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the progress element. */",
        "type": ": string"
      },
      {
        "name": "max",
        "description": "/**\n * A customizable progress component used to show the progress of a task or show the passing of time.\n *\n * The radial variant supports slotting in custom HTML to be displayed within the progress circle\n */\n@Component({\n  tag: 'modus-wc-progress',\n  styleUrl: 'modus-wc-progress.scss',\n  shadow: false,\n})\nexport class ModusWcProgress {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the progress element. */",
        "type": ": number"
      },
      {
        "name": "value",
        "description": "/**\n * A customizable progress component used to show the progress of a task or show the passing of time.\n *\n * The radial variant supports slotting in custom HTML to be displayed within the progress circle\n */\n@Component({\n  tag: 'modus-wc-progress',\n  styleUrl: 'modus-wc-progress.scss',\n  shadow: false,\n})\nexport class ModusWcProgress {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the progress element. */",
        "type": "number"
      },
      {
        "name": "variant",
        "description": "/**\n * A customizable progress component used to show the progress of a task or show the passing of time.\n *\n * The radial variant supports slotting in custom HTML to be displayed within the progress circle\n */\n@Component({\n  tag: 'modus-wc-progress',\n  styleUrl: 'modus-wc-progress.scss',\n  shadow: false,\n})\nexport class ModusWcProgress {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the progress element. */",
        "type": ": 'default' | 'radial'"
      }
    ],
    "events": [],
    "slots": [],
    "default_values": {
      "customClass": "''",
      "indeterminate": "false",
      "max": "100",
      "value": "0",
      "variant": "'default'"
    },
    "documentation": "\n\n--- modus-wc-progress.stories.ts ---\n\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\n\ninterface ProgressArgs {\n  'custom-class'?: string;\n  indeterminate: boolean;\n  label?: string;\n  max?: number;\n  value: number;\n  variant?: 'default' | 'radial';\n}\n\nconst meta: Meta<ProgressArgs> = {\n  title: 'Components/Progress',\n  component: 'modus-wc-progress',\n  args: {\n    indeterminate: false,\n    max: 100,\n    value: 70,\n    variant: 'default',\n  },\n  argTypes: {\n    variant: {\n      control: { type: 'select' },\n      options: ['default', 'radial'],\n    },\n  },\n  parameters: {\n    layout: 'padded',\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<ProgressArgs>;\n\nexport const Default: Story = {\n  render: (args) => {\n    return html`\n      <modus-wc-progress\n        aria-label=\"Progress bar\"\n        custom-class=\"${ifDefined(args['custom-class'])}\"\n        ?indeterminate=${args.indeterminate}\n        label=${ifDefined(args.label)}\n        max=${ifDefined(args.max)}\n        value=${args.value}\n        variant=${ifDefined(args.variant)}\n      ></modus-wc-progress>\n    `;\n  },\n};\n\nexport const Indeterminate: Story = {\n  render: () => {\n    return html` <modus-wc-progress indeterminate=\"true\"></modus-wc-progress> `;\n  },\n};\n\nexport const SizeVariations: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<style>\n  modus-wc-progress.modus-wc-progress-container .size-small {\n    height: 0.5rem;\n  }\n  modus-wc-progress.modus-wc-progress-container .size-compact {\n    height: 0.25rem;\n  }\n</style>\n<div>\n  <div>\n    Default size\n    <modus-wc-progress value=${args.value}></modus-wc-progress>\n  </div>\n  <div>\n    Small size\n    <modus-wc-progress\n      value=${args.value}\n      custom-class=\"size-small\"\n    ></modus-wc-progress>\n  </div>\n  <div>\n    Compact size\n    <modus-wc-progress\n      value=${args.value}\n      custom-class=\"size-compact\"\n    ></modus-wc-progress>\n  </div>\n</div>\n    `;\n  },\n};\n\nexport const LabelTextColor: Story = {\n  args: {\n    label: 'Loading...',\n    value: 50,\n  },\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<style>\n  modus-wc-progress .modus-wc-progress-label.custom-label-color {\n    color: #f00;\n  }\n</style>\n<modus-wc-progress\n  value=${args.value}\n  label=${ifDefined(args.label)}\n  custom-class=\"custom-label-color\"\n></modus-wc-progress>\n    `;\n  },\n};\n\nexport const CustomBarColor: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<style>\n  modus-wc-progress .modus-wc-progress.custom-bar-color::-webkit-progress-value {\n    background-color: #f48;\n  }\n  modus-wc-progress .modus-wc-progress.custom-bar-color::-moz-progress-bar {\n    background-color: #f48;\n  }\n</style>\n<modus-wc-progress\n  value=${args.value}\n  custom-class=\"custom-bar-color\"\n></modus-wc-progress>\n    `;\n  },\n};\n\nexport const CustomBackgroundColor: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<style>\n  modus-wc-progress .modus-wc-progress.custom-bg-color {\n    background-color: #f00;\n  }\n</style>\n<modus-wc-progress\n  value=${args.value}\n  custom-class=\"custom-bg-color\"\n></modus-wc-progress>\n    `;\n  },\n};\n\nexport const RadialWithSlottedContent: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<style>\n  #radial-icon {\n    justify-content: center;\n  }\n</style>\n<modus-wc-progress\n  aria-label=\"progress radial\"\n  ?indeterminate=${args.indeterminate}\n  max=${ifDefined(args.max)}\n  variant=\"radial\"\n  value=${args.value}\n>\n  <modus-wc-icon id=\"radial-icon\" name=\"clipboard\" size=\"md\"></modus-wc-icon>\n  ${args.value}%\n</modus-wc-progress>\n    `;\n  },\n  parameters: {\n    layout: 'centered',\n  },\n};\n\nexport const RadialWithCustomSizeAndThickness: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<style>\n  .radial-progress--lg {\n    --size: 12rem;\n  }\n  .radial-progress--thin {\n    --thickness: 0.5rem;\n  }\n</style>\n<modus-wc-progress\n  aria-label=\"progress radial\"\n  custom-class=\"radial-progress--lg\"\n  ?indeterminate=${args.indeterminate}\n  max=${ifDefined(args.max)}\n  variant=\"radial\"\n  value=${args.value}\n>\n  ${args.value}%\n</modus-wc-progress>\n<modus-wc-progress\n  aria-label=\"progress radial\"\n  custom-class=\"radial-progress--lg radial-progress--thin\"\n  ?indeterminate=${args.indeterminate}\n  max=${ifDefined(args.max)}\n  variant=\"radial\"\n  value=${args.value}\n>\n  ${args.value}%\n</modus-wc-progress>\n    `;\n  },\n  parameters: {\n    layout: 'centered',\n  },\n};\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - Colors and sizes are now handled through CSS instead of direct props.\n  - The \\`mode\\` prop has been replaced with an \\`indeterminate\\` boolean prop.\n\n#### Prop Mapping\n\n| 1.0 Prop          | 2.0 Prop      | Notes                                                |\n|-------------------|---------------|------------------------------------------------------|\n| aria-label        | aria-label    |                                                      |\n| background-color  |               | Not carried over, use CSS instead                    |\n| color             |               | Not carried over, use CSS instead                    |\n| max-value         | max           |                                                      |\n| min-value         |               | Not carried over                                     |\n| mode              | indeterminate | 1.0: \\`determinate\\`/\\`indeterminate\\`, 2.0: boolean |\n| size              |               | Not carried over, use CSS instead                    |\n| text              | label         |                                                      |\n| text-color        |               | Not carried over, use CSS instead                    |\n| value             | value         |                                                      |\n        `,\n      },\n    },\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  render: () => html`<div></div>`,\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-progress\n        aria-label=\"Progress bar\"\n        custom-class=\"${ifDefined(args['custom-class'])}\"\n        ?indeterminate=${args.indeterminate}\n        label=${ifDefined(args.label)}\n        max=${ifDefined(args.max)}\n        value=${args.value}\n        variant=${ifDefined(args.variant)}\n      ></modus-wc-progress>",
        "<modus-wc-progress indeterminate=\"true\"></modus-wc-progress>",
        "<modus-wc-progress value=${args.value}></modus-wc-progress>",
        "<modus-wc-progress\n      value=${args.value}\n      custom-class=\"size-small\"\n    ></modus-wc-progress>",
        "<modus-wc-progress\n      value=${args.value}\n      custom-class=\"size-compact\"\n    ></modus-wc-progress>"
      ],
      "variants": [
        "radial"
      ],
      "prop_usage": {
        "label": [
          "Progress bar",
          "progress radial"
        ],
        "class": [
          "${ifDefined(args[",
          "size-small",
          "size-compact",
          "custom-label-color",
          "custom-bar-color",
          "custom-bg-color",
          "radial-progress--lg",
          "radial-progress--lg radial-progress--thin"
        ],
        "indeterminate": [
          "true"
        ],
        "variant": [
          "radial"
        ],
        "id": [
          "radial-icon"
        ],
        "name": [
          "clipboard"
        ],
        "size": [
          "md"
        ]
      }
    },
    "tag_name": "modus-wc-progress"
  },
  "modus-wc-button": {
    "props": [
      {
        "name": "color",
        "description": "/**\n * A customizable button component used to create buttons with different sizes, variants, and types.\n *\n * The component supports a `<slot>` for injecting content within the button, similar to a native HTML button\n */\n@Component({\n  tag: 'modus-wc-button',\n  styleUrl: 'modus-wc-button.scss',\n  shadow: false,\n})\nexport class ModusWcButton {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The color variant of the button. */",
        "type": "'primary' | 'secondary' | 'tertiary' | 'warning' | 'danger'"
      },
      {
        "name": "customClass",
        "description": "/**\n * A customizable button component used to create buttons with different sizes, variants, and types.\n *\n * The component supports a `<slot>` for injecting content within the button, similar to a native HTML button\n */\n@Component({\n  tag: 'modus-wc-button',\n  styleUrl: 'modus-wc-button.scss',\n  shadow: false,\n})\nexport class ModusWcButton {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The color variant of the button. */",
        "type": ": string"
      },
      {
        "name": "disabled",
        "description": "/**\n * A customizable button component used to create buttons with different sizes, variants, and types.\n *\n * The component supports a `<slot>` for injecting content within the button, similar to a native HTML button\n */\n@Component({\n  tag: 'modus-wc-button',\n  styleUrl: 'modus-wc-button.scss',\n  shadow: false,\n})\nexport class ModusWcButton {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The color variant of the button. */",
        "type": ": boolean"
      },
      {
        "name": "fullWidth",
        "description": "/**\n * A customizable button component used to create buttons with different sizes, variants, and types.\n *\n * The component supports a `<slot>` for injecting content within the button, similar to a native HTML button\n */\n@Component({\n  tag: 'modus-wc-button',\n  styleUrl: 'modus-wc-button.scss',\n  shadow: false,\n})\nexport class ModusWcButton {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The color variant of the button. */",
        "type": ": boolean"
      },
      {
        "name": "pressed",
        "description": "/**\n * A customizable button component used to create buttons with different sizes, variants, and types.\n *\n * The component supports a `<slot>` for injecting content within the button, similar to a native HTML button\n */\n@Component({\n  tag: 'modus-wc-button',\n  styleUrl: 'modus-wc-button.scss',\n  shadow: false,\n})\nexport class ModusWcButton {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The color variant of the button. */",
        "type": ": boolean"
      },
      {
        "name": "shape",
        "description": "/**\n * A customizable button component used to create buttons with different sizes, variants, and types.\n *\n * The component supports a `<slot>` for injecting content within the button, similar to a native HTML button\n */\n@Component({\n  tag: 'modus-wc-button',\n  styleUrl: 'modus-wc-button.scss',\n  shadow: false,\n})\nexport class ModusWcButton {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The color variant of the button. */",
        "type": "'circle' | 'rectangle' | 'square'"
      },
      {
        "name": "size",
        "description": "/**\n * A customizable button component used to create buttons with different sizes, variants, and types.\n *\n * The component supports a `<slot>` for injecting content within the button, similar to a native HTML button\n */\n@Component({\n  tag: 'modus-wc-button',\n  styleUrl: 'modus-wc-button.scss',\n  shadow: false,\n})\nexport class ModusWcButton {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The color variant of the button. */",
        "type": "DaisySize"
      },
      {
        "name": "type",
        "description": "/**\n * A customizable button component used to create buttons with different sizes, variants, and types.\n *\n * The component supports a `<slot>` for injecting content within the button, similar to a native HTML button\n */\n@Component({\n  tag: 'modus-wc-button',\n  styleUrl: 'modus-wc-button.scss',\n  shadow: false,\n})\nexport class ModusWcButton {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The color variant of the button. */",
        "type": "'button' | 'submit' | 'reset'"
      },
      {
        "name": "variant",
        "description": "/**\n * A customizable button component used to create buttons with different sizes, variants, and types.\n *\n * The component supports a `<slot>` for injecting content within the button, similar to a native HTML button\n */\n@Component({\n  tag: 'modus-wc-button',\n  styleUrl: 'modus-wc-button.scss',\n  shadow: false,\n})\nexport class ModusWcButton {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The color variant of the button. */",
        "type": "'borderless' | 'filled' | 'outlined'"
      }
    ],
    "events": [],
    "slots": [],
    "default_values": {
      "color": "'primary'",
      "customClass": "''",
      "disabled": "false",
      "fullWidth": "false",
      "pressed": "false",
      "shape": "'rectangle'",
      "size": "'md'",
      "type": "'button'",
      "variant": "'filled'"
    },
    "documentation": "\n\n--- modus-wc-button.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { DaisySize } from '../types';\n\ninterface ButtonArgs {\n  color: 'primary' | 'secondary' | 'tertiary' | 'warning' | 'danger';\n  'custom-class'?: string;\n  disabled: boolean;\n  'full-width': boolean;\n  pressed: boolean;\n  shape: 'circle' | 'rectangle' | 'square';\n  size: DaisySize;\n  type: 'button' | 'submit' | 'reset';\n  variant: 'borderless' | 'filled' | 'outlined';\n}\n\nconst meta: Meta<ButtonArgs> = {\n  title: 'Components/Button',\n  component: 'modus-wc-button',\n  args: {\n    color: 'primary',\n    disabled: false,\n    'full-width': false,\n    pressed: false,\n    shape: 'rectangle',\n    size: 'md',\n    type: 'button',\n    variant: 'filled',\n  },\n  argTypes: {\n    color: {\n      control: { type: 'select' },\n      options: ['primary', 'secondary', 'tertiary', 'warning', 'danger'],\n    },\n    shape: {\n      control: { type: 'select' },\n      options: ['circle', 'rectangle', 'square'],\n    },\n    size: {\n      control: { type: 'select' },\n      options: ['xs', 'sm', 'md', 'lg'],\n    },\n    type: {\n      control: { type: 'select' },\n      options: ['button', 'submit', 'reset'],\n    },\n    variant: {\n      control: { type: 'select' },\n      options: ['borderless', 'filled', 'outlined'],\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['buttonClick'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<ButtonArgs>;\n\nconst Template: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<modus-wc-button\n  color=\"${args.color}\"\n  custom-class=\"${ifDefined(args['custom-class'])}\"\n  ?disabled=\"${args.disabled}\"\n  ?full-width=\"${args['full-width']}\"\n  ?pressed=\"${args.pressed}\"\n  shape=\"${args.shape}\"\n  size=\"${args.size}\"\n  type=\"${args.type}\"\n  variant=\"${args.variant}\"\n>\n  Click me\n</modus-wc-button>\n    `;\n  },\n};\n\nexport const Default: Story = {\n  ...Template,\n};\n\nexport const ButtonShapes: Story = {\n  render: () => {\n    // prettier-ignore\n    return html`\n<modus-wc-button\n  shape=\"circle\"\n>\n  Circle\n</modus-wc-button>\n<modus-wc-button\n  shape=\"square\"\n>\n  Square\n</modus-wc-button>\n    `;\n  },\n};\n\nexport const DynamicTextUpdate: Story = {\n  render: () => {\n    const updateButtonText = () => {\n      const btnText = document.getElementById('btn-text') as HTMLSpanElement;\n      const input = document.getElementById(\n        'btn-text-input'\n      ) as HTMLInputElement;\n\n      btnText.textContent = input.value;\n    };\n\n    // prettier-ignore\n    return html`\n<script>\n  function updateButtonText() {\n    const btnText = document.getElementById('btn-text');\n    const input = document.getElementById('btn-text-input');\n    btnText.textContent = input.value;\n  }\n</script>\n\n<div>\n  <modus-wc-button id=\"text-update-btn\" color=\"primary\" variant=\"filled\" @buttonClick=${updateButtonText}>\n    <modus-wc-icon decorative name=\"shopping_cart\"></modus-wc-icon><span id=\"btn-text\">Press button to update content</span>\n    <modus-wc-icon decorative name=\"shopping_cart\"></modus-wc-icon>\n  </modus-wc-button>\n\n  <div style=\"margin-top: 8px; display: flex; gap: 8px; align-items: center;\">\n    <modus-wc-text-input id=\"btn-text-input\" type=\"text\" value=\"Updated Text\" style=\"padding: 4px 8px;\" />\n  </div>\n</div>\n    `;\n  },\n};\n\nexport const IconOnlyButton: Story = {\n  render: () => {\n    // prettier-ignore\n    return html`\n<modus-wc-button aria-label=\"Notification button\">\n  <modus-wc-icon decorative name=\"notifications\"></modus-wc-icon>\n</modus-wc-button>\n    `;\n  },\n};\n\nexport const IconLeftButton: Story = {\n  render: () => {\n    // prettier-ignore\n    return html`\n<modus-wc-button>\n  <modus-wc-icon decorative name=\"download\"></modus-wc-icon>\n  Download\n</modus-wc-button>\n    `;\n  },\n};\n\nexport const IconRightButton: Story = {\n  render: () => {\n    // prettier-ignore\n    return html`\n<modus-wc-button>\n  Details\n  <modus-wc-icon decorative name=\"launch\"></modus-wc-icon>\n</modus-wc-button>\n    `;\n  },\n};\n\nexport const IconLeftAndRightButton: Story = {\n  render: () => {\n    // prettier-ignore\n    return html`\n<modus-wc-button>\n  <modus-wc-icon decorative name=\"shopping_cart\"></modus-wc-icon>\n  Checkout\n  <modus-wc-icon decorative name=\"shopping_cart\"></modus-wc-icon>\n</modus-wc-button>\n    `;\n  },\n};\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - In 1.0 buttons had specific properties for adding icons (\\`icon-only\\`, \\`left-icon\\`, \\`right-icon\\`). In 2.0, icons are added via slots using the \\`modus-wc-icon\\` component.\n  - The \\`button-style\\` property has been renamed to \\`variant\\` with similar options.\n  - Size values have changed from verbose names (\\`small\\`, \\`medium\\`, \\`large\\`) to abbreviations (\\`sm\\`, \\`md\\`, \\`lg\\`).\n\n#### Prop Mapping\n\n| 1.0 Prop        | 2.0 Prop   | Notes                                                       |\n|-----------------|------------|-------------------------------------------------------------|\n| aria-label      | aria-label |                                                             |\n| button-style    | variant    | \\`fill\\` \u2192 \\`filled\\`, \\`outline\\` \u2192 \\`outlined\\`           |\n| color           | color      | \\`dark\\` and \\`special\\` removed, \\`warning\\` added         |\n| critical-action |            | Not carried over                                            |\n| disabled        | disabled   |                                                             |\n| icon-only       |            | Not carried over, use \\`icon\\` slot                         |\n| left-icon       |            | Not carried over, use \\`icon\\` slot                         |\n| right-icon      |            | Not carried over, use \\`icon\\` slot                         |\n| show-caret      |            | Not carried over                                            |\n| size            | size       | \\`small\\` \u2192 \\`sm\\`, \\`medium\\` \u2192 \\`md\\`, \\`large\\` \u2192 \\`lg\\` |\n| type            | type       |                                                             |\n\n#### Event Mapping\n\n| 1.0 Event    | 2.0 Event    | Notes            |\n|--------------|--------------|------------------|\n| buttonClick  | buttonClick  |                  |\n        `,\n      },\n    },\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  render: () => html`<div></div>`,\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-button\n  color=\"${args.color}\"\n  custom-class=\"${ifDefined(args['custom-class'])}\"\n  ?disabled=\"${args.disabled}\"\n  ?full-width=\"${args['full-width']}\"\n  ?pressed=\"${args.pressed}\"\n  shape=\"${args.shape}\"\n  size=\"${args.size}\"\n  type=\"${args.type}\"\n  variant=\"${args.variant}\"\n>\n  Click me\n</modus-wc-button>",
        "<modus-wc-button\n  shape=\"circle\"\n>\n  Circle\n</modus-wc-button>",
        "<modus-wc-button\n  shape=\"square\"\n>\n  Square\n</modus-wc-button>",
        "<modus-wc-icon decorative name=\"shopping_cart\"></modus-wc-icon>",
        "<modus-wc-icon decorative name=\"shopping_cart\"></modus-wc-icon>"
      ],
      "variants": [
        "${args.variant}",
        "filled"
      ],
      "prop_usage": {
        "color": [
          "${args.color}",
          "primary"
        ],
        "class": [
          "${ifDefined(args["
        ],
        "disabled": [
          "${args.disabled}"
        ],
        "width": [
          "${args["
        ],
        "pressed": [
          "${args.pressed}"
        ],
        "shape": [
          "${args.shape}",
          "circle",
          "square"
        ],
        "size": [
          "${args.size}"
        ],
        "type": [
          "${args.type}",
          "text"
        ],
        "variant": [
          "${args.variant}",
          "filled"
        ],
        "id": [
          "text-update-btn",
          "btn-text",
          "btn-text-input"
        ],
        "name": [
          "shopping_cart",
          "notifications",
          "download",
          "launch"
        ],
        "style": [
          "margin-top: 8px; display: flex; gap: 8px; align-items: center;",
          "padding: 4px 8px;"
        ],
        "value": [
          "Updated Text"
        ],
        "label": [
          "Notification button"
        ]
      }
    },
    "tag_name": "modus-wc-button"
  },
  "modus-wc-stepper": {
    "props": [
      {
        "name": "customClass",
        "description": "/** The color theme of the step */\n  color?:\n    | 'primary'\n    | 'secondary'\n    | 'accent'\n    | 'info'\n    | 'success'\n    | 'warning'\n    | 'error'\n    | 'neutral';\n  /** Custom content to display in the step indicator */\n  content?: string;\n  /** Custom CSS class to apply to the step */\n  customClass?: string;\n  /** Text label for the step */\n  label?: string;\n}\n\n/**\n * Used to show a list of steps in a process.\n */\n@Component({\n  tag: 'modus-wc-stepper',\n  styleUrl: 'modus-wc-stepper.scss',\n  shadow: false,\n})\nexport class ModusWcStepper {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the steps element. */",
        "type": ": string"
      },
      {
        "name": "orientation",
        "description": "/** The color theme of the step */\n  color?:\n    | 'primary'\n    | 'secondary'\n    | 'accent'\n    | 'info'\n    | 'success'\n    | 'warning'\n    | 'error'\n    | 'neutral';\n  /** Custom content to display in the step indicator */\n  content?: string;\n  /** Custom CSS class to apply to the step */\n  customClass?: string;\n  /** Text label for the step */\n  label?: string;\n}\n\n/**\n * Used to show a list of steps in a process.\n */\n@Component({\n  tag: 'modus-wc-stepper',\n  styleUrl: 'modus-wc-stepper.scss',\n  shadow: false,\n})\nexport class ModusWcStepper {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the steps element. */",
        "type": ": Orientation"
      },
      {
        "name": "steps",
        "description": "/** The color theme of the step */\n  color?:\n    | 'primary'\n    | 'secondary'\n    | 'accent'\n    | 'info'\n    | 'success'\n    | 'warning'\n    | 'error'\n    | 'neutral';\n  /** Custom content to display in the step indicator */\n  content?: string;\n  /** Custom CSS class to apply to the step */\n  customClass?: string;\n  /** Text label for the step */\n  label?: string;\n}\n\n/**\n * Used to show a list of steps in a process.\n */\n@Component({\n  tag: 'modus-wc-stepper',\n  styleUrl: 'modus-wc-stepper.scss',\n  shadow: false,\n})\nexport class ModusWcStepper {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the steps element. */",
        "type": "IStepperItem[]"
      }
    ],
    "events": [],
    "slots": [],
    "default_values": {
      "customClass": "''",
      "steps": "[]"
    },
    "documentation": "\n\n--- modus-wc-stepper.stories.ts ---\n\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { Orientation } from '../types';\n\ninterface StepperArgs {\n  'custom-class'?: string;\n  orientation: Orientation;\n  steps?: IStepperItem[];\n}\n\ninterface IStepperItem {\n  color?:\n    | 'primary'\n    | 'secondary'\n    | 'accent'\n    | 'info'\n    | 'success'\n    | 'warning'\n    | 'error'\n    | 'neutral';\n  content?: string;\n  customClass?: string;\n  label?: string;\n}\n\nconst meta: Meta<StepperArgs> = {\n  title: 'Components/Stepper',\n  component: 'modus-wc-stepper',\n  args: {\n    steps: [\n      { label: 'Scale', color: 'primary' },\n      { label: 'Belong', color: 'primary' },\n      { label: 'Grow', color: 'warning' },\n      { label: 'Innovate', content: '\ud83d\ude80' },\n    ],\n  },\n  argTypes: {\n    'custom-class': {\n      control: 'text',\n    },\n    orientation: {\n      control: { type: 'select' },\n      options: ['horizontal', 'vertical'],\n    },\n    steps: {\n      description: 'Array of step objects defining the steps to display',\n      table: {\n        type: {\n          detail: `\n            Interface: IStepperItem\n            Properties:\n            - color ('primary' | 'secondary' | 'accent' | 'info' | 'success' | 'warning' | 'error' | 'neutral', optional): The color theme of the step\n            - content (string, optional): Custom content to display in the step indicator\n            - customClass (string, optional): Custom CSS class to apply to the step\n            - label (string, optional): Text label for the step\n          `,\n        },\n      },\n    },\n  },\n  parameters: {\n    layout: 'padded',\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<StepperArgs>;\n\nconst Template: Story = {\n  // prettier-ignore\n  render: (args) => html`\n<modus-wc-stepper\n  custom-class=\"${ifDefined(args['custom-class'])}\"\n  orientation=\"${ifDefined(args.orientation)}\"\n  .steps=\"${args.steps}\"\n>\n</modus-wc-stepper>\n  `,\n};\n\nexport const Default: Story = { ...Template };\n",
    "storybook": {
      "examples": [
        "<modus-wc-stepper\n  custom-class=\"${ifDefined(args['custom-class'])}\"\n  orientation=\"${ifDefined(args.orientation)}\"\n  .steps=\"${args.steps}\"\n>\n</modus-wc-stepper>",
        "\n<modus-wc-stepper\n  custom-class=\"${ifDefined(args['custom-class'])}\"\n  orientation=\"${ifDefined(args.orientation)}\"\n  .steps=\"${args.steps}\"\n>\n</modus-wc-stepper>\n  "
      ],
      "variants": [],
      "prop_usage": {
        "class": [
          "${ifDefined(args["
        ],
        "orientation": [
          "${ifDefined(args.orientation)}"
        ],
        "steps": [
          "${args.steps}"
        ]
      }
    },
    "tag_name": "modus-wc-stepper"
  },
  "modus-wc-accordion": {
    "props": [
      {
        "name": "customClass",
        "description": "/**\n * A customizable accordion component used for showing and hiding related groups of content.\n *\n * The component supports a `<slot>` for injecting `<modus-wc-collapse>` elements. See [Collapse](/docs/components-collapse--docs) docs for additional info.\n */\n@Component({\n  tag: 'modus-wc-accordion',\n  styleUrl: 'modus-wc-accordion.scss',\n  shadow: false,\n})\nexport class ModusWcAccordion {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */",
        "type": ": string"
      }
    ],
    "events": [
      {
        "name": "expandedChange",
        "description": "/**\n * A customizable accordion component used for showing and hiding related groups of content.\n *\n * The component supports a `<slot>` for injecting `<modus-wc-collapse>` elements. See [Collapse](/docs/components-collapse--docs) docs for additional info.\n */\n@Component({\n  tag: 'modus-wc-accordion',\n  styleUrl: 'modus-wc-accordion.scss',\n  shadow: false,\n})\nexport class ModusWcAccordion {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */\n  @Prop() customClass?: string = '';\n\n  /** When a collapse expanded state is changed, this event outputs the relevant index and state */"
      }
    ],
    "slots": [],
    "default_values": {
      "customClass": "''"
    },
    "documentation": "\n\n--- modus-wc-accordion.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { ICollapseOptions } from '../modus-wc-collapse/modus-wc-collapse';\n\ninterface AccordionArgs {\n  'custom-class'?: string;\n}\n\nconst collapseOptions: ICollapseOptions[] = [\n  {\n    description: 'Item one description',\n    icon: 'alert',\n    iconAriaLabel: 'Alert',\n    title: 'Item One',\n  },\n  {\n    description: 'Item two description',\n    icon: 'alert',\n    iconAriaLabel: 'Alert',\n    title: 'Item Two',\n  },\n  {\n    description: 'Item three description',\n    icon: 'alert',\n    iconAriaLabel: 'Alert',\n    title: 'Item Three',\n  },\n];\n\nconst meta: Meta<AccordionArgs> = {\n  title: 'Components/Accordion',\n  component: 'modus-wc-accordion',\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['expandedChange'],\n    },\n    layout: {\n      padded: true,\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<AccordionArgs>;\n\nconst Template: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<script>\n  const collapseOptions = [\n    {\n      description: 'Item one description',\n      icon: 'alert',\n      iconAriaLabel: 'Alert',\n      title: 'Item One',\n    },\n    {\n      description: 'Item two description',\n      icon: 'alert',\n      iconAriaLabel: 'Alert',\n      title: 'Item Two',\n    },\n    {\n      description: 'Item three description',\n      icon: 'alert',\n      iconAriaLabel: 'Alert',\n      title: 'Item Three',\n    },\n  ];\n</script>\n<div style=\"padding: 20px;\">\n  <modus-wc-accordion custom-class=${ifDefined(args['custom-class'])}>\n    <modus-wc-collapse .options=${collapseOptions[0]}>\n      <div slot=\"content\">Collapse content</div>\n    </modus-wc-collapse>\n    <modus-wc-collapse .options=${collapseOptions[1]}>\n      <div slot=\"content\">Collapse content</div>\n    </modus-wc-collapse>\n    <modus-wc-collapse .options=${collapseOptions[2]}>\n      <div slot=\"content\">Collapse content</div>\n    </modus-wc-collapse>\n  </modus-wc-accordion>\n</div>\n    `;\n  },\n};\n\nexport const Default: Story = { ...Template };\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - In 1.0 the accordion was composed of child accordion-item components. In 2.0 accordion children are collapse\n  components.\n  - The new accordion supports \\`header\\` and \\`content\\` slots to provide maximum flexibility.\n  - Size values have changed from (\\`condensed\\`, \\`standard\\`) in 1.0 accordion-item to abbreviations (\\`xs\\`, \\`sm\\`, \\`md\\`, \\`lg\\`) in 2.0 collapse.\n\n#### Prop Mapping\n\n##### accordion\n\n| 1.0 Prop           | 2.0 Prop           | Notes            |\n|--------------------|--------------------|------------------|\n| aria-label         | aria-label         |                  |\n\n##### accordion-item \u2192 collapse\n\n| 1.0 Prop           | 2.0 Prop            | Notes            |\n|--------------------|---------------------|------------------|\n| aria-label         | aria-label          |                  |\n| disabled           |                     | Not carried over |\n| expand-button-type |                     | Not carried over |\n| expanded           | expanded            |                  |\n| header-text        | options.title       |                  |\n| icon               | options.icon        |                  |\n| supporting-label   | options.description |                  |\n| size               | options.size        |                  |\n\n#### Event Mapping\n\n##### accordion-item \u2192 accordion\n\nThe new accordion and collapse have their own events. We recommend using the\naccordion events to migrate.\n\n| 1.0 Event | 2.0 Event      | Notes            |\n|-----------|----------------|------------------|\n| closed    | expandedChange |                  |\n| opened    | expandedChange |                  |\n        `,\n      },\n    },\n    // To hide the actual story rendering and only show docs:\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  // Simple render function or leave it empty\n  render: () => html`<div></div>`,\n};\n",
    "storybook": {
      "examples": [
        "\n<script>\n  const collapseOptions = [\n    {\n      description: 'Item one description',\n      icon: 'alert',\n      iconAriaLabel: 'Alert',\n      title: 'Item One',\n    },\n    {\n      description: 'Item two description',\n      icon: 'alert',\n      iconAriaLabel: 'Alert',\n      title: 'Item Two',\n    },\n    {\n      description: 'Item three description',\n      icon: 'alert',\n      iconAriaLabel: 'Alert',\n      title: 'Item Three',\n    },\n  ];\n</script>\n<div style=\"padding: 20px;\">\n  <modus-wc-accordion custom-class=${ifDefined(args['custom-class'])}>\n    <modus-wc-collapse .options=${collapseOptions[0]}>\n      <div slot=\"content\">Collapse content</div>\n    </modus-wc-collapse>\n    <modus-wc-collapse .options=${collapseOptions[1]}>\n      <div slot=\"content\">Collapse content</div>\n    </modus-wc-collapse>\n    <modus-wc-collapse .options=${collapseOptions[2]}>\n      <div slot=\"content\">Collapse content</div>\n    </modus-wc-collapse>\n  </modus-wc-accordion>\n</div>\n    "
      ],
      "variants": [],
      "prop_usage": {
        "style": [
          "padding: 20px;"
        ],
        "slot": [
          "content"
        ]
      }
    },
    "tag_name": "modus-wc-accordion"
  },
  "modus-wc-text-input": {
    "props": [
      {
        "name": "autoCapitalize",
        "description": "/**\n * A customizable input component used to create text inputs with types.\n */\n@Component({\n  tag: 'modus-wc-text-input',\n  styleUrl: 'modus-wc-text-input.scss',\n  shadow: false,\n})\nexport class ModusWcTextInput {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic capitalization in inputted text. */",
        "type": ":\n    | 'off'\n    | 'none'\n    | 'on'\n    | 'sentences'\n    | 'words'\n    | 'characters'"
      },
      {
        "name": "autoComplete",
        "description": "/**\n * A customizable input component used to create text inputs with types.\n */\n@Component({\n  tag: 'modus-wc-text-input',\n  styleUrl: 'modus-wc-text-input.scss',\n  shadow: false,\n})\nexport class ModusWcTextInput {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic capitalization in inputted text. */",
        "type": ": AutocompleteTypes"
      },
      {
        "name": "autoCorrect",
        "description": "/**\n * A customizable input component used to create text inputs with types.\n */\n@Component({\n  tag: 'modus-wc-text-input',\n  styleUrl: 'modus-wc-text-input.scss',\n  shadow: false,\n})\nexport class ModusWcTextInput {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic capitalization in inputted text. */",
        "type": ": 'on' | 'off'"
      },
      {
        "name": "bordered",
        "description": "/**\n * A customizable input component used to create text inputs with types.\n */\n@Component({\n  tag: 'modus-wc-text-input',\n  styleUrl: 'modus-wc-text-input.scss',\n  shadow: false,\n})\nexport class ModusWcTextInput {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic capitalization in inputted text. */",
        "type": ": boolean"
      },
      {
        "name": "clearAriaLabel",
        "description": "/**\n * A customizable input component used to create text inputs with types.\n */\n@Component({\n  tag: 'modus-wc-text-input',\n  styleUrl: 'modus-wc-text-input.scss',\n  shadow: false,\n})\nexport class ModusWcTextInput {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic capitalization in inputted text. */",
        "type": ": string"
      },
      {
        "name": "customClass",
        "description": "/**\n * A customizable input component used to create text inputs with types.\n */\n@Component({\n  tag: 'modus-wc-text-input',\n  styleUrl: 'modus-wc-text-input.scss',\n  shadow: false,\n})\nexport class ModusWcTextInput {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic capitalization in inputted text. */",
        "type": ": string"
      },
      {
        "name": "disabled",
        "description": "/**\n * A customizable input component used to create text inputs with types.\n */\n@Component({\n  tag: 'modus-wc-text-input',\n  styleUrl: 'modus-wc-text-input.scss',\n  shadow: false,\n})\nexport class ModusWcTextInput {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic capitalization in inputted text. */",
        "type": ": boolean"
      },
      {
        "name": "enterkeyhint",
        "description": "/**\n * A customizable input component used to create text inputs with types.\n */\n@Component({\n  tag: 'modus-wc-text-input',\n  styleUrl: 'modus-wc-text-input.scss',\n  shadow: false,\n})\nexport class ModusWcTextInput {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic capitalization in inputted text. */",
        "type": ":\n    | 'enter'\n    | 'done'\n    | 'go'\n    | 'next'\n    | 'previous'\n    | 'search'\n    | 'send'"
      },
      {
        "name": "feedback",
        "description": "/**\n * A customizable input component used to create text inputs with types.\n */\n@Component({\n  tag: 'modus-wc-text-input',\n  styleUrl: 'modus-wc-text-input.scss',\n  shadow: false,\n})\nexport class ModusWcTextInput {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic capitalization in inputted text. */",
        "type": ": IInputFeedbackProp"
      },
      {
        "name": "includeClear",
        "description": "/**\n * A customizable input component used to create text inputs with types.\n */\n@Component({\n  tag: 'modus-wc-text-input',\n  styleUrl: 'modus-wc-text-input.scss',\n  shadow: false,\n})\nexport class ModusWcTextInput {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic capitalization in inputted text. */",
        "type": ": boolean"
      },
      {
        "name": "includeSearch",
        "description": "/**\n * A customizable input component used to create text inputs with types.\n */\n@Component({\n  tag: 'modus-wc-text-input',\n  styleUrl: 'modus-wc-text-input.scss',\n  shadow: false,\n})\nexport class ModusWcTextInput {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic capitalization in inputted text. */",
        "type": ": boolean"
      },
      {
        "name": "inputId",
        "description": "/**\n * A customizable input component used to create text inputs with types.\n */\n@Component({\n  tag: 'modus-wc-text-input',\n  styleUrl: 'modus-wc-text-input.scss',\n  shadow: false,\n})\nexport class ModusWcTextInput {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic capitalization in inputted text. */",
        "type": ": string"
      },
      {
        "name": "inputTabIndex",
        "description": "/**\n * A customizable input component used to create text inputs with types.\n */\n@Component({\n  tag: 'modus-wc-text-input',\n  styleUrl: 'modus-wc-text-input.scss',\n  shadow: false,\n})\nexport class ModusWcTextInput {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic capitalization in inputted text. */",
        "type": ": number"
      },
      {
        "name": "label",
        "description": "/**\n * A customizable input component used to create text inputs with types.\n */\n@Component({\n  tag: 'modus-wc-text-input',\n  styleUrl: 'modus-wc-text-input.scss',\n  shadow: false,\n})\nexport class ModusWcTextInput {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic capitalization in inputted text. */",
        "type": ": string"
      },
      {
        "name": "maxLength",
        "description": "/**\n * A customizable input component used to create text inputs with types.\n */\n@Component({\n  tag: 'modus-wc-text-input',\n  styleUrl: 'modus-wc-text-input.scss',\n  shadow: false,\n})\nexport class ModusWcTextInput {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic capitalization in inputted text. */",
        "type": ": number"
      },
      {
        "name": "minLength",
        "description": "/**\n * A customizable input component used to create text inputs with types.\n */\n@Component({\n  tag: 'modus-wc-text-input',\n  styleUrl: 'modus-wc-text-input.scss',\n  shadow: false,\n})\nexport class ModusWcTextInput {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic capitalization in inputted text. */",
        "type": ": number"
      },
      {
        "name": "name",
        "description": "/**\n * A customizable input component used to create text inputs with types.\n */\n@Component({\n  tag: 'modus-wc-text-input',\n  styleUrl: 'modus-wc-text-input.scss',\n  shadow: false,\n})\nexport class ModusWcTextInput {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic capitalization in inputted text. */",
        "type": ": string"
      },
      {
        "name": "pattern",
        "description": "/**\n * A customizable input component used to create text inputs with types.\n */\n@Component({\n  tag: 'modus-wc-text-input',\n  styleUrl: 'modus-wc-text-input.scss',\n  shadow: false,\n})\nexport class ModusWcTextInput {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic capitalization in inputted text. */",
        "type": ": string"
      },
      {
        "name": "placeholder",
        "description": "/**\n * A customizable input component used to create text inputs with types.\n */\n@Component({\n  tag: 'modus-wc-text-input',\n  styleUrl: 'modus-wc-text-input.scss',\n  shadow: false,\n})\nexport class ModusWcTextInput {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic capitalization in inputted text. */",
        "type": ": string"
      },
      {
        "name": "readOnly",
        "description": "/**\n * A customizable input component used to create text inputs with types.\n */\n@Component({\n  tag: 'modus-wc-text-input',\n  styleUrl: 'modus-wc-text-input.scss',\n  shadow: false,\n})\nexport class ModusWcTextInput {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic capitalization in inputted text. */",
        "type": ": boolean"
      },
      {
        "name": "required",
        "description": "/**\n * A customizable input component used to create text inputs with types.\n */\n@Component({\n  tag: 'modus-wc-text-input',\n  styleUrl: 'modus-wc-text-input.scss',\n  shadow: false,\n})\nexport class ModusWcTextInput {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic capitalization in inputted text. */",
        "type": ": boolean"
      },
      {
        "name": "size",
        "description": "/**\n * A customizable input component used to create text inputs with types.\n */\n@Component({\n  tag: 'modus-wc-text-input',\n  styleUrl: 'modus-wc-text-input.scss',\n  shadow: false,\n})\nexport class ModusWcTextInput {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic capitalization in inputted text. */",
        "type": ": ModusSize"
      },
      {
        "name": "type",
        "description": "/**\n * A customizable input component used to create text inputs with types.\n */\n@Component({\n  tag: 'modus-wc-text-input',\n  styleUrl: 'modus-wc-text-input.scss',\n  shadow: false,\n})\nexport class ModusWcTextInput {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic capitalization in inputted text. */",
        "type": ": TextFieldTypes"
      },
      {
        "name": "value",
        "description": "/**\n * A customizable input component used to create text inputs with types.\n */\n@Component({\n  tag: 'modus-wc-text-input',\n  styleUrl: 'modus-wc-text-input.scss',\n  shadow: false,\n})\nexport class ModusWcTextInput {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic capitalization in inputted text. */",
        "type": "string"
      }
    ],
    "events": [
      {
        "name": "inputBlur",
        "description": "/**\n * A customizable input component used to create text inputs with types.\n */\n@Component({\n  tag: 'modus-wc-text-input',\n  styleUrl: 'modus-wc-text-input.scss',\n  shadow: false,\n})\nexport class ModusWcTextInput {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic capitalization in inputted text. */\n  @Prop() autoCapitalize?:\n    | 'off'\n    | 'none'\n    | 'on'\n    | 'sentences'\n    | 'words'\n    | 'characters';\n\n  /** Hint for form autofill feature. */\n  @Prop() autoComplete?: AutocompleteTypes;\n\n  /** Controls automatic correction in inputted text. Support by browser varies. */\n  @Prop() autoCorrect?: 'on' | 'off';\n\n  /** Indicates that the input should have a border. */\n  @Prop() bordered?: boolean = true;\n\n  /** Aria label for the clear icon button. */\n  @Prop() clearAriaLabel?: string = 'Clear text';\n\n  /** Custom CSS class to apply to the input. */\n  @Prop() customClass?: string = '';\n\n  /** Whether the form control is disabled. */\n  @Prop() disabled?: boolean = false;\n\n  /** A hint to the browser for which enter key to display. */\n  @Prop() enterkeyhint?:\n    | 'enter'\n    | 'done'\n    | 'go'\n    | 'next'\n    | 'previous'\n    | 'search'\n    | 'send';\n\n  /** Feedback to render below the input. */\n  @Prop() feedback?: IInputFeedbackProp;\n\n  /** Show the clear button within the input field. */\n  @Prop() includeClear?: boolean = false;\n\n  /** Show the search icon within the input field. */\n  @Prop() includeSearch?: boolean = false;\n\n  /** The ID of the input element. */\n  @Prop() inputId?: string;\n\n  /** Determine the control's relative ordering for sequential focus navigation (typically with the Tab key). */\n  @Prop() inputTabIndex?: number;\n\n  /** The text to display within the label. */\n  @Prop() label?: string;\n\n  /** Maximum length (number of characters) of value. */\n  @Prop() maxLength?: number;\n\n  /** Minimum length (number of characters) of value. */\n  @Prop() minLength?: number;\n\n  /** Name of the form control. Submitted with the form as part of a name/value pair. */\n  @Prop() name?: string;\n\n  /** Pattern the value must match to be valid */\n  @Prop() pattern?: string;\n\n  /** Text that appears in the form control when it has no value set. */\n  @Prop() placeholder?: string = '';\n\n  /** Whether the value is editable. */\n  @Prop() readOnly?: boolean = false;\n\n  /** A value is required for the form to be submittable. */\n  @Prop() required?: boolean = false;\n\n  /** The size of the input. */\n  @Prop() size?: ModusSize = 'md';\n\n  /** Type of form control. */\n  @Prop() type?: TextFieldTypes = 'text';\n\n  /** The value of the control. */\n  @Prop({ mutable: true, reflect: true }) value: string = '';\n\n  /** Event emitted when the input loses focus. */"
      },
      {
        "name": "inputChange",
        "description": "/**\n * A customizable input component used to create text inputs with types.\n */\n@Component({\n  tag: 'modus-wc-text-input',\n  styleUrl: 'modus-wc-text-input.scss',\n  shadow: false,\n})\nexport class ModusWcTextInput {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic capitalization in inputted text. */\n  @Prop() autoCapitalize?:\n    | 'off'\n    | 'none'\n    | 'on'\n    | 'sentences'\n    | 'words'\n    | 'characters';\n\n  /** Hint for form autofill feature. */\n  @Prop() autoComplete?: AutocompleteTypes;\n\n  /** Controls automatic correction in inputted text. Support by browser varies. */\n  @Prop() autoCorrect?: 'on' | 'off';\n\n  /** Indicates that the input should have a border. */\n  @Prop() bordered?: boolean = true;\n\n  /** Aria label for the clear icon button. */\n  @Prop() clearAriaLabel?: string = 'Clear text';\n\n  /** Custom CSS class to apply to the input. */\n  @Prop() customClass?: string = '';\n\n  /** Whether the form control is disabled. */\n  @Prop() disabled?: boolean = false;\n\n  /** A hint to the browser for which enter key to display. */\n  @Prop() enterkeyhint?:\n    | 'enter'\n    | 'done'\n    | 'go'\n    | 'next'\n    | 'previous'\n    | 'search'\n    | 'send';\n\n  /** Feedback to render below the input. */\n  @Prop() feedback?: IInputFeedbackProp;\n\n  /** Show the clear button within the input field. */\n  @Prop() includeClear?: boolean = false;\n\n  /** Show the search icon within the input field. */\n  @Prop() includeSearch?: boolean = false;\n\n  /** The ID of the input element. */\n  @Prop() inputId?: string;\n\n  /** Determine the control's relative ordering for sequential focus navigation (typically with the Tab key). */\n  @Prop() inputTabIndex?: number;\n\n  /** The text to display within the label. */\n  @Prop() label?: string;\n\n  /** Maximum length (number of characters) of value. */\n  @Prop() maxLength?: number;\n\n  /** Minimum length (number of characters) of value. */\n  @Prop() minLength?: number;\n\n  /** Name of the form control. Submitted with the form as part of a name/value pair. */\n  @Prop() name?: string;\n\n  /** Pattern the value must match to be valid */\n  @Prop() pattern?: string;\n\n  /** Text that appears in the form control when it has no value set. */\n  @Prop() placeholder?: string = '';\n\n  /** Whether the value is editable. */\n  @Prop() readOnly?: boolean = false;\n\n  /** A value is required for the form to be submittable. */\n  @Prop() required?: boolean = false;\n\n  /** The size of the input. */\n  @Prop() size?: ModusSize = 'md';\n\n  /** Type of form control. */\n  @Prop() type?: TextFieldTypes = 'text';\n\n  /** The value of the control. */\n  @Prop({ mutable: true, reflect: true }) value: string = '';\n\n  /** Event emitted when the input loses focus. */"
      },
      {
        "name": "inputFocus",
        "description": "/**\n * A customizable input component used to create text inputs with types.\n */\n@Component({\n  tag: 'modus-wc-text-input',\n  styleUrl: 'modus-wc-text-input.scss',\n  shadow: false,\n})\nexport class ModusWcTextInput {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic capitalization in inputted text. */\n  @Prop() autoCapitalize?:\n    | 'off'\n    | 'none'\n    | 'on'\n    | 'sentences'\n    | 'words'\n    | 'characters';\n\n  /** Hint for form autofill feature. */\n  @Prop() autoComplete?: AutocompleteTypes;\n\n  /** Controls automatic correction in inputted text. Support by browser varies. */\n  @Prop() autoCorrect?: 'on' | 'off';\n\n  /** Indicates that the input should have a border. */\n  @Prop() bordered?: boolean = true;\n\n  /** Aria label for the clear icon button. */\n  @Prop() clearAriaLabel?: string = 'Clear text';\n\n  /** Custom CSS class to apply to the input. */\n  @Prop() customClass?: string = '';\n\n  /** Whether the form control is disabled. */\n  @Prop() disabled?: boolean = false;\n\n  /** A hint to the browser for which enter key to display. */\n  @Prop() enterkeyhint?:\n    | 'enter'\n    | 'done'\n    | 'go'\n    | 'next'\n    | 'previous'\n    | 'search'\n    | 'send';\n\n  /** Feedback to render below the input. */\n  @Prop() feedback?: IInputFeedbackProp;\n\n  /** Show the clear button within the input field. */\n  @Prop() includeClear?: boolean = false;\n\n  /** Show the search icon within the input field. */\n  @Prop() includeSearch?: boolean = false;\n\n  /** The ID of the input element. */\n  @Prop() inputId?: string;\n\n  /** Determine the control's relative ordering for sequential focus navigation (typically with the Tab key). */\n  @Prop() inputTabIndex?: number;\n\n  /** The text to display within the label. */\n  @Prop() label?: string;\n\n  /** Maximum length (number of characters) of value. */\n  @Prop() maxLength?: number;\n\n  /** Minimum length (number of characters) of value. */\n  @Prop() minLength?: number;\n\n  /** Name of the form control. Submitted with the form as part of a name/value pair. */\n  @Prop() name?: string;\n\n  /** Pattern the value must match to be valid */\n  @Prop() pattern?: string;\n\n  /** Text that appears in the form control when it has no value set. */\n  @Prop() placeholder?: string = '';\n\n  /** Whether the value is editable. */\n  @Prop() readOnly?: boolean = false;\n\n  /** A value is required for the form to be submittable. */\n  @Prop() required?: boolean = false;\n\n  /** The size of the input. */\n  @Prop() size?: ModusSize = 'md';\n\n  /** Type of form control. */\n  @Prop() type?: TextFieldTypes = 'text';\n\n  /** The value of the control. */\n  @Prop({ mutable: true, reflect: true }) value: string = '';\n\n  /** Event emitted when the input loses focus. */"
      }
    ],
    "slots": [],
    "default_values": {
      "bordered": "true",
      "clearAriaLabel": "'Clear text'",
      "customClass": "''",
      "disabled": "false",
      "enterkeyhint": "{this.enterkeyhint}\n            id={effectiveId}\n            maxlength={this.maxLength}\n            minlength={this.minLength}\n            name={this.name}\n            onBlur={this.handleBlur}\n            onFocus={this.handleFocus}\n            onInput={this.handleInput}\n            pattern={this.pattern}\n            placeholder={this.placeholder}\n            readonly={this.readOnly}\n            required={this.required}\n            tabIndex={this.inputTabIndex}\n            type={this.type}\n            value={this.value}\n            {...this.inheritedAttributes}\n          />\n          {this.includeClear && (\n            <div\n              class={`modus-wc-clear-icon-container ${showClear ? 'modus-wc-clear-icon-visible' : 'modus-wc-clear-icon-hidden'}`}\n            >\n              <CloseSolidIcon\n                ariaLabel={this.clearAriaLabel}\n                className=\"modus-wc-text-input-icon modus-wc-text-input-icon-clear\"\n                decorative={false}\n                onClear={this.handleClearText}\n              />\n            </div>\n          )}\n        </label>\n        {this.feedback && (\n          <modus-wc-input-feedback\n            level={this.feedback.level}\n            message={this.feedback.message}\n            size={this.size}\n          />\n        )}\n      </Host>\n    )",
      "includeClear": "false",
      "includeSearch": "false",
      "name": "\"custom-icon\" />\n            </div>\n          ) : (\n            this.includeSearch && (\n              <SearchSolidIcon className=\"modus-wc-text-input-icon modus-wc-text-input-icon-search\" />\n            )\n          )}\n          <input\n            aria-required={this.required}\n            autocapitalize={this.autoCapitalize}\n            autocomplete={this.autoComplete}\n            autocorrect={this.autoCorrect}\n            class=\"modus-wc-grow\"\n            disabled={this.disabled}\n            enterkeyhint={this.enterkeyhint}\n            id={effectiveId}\n            maxlength={this.maxLength}\n            minlength={this.minLength}\n            name={this.name}\n            onBlur={this.handleBlur}\n            onFocus={this.handleFocus}\n            onInput={this.handleInput}\n            pattern={this.pattern}\n            placeholder={this.placeholder}\n            readonly={this.readOnly}\n            required={this.required}\n            tabIndex={this.inputTabIndex}\n            type={this.type}\n            value={this.value}\n            {...this.inheritedAttributes}\n          />\n          {this.includeClear && (\n            <div\n              class={`modus-wc-clear-icon-container ${showClear ? 'modus-wc-clear-icon-visible' : 'modus-wc-clear-icon-hidden'}`}\n            >\n              <CloseSolidIcon\n                ariaLabel={this.clearAriaLabel}\n                className=\"modus-wc-text-input-icon modus-wc-text-input-icon-clear\"\n                decorative={false}\n                onClear={this.handleClearText}\n              />\n            </div>\n          )}\n        </label>\n        {this.feedback && (\n          <modus-wc-input-feedback\n            level={this.feedback.level}\n            message={this.feedback.message}\n            size={this.size}\n          />\n        )}\n      </Host>\n    )",
      "pattern": "{this.pattern}\n            placeholder={this.placeholder}\n            readonly={this.readOnly}\n            required={this.required}\n            tabIndex={this.inputTabIndex}\n            type={this.type}\n            value={this.value}\n            {...this.inheritedAttributes}\n          />\n          {this.includeClear && (\n            <div\n              class={`modus-wc-clear-icon-container ${showClear ? 'modus-wc-clear-icon-visible' : 'modus-wc-clear-icon-hidden'}`}\n            >\n              <CloseSolidIcon\n                ariaLabel={this.clearAriaLabel}\n                className=\"modus-wc-text-input-icon modus-wc-text-input-icon-clear\"\n                decorative={false}\n                onClear={this.handleClearText}\n              />\n            </div>\n          )}\n        </label>\n        {this.feedback && (\n          <modus-wc-input-feedback\n            level={this.feedback.level}\n            message={this.feedback.message}\n            size={this.size}\n          />\n        )}\n      </Host>\n    )",
      "placeholder": "''",
      "readOnly": "false",
      "required": "false",
      "size": "'md'",
      "type": "'text'",
      "value": "''"
    },
    "documentation": "\n\n--- modus-wc-text-input.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { AutocompleteTypes, IInputFeedbackProp, ModusSize } from '../types';\n\ninterface TextInputArgs {\n  'auto-capitalize'?:\n    | 'off'\n    | 'none'\n    | 'on'\n    | 'sentences'\n    | 'words'\n    | 'characters';\n  'auto-complete'?: AutocompleteTypes;\n  'auto-correct'?: 'on' | 'off';\n  bordered?: boolean;\n  'clear-aria-label'?: string;\n  'custom-class'?: string;\n  disabled?: boolean;\n  enterkeyhint?:\n    | 'enter'\n    | 'done'\n    | 'go'\n    | 'next'\n    | 'previous'\n    | 'search'\n    | 'send';\n  feedback?: IInputFeedbackProp;\n  'include-clear'?: boolean;\n  'include-search'?: boolean;\n  'input-id'?: string;\n  inputmode?:\n    | 'decimal'\n    | 'email'\n    | 'none'\n    | 'numeric'\n    | 'search'\n    | 'tel'\n    | 'text'\n    | 'url';\n  'input-tab-index'?: number;\n  label?: string;\n  'max-length': number;\n  'min-length': number;\n  name?: string;\n  pattern?: string;\n  placeholder?: string;\n  'read-only'?: boolean;\n  required?: boolean;\n  size?: ModusSize;\n  spellcheck?: boolean;\n  type?: 'email' | 'password' | 'search' | 'tel' | 'text' | 'url';\n  value: string;\n}\n\nconst meta: Meta<TextInputArgs> = {\n  title: 'Components/Forms/Text Input',\n  component: 'modus-wc-text-input',\n  args: {\n    bordered: true,\n    disabled: false,\n    'include-clear': false,\n    'include-search': false,\n    inputmode: 'text',\n    label: 'Label',\n    size: 'md',\n    spellcheck: false,\n    type: 'text',\n    value: '',\n  },\n  argTypes: {\n    'auto-capitalize': {\n      options: ['off', 'none', 'on', 'sentences', 'words', 'characters'],\n    },\n    'auto-complete': {\n      control: { type: 'text' },\n    },\n    'auto-correct': {\n      options: ['on', 'off'],\n    },\n    enterkeyhint: {\n      options: ['enter', 'done', 'go', 'next', 'previous', 'search', 'send'],\n    },\n    feedback: {\n      description: 'Feedback prop for input components',\n      table: {\n        type: {\n          detail: `\n            Interface: IInputFeedbackProp\n            Properties:\n            - level ('error' | 'info' | 'success' | 'warning'): The feedback level\n            - message (string, optional): The feedback message\n          `,\n        },\n      },\n    },\n    inputmode: {\n      control: { type: 'select' },\n      options: [\n        'decimal',\n        'email',\n        'none',\n        'numeric',\n        'search',\n        'tel',\n        'text',\n        'url',\n      ],\n    },\n    size: {\n      options: ['sm', 'md', 'lg'],\n    },\n    spellcheck: {\n      description:\n        'Whether the element may be checked for spelling errors. A hint for the browser, not a guarantee.',\n      table: {\n        category: 'attributes',\n        defaultValue: { summary: 'false' },\n      },\n    },\n    type: {\n      options: ['email', 'password', 'search', 'tel', 'text', 'url'],\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['inputBlur', 'inputChange', 'inputFocus'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<TextInputArgs>;\n\nconst Template: Story = {\n  render: (args) => html`\n    <modus-wc-text-input\n      aria-label=\"Text input\"\n      auto-capitalize=${ifDefined(args['auto-capitalize'])}\n      auto-complete=${ifDefined(args['auto-complete'])}\n      auto-correct=${ifDefined(args['auto-correct'])}\n      ?bordered=${args.bordered}\n      clear-aria-label=${ifDefined(args['clear-aria-label'])}\n      custom-class=${ifDefined(args['custom-class'])}\n      ?disabled=${args.disabled}\n      enterkeyhint=${ifDefined(args.enterkeyhint)}\n      .feedback=${args.feedback}\n      include-clear=${ifDefined(args['include-clear'])}\n      include-search=${ifDefined(args['include-search'])}\n      input-aria-invalid=${ifDefined(args['input-aria-invalid'])}\n      input-id=${ifDefined(args['input-id'])}\n      inputmode=${ifDefined(args.inputmode)}\n      input-tab-index=${ifDefined(args['input-tab-index'])}\n      label=${ifDefined(args.label)}\n      max-length=${ifDefined(args['max-length'])}\n      min-length=${ifDefined(args['min-length'])}\n      name=${ifDefined(args.name)}\n      pattern=${ifDefined(args.pattern)}\n      placeholder=${ifDefined(args.placeholder)}\n      ?read-only=${args['read-only']}\n      ?required=${args.required}\n      size=${ifDefined(args.size)}\n      spellcheck=${ifDefined(args.spellcheck)}\n      type=${ifDefined(args.type)}\n      .value=${args.value}\n    ></modus-wc-text-input>\n  `,\n};\n\nexport const Default: Story = { ...Template };\n\nconst errorFeedback: IInputFeedbackProp = {\n  level: 'error',\n  message: 'Value is required.',\n};\n\nexport const WithErrorFeedback: Story = {\n  ...Template,\n  args: { feedback: errorFeedback, required: true },\n};\n\nexport const WithCustomIconSlot: Story = {\n  // prettier-ignore\n  render: (args) => html`\n<modus-wc-text-input\n  aria-label=\"Text input with custom icon\"\n  auto-capitalize=${ifDefined(args['auto-capitalize'])}\n  auto-complete=${ifDefined(args['auto-complete'])}\n  auto-correct=${ifDefined(args['auto-correct'])}\n  ?bordered=${args.bordered}\n  clear-aria-label=${ifDefined(args['clear-aria-label'])}\n  custom-class=${ifDefined(args['custom-class'])}\n  ?disabled=${args.disabled}\n  enterkeyhint=${ifDefined(args.enterkeyhint)}\n  .feedback=${args.feedback}\n  include-clear=${ifDefined(args['include-clear'])}\n  include-search=${ifDefined(args['include-search'])}\n  input-id=${ifDefined(args['input-id'])}\n  inputmode=${ifDefined(args.inputmode)}\n  input-tab-index=${ifDefined(args['input-tab-index'])}\n  label=${ifDefined(args.label)}\n  max-length=${ifDefined(args['max-length'])}\n  min-length=${ifDefined(args['min-length'])}\n  name=${ifDefined(args.name)}\n  pattern=${ifDefined(args.pattern)}\n  placeholder=${ifDefined(args.placeholder)}\n  ?read-only=${args['read-only']}\n  ?required=${args.required}\n  size=${ifDefined(args.size)}\n  spellcheck=${ifDefined(args.spellcheck)}\n  type=${ifDefined(args.type)}\n  .value=${args.value}\n>\n  <modus-wc-icon slot=\"custom-icon\" name=\"heart\" size=\"sm\"></modus-wc-icon>\n</modus-wc-text-input>\n  `,\n  args: {\n    placeholder: 'Enter text here...',\n  },\n};\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - In 1.0 input state was maintained by the component. 2.0 components encourage users to follow a controlled\n  input model. See the Form Inputs [documentation]([Angular](?path=/docs/documentation-form-inputs--docs) for\n  additional info and examples.\n  - Size values have changed from verbose names (\\`small\\`, \\`medium\\`, \\`large\\`) to abbreviations (\\`sm\\`, \\`md\\`, \\`lg\\`).\n\n#### Prop Mapping\n\n| 1.0 Prop                     | 2.0 Prop            | Notes                                                       |\n|------------------------------|---------------------|-------------------------------------------------------------|\n| aria-label                   | aria-label          |                                                             |\n| autocapitalize               | auto-capitalize     |                                                             |\n| autocorrect                  | auto-correct        |                                                             |\n| autocomplete                 | autocomplete        |                                                             |\n| auto-focus-input             | autofocus           |                                                             |\n| clearable                    | include-clear       |                                                             |\n| disabled                     | disabled            |                                                             |\n| enter-key-hint               | enterkeyhint        |                                                             |\n| error-text                   | feedback.message    | Use \\`feedback\\` level                                      |\n| helper-text                  |                     | Not carried over                                            |\n| include-error-icon           |                     | Not carried over                                            |\n| include-search-icon          | include-search      |                                                             |\n| include-password-text-toggle |                     | Not carried over                                            |\n| inputmode                    | inputmode          |                                                             |\n| label                        | label               |                                                             |\n| max-length                   | max-length          |                                                             |\n| pattern                      | pattern             |                                                             |\n| placeholder                  | placeholder         |                                                             |\n| read-only                    | read-only           |                                                             |\n| required                     | required            |                                                             |\n| size                         | size                | \\`small\\` \u2192 \\`sm\\`, \\`medium\\` \u2192 \\`md\\`, \\`large\\` \u2192 \\`lg\\` |\n| spellcheck                   | spellcheck          |                                                             |\n| text-align                   |                     | Not carried over, use CSS instead                           |\n| type                         | type                |                                                             |\n| valid-text                   | feedback.message    | Use \\`feedback\\` level                                      |\n| value                        | value               |                                                             |\n\n#### Event Mapping\n\n| 1.0 Event   | 2.0 Event   | Notes            |\n|-------------|-------------|------------------|\n| valueChange | inputChange |                  |\n        `,\n      },\n    },\n    // To hide the actual story rendering and only show docs:\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  // Simple render function or leave it empty\n  render: () => html`<div></div>`,\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-text-input\n      aria-label=\"Text input\"\n      auto-capitalize=${ifDefined(args['auto-capitalize'])}\n      auto-complete=${ifDefined(args['auto-complete'])}\n      auto-correct=${ifDefined(args['auto-correct'])}\n      ?bordered=${args.bordered}\n      clear-aria-label=${ifDefined(args['clear-aria-label'])}\n      custom-class=${ifDefined(args['custom-class'])}\n      ?disabled=${args.disabled}\n      enterkeyhint=${ifDefined(args.enterkeyhint)}\n      .feedback=${args.feedback}\n      include-clear=${ifDefined(args['include-clear'])}\n      include-search=${ifDefined(args['include-search'])}\n      input-aria-invalid=${ifDefined(args['input-aria-invalid'])}\n      input-id=${ifDefined(args['input-id'])}\n      inputmode=${ifDefined(args.inputmode)}\n      input-tab-index=${ifDefined(args['input-tab-index'])}\n      label=${ifDefined(args.label)}\n      max-length=${ifDefined(args['max-length'])}\n      min-length=${ifDefined(args['min-length'])}\n      name=${ifDefined(args.name)}\n      pattern=${ifDefined(args.pattern)}\n      placeholder=${ifDefined(args.placeholder)}\n      ?read-only=${args['read-only']}\n      ?required=${args.required}\n      size=${ifDefined(args.size)}\n      spellcheck=${ifDefined(args.spellcheck)}\n      type=${ifDefined(args.type)}\n      .value=${args.value}\n    ></modus-wc-text-input>",
        "<modus-wc-icon slot=\"custom-icon\" name=\"heart\" size=\"sm\"></modus-wc-icon>",
        "\n    <modus-wc-text-input\n      aria-label=\"Text input\"\n      auto-capitalize=${ifDefined(args['auto-capitalize'])}\n      auto-complete=${ifDefined(args['auto-complete'])}\n      auto-correct=${ifDefined(args['auto-correct'])}\n      ?bordered=${args.bordered}\n      clear-aria-label=${ifDefined(args['clear-aria-label'])}\n      custom-class=${ifDefined(args['custom-class'])}\n      ?disabled=${args.disabled}\n      enterkeyhint=${ifDefined(args.enterkeyhint)}\n      .feedback=${args.feedback}\n      include-clear=${ifDefined(args['include-clear'])}\n      include-search=${ifDefined(args['include-search'])}\n      input-aria-invalid=${ifDefined(args['input-aria-invalid'])}\n      input-id=${ifDefined(args['input-id'])}\n      inputmode=${ifDefined(args.inputmode)}\n      input-tab-index=${ifDefined(args['input-tab-index'])}\n      label=${ifDefined(args.label)}\n      max-length=${ifDefined(args['max-length'])}\n      min-length=${ifDefined(args['min-length'])}\n      name=${ifDefined(args.name)}\n      pattern=${ifDefined(args.pattern)}\n      placeholder=${ifDefined(args.placeholder)}\n      ?read-only=${args['read-only']}\n      ?required=${args.required}\n      size=${ifDefined(args.size)}\n      spellcheck=${ifDefined(args.spellcheck)}\n      type=${ifDefined(args.type)}\n      .value=${args.value}\n    ></modus-wc-text-input>\n  ",
        "\n<modus-wc-text-input\n  aria-label=\"Text input with custom icon\"\n  auto-capitalize=${ifDefined(args['auto-capitalize'])}\n  auto-complete=${ifDefined(args['auto-complete'])}\n  auto-correct=${ifDefined(args['auto-correct'])}\n  ?bordered=${args.bordered}\n  clear-aria-label=${ifDefined(args['clear-aria-label'])}\n  custom-class=${ifDefined(args['custom-class'])}\n  ?disabled=${args.disabled}\n  enterkeyhint=${ifDefined(args.enterkeyhint)}\n  .feedback=${args.feedback}\n  include-clear=${ifDefined(args['include-clear'])}\n  include-search=${ifDefined(args['include-search'])}\n  input-id=${ifDefined(args['input-id'])}\n  inputmode=${ifDefined(args.inputmode)}\n  input-tab-index=${ifDefined(args['input-tab-index'])}\n  label=${ifDefined(args.label)}\n  max-length=${ifDefined(args['max-length'])}\n  min-length=${ifDefined(args['min-length'])}\n  name=${ifDefined(args.name)}\n  pattern=${ifDefined(args.pattern)}\n  placeholder=${ifDefined(args.placeholder)}\n  ?read-only=${args['read-only']}\n  ?required=${args.required}\n  size=${ifDefined(args.size)}\n  spellcheck=${ifDefined(args.spellcheck)}\n  type=${ifDefined(args.type)}\n  .value=${args.value}\n>\n  <modus-wc-icon slot=\"custom-icon\" name=\"heart\" size=\"sm\"></modus-wc-icon>\n</modus-wc-text-input>\n  "
      ],
      "variants": [],
      "prop_usage": {
        "label": [
          "Text input",
          "Text input with custom icon"
        ],
        "slot": [
          "custom-icon"
        ],
        "name": [
          "heart"
        ],
        "size": [
          "sm"
        ]
      }
    },
    "tag_name": "modus-wc-text-input"
  },
  "modus-wc-toolbar": {
    "props": [
      {
        "name": "customClass",
        "description": "/**\n * A customizable toolbar component used to organize content across the entire page.\n */\n@Component({\n  tag: 'modus-wc-toolbar',\n  styleUrl: 'modus-wc-toolbar.scss',\n  shadow: false,\n})\nexport class ModusWcToolbar {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the outer div. */",
        "type": ": string"
      }
    ],
    "events": [],
    "slots": [
      "start",
      "center",
      "end"
    ],
    "default_values": {
      "customClass": "''"
    },
    "documentation": "\n\n--- modus-wc-toolbar.stories.ts ---\n\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\n\ninterface ToolbarArgs {\n  'custom-class'?: string;\n}\n\nconst meta: Meta<ToolbarArgs> = {\n  title: 'Components/Toolbar',\n  component: 'modus-wc-toolbar',\n  parameters: {\n    layout: 'padded',\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<ToolbarArgs>;\n\nconst Template: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<modus-wc-toolbar custom-class=\"${ifDefined(args['custom-class'])}\">\n  <div slot=\"start\">Start</div>\n  <div slot=\"center\">Center</div>\n  <div slot=\"end\">End</div>\n</modus-wc-toolbar>\n    `;\n  },\n};\n\nexport const Default: Story = { ...Template };\n",
    "storybook": {
      "examples": [
        "\n<modus-wc-toolbar custom-class=\"${ifDefined(args['custom-class'])}\">\n  <div slot=\"start\">Start</div>\n  <div slot=\"center\">Center</div>\n  <div slot=\"end\">End</div>\n</modus-wc-toolbar>\n    "
      ],
      "variants": [],
      "prop_usage": {
        "class": [
          "${ifDefined(args["
        ],
        "slot": [
          "start",
          "center",
          "end"
        ]
      }
    },
    "tag_name": "modus-wc-toolbar"
  },
  "modus-wc-loader": {
    "props": [
      {
        "name": "color",
        "description": "/**\n * A customizable loader component used to indicate the loading of content\n */\n@Component({\n  tag: 'modus-wc-loader',\n  styleUrl: 'modus-wc-loader.scss',\n  shadow: false,\n})\nexport class ModusWcLoader {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The color of the loader. */",
        "type": "LoaderColor"
      },
      {
        "name": "customClass",
        "description": "/**\n * A customizable loader component used to indicate the loading of content\n */\n@Component({\n  tag: 'modus-wc-loader',\n  styleUrl: 'modus-wc-loader.scss',\n  shadow: false,\n})\nexport class ModusWcLoader {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The color of the loader. */",
        "type": ": string"
      },
      {
        "name": "size",
        "description": "/**\n * A customizable loader component used to indicate the loading of content\n */\n@Component({\n  tag: 'modus-wc-loader',\n  styleUrl: 'modus-wc-loader.scss',\n  shadow: false,\n})\nexport class ModusWcLoader {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The color of the loader. */",
        "type": "DaisySize"
      },
      {
        "name": "variant",
        "description": "/**\n * A customizable loader component used to indicate the loading of content\n */\n@Component({\n  tag: 'modus-wc-loader',\n  styleUrl: 'modus-wc-loader.scss',\n  shadow: false,\n})\nexport class ModusWcLoader {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The color of the loader. */",
        "type": "LoaderVariant"
      }
    ],
    "events": [],
    "slots": [],
    "default_values": {
      "color": "'primary'",
      "customClass": "''",
      "size": "'md'",
      "variant": "'spinner'"
    },
    "documentation": "\n\n--- modus-wc-loader.stories.ts ---\n\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { LoaderColor, LoaderVariant } from './modus-wc-loader';\nimport { DaisySize } from '../types';\n\ninterface LoaderArgs {\n  color: LoaderColor;\n  'custom-class'?: string;\n  size: DaisySize;\n  variant: LoaderVariant;\n}\n\nconst meta: Meta<LoaderArgs> = {\n  title: 'Components/Loader',\n  component: 'modus-wc-loader',\n  args: {\n    color: 'primary',\n    'custom-class': '',\n    size: 'md',\n    variant: 'spinner',\n  },\n  argTypes: {\n    color: {\n      control: { type: 'select' },\n      options: [\n        'primary',\n        'secondary',\n        'accent',\n        'neutral',\n        'info',\n        'success',\n        'warning',\n        'error',\n      ],\n    },\n    size: {\n      control: { type: 'select' },\n      options: ['xs', 'sm', 'md', 'lg'],\n    },\n    variant: {\n      control: { type: 'select' },\n      options: ['ball', 'bars', 'dots', 'infinity', 'ring', 'spinner'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<LoaderArgs>;\n\nexport const Default: Story = {\n  render: (args) => {\n    return html`\n      <modus-wc-loader\n        aria-label=\"Loading spinner\"\n        color=\"${args.color}\"\n        custom-class=\"${ifDefined(args['custom-class'])}\"\n        size=\"${args.size}\"\n        variant=\"${args.variant}\"\n      ></modus-wc-loader>\n    `;\n  },\n};\n\nexport const Ball: Story = {\n  render: (args) => {\n    return html`\n      <modus-wc-loader\n        aria-label=\"Loading ball\"\n        color=\"${args.color}\"\n        custom-class=\"${ifDefined(args['custom-class'])}\"\n        size=\"md\"\n        variant=\"ball\"\n      ></modus-wc-loader>\n    `;\n  },\n};\n\nexport const Bars: Story = {\n  render: (args) => {\n    return html`\n      <modus-wc-loader\n        aria-label=\"Loading bars\"\n        color=\"${args.color}\"\n        custom-class=\"${ifDefined(args['custom-class'])}\"\n        size=\"md\"\n        variant=\"bars\"\n      ></modus-wc-loader>\n    `;\n  },\n};\n\nexport const Dots: Story = {\n  render: (args) => {\n    return html`\n      <modus-wc-loader\n        aria-label=\"Loading dots\"\n        color=\"${args.color}\"\n        custom-class=\"${ifDefined(args['custom-class'])}\"\n        size=\"md\"\n        variant=\"dots\"\n      ></modus-wc-loader>\n    `;\n  },\n};\n\n// eslint-disable-next-line no-shadow-restricted-names\nexport const Infinity: Story = {\n  render: (args) => {\n    return html`\n      <modus-wc-loader\n        aria-label=\"Loading infinity symbol\"\n        color=\"${args.color}\"\n        custom-class=\"${ifDefined(args['custom-class'])}\"\n        size=\"md\"\n        variant=\"infinity\"\n      ></modus-wc-loader>\n    `;\n  },\n};\n\nexport const Ring: Story = {\n  render: (args) => {\n    return html`\n      <modus-wc-loader\n        aria-label=\"Loading ring\"\n        color=\"${args.color}\"\n        custom-class=\"${ifDefined(args['custom-class'])}\"\n        size=\"md\"\n        variant=\"ring\"\n      ></modus-wc-loader>\n    `;\n  },\n};\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - **Color value changes**: \\`dark\\` and \\`tertiary\\` values from 1.0 have been removed.\n  1.0 value \\`danger\\` has been renamed to \\`error\\` in 2.0. Values \\`accent\\`, \\`info\\`, and \\`neutral\\` are new options in 2.0.\n  - In 1.0 \\`size\\` used direct CSS size value strings (e.g., \\`'12rem'\\`). In 2.0 \\`size\\` is now defined by predefined values (\\`xs\\`, \\`sm\\`, \\`md\\`, \\`lg\\`), and CSS can be used for custom sizes.\n  - Added new \\`variant\\` prop to specify the loader type in 2.0.\n\n#### Prop Mapping\n\n| 1.0 Prop | 2.0 Prop | Notes                                                                                                  |\n|----------|----------|--------------------------------------------------------------------------------------------------------|\n| color    | color    | \\`dark\\` and \\`tertiary\\` from version 1.0 have been removed, \\`danger\\` has been renamed to \\`error\\` |\n| size     | size     | Now uses predefined sizes (\\`xs\\`, \\`sm\\`, \\`md\\`, \\`lg\\`), use CSS for custom sizes.                  |\n        `,\n      },\n    },\n    // To hide the actual story rendering and only show docs:\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  // Simple render function or leave it empty\n  render: () => html`<div></div>`,\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-loader\n        aria-label=\"Loading spinner\"\n        color=\"${args.color}\"\n        custom-class=\"${ifDefined(args['custom-class'])}\"\n        size=\"${args.size}\"\n        variant=\"${args.variant}\"\n      ></modus-wc-loader>",
        "<modus-wc-loader\n        aria-label=\"Loading ball\"\n        color=\"${args.color}\"\n        custom-class=\"${ifDefined(args['custom-class'])}\"\n        size=\"md\"\n        variant=\"ball\"\n      ></modus-wc-loader>",
        "<modus-wc-loader\n        aria-label=\"Loading bars\"\n        color=\"${args.color}\"\n        custom-class=\"${ifDefined(args['custom-class'])}\"\n        size=\"md\"\n        variant=\"bars\"\n      ></modus-wc-loader>",
        "<modus-wc-loader\n        aria-label=\"Loading dots\"\n        color=\"${args.color}\"\n        custom-class=\"${ifDefined(args['custom-class'])}\"\n        size=\"md\"\n        variant=\"dots\"\n      ></modus-wc-loader>",
        "<modus-wc-loader\n        aria-label=\"Loading infinity symbol\"\n        color=\"${args.color}\"\n        custom-class=\"${ifDefined(args['custom-class'])}\"\n        size=\"md\"\n        variant=\"infinity\"\n      ></modus-wc-loader>"
      ],
      "variants": [
        "ball",
        "ring",
        "dots",
        "bars",
        "${args.variant}",
        "infinity"
      ],
      "prop_usage": {
        "label": [
          "Loading spinner",
          "Loading ball",
          "Loading bars",
          "Loading dots",
          "Loading infinity symbol",
          "Loading ring"
        ],
        "color": [
          "${args.color}"
        ],
        "class": [
          "${ifDefined(args["
        ],
        "size": [
          "${args.size}",
          "md"
        ],
        "variant": [
          "${args.variant}",
          "ball",
          "bars",
          "dots",
          "infinity",
          "ring"
        ]
      }
    },
    "tag_name": "modus-wc-loader"
  },
  "modus-wc-utility-panel": {
    "props": [
      {
        "name": "expanded",
        "description": "/** The panel is expanded or closed */",
        "type": ""
      },
      {
        "name": "pushContent",
        "description": "/** The panel is expanded or closed */",
        "type": ""
      },
      {
        "name": "targetElement",
        "description": "/** The panel is expanded or closed */",
        "type": ": HTMLElement"
      }
    ],
    "events": [],
    "slots": [
      "header",
      "body",
      "footer"
    ],
    "default_values": {
      "expanded": "false",
      "pushContent": "false"
    },
    "documentation": "\n\n--- modus-wc-utility-panel.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport type { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\n\ninterface UtilityPanelArgs {\n  expanded: boolean;\n  'push-content': boolean;\n}\n\nconst meta: Meta<UtilityPanelArgs> = {\n  title: 'Components/Utility Panel',\n  component: 'modus-wc-utility-panel',\n  args: {\n    expanded: false,\n    'push-content': true,\n  },\n  argTypes: {\n    expanded: {\n      control: { type: 'boolean' },\n    },\n    'push-content': {\n      control: { type: 'boolean' },\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['panelOpened', 'panelClosed'],\n    },\n    docs: {\n      description: {\n        component:\n          'A utility panel component that slides in from the right side of the screen. It can either push content or display as an overlay.',\n      },\n    },\n    layout: 'fullscreen',\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<UtilityPanelArgs>;\n\nexport const Default: Story = {\n  render: (args) => {\n    const { expanded, 'push-content': pushContent } = args;\n\n    // Set element reference immediately on first update\n    requestAnimationFrame(() => {\n      const contentElement = document.getElementById('main-content');\n      const panel = document.querySelector('modus-wc-utility-panel');\n      if (panel && contentElement) {\n        panel.targetElement = contentElement;\n      }\n    });\n\n    return html`\n      <style>\n        .demo-container {\n          height: 100vh;\n          display: flex;\n          flex-direction: column;\n          overflow: hidden;\n          background: white;\n        }\n\n        modus-wc-navbar {\n          flex-shrink: 0;\n        }\n\n        .main-content-wrapper {\n          flex: 1;\n          overflow: hidden;\n          position: relative;\n          background: var(--modus-wc-color-base-page);\n        }\n\n        .main-content {\n          height: 100%;\n          padding: 20px;\n          background: var(--modus-wc-color-base-page);\n          overflow: auto;\n        }\n\n        .modus-wc-utility-panel-header {\n          font-size: 18px;\n          font-weight: 600;\n        }\n\n        .modus-wc-utility-panel-body {\n          padding: 20px 0;\n        }\n\n        .modus-wc-utility-panel-footer {\n          display: flex;\n          gap: 10px;\n          justify-content: flex-end;\n        }\n      </style>\n\n      <div class=\"demo-container\">\n        <modus-wc-navbar id=\"navbar-default\" .visibility=${{ user: false }}>\n          <div slot=\"end\">\n            <modus-wc-tooltip content=\"Toggle Utility Panel\" position=\"left\">\n              <modus-wc-button\n                color=\"primary\"\n                size=\"sm\"\n                variant=\"outlined\"\n                onclick=\"const panel = this.closest('.demo-container').querySelector('modus-wc-utility-panel'); panel.expanded = !panel.expanded\"\n              >\n                <modus-wc-icon name=\"menu\"></modus-wc-icon>\n              </modus-wc-button>\n            </modus-wc-tooltip>\n          </div>\n        </modus-wc-navbar>\n\n        <div class=\"main-content-wrapper\">\n          <div id=\"main-content\" class=\"main-content\">\n            <h1>Main Content Area</h1>\n            <p>\n              This is the main content area below the navbar. When the utility\n              panel opens with pushContent=true, this content will be pushed to\n              the left.\n            </p>\n            <p>\n              This is an example of how the utility panel interacts with the\n              main content. When the panel opens with push content enabled, this\n              area will shift to the left to make room for the panel.\n            </p>\n            <p>\n              The content area maintains its full functionality while the panel\n              is open. Users can continue to interact with the main content\n              while accessing the utility panel features.\n            </p>\n          </div>\n\n          <modus-wc-utility-panel\n            ?expanded=\"${expanded}\"\n            ?push-content=\"${pushContent}\"\n          >\n            <div slot=\"header\" class=\"modus-wc-utility-panel-header\">\n              Utility Panel Header\n            </div>\n\n            <div slot=\"body\" class=\"modus-wc-utility-panel-body\">\n              <p>This is the utility panel body content.</p>\n              <p>\n                You can add any content here including forms, lists, or other\n                components.\n              </p>\n              <modus-wc-text-input\n                label=\"Example Input\"\n                placeholder=\"Enter text...\"\n              >\n              </modus-wc-text-input>\n            </div>\n\n            <div slot=\"footer\" class=\"modus-wc-utility-panel-footer\">\n              <modus-wc-button color=\"tertiary\" size=\"sm\"\n                >Cancel</modus-wc-button\n              >\n              <modus-wc-button color=\"primary\" size=\"sm\">Save</modus-wc-button>\n            </div>\n          </modus-wc-utility-panel>\n        </div>\n      </div>\n    `;\n  },\n};\n\nexport const Expanded: Story = {\n  render: (args) => {\n    const { expanded, 'push-content': pushContent } = args;\n\n    return html`\n      <style>\n        .demo-container {\n          height: 100vh;\n          display: flex;\n          flex-direction: column;\n          overflow: hidden;\n          background: white;\n        }\n\n        modus-wc-navbar {\n          flex-shrink: 0;\n        }\n\n        .main-content-wrapper {\n          flex: 1;\n          overflow: hidden;\n          position: relative;\n          background: var(--modus-wc-color-base-page);\n        }\n\n        .main-content {\n          height: 100%;\n          padding: 20px;\n          background: var(--modus-wc-color-base-page);\n          overflow: auto;\n        }\n\n        .modus-wc-utility-panel-header {\n          font-size: 18px;\n          font-weight: 600;\n        }\n\n        .modus-wc-utility-panel-body {\n          padding: 20px 0;\n          background: var(--modus-wc-color-base-100);\n        }\n\n        .modus-wc-utility-panel-footer {\n          display: flex;\n          gap: 10px;\n          justify-content: flex-end;\n        }\n      </style>\n\n      <div class=\"demo-container\">\n        <modus-wc-navbar id=\"navbar-expanded\" .visibility=${{ user: false }}>\n          <div slot=\"end\">\n            <modus-wc-button\n              color=\"primary\"\n              size=\"sm\"\n              variant=\"outlined\"\n              onclick=\"const panel = this.closest('.demo-container').querySelector('modus-wc-utility-panel'); panel.expanded = !panel.expanded\"\n            >\n              <modus-wc-icon name=\"menu\"></modus-wc-icon>\n            </modus-wc-button>\n          </div>\n        </modus-wc-navbar>\n\n        <div class=\"main-content-wrapper\">\n          <div id=\"main-content-expanded\" class=\"main-content\">\n            <h1>Main Content Area (Expanded Story)</h1>\n            <p>\n              This story shows the panel already expanded. The content should be\n              pushed to the left.\n            </p>\n            <p>\n              The utility panel provides quick access to additional tools and\n              information. It can be used for settings, filters, or any\n              supplementary content that enhances the main application.\n            </p>\n          </div>\n\n          <modus-wc-utility-panel\n            id=\"panel-expanded\"\n            ?expanded=\"${expanded}\"\n            ?push-content=\"${pushContent}\"\n          >\n            <div slot=\"header\" class=\"modus-wc-utility-panel-header\">\n              Expanded Panel Header\n            </div>\n\n            <div slot=\"body\" class=\"modus-wc-utility-panel-body\">\n              <p>This panel starts in the expanded state.</p>\n            </div>\n\n            <div slot=\"footer\" class=\"modus-wc-utility-panel-footer\">\n              <modus-wc-button color=\"tertiary\" size=\"sm\"\n                >Cancel</modus-wc-button\n              >\n              <modus-wc-button color=\"primary\" size=\"sm\">Save</modus-wc-button>\n            </div>\n          </modus-wc-utility-panel>\n        </div>\n      </div>\n    `;\n  },\n  args: {\n    expanded: true,\n    'push-content': true,\n  },\n};\n\nexport const OverlayMode: Story = {\n  render: (args) => {\n    const { expanded, 'push-content': pushContent } = args;\n\n    // Set element reference after render\n    requestAnimationFrame(() => {\n      const contentElement = document.getElementById('main-content-overlay');\n      const panel = document.querySelector('#panel-overlay') as HTMLElement & {\n        targetElement: HTMLElement;\n      };\n      if (panel && contentElement) {\n        panel.targetElement = contentElement;\n      }\n    });\n\n    return html`\n      <style>\n        .demo-container {\n          height: 100vh;\n          display: flex;\n          flex-direction: column;\n          overflow: hidden;\n          background: white;\n        }\n\n        modus-wc-navbar {\n          flex-shrink: 0;\n        }\n\n        .main-content-wrapper {\n          flex: 1;\n          overflow: hidden;\n          position: relative;\n          background: var(--modus-wc-color-base-page);\n        }\n\n        .main-content {\n          height: 100%;\n          padding: 20px;\n          background: var(--modus-wc-color-base-page);\n          overflow: auto;\n        }\n\n        .modus-wc-utility-panel-header {\n          font-size: 18px;\n          font-weight: 600;\n        }\n\n        .modus-wc-utility-panel-body {\n          padding: 20px 0;\n        }\n\n        .modus-wc-utility-panel-footer {\n          display: flex;\n          gap: 10px;\n          justify-content: flex-end;\n        }\n      </style>\n\n      <div class=\"demo-container\">\n        <modus-wc-navbar id=\"navbar-overlay\" .visibility=${{ user: false }}>\n          <div slot=\"end\">\n            <modus-wc-button\n              color=\"primary\"\n              size=\"sm\"\n              variant=\"outlined\"\n              onclick=\"const panel = document.getElementById('panel-overlay'); panel.expanded = !panel.expanded\"\n            >\n              <modus-wc-icon name=\"menu\"></modus-wc-icon>\n            </modus-wc-button>\n          </div>\n        </modus-wc-navbar>\n\n        <div class=\"main-content-wrapper\">\n          <div id=\"main-content-overlay\" class=\"main-content\">\n            <h1>Main Content Area (Overlay Mode)</h1>\n            <p>\n              In overlay mode, the panel appears over the content without\n              pushing it.\n            </p>\n            <p>\n              This example demonstrates the overlay mode where the panel appears\n              on top of the content without pushing it aside. This is useful\n              when you want to preserve the layout of the main content area.\n            </p>\n          </div>\n\n          <modus-wc-utility-panel\n            id=\"panel-overlay\"\n            ?expanded=\"${expanded}\"\n            ?push-content=\"${pushContent}\"\n          >\n            <div slot=\"header\" class=\"modus-wc-utility-panel-header\">\n              Overlay Panel Header\n            </div>\n\n            <div slot=\"body\" class=\"modus-wc-utility-panel-body\">\n              <p>This panel overlays the content without pushing it.</p>\n            </div>\n\n            <div slot=\"footer\" class=\"modus-wc-utility-panel-footer\">\n              <modus-wc-button color=\"tertiary\" size=\"sm\"\n                >Cancel</modus-wc-button\n              >\n              <modus-wc-button color=\"primary\" size=\"sm\">Save</modus-wc-button>\n            </div>\n          </modus-wc-utility-panel>\n        </div>\n      </div>\n    `;\n  },\n  args: {\n    expanded: true,\n    'push-content': false,\n  },\n};\n\nexport const WithoutHeaderFooter: Story = {\n  render: (args: UtilityPanelArgs) => {\n    const { expanded, 'push-content': pushContent } = args;\n\n    // Set element reference after render\n    requestAnimationFrame(() => {\n      const contentElement = document.getElementById('main-content-2');\n      const panel = document.querySelector('#panel-simple') as HTMLElement & {\n        targetElement: HTMLElement;\n      };\n      if (panel && contentElement) {\n        panel.targetElement = contentElement;\n      }\n    });\n    return html`\n      <style>\n        .demo-container {\n          height: 100vh;\n          position: relative;\n          overflow: hidden;\n          background: var(--modus-wc-color-base-page);\n        }\n\n        .main-content {\n          height: 100%;\n          padding: 20px;\n          background: var(--modus-wc-color-base-page);\n        }\n      </style>\n\n      <div class=\"demo-container\">\n        <div id=\"main-content-2\" class=\"main-content\">\n          <h1>Main Content Area</h1>\n          <modus-wc-button\n            onclick=\"const panel = this.closest('.demo-container').querySelector('modus-wc-utility-panel'); panel.expanded = !panel.expanded\"\n          >\n            Toggle Panel\n          </modus-wc-button>\n        </div>\n\n        <modus-wc-utility-panel\n          id=\"panel-simple\"\n          ?expanded=\"${expanded}\"\n          ?push-content=\"${pushContent}\"\n        >\n          <div slot=\"body\">\n            <h3>Simple Body Content</h3>\n            <p>This panel only has body content without header or footer.</p>\n          </div>\n        </modus-wc-utility-panel>\n      </div>\n    `;\n  },\n  args: {\n    expanded: false,\n    'push-content': true,\n  },\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-icon name=\"menu\"></modus-wc-icon>",
        "<modus-wc-text-input\n                label=\"Example Input\"\n                placeholder=\"Enter text...\"\n              >\n              </modus-wc-text-input>",
        "<modus-wc-button color=\"tertiary\" size=\"sm\"\n                >Cancel</modus-wc-button\n              >",
        "<modus-wc-button color=\"primary\" size=\"sm\">Save</modus-wc-button>",
        "<modus-wc-icon name=\"menu\"></modus-wc-icon>"
      ],
      "variants": [
        "outlined"
      ],
      "prop_usage": {
        "class": [
          "demo-container",
          "main-content-wrapper",
          "main-content",
          "modus-wc-utility-panel-header",
          "modus-wc-utility-panel-body",
          "modus-wc-utility-panel-footer"
        ],
        "id": [
          "navbar-default",
          "main-content",
          "navbar-expanded",
          "main-content-expanded",
          "panel-expanded",
          "navbar-overlay",
          "main-content-overlay",
          "panel-overlay",
          "main-content-2",
          "panel-simple"
        ],
        "slot": [
          "end",
          "header",
          "body",
          "footer"
        ],
        "content": [
          "Toggle Utility Panel",
          "${pushContent}"
        ],
        "position": [
          "left"
        ],
        "color": [
          "primary",
          "tertiary"
        ],
        "size": [
          "sm"
        ],
        "variant": [
          "outlined"
        ],
        "onclick": [
          "const panel = this.closest(",
          "const panel = document.getElementById("
        ],
        "name": [
          "menu"
        ],
        "expanded": [
          "${expanded}"
        ],
        "label": [
          "Example Input"
        ],
        "placeholder": [
          "Enter text..."
        ]
      }
    },
    "tag_name": "modus-wc-utility-panel"
  },
  "modus-wc-number-input": {
    "props": [
      {
        "name": "autoComplete",
        "description": "/**\n * A customizable input component used to create number inputs with types\n */\n@Component({\n  tag: 'modus-wc-number-input',\n  styleUrl: 'modus-wc-number-input.scss',\n  shadow: false,\n})\nexport class ModusWcNumberInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */",
        "type": ": 'on' | 'off'"
      },
      {
        "name": "bordered",
        "description": "/**\n * A customizable input component used to create number inputs with types\n */\n@Component({\n  tag: 'modus-wc-number-input',\n  styleUrl: 'modus-wc-number-input.scss',\n  shadow: false,\n})\nexport class ModusWcNumberInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */",
        "type": ": boolean"
      },
      {
        "name": "currencySymbol",
        "description": "/**\n * A customizable input component used to create number inputs with types\n */\n@Component({\n  tag: 'modus-wc-number-input',\n  styleUrl: 'modus-wc-number-input.scss',\n  shadow: false,\n})\nexport class ModusWcNumberInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */",
        "type": ": string"
      },
      {
        "name": "customClass",
        "description": "/**\n * A customizable input component used to create number inputs with types\n */\n@Component({\n  tag: 'modus-wc-number-input',\n  styleUrl: 'modus-wc-number-input.scss',\n  shadow: false,\n})\nexport class ModusWcNumberInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */",
        "type": ": string"
      },
      {
        "name": "disabled",
        "description": "/**\n * A customizable input component used to create number inputs with types\n */\n@Component({\n  tag: 'modus-wc-number-input',\n  styleUrl: 'modus-wc-number-input.scss',\n  shadow: false,\n})\nexport class ModusWcNumberInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */",
        "type": ": boolean"
      },
      {
        "name": "feedback",
        "description": "/**\n * A customizable input component used to create number inputs with types\n */\n@Component({\n  tag: 'modus-wc-number-input',\n  styleUrl: 'modus-wc-number-input.scss',\n  shadow: false,\n})\nexport class ModusWcNumberInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */",
        "type": ": IInputFeedbackProp"
      },
      {
        "name": "inputId",
        "description": "/**\n * A customizable input component used to create number inputs with types\n */\n@Component({\n  tag: 'modus-wc-number-input',\n  styleUrl: 'modus-wc-number-input.scss',\n  shadow: false,\n})\nexport class ModusWcNumberInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */",
        "type": ": string"
      },
      {
        "name": "inputTabIndex",
        "description": "/**\n * A customizable input component used to create number inputs with types\n */\n@Component({\n  tag: 'modus-wc-number-input',\n  styleUrl: 'modus-wc-number-input.scss',\n  shadow: false,\n})\nexport class ModusWcNumberInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */",
        "type": ": number"
      },
      {
        "name": "label",
        "description": "/**\n * A customizable input component used to create number inputs with types\n */\n@Component({\n  tag: 'modus-wc-number-input',\n  styleUrl: 'modus-wc-number-input.scss',\n  shadow: false,\n})\nexport class ModusWcNumberInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */",
        "type": ": string"
      },
      {
        "name": "max",
        "description": "/**\n * A customizable input component used to create number inputs with types\n */\n@Component({\n  tag: 'modus-wc-number-input',\n  styleUrl: 'modus-wc-number-input.scss',\n  shadow: false,\n})\nexport class ModusWcNumberInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */",
        "type": ": number"
      },
      {
        "name": "min",
        "description": "/**\n * A customizable input component used to create number inputs with types\n */\n@Component({\n  tag: 'modus-wc-number-input',\n  styleUrl: 'modus-wc-number-input.scss',\n  shadow: false,\n})\nexport class ModusWcNumberInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */",
        "type": ": number"
      },
      {
        "name": "name",
        "description": "/**\n * A customizable input component used to create number inputs with types\n */\n@Component({\n  tag: 'modus-wc-number-input',\n  styleUrl: 'modus-wc-number-input.scss',\n  shadow: false,\n})\nexport class ModusWcNumberInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */",
        "type": ": string"
      },
      {
        "name": "placeholder",
        "description": "/**\n * A customizable input component used to create number inputs with types\n */\n@Component({\n  tag: 'modus-wc-number-input',\n  styleUrl: 'modus-wc-number-input.scss',\n  shadow: false,\n})\nexport class ModusWcNumberInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */",
        "type": ": string"
      },
      {
        "name": "readOnly",
        "description": "/**\n * A customizable input component used to create number inputs with types\n */\n@Component({\n  tag: 'modus-wc-number-input',\n  styleUrl: 'modus-wc-number-input.scss',\n  shadow: false,\n})\nexport class ModusWcNumberInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */",
        "type": ": boolean"
      },
      {
        "name": "required",
        "description": "/**\n * A customizable input component used to create number inputs with types\n */\n@Component({\n  tag: 'modus-wc-number-input',\n  styleUrl: 'modus-wc-number-input.scss',\n  shadow: false,\n})\nexport class ModusWcNumberInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */",
        "type": ": boolean"
      },
      {
        "name": "size",
        "description": "/**\n * A customizable input component used to create number inputs with types\n */\n@Component({\n  tag: 'modus-wc-number-input',\n  styleUrl: 'modus-wc-number-input.scss',\n  shadow: false,\n})\nexport class ModusWcNumberInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */",
        "type": ": ModusSize"
      },
      {
        "name": "step",
        "description": "/**\n * A customizable input component used to create number inputs with types\n */\n@Component({\n  tag: 'modus-wc-number-input',\n  styleUrl: 'modus-wc-number-input.scss',\n  shadow: false,\n})\nexport class ModusWcNumberInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */",
        "type": ": number"
      },
      {
        "name": "type",
        "description": "/**\n * A customizable input component used to create number inputs with types\n */\n@Component({\n  tag: 'modus-wc-number-input',\n  styleUrl: 'modus-wc-number-input.scss',\n  shadow: false,\n})\nexport class ModusWcNumberInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */",
        "type": ": 'number' | 'range'"
      },
      {
        "name": "value",
        "description": "/**\n * A customizable input component used to create number inputs with types\n */\n@Component({\n  tag: 'modus-wc-number-input',\n  styleUrl: 'modus-wc-number-input.scss',\n  shadow: false,\n})\nexport class ModusWcNumberInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */",
        "type": "string"
      }
    ],
    "events": [
      {
        "name": "inputBlur",
        "description": "/**\n * A customizable input component used to create number inputs with types\n */\n@Component({\n  tag: 'modus-wc-number-input',\n  styleUrl: 'modus-wc-number-input.scss',\n  shadow: false,\n})\nexport class ModusWcNumberInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */\n  @Prop() autoComplete?: 'on' | 'off';\n\n  /** Indicates that the input should have a border. */\n  @Prop() bordered?: boolean = true;\n\n  /** The currency symbol to display. */\n  @Prop() currencySymbol?: string = '';\n\n  /** Custom CSS class to apply to the input. */\n  @Prop() customClass?: string = '';\n\n  /** Whether the form control is disabled. */\n  @Prop() disabled?: boolean = false;\n\n  /** Feedback to render below the input. */\n  @Prop() feedback?: IInputFeedbackProp;\n\n  /** The ID of the input element. */\n  @Prop() inputId?: string;\n\n  /** Determine the control's relative ordering for sequential focus navigation (typically with the Tab key). */\n  @Prop() inputTabIndex?: number;\n\n  /** The text to display within the label. */\n  @Prop() label?: string;\n\n  /** The input's maximum value. */\n  @Prop() max?: number;\n\n  /** The input's minimum value. */\n  @Prop() min?: number;\n\n  /** Name of the form control. Submitted with the form as part of a name/value pair. */\n  @Prop() name?: string;\n\n  /** Text that appears in the form control when it has no value set. */\n  @Prop() placeholder?: string = '';\n\n  /** Whether the value is editable. */\n  @Prop() readOnly?: boolean = false;\n\n  /** A value is required for the form to be submittable. */\n  @Prop() required?: boolean = false;\n\n  /** The size of the input. */\n  @Prop() size?: ModusSize = 'md';\n\n  /** The granularity that the value adheres to. */\n  @Prop() step?: number;\n\n  /** Type of form control. */\n  @Prop() type?: 'number' | 'range' = 'number';\n\n  /** The value of the control. */\n  @Prop({ mutable: true, reflect: true }) value: string = '';\n\n  /** Event emitted when the input loses focus. */"
      },
      {
        "name": "inputChange",
        "description": "/**\n * A customizable input component used to create number inputs with types\n */\n@Component({\n  tag: 'modus-wc-number-input',\n  styleUrl: 'modus-wc-number-input.scss',\n  shadow: false,\n})\nexport class ModusWcNumberInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */\n  @Prop() autoComplete?: 'on' | 'off';\n\n  /** Indicates that the input should have a border. */\n  @Prop() bordered?: boolean = true;\n\n  /** The currency symbol to display. */\n  @Prop() currencySymbol?: string = '';\n\n  /** Custom CSS class to apply to the input. */\n  @Prop() customClass?: string = '';\n\n  /** Whether the form control is disabled. */\n  @Prop() disabled?: boolean = false;\n\n  /** Feedback to render below the input. */\n  @Prop() feedback?: IInputFeedbackProp;\n\n  /** The ID of the input element. */\n  @Prop() inputId?: string;\n\n  /** Determine the control's relative ordering for sequential focus navigation (typically with the Tab key). */\n  @Prop() inputTabIndex?: number;\n\n  /** The text to display within the label. */\n  @Prop() label?: string;\n\n  /** The input's maximum value. */\n  @Prop() max?: number;\n\n  /** The input's minimum value. */\n  @Prop() min?: number;\n\n  /** Name of the form control. Submitted with the form as part of a name/value pair. */\n  @Prop() name?: string;\n\n  /** Text that appears in the form control when it has no value set. */\n  @Prop() placeholder?: string = '';\n\n  /** Whether the value is editable. */\n  @Prop() readOnly?: boolean = false;\n\n  /** A value is required for the form to be submittable. */\n  @Prop() required?: boolean = false;\n\n  /** The size of the input. */\n  @Prop() size?: ModusSize = 'md';\n\n  /** The granularity that the value adheres to. */\n  @Prop() step?: number;\n\n  /** Type of form control. */\n  @Prop() type?: 'number' | 'range' = 'number';\n\n  /** The value of the control. */\n  @Prop({ mutable: true, reflect: true }) value: string = '';\n\n  /** Event emitted when the input loses focus. */"
      },
      {
        "name": "inputFocus",
        "description": "/**\n * A customizable input component used to create number inputs with types\n */\n@Component({\n  tag: 'modus-wc-number-input',\n  styleUrl: 'modus-wc-number-input.scss',\n  shadow: false,\n})\nexport class ModusWcNumberInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */\n  @Prop() autoComplete?: 'on' | 'off';\n\n  /** Indicates that the input should have a border. */\n  @Prop() bordered?: boolean = true;\n\n  /** The currency symbol to display. */\n  @Prop() currencySymbol?: string = '';\n\n  /** Custom CSS class to apply to the input. */\n  @Prop() customClass?: string = '';\n\n  /** Whether the form control is disabled. */\n  @Prop() disabled?: boolean = false;\n\n  /** Feedback to render below the input. */\n  @Prop() feedback?: IInputFeedbackProp;\n\n  /** The ID of the input element. */\n  @Prop() inputId?: string;\n\n  /** Determine the control's relative ordering for sequential focus navigation (typically with the Tab key). */\n  @Prop() inputTabIndex?: number;\n\n  /** The text to display within the label. */\n  @Prop() label?: string;\n\n  /** The input's maximum value. */\n  @Prop() max?: number;\n\n  /** The input's minimum value. */\n  @Prop() min?: number;\n\n  /** Name of the form control. Submitted with the form as part of a name/value pair. */\n  @Prop() name?: string;\n\n  /** Text that appears in the form control when it has no value set. */\n  @Prop() placeholder?: string = '';\n\n  /** Whether the value is editable. */\n  @Prop() readOnly?: boolean = false;\n\n  /** A value is required for the form to be submittable. */\n  @Prop() required?: boolean = false;\n\n  /** The size of the input. */\n  @Prop() size?: ModusSize = 'md';\n\n  /** The granularity that the value adheres to. */\n  @Prop() step?: number;\n\n  /** Type of form control. */\n  @Prop() type?: 'number' | 'range' = 'number';\n\n  /** The value of the control. */\n  @Prop({ mutable: true, reflect: true }) value: string = '';\n\n  /** Event emitted when the input loses focus. */"
      }
    ],
    "slots": [],
    "default_values": {
      "bordered": "true",
      "currencySymbol": "''",
      "customClass": "''",
      "disabled": "false",
      "max": "{this.max}\n            min={this.min}\n            name={this.name}\n            onBlur={this.handleBlur}\n            onFocus={this.handleFocus}\n            onInput={this.handleInput}\n            placeholder={this.placeholder}\n            readonly={this.readOnly}\n            required={this.required}\n            step={this.step}\n            tabIndex={this.inputTabIndex}\n            type={this.type}\n            value={this.value}\n            {...this.inheritedAttributes}\n          />\n        </div>\n        {this.feedback && (\n          <modus-wc-input-feedback\n            level={this.feedback.level}\n            message={this.feedback.message}\n            size={this.size}\n          />\n        )}\n      </Host>\n    )",
      "min": "{this.min}\n            name={this.name}\n            onBlur={this.handleBlur}\n            onFocus={this.handleFocus}\n            onInput={this.handleInput}\n            placeholder={this.placeholder}\n            readonly={this.readOnly}\n            required={this.required}\n            step={this.step}\n            tabIndex={this.inputTabIndex}\n            type={this.type}\n            value={this.value}\n            {...this.inheritedAttributes}\n          />\n        </div>\n        {this.feedback && (\n          <modus-wc-input-feedback\n            level={this.feedback.level}\n            message={this.feedback.message}\n            size={this.size}\n          />\n        )}\n      </Host>\n    )",
      "name": "{this.name}\n            onBlur={this.handleBlur}\n            onFocus={this.handleFocus}\n            onInput={this.handleInput}\n            placeholder={this.placeholder}\n            readonly={this.readOnly}\n            required={this.required}\n            step={this.step}\n            tabIndex={this.inputTabIndex}\n            type={this.type}\n            value={this.value}\n            {...this.inheritedAttributes}\n          />\n        </div>\n        {this.feedback && (\n          <modus-wc-input-feedback\n            level={this.feedback.level}\n            message={this.feedback.message}\n            size={this.size}\n          />\n        )}\n      </Host>\n    )",
      "placeholder": "''",
      "readOnly": "false",
      "required": "false",
      "size": "'md'",
      "step": "{this.step}\n            tabIndex={this.inputTabIndex}\n            type={this.type}\n            value={this.value}\n            {...this.inheritedAttributes}\n          />\n        </div>\n        {this.feedback && (\n          <modus-wc-input-feedback\n            level={this.feedback.level}\n            message={this.feedback.message}\n            size={this.size}\n          />\n        )}\n      </Host>\n    )",
      "type": "'number'",
      "value": "''"
    },
    "documentation": "\n\n--- modus-wc-number-input.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { IInputFeedbackProp, ModusSize } from '../types';\n\ninterface NumberInputArgs {\n  'auto-complete'?: 'on' | 'off';\n  bordered?: boolean;\n  'currency-symbol'?: string;\n  'custom-class'?: string;\n  disabled?: boolean;\n  feedback?: IInputFeedbackProp;\n  'input-aria-invalid'?: 'true' | 'false';\n  'input-id'?: string;\n  inputmode?: 'decimal' | 'none' | 'numeric';\n  'input-tab-index'?: number;\n  label?: string;\n  max?: number;\n  min?: number;\n  name?: string;\n  placeholder?: string;\n  'read-only'?: boolean;\n  required?: boolean;\n  size?: ModusSize;\n  step?: number;\n  type?: 'number' | 'range';\n  value: string;\n}\n\nconst meta: Meta<NumberInputArgs> = {\n  title: 'Components/Forms/Number Input',\n  component: 'modus-wc-number-input',\n  args: {\n    bordered: true,\n    disabled: false,\n    inputmode: 'numeric',\n    label: 'Label',\n    size: 'md',\n    type: 'number',\n    value: '',\n  },\n  argTypes: {\n    'auto-complete': {\n      control: { type: 'select' },\n      options: ['on', 'off'],\n    },\n    feedback: {\n      description: 'Feedback prop for input components',\n      table: {\n        type: {\n          detail: `\n            Interface: IInputFeedbackProp\n            Properties:\n            - level ('error' | 'info' | 'success' | 'warning'): The feedback level\n            - message (string, optional): The feedback message\n          `,\n        },\n      },\n    },\n    'input-aria-invalid': {\n      control: { type: 'select' },\n      options: ['true', 'false'],\n    },\n    inputmode: {\n      control: { type: 'select' },\n      options: ['decimal', 'none', 'numeric'],\n    },\n    size: {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg'],\n    },\n    type: {\n      control: { type: 'select' },\n      options: ['number', 'range'],\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['inputBlur', 'inputChange', 'inputFocus'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<NumberInputArgs>;\n\nconst Template: Story = {\n  render: (args) => html`\n    <modus-wc-number-input\n      aria-label=\"Number input\"\n      auto-complete=${ifDefined(args['auto-complete'])}\n      ?bordered=${args.bordered}\n      currency-symbol=${ifDefined(args['currency-symbol'])}\n      custom-class=${ifDefined(args['custom-class'])}\n      ?disabled=${args.disabled}\n      .feedback=${args.feedback}\n      input-aria-invalid=${ifDefined(args['input-aria-invalid'])}\n      input-id=${ifDefined(args['input-id'])}\n      inputmode=${ifDefined(args.inputmode)}\n      input-tab-index=${ifDefined(args['input-tab-index'])}\n      label=${ifDefined(args.label)}\n      max=${ifDefined(args.max)}\n      min=${ifDefined(args.min)}\n      name=${ifDefined(args.name)}\n      placeholder=${ifDefined(args.placeholder)}\n      ?read-only=${args['read-only']}\n      ?required=${args.required}\n      size=${ifDefined(args.size)}\n      step=${ifDefined(args.step)}\n      type=${ifDefined(args.type)}\n      .value=${args.value}\n    ></modus-wc-number-input>\n  `,\n};\n\nexport const Default: Story = { ...Template };\n\nconst errorFeedback: IInputFeedbackProp = {\n  level: 'error',\n  message: 'Value is required.',\n};\n\nexport const Currency: Story = {\n  ...Template,\n  args: { 'currency-symbol': '$' },\n};\n\nexport const WithErrorFeedback: Story = {\n  ...Template,\n  args: { feedback: errorFeedback, required: true },\n};\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - In 1.0 input state was maintained by the component. 2.0 components encourage users to follow a controlled\n  input model. See the Form Inputs [documentation](/docs/documentation-form-inputs--docs) for\n  additional info and examples.\n  - Instead of changing the internal input type for currency formatting, the component now always renders\n  a number input and displays the currency symbol via the \\`currency-symbol\\` prop.\n  - Size values have changed from verbose names (\\`medium\\`, \\`large\\`) to abbreviations (\\`sm\\`, \\`md\\`, \\`lg\\`).\n\n#### Prop Mapping\n\n| 1.0 Prop     | 2.0 Prop            | Notes                                   |\n|--------------|---------------------|-----------------------------------------|\n| aria-label   | aria-label          |                                         |\n| currency     | currency-symbol     |                                         |\n| disabled     | disabled            |                                         |\n| error-text   | feedback.message    | Use \\`feedback\\` level                  |\n| helper-text  |                     | Not carried over                        |\n| label        | label               |                                         |\n| locale       |                     | Not carried over                        |\n| max-value    | max                 |                                         |\n| min-value    | min                 |                                         |\n| placeholder  | placeholder         |                                         |\n| read-only    | read-only           |                                         |\n| required     | required            |                                         |\n| size         | size                | \\`medium\\` \u2192 \\`md\\`, \\`large\\` \u2192 \\`lg\\` |\n| step         | step                |                                         |\n| text-align   |                     | Not carried over, use CSS instead       |\n| valid-text   | feedback.message    | Use \\`feedback\\` level                  |\n| value        | value               |                                         |\n\n#### Event Mapping\n\n| 1.0 Event    | 2.0 Event    | Notes |\n|--------------|--------------|-------|\n| valueChange  | inputChange  |       |\n        `,\n      },\n    },\n    // To hide the actual story rendering and only show docs:\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  // Simple render function or leave it empty\n  render: () => html`<div></div>`,\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-number-input\n      aria-label=\"Number input\"\n      auto-complete=${ifDefined(args['auto-complete'])}\n      ?bordered=${args.bordered}\n      currency-symbol=${ifDefined(args['currency-symbol'])}\n      custom-class=${ifDefined(args['custom-class'])}\n      ?disabled=${args.disabled}\n      .feedback=${args.feedback}\n      input-aria-invalid=${ifDefined(args['input-aria-invalid'])}\n      input-id=${ifDefined(args['input-id'])}\n      inputmode=${ifDefined(args.inputmode)}\n      input-tab-index=${ifDefined(args['input-tab-index'])}\n      label=${ifDefined(args.label)}\n      max=${ifDefined(args.max)}\n      min=${ifDefined(args.min)}\n      name=${ifDefined(args.name)}\n      placeholder=${ifDefined(args.placeholder)}\n      ?read-only=${args['read-only']}\n      ?required=${args.required}\n      size=${ifDefined(args.size)}\n      step=${ifDefined(args.step)}\n      type=${ifDefined(args.type)}\n      .value=${args.value}\n    ></modus-wc-number-input>",
        "\n    <modus-wc-number-input\n      aria-label=\"Number input\"\n      auto-complete=${ifDefined(args['auto-complete'])}\n      ?bordered=${args.bordered}\n      currency-symbol=${ifDefined(args['currency-symbol'])}\n      custom-class=${ifDefined(args['custom-class'])}\n      ?disabled=${args.disabled}\n      .feedback=${args.feedback}\n      input-aria-invalid=${ifDefined(args['input-aria-invalid'])}\n      input-id=${ifDefined(args['input-id'])}\n      inputmode=${ifDefined(args.inputmode)}\n      input-tab-index=${ifDefined(args['input-tab-index'])}\n      label=${ifDefined(args.label)}\n      max=${ifDefined(args.max)}\n      min=${ifDefined(args.min)}\n      name=${ifDefined(args.name)}\n      placeholder=${ifDefined(args.placeholder)}\n      ?read-only=${args['read-only']}\n      ?required=${args.required}\n      size=${ifDefined(args.size)}\n      step=${ifDefined(args.step)}\n      type=${ifDefined(args.type)}\n      .value=${args.value}\n    ></modus-wc-number-input>\n  "
      ],
      "variants": [],
      "prop_usage": {
        "label": [
          "Number input"
        ]
      }
    },
    "tag_name": "modus-wc-number-input"
  },
  "modus-wc-table": {
    "props": [
      {
        "name": "editable",
        "description": "/** Key to access data from row object */\n  accessor: string;\n  /** Custom cell renderer */\n  cellRenderer?: (value: unknown, row: unknown) => string | HTMLElement;\n  /** Class names for the column */\n  className?: string;\n  /** Header content - can be string or HTML */\n  header: string | HTMLElement;\n  /** Unique identifier for the column */\n  id: string;\n  /** Width style (e.g., '200px', '50%') */\n  width?: string;\n  /** Whether the column is sortable */\n  sortable?: boolean;\n  /** Built-in editor type to render when the cell is in edit mode. */\n  editor?: 'text' | 'number' | 'autocomplete' | 'date' | 'custom';\n  /** Extra props specific to the editor component. */\n  editorProps?: Record<string, unknown>;\n  /** Custom renderer invoked when editor === 'custom'. Must call onCommit with the new value. */\n  customEditorRenderer?: (\n    value: unknown,\n    onCommit: (val: unknown) => void,\n    row: Record<string, unknown>\n  ) => HTMLElement | string;\n\n  /**\n   * Alternative to built-in editors: raw HTML string. `${value}` placeholder will\n   * be replaced with the current cell value.\n   */\n  editorTemplate?: string;\n\n  /**\n   * Runs once after the editor element is added to the DOM. Gives full control\n   * for wiring events, populating data, etc.\n   */\n  editorSetup?: (\n    el: HTMLElement,\n    row: Record<string, unknown>,\n    commit: (newVal: unknown) => void\n  ) => void;\n}\n\nexport interface IPaginationChangeEventDetail {\n  currentPage: number;\n  pageSize: number;\n}\n\n@Component({\n  tag: 'modus-wc-table',\n  styleUrl: 'modus-wc-table.scss',\n  shadow: false,\n})\nexport class ModusWcTable {\n  private inheritedAttributes: Attributes = {};\n  private table: Table<Record<string, unknown>> | null = null;\n  private tanStackColumns: ColumnDef<Record<string, unknown>, unknown>[] = [];\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Enable cell editing. Either a boolean (all rows) or a predicate per row. */",
        "type": ": boolean | ((row: Record<string, unknown>)"
      },
      {
        "name": "columns",
        "description": "/** Key to access data from row object */\n  accessor: string;\n  /** Custom cell renderer */\n  cellRenderer?: (value: unknown, row: unknown) => string | HTMLElement;\n  /** Class names for the column */\n  className?: string;\n  /** Header content - can be string or HTML */\n  header: string | HTMLElement;\n  /** Unique identifier for the column */\n  id: string;\n  /** Width style (e.g., '200px', '50%') */\n  width?: string;\n  /** Whether the column is sortable */\n  sortable?: boolean;\n  /** Built-in editor type to render when the cell is in edit mode. */\n  editor?: 'text' | 'number' | 'autocomplete' | 'date' | 'custom';\n  /** Extra props specific to the editor component. */\n  editorProps?: Record<string, unknown>;\n  /** Custom renderer invoked when editor === 'custom'. Must call onCommit with the new value. */\n  customEditorRenderer?: (\n    value: unknown,\n    onCommit: (val: unknown) => void,\n    row: Record<string, unknown>\n  ) => HTMLElement | string;\n\n  /**\n   * Alternative to built-in editors: raw HTML string. `${value}` placeholder will\n   * be replaced with the current cell value.\n   */\n  editorTemplate?: string;\n\n  /**\n   * Runs once after the editor element is added to the DOM. Gives full control\n   * for wiring events, populating data, etc.\n   */\n  editorSetup?: (\n    el: HTMLElement,\n    row: Record<string, unknown>,\n    commit: (newVal: unknown) => void\n  ) => void;\n}\n\nexport interface IPaginationChangeEventDetail {\n  currentPage: number;\n  pageSize: number;\n}\n\n@Component({\n  tag: 'modus-wc-table',\n  styleUrl: 'modus-wc-table.scss',\n  shadow: false,\n})\nexport class ModusWcTable {\n  private inheritedAttributes: Attributes = {};\n  private table: Table<Record<string, unknown>> | null = null;\n  private tanStackColumns: ColumnDef<Record<string, unknown>, unknown>[] = [];\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Enable cell editing. Either a boolean (all rows) or a predicate per row. */",
        "type": ": ITableColumn[]"
      },
      {
        "name": "customClass",
        "description": "/** Key to access data from row object */\n  accessor: string;\n  /** Custom cell renderer */\n  cellRenderer?: (value: unknown, row: unknown) => string | HTMLElement;\n  /** Class names for the column */\n  className?: string;\n  /** Header content - can be string or HTML */\n  header: string | HTMLElement;\n  /** Unique identifier for the column */\n  id: string;\n  /** Width style (e.g., '200px', '50%') */\n  width?: string;\n  /** Whether the column is sortable */\n  sortable?: boolean;\n  /** Built-in editor type to render when the cell is in edit mode. */\n  editor?: 'text' | 'number' | 'autocomplete' | 'date' | 'custom';\n  /** Extra props specific to the editor component. */\n  editorProps?: Record<string, unknown>;\n  /** Custom renderer invoked when editor === 'custom'. Must call onCommit with the new value. */\n  customEditorRenderer?: (\n    value: unknown,\n    onCommit: (val: unknown) => void,\n    row: Record<string, unknown>\n  ) => HTMLElement | string;\n\n  /**\n   * Alternative to built-in editors: raw HTML string. `${value}` placeholder will\n   * be replaced with the current cell value.\n   */\n  editorTemplate?: string;\n\n  /**\n   * Runs once after the editor element is added to the DOM. Gives full control\n   * for wiring events, populating data, etc.\n   */\n  editorSetup?: (\n    el: HTMLElement,\n    row: Record<string, unknown>,\n    commit: (newVal: unknown) => void\n  ) => void;\n}\n\nexport interface IPaginationChangeEventDetail {\n  currentPage: number;\n  pageSize: number;\n}\n\n@Component({\n  tag: 'modus-wc-table',\n  styleUrl: 'modus-wc-table.scss',\n  shadow: false,\n})\nexport class ModusWcTable {\n  private inheritedAttributes: Attributes = {};\n  private table: Table<Record<string, unknown>> | null = null;\n  private tanStackColumns: ColumnDef<Record<string, unknown>, unknown>[] = [];\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Enable cell editing. Either a boolean (all rows) or a predicate per row. */",
        "type": ": string"
      },
      {
        "name": "data",
        "description": "/** Key to access data from row object */\n  accessor: string;\n  /** Custom cell renderer */\n  cellRenderer?: (value: unknown, row: unknown) => string | HTMLElement;\n  /** Class names for the column */\n  className?: string;\n  /** Header content - can be string or HTML */\n  header: string | HTMLElement;\n  /** Unique identifier for the column */\n  id: string;\n  /** Width style (e.g., '200px', '50%') */\n  width?: string;\n  /** Whether the column is sortable */\n  sortable?: boolean;\n  /** Built-in editor type to render when the cell is in edit mode. */\n  editor?: 'text' | 'number' | 'autocomplete' | 'date' | 'custom';\n  /** Extra props specific to the editor component. */\n  editorProps?: Record<string, unknown>;\n  /** Custom renderer invoked when editor === 'custom'. Must call onCommit with the new value. */\n  customEditorRenderer?: (\n    value: unknown,\n    onCommit: (val: unknown) => void,\n    row: Record<string, unknown>\n  ) => HTMLElement | string;\n\n  /**\n   * Alternative to built-in editors: raw HTML string. `${value}` placeholder will\n   * be replaced with the current cell value.\n   */\n  editorTemplate?: string;\n\n  /**\n   * Runs once after the editor element is added to the DOM. Gives full control\n   * for wiring events, populating data, etc.\n   */\n  editorSetup?: (\n    el: HTMLElement,\n    row: Record<string, unknown>,\n    commit: (newVal: unknown) => void\n  ) => void;\n}\n\nexport interface IPaginationChangeEventDetail {\n  currentPage: number;\n  pageSize: number;\n}\n\n@Component({\n  tag: 'modus-wc-table',\n  styleUrl: 'modus-wc-table.scss',\n  shadow: false,\n})\nexport class ModusWcTable {\n  private inheritedAttributes: Attributes = {};\n  private table: Table<Record<string, unknown>> | null = null;\n  private tanStackColumns: ColumnDef<Record<string, unknown>, unknown>[] = [];\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Enable cell editing. Either a boolean (all rows) or a predicate per row. */",
        "type": ": Record<string, unknown>[]"
      },
      {
        "name": "density",
        "description": "/** Key to access data from row object */\n  accessor: string;\n  /** Custom cell renderer */\n  cellRenderer?: (value: unknown, row: unknown) => string | HTMLElement;\n  /** Class names for the column */\n  className?: string;\n  /** Header content - can be string or HTML */\n  header: string | HTMLElement;\n  /** Unique identifier for the column */\n  id: string;\n  /** Width style (e.g., '200px', '50%') */\n  width?: string;\n  /** Whether the column is sortable */\n  sortable?: boolean;\n  /** Built-in editor type to render when the cell is in edit mode. */\n  editor?: 'text' | 'number' | 'autocomplete' | 'date' | 'custom';\n  /** Extra props specific to the editor component. */\n  editorProps?: Record<string, unknown>;\n  /** Custom renderer invoked when editor === 'custom'. Must call onCommit with the new value. */\n  customEditorRenderer?: (\n    value: unknown,\n    onCommit: (val: unknown) => void,\n    row: Record<string, unknown>\n  ) => HTMLElement | string;\n\n  /**\n   * Alternative to built-in editors: raw HTML string. `${value}` placeholder will\n   * be replaced with the current cell value.\n   */\n  editorTemplate?: string;\n\n  /**\n   * Runs once after the editor element is added to the DOM. Gives full control\n   * for wiring events, populating data, etc.\n   */\n  editorSetup?: (\n    el: HTMLElement,\n    row: Record<string, unknown>,\n    commit: (newVal: unknown) => void\n  ) => void;\n}\n\nexport interface IPaginationChangeEventDetail {\n  currentPage: number;\n  pageSize: number;\n}\n\n@Component({\n  tag: 'modus-wc-table',\n  styleUrl: 'modus-wc-table.scss',\n  shadow: false,\n})\nexport class ModusWcTable {\n  private inheritedAttributes: Attributes = {};\n  private table: Table<Record<string, unknown>> | null = null;\n  private tanStackColumns: ColumnDef<Record<string, unknown>, unknown>[] = [];\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Enable cell editing. Either a boolean (all rows) or a predicate per row. */",
        "type": ": Density"
      },
      {
        "name": "hover",
        "description": "/** Key to access data from row object */\n  accessor: string;\n  /** Custom cell renderer */\n  cellRenderer?: (value: unknown, row: unknown) => string | HTMLElement;\n  /** Class names for the column */\n  className?: string;\n  /** Header content - can be string or HTML */\n  header: string | HTMLElement;\n  /** Unique identifier for the column */\n  id: string;\n  /** Width style (e.g., '200px', '50%') */\n  width?: string;\n  /** Whether the column is sortable */\n  sortable?: boolean;\n  /** Built-in editor type to render when the cell is in edit mode. */\n  editor?: 'text' | 'number' | 'autocomplete' | 'date' | 'custom';\n  /** Extra props specific to the editor component. */\n  editorProps?: Record<string, unknown>;\n  /** Custom renderer invoked when editor === 'custom'. Must call onCommit with the new value. */\n  customEditorRenderer?: (\n    value: unknown,\n    onCommit: (val: unknown) => void,\n    row: Record<string, unknown>\n  ) => HTMLElement | string;\n\n  /**\n   * Alternative to built-in editors: raw HTML string. `${value}` placeholder will\n   * be replaced with the current cell value.\n   */\n  editorTemplate?: string;\n\n  /**\n   * Runs once after the editor element is added to the DOM. Gives full control\n   * for wiring events, populating data, etc.\n   */\n  editorSetup?: (\n    el: HTMLElement,\n    row: Record<string, unknown>,\n    commit: (newVal: unknown) => void\n  ) => void;\n}\n\nexport interface IPaginationChangeEventDetail {\n  currentPage: number;\n  pageSize: number;\n}\n\n@Component({\n  tag: 'modus-wc-table',\n  styleUrl: 'modus-wc-table.scss',\n  shadow: false,\n})\nexport class ModusWcTable {\n  private inheritedAttributes: Attributes = {};\n  private table: Table<Record<string, unknown>> | null = null;\n  private tanStackColumns: ColumnDef<Record<string, unknown>, unknown>[] = [];\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Enable cell editing. Either a boolean (all rows) or a predicate per row. */",
        "type": ": boolean"
      },
      {
        "name": "currentPage",
        "description": "/** Key to access data from row object */\n  accessor: string;\n  /** Custom cell renderer */\n  cellRenderer?: (value: unknown, row: unknown) => string | HTMLElement;\n  /** Class names for the column */\n  className?: string;\n  /** Header content - can be string or HTML */\n  header: string | HTMLElement;\n  /** Unique identifier for the column */\n  id: string;\n  /** Width style (e.g., '200px', '50%') */\n  width?: string;\n  /** Whether the column is sortable */\n  sortable?: boolean;\n  /** Built-in editor type to render when the cell is in edit mode. */\n  editor?: 'text' | 'number' | 'autocomplete' | 'date' | 'custom';\n  /** Extra props specific to the editor component. */\n  editorProps?: Record<string, unknown>;\n  /** Custom renderer invoked when editor === 'custom'. Must call onCommit with the new value. */\n  customEditorRenderer?: (\n    value: unknown,\n    onCommit: (val: unknown) => void,\n    row: Record<string, unknown>\n  ) => HTMLElement | string;\n\n  /**\n   * Alternative to built-in editors: raw HTML string. `${value}` placeholder will\n   * be replaced with the current cell value.\n   */\n  editorTemplate?: string;\n\n  /**\n   * Runs once after the editor element is added to the DOM. Gives full control\n   * for wiring events, populating data, etc.\n   */\n  editorSetup?: (\n    el: HTMLElement,\n    row: Record<string, unknown>,\n    commit: (newVal: unknown) => void\n  ) => void;\n}\n\nexport interface IPaginationChangeEventDetail {\n  currentPage: number;\n  pageSize: number;\n}\n\n@Component({\n  tag: 'modus-wc-table',\n  styleUrl: 'modus-wc-table.scss',\n  shadow: false,\n})\nexport class ModusWcTable {\n  private inheritedAttributes: Attributes = {};\n  private table: Table<Record<string, unknown>> | null = null;\n  private tanStackColumns: ColumnDef<Record<string, unknown>, unknown>[] = [];\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Enable cell editing. Either a boolean (all rows) or a predicate per row. */",
        "type": "number"
      },
      {
        "name": "paginated",
        "description": "/** Key to access data from row object */\n  accessor: string;\n  /** Custom cell renderer */\n  cellRenderer?: (value: unknown, row: unknown) => string | HTMLElement;\n  /** Class names for the column */\n  className?: string;\n  /** Header content - can be string or HTML */\n  header: string | HTMLElement;\n  /** Unique identifier for the column */\n  id: string;\n  /** Width style (e.g., '200px', '50%') */\n  width?: string;\n  /** Whether the column is sortable */\n  sortable?: boolean;\n  /** Built-in editor type to render when the cell is in edit mode. */\n  editor?: 'text' | 'number' | 'autocomplete' | 'date' | 'custom';\n  /** Extra props specific to the editor component. */\n  editorProps?: Record<string, unknown>;\n  /** Custom renderer invoked when editor === 'custom'. Must call onCommit with the new value. */\n  customEditorRenderer?: (\n    value: unknown,\n    onCommit: (val: unknown) => void,\n    row: Record<string, unknown>\n  ) => HTMLElement | string;\n\n  /**\n   * Alternative to built-in editors: raw HTML string. `${value}` placeholder will\n   * be replaced with the current cell value.\n   */\n  editorTemplate?: string;\n\n  /**\n   * Runs once after the editor element is added to the DOM. Gives full control\n   * for wiring events, populating data, etc.\n   */\n  editorSetup?: (\n    el: HTMLElement,\n    row: Record<string, unknown>,\n    commit: (newVal: unknown) => void\n  ) => void;\n}\n\nexport interface IPaginationChangeEventDetail {\n  currentPage: number;\n  pageSize: number;\n}\n\n@Component({\n  tag: 'modus-wc-table',\n  styleUrl: 'modus-wc-table.scss',\n  shadow: false,\n})\nexport class ModusWcTable {\n  private inheritedAttributes: Attributes = {};\n  private table: Table<Record<string, unknown>> | null = null;\n  private tanStackColumns: ColumnDef<Record<string, unknown>, unknown>[] = [];\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Enable cell editing. Either a boolean (all rows) or a predicate per row. */",
        "type": ": boolean"
      },
      {
        "name": "pageSizeOptions",
        "description": "/** Key to access data from row object */\n  accessor: string;\n  /** Custom cell renderer */\n  cellRenderer?: (value: unknown, row: unknown) => string | HTMLElement;\n  /** Class names for the column */\n  className?: string;\n  /** Header content - can be string or HTML */\n  header: string | HTMLElement;\n  /** Unique identifier for the column */\n  id: string;\n  /** Width style (e.g., '200px', '50%') */\n  width?: string;\n  /** Whether the column is sortable */\n  sortable?: boolean;\n  /** Built-in editor type to render when the cell is in edit mode. */\n  editor?: 'text' | 'number' | 'autocomplete' | 'date' | 'custom';\n  /** Extra props specific to the editor component. */\n  editorProps?: Record<string, unknown>;\n  /** Custom renderer invoked when editor === 'custom'. Must call onCommit with the new value. */\n  customEditorRenderer?: (\n    value: unknown,\n    onCommit: (val: unknown) => void,\n    row: Record<string, unknown>\n  ) => HTMLElement | string;\n\n  /**\n   * Alternative to built-in editors: raw HTML string. `${value}` placeholder will\n   * be replaced with the current cell value.\n   */\n  editorTemplate?: string;\n\n  /**\n   * Runs once after the editor element is added to the DOM. Gives full control\n   * for wiring events, populating data, etc.\n   */\n  editorSetup?: (\n    el: HTMLElement,\n    row: Record<string, unknown>,\n    commit: (newVal: unknown) => void\n  ) => void;\n}\n\nexport interface IPaginationChangeEventDetail {\n  currentPage: number;\n  pageSize: number;\n}\n\n@Component({\n  tag: 'modus-wc-table',\n  styleUrl: 'modus-wc-table.scss',\n  shadow: false,\n})\nexport class ModusWcTable {\n  private inheritedAttributes: Attributes = {};\n  private table: Table<Record<string, unknown>> | null = null;\n  private tanStackColumns: ColumnDef<Record<string, unknown>, unknown>[] = [];\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Enable cell editing. Either a boolean (all rows) or a predicate per row. */",
        "type": "number[]"
      },
      {
        "name": "showPageSizeSelector",
        "description": "/** Key to access data from row object */\n  accessor: string;\n  /** Custom cell renderer */\n  cellRenderer?: (value: unknown, row: unknown) => string | HTMLElement;\n  /** Class names for the column */\n  className?: string;\n  /** Header content - can be string or HTML */\n  header: string | HTMLElement;\n  /** Unique identifier for the column */\n  id: string;\n  /** Width style (e.g., '200px', '50%') */\n  width?: string;\n  /** Whether the column is sortable */\n  sortable?: boolean;\n  /** Built-in editor type to render when the cell is in edit mode. */\n  editor?: 'text' | 'number' | 'autocomplete' | 'date' | 'custom';\n  /** Extra props specific to the editor component. */\n  editorProps?: Record<string, unknown>;\n  /** Custom renderer invoked when editor === 'custom'. Must call onCommit with the new value. */\n  customEditorRenderer?: (\n    value: unknown,\n    onCommit: (val: unknown) => void,\n    row: Record<string, unknown>\n  ) => HTMLElement | string;\n\n  /**\n   * Alternative to built-in editors: raw HTML string. `${value}` placeholder will\n   * be replaced with the current cell value.\n   */\n  editorTemplate?: string;\n\n  /**\n   * Runs once after the editor element is added to the DOM. Gives full control\n   * for wiring events, populating data, etc.\n   */\n  editorSetup?: (\n    el: HTMLElement,\n    row: Record<string, unknown>,\n    commit: (newVal: unknown) => void\n  ) => void;\n}\n\nexport interface IPaginationChangeEventDetail {\n  currentPage: number;\n  pageSize: number;\n}\n\n@Component({\n  tag: 'modus-wc-table',\n  styleUrl: 'modus-wc-table.scss',\n  shadow: false,\n})\nexport class ModusWcTable {\n  private inheritedAttributes: Attributes = {};\n  private table: Table<Record<string, unknown>> | null = null;\n  private tanStackColumns: ColumnDef<Record<string, unknown>, unknown>[] = [];\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Enable cell editing. Either a boolean (all rows) or a predicate per row. */",
        "type": ": boolean"
      },
      {
        "name": "sortable",
        "description": "/** Key to access data from row object */\n  accessor: string;\n  /** Custom cell renderer */\n  cellRenderer?: (value: unknown, row: unknown) => string | HTMLElement;\n  /** Class names for the column */\n  className?: string;\n  /** Header content - can be string or HTML */\n  header: string | HTMLElement;\n  /** Unique identifier for the column */\n  id: string;\n  /** Width style (e.g., '200px', '50%') */\n  width?: string;\n  /** Whether the column is sortable */\n  sortable?: boolean;\n  /** Built-in editor type to render when the cell is in edit mode. */\n  editor?: 'text' | 'number' | 'autocomplete' | 'date' | 'custom';\n  /** Extra props specific to the editor component. */\n  editorProps?: Record<string, unknown>;\n  /** Custom renderer invoked when editor === 'custom'. Must call onCommit with the new value. */\n  customEditorRenderer?: (\n    value: unknown,\n    onCommit: (val: unknown) => void,\n    row: Record<string, unknown>\n  ) => HTMLElement | string;\n\n  /**\n   * Alternative to built-in editors: raw HTML string. `${value}` placeholder will\n   * be replaced with the current cell value.\n   */\n  editorTemplate?: string;\n\n  /**\n   * Runs once after the editor element is added to the DOM. Gives full control\n   * for wiring events, populating data, etc.\n   */\n  editorSetup?: (\n    el: HTMLElement,\n    row: Record<string, unknown>,\n    commit: (newVal: unknown) => void\n  ) => void;\n}\n\nexport interface IPaginationChangeEventDetail {\n  currentPage: number;\n  pageSize: number;\n}\n\n@Component({\n  tag: 'modus-wc-table',\n  styleUrl: 'modus-wc-table.scss',\n  shadow: false,\n})\nexport class ModusWcTable {\n  private inheritedAttributes: Attributes = {};\n  private table: Table<Record<string, unknown>> | null = null;\n  private tanStackColumns: ColumnDef<Record<string, unknown>, unknown>[] = [];\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Enable cell editing. Either a boolean (all rows) or a predicate per row. */",
        "type": ": boolean"
      },
      {
        "name": "selectable",
        "description": "/** Key to access data from row object */\n  accessor: string;\n  /** Custom cell renderer */\n  cellRenderer?: (value: unknown, row: unknown) => string | HTMLElement;\n  /** Class names for the column */\n  className?: string;\n  /** Header content - can be string or HTML */\n  header: string | HTMLElement;\n  /** Unique identifier for the column */\n  id: string;\n  /** Width style (e.g., '200px', '50%') */\n  width?: string;\n  /** Whether the column is sortable */\n  sortable?: boolean;\n  /** Built-in editor type to render when the cell is in edit mode. */\n  editor?: 'text' | 'number' | 'autocomplete' | 'date' | 'custom';\n  /** Extra props specific to the editor component. */\n  editorProps?: Record<string, unknown>;\n  /** Custom renderer invoked when editor === 'custom'. Must call onCommit with the new value. */\n  customEditorRenderer?: (\n    value: unknown,\n    onCommit: (val: unknown) => void,\n    row: Record<string, unknown>\n  ) => HTMLElement | string;\n\n  /**\n   * Alternative to built-in editors: raw HTML string. `${value}` placeholder will\n   * be replaced with the current cell value.\n   */\n  editorTemplate?: string;\n\n  /**\n   * Runs once after the editor element is added to the DOM. Gives full control\n   * for wiring events, populating data, etc.\n   */\n  editorSetup?: (\n    el: HTMLElement,\n    row: Record<string, unknown>,\n    commit: (newVal: unknown) => void\n  ) => void;\n}\n\nexport interface IPaginationChangeEventDetail {\n  currentPage: number;\n  pageSize: number;\n}\n\n@Component({\n  tag: 'modus-wc-table',\n  styleUrl: 'modus-wc-table.scss',\n  shadow: false,\n})\nexport class ModusWcTable {\n  private inheritedAttributes: Attributes = {};\n  private table: Table<Record<string, unknown>> | null = null;\n  private tanStackColumns: ColumnDef<Record<string, unknown>, unknown>[] = [];\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Enable cell editing. Either a boolean (all rows) or a predicate per row. */",
        "type": ": 'none' | 'single' | 'multi'"
      },
      {
        "name": "selectedRowIds",
        "description": "/** Key to access data from row object */\n  accessor: string;\n  /** Custom cell renderer */\n  cellRenderer?: (value: unknown, row: unknown) => string | HTMLElement;\n  /** Class names for the column */\n  className?: string;\n  /** Header content - can be string or HTML */\n  header: string | HTMLElement;\n  /** Unique identifier for the column */\n  id: string;\n  /** Width style (e.g., '200px', '50%') */\n  width?: string;\n  /** Whether the column is sortable */\n  sortable?: boolean;\n  /** Built-in editor type to render when the cell is in edit mode. */\n  editor?: 'text' | 'number' | 'autocomplete' | 'date' | 'custom';\n  /** Extra props specific to the editor component. */\n  editorProps?: Record<string, unknown>;\n  /** Custom renderer invoked when editor === 'custom'. Must call onCommit with the new value. */\n  customEditorRenderer?: (\n    value: unknown,\n    onCommit: (val: unknown) => void,\n    row: Record<string, unknown>\n  ) => HTMLElement | string;\n\n  /**\n   * Alternative to built-in editors: raw HTML string. `${value}` placeholder will\n   * be replaced with the current cell value.\n   */\n  editorTemplate?: string;\n\n  /**\n   * Runs once after the editor element is added to the DOM. Gives full control\n   * for wiring events, populating data, etc.\n   */\n  editorSetup?: (\n    el: HTMLElement,\n    row: Record<string, unknown>,\n    commit: (newVal: unknown) => void\n  ) => void;\n}\n\nexport interface IPaginationChangeEventDetail {\n  currentPage: number;\n  pageSize: number;\n}\n\n@Component({\n  tag: 'modus-wc-table',\n  styleUrl: 'modus-wc-table.scss',\n  shadow: false,\n})\nexport class ModusWcTable {\n  private inheritedAttributes: Attributes = {};\n  private table: Table<Record<string, unknown>> | null = null;\n  private tanStackColumns: ColumnDef<Record<string, unknown>, unknown>[] = [];\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Enable cell editing. Either a boolean (all rows) or a predicate per row. */",
        "type": ": string[]"
      },
      {
        "name": "zebra",
        "description": "/** Key to access data from row object */\n  accessor: string;\n  /** Custom cell renderer */\n  cellRenderer?: (value: unknown, row: unknown) => string | HTMLElement;\n  /** Class names for the column */\n  className?: string;\n  /** Header content - can be string or HTML */\n  header: string | HTMLElement;\n  /** Unique identifier for the column */\n  id: string;\n  /** Width style (e.g., '200px', '50%') */\n  width?: string;\n  /** Whether the column is sortable */\n  sortable?: boolean;\n  /** Built-in editor type to render when the cell is in edit mode. */\n  editor?: 'text' | 'number' | 'autocomplete' | 'date' | 'custom';\n  /** Extra props specific to the editor component. */\n  editorProps?: Record<string, unknown>;\n  /** Custom renderer invoked when editor === 'custom'. Must call onCommit with the new value. */\n  customEditorRenderer?: (\n    value: unknown,\n    onCommit: (val: unknown) => void,\n    row: Record<string, unknown>\n  ) => HTMLElement | string;\n\n  /**\n   * Alternative to built-in editors: raw HTML string. `${value}` placeholder will\n   * be replaced with the current cell value.\n   */\n  editorTemplate?: string;\n\n  /**\n   * Runs once after the editor element is added to the DOM. Gives full control\n   * for wiring events, populating data, etc.\n   */\n  editorSetup?: (\n    el: HTMLElement,\n    row: Record<string, unknown>,\n    commit: (newVal: unknown) => void\n  ) => void;\n}\n\nexport interface IPaginationChangeEventDetail {\n  currentPage: number;\n  pageSize: number;\n}\n\n@Component({\n  tag: 'modus-wc-table',\n  styleUrl: 'modus-wc-table.scss',\n  shadow: false,\n})\nexport class ModusWcTable {\n  private inheritedAttributes: Attributes = {};\n  private table: Table<Record<string, unknown>> | null = null;\n  private tanStackColumns: ColumnDef<Record<string, unknown>, unknown>[] = [];\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Enable cell editing. Either a boolean (all rows) or a predicate per row. */",
        "type": ": boolean"
      },
      {
        "name": "caption",
        "description": "/** Key to access data from row object */\n  accessor: string;\n  /** Custom cell renderer */\n  cellRenderer?: (value: unknown, row: unknown) => string | HTMLElement;\n  /** Class names for the column */\n  className?: string;\n  /** Header content - can be string or HTML */\n  header: string | HTMLElement;\n  /** Unique identifier for the column */\n  id: string;\n  /** Width style (e.g., '200px', '50%') */\n  width?: string;\n  /** Whether the column is sortable */\n  sortable?: boolean;\n  /** Built-in editor type to render when the cell is in edit mode. */\n  editor?: 'text' | 'number' | 'autocomplete' | 'date' | 'custom';\n  /** Extra props specific to the editor component. */\n  editorProps?: Record<string, unknown>;\n  /** Custom renderer invoked when editor === 'custom'. Must call onCommit with the new value. */\n  customEditorRenderer?: (\n    value: unknown,\n    onCommit: (val: unknown) => void,\n    row: Record<string, unknown>\n  ) => HTMLElement | string;\n\n  /**\n   * Alternative to built-in editors: raw HTML string. `${value}` placeholder will\n   * be replaced with the current cell value.\n   */\n  editorTemplate?: string;\n\n  /**\n   * Runs once after the editor element is added to the DOM. Gives full control\n   * for wiring events, populating data, etc.\n   */\n  editorSetup?: (\n    el: HTMLElement,\n    row: Record<string, unknown>,\n    commit: (newVal: unknown) => void\n  ) => void;\n}\n\nexport interface IPaginationChangeEventDetail {\n  currentPage: number;\n  pageSize: number;\n}\n\n@Component({\n  tag: 'modus-wc-table',\n  styleUrl: 'modus-wc-table.scss',\n  shadow: false,\n})\nexport class ModusWcTable {\n  private inheritedAttributes: Attributes = {};\n  private table: Table<Record<string, unknown>> | null = null;\n  private tanStackColumns: ColumnDef<Record<string, unknown>, unknown>[] = [];\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Enable cell editing. Either a boolean (all rows) or a predicate per row. */",
        "type": ": string"
      }
    ],
    "events": [
      {
        "name": "cellEditStart",
        "description": "/** Key to access data from row object */\n  accessor: string;\n  /** Custom cell renderer */\n  cellRenderer?: (value: unknown, row: unknown) => string | HTMLElement;\n  /** Class names for the column */\n  className?: string;\n  /** Header content - can be string or HTML */\n  header: string | HTMLElement;\n  /** Unique identifier for the column */\n  id: string;\n  /** Width style (e.g., '200px', '50%') */\n  width?: string;\n  /** Whether the column is sortable */\n  sortable?: boolean;\n  /** Built-in editor type to render when the cell is in edit mode. */\n  editor?: 'text' | 'number' | 'autocomplete' | 'date' | 'custom';\n  /** Extra props specific to the editor component. */\n  editorProps?: Record<string, unknown>;\n  /** Custom renderer invoked when editor === 'custom'. Must call onCommit with the new value. */\n  customEditorRenderer?: (\n    value: unknown,\n    onCommit: (val: unknown) => void,\n    row: Record<string, unknown>\n  ) => HTMLElement | string;\n\n  /**\n   * Alternative to built-in editors: raw HTML string. `${value}` placeholder will\n   * be replaced with the current cell value.\n   */\n  editorTemplate?: string;\n\n  /**\n   * Runs once after the editor element is added to the DOM. Gives full control\n   * for wiring events, populating data, etc.\n   */\n  editorSetup?: (\n    el: HTMLElement,\n    row: Record<string, unknown>,\n    commit: (newVal: unknown) => void\n  ) => void;\n}\n\nexport interface IPaginationChangeEventDetail {\n  currentPage: number;\n  pageSize: number;\n}\n\n@Component({\n  tag: 'modus-wc-table',\n  styleUrl: 'modus-wc-table.scss',\n  shadow: false,\n})\nexport class ModusWcTable {\n  private inheritedAttributes: Attributes = {};\n  private table: Table<Record<string, unknown>> | null = null;\n  private tanStackColumns: ColumnDef<Record<string, unknown>, unknown>[] = [];\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Enable cell editing. Either a boolean (all rows) or a predicate per row. */\n  @Prop() editable?: boolean | ((row: Record<string, unknown>) => boolean) =\n    false;\n\n  /** An array of column definitions. */\n  @Prop() columns!: ITableColumn[];\n\n  /** Custom CSS class to apply to the inner div. */\n  @Prop() customClass?: string = '';\n\n  /** An array of data objects. */\n  @Prop() data!: Record<string, unknown>[];\n\n  /** The density of the table, used to save space or increase readability. */\n  @Prop() density?: Density = 'comfortable';\n\n  /** Enable hover effect on table rows. */\n  @Prop() hover?: boolean = true;\n\n  /** The current page number in pagination (1-based index). */\n  @Prop() currentPage: number = 1;\n\n  /** Enable pagination for the table. */\n  @Prop() paginated?: boolean = false;\n\n  /** Available options for the number of rows per page. */\n  @Prop() pageSizeOptions: number[] = [5, 10, 15];\n\n  /** Show/hide the page size selector in pagination. */\n  @Prop() showPageSizeSelector?: boolean = true;\n\n  /** Enable sorting functionality for sortable columns. */\n  @Prop() sortable?: boolean = true;\n\n  /** Row selection mode: 'none' for no selection, 'single' for single row, 'multi' for multiple rows. */\n  @Prop() selectable?: 'none' | 'single' | 'multi' = 'none';\n\n  /** Array of selected row IDs. Used for controlled selection state. */\n  @Prop() selectedRowIds?: string[];\n\n  /** Zebra striped tables differentiate rows by styling them in an alternating fashion. */\n  @Prop() zebra?: boolean = false;\n\n  /** Accessibility caption for the table (visually hidden but available to screen readers). */\n  @Prop() caption?: string;\n\n  /** Currently editing cell coordinates */\n  @State() activeEditor?: { rowIndex: number; colId: string } | null = null;\n\n  /** Emits when cell editing starts. */"
      },
      {
        "name": "cellEditCommit",
        "description": "/** Key to access data from row object */\n  accessor: string;\n  /** Custom cell renderer */\n  cellRenderer?: (value: unknown, row: unknown) => string | HTMLElement;\n  /** Class names for the column */\n  className?: string;\n  /** Header content - can be string or HTML */\n  header: string | HTMLElement;\n  /** Unique identifier for the column */\n  id: string;\n  /** Width style (e.g., '200px', '50%') */\n  width?: string;\n  /** Whether the column is sortable */\n  sortable?: boolean;\n  /** Built-in editor type to render when the cell is in edit mode. */\n  editor?: 'text' | 'number' | 'autocomplete' | 'date' | 'custom';\n  /** Extra props specific to the editor component. */\n  editorProps?: Record<string, unknown>;\n  /** Custom renderer invoked when editor === 'custom'. Must call onCommit with the new value. */\n  customEditorRenderer?: (\n    value: unknown,\n    onCommit: (val: unknown) => void,\n    row: Record<string, unknown>\n  ) => HTMLElement | string;\n\n  /**\n   * Alternative to built-in editors: raw HTML string. `${value}` placeholder will\n   * be replaced with the current cell value.\n   */\n  editorTemplate?: string;\n\n  /**\n   * Runs once after the editor element is added to the DOM. Gives full control\n   * for wiring events, populating data, etc.\n   */\n  editorSetup?: (\n    el: HTMLElement,\n    row: Record<string, unknown>,\n    commit: (newVal: unknown) => void\n  ) => void;\n}\n\nexport interface IPaginationChangeEventDetail {\n  currentPage: number;\n  pageSize: number;\n}\n\n@Component({\n  tag: 'modus-wc-table',\n  styleUrl: 'modus-wc-table.scss',\n  shadow: false,\n})\nexport class ModusWcTable {\n  private inheritedAttributes: Attributes = {};\n  private table: Table<Record<string, unknown>> | null = null;\n  private tanStackColumns: ColumnDef<Record<string, unknown>, unknown>[] = [];\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Enable cell editing. Either a boolean (all rows) or a predicate per row. */\n  @Prop() editable?: boolean | ((row: Record<string, unknown>) => boolean) =\n    false;\n\n  /** An array of column definitions. */\n  @Prop() columns!: ITableColumn[];\n\n  /** Custom CSS class to apply to the inner div. */\n  @Prop() customClass?: string = '';\n\n  /** An array of data objects. */\n  @Prop() data!: Record<string, unknown>[];\n\n  /** The density of the table, used to save space or increase readability. */\n  @Prop() density?: Density = 'comfortable';\n\n  /** Enable hover effect on table rows. */\n  @Prop() hover?: boolean = true;\n\n  /** The current page number in pagination (1-based index). */\n  @Prop() currentPage: number = 1;\n\n  /** Enable pagination for the table. */\n  @Prop() paginated?: boolean = false;\n\n  /** Available options for the number of rows per page. */\n  @Prop() pageSizeOptions: number[] = [5, 10, 15];\n\n  /** Show/hide the page size selector in pagination. */\n  @Prop() showPageSizeSelector?: boolean = true;\n\n  /** Enable sorting functionality for sortable columns. */\n  @Prop() sortable?: boolean = true;\n\n  /** Row selection mode: 'none' for no selection, 'single' for single row, 'multi' for multiple rows. */\n  @Prop() selectable?: 'none' | 'single' | 'multi' = 'none';\n\n  /** Array of selected row IDs. Used for controlled selection state. */\n  @Prop() selectedRowIds?: string[];\n\n  /** Zebra striped tables differentiate rows by styling them in an alternating fashion. */\n  @Prop() zebra?: boolean = false;\n\n  /** Accessibility caption for the table (visually hidden but available to screen readers). */\n  @Prop() caption?: string;\n\n  /** Currently editing cell coordinates */\n  @State() activeEditor?: { rowIndex: number; colId: string } | null = null;\n\n  /** Emits when cell editing starts. */"
      },
      {
        "name": "rowClick",
        "description": "/** Key to access data from row object */\n  accessor: string;\n  /** Custom cell renderer */\n  cellRenderer?: (value: unknown, row: unknown) => string | HTMLElement;\n  /** Class names for the column */\n  className?: string;\n  /** Header content - can be string or HTML */\n  header: string | HTMLElement;\n  /** Unique identifier for the column */\n  id: string;\n  /** Width style (e.g., '200px', '50%') */\n  width?: string;\n  /** Whether the column is sortable */\n  sortable?: boolean;\n  /** Built-in editor type to render when the cell is in edit mode. */\n  editor?: 'text' | 'number' | 'autocomplete' | 'date' | 'custom';\n  /** Extra props specific to the editor component. */\n  editorProps?: Record<string, unknown>;\n  /** Custom renderer invoked when editor === 'custom'. Must call onCommit with the new value. */\n  customEditorRenderer?: (\n    value: unknown,\n    onCommit: (val: unknown) => void,\n    row: Record<string, unknown>\n  ) => HTMLElement | string;\n\n  /**\n   * Alternative to built-in editors: raw HTML string. `${value}` placeholder will\n   * be replaced with the current cell value.\n   */\n  editorTemplate?: string;\n\n  /**\n   * Runs once after the editor element is added to the DOM. Gives full control\n   * for wiring events, populating data, etc.\n   */\n  editorSetup?: (\n    el: HTMLElement,\n    row: Record<string, unknown>,\n    commit: (newVal: unknown) => void\n  ) => void;\n}\n\nexport interface IPaginationChangeEventDetail {\n  currentPage: number;\n  pageSize: number;\n}\n\n@Component({\n  tag: 'modus-wc-table',\n  styleUrl: 'modus-wc-table.scss',\n  shadow: false,\n})\nexport class ModusWcTable {\n  private inheritedAttributes: Attributes = {};\n  private table: Table<Record<string, unknown>> | null = null;\n  private tanStackColumns: ColumnDef<Record<string, unknown>, unknown>[] = [];\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Enable cell editing. Either a boolean (all rows) or a predicate per row. */\n  @Prop() editable?: boolean | ((row: Record<string, unknown>) => boolean) =\n    false;\n\n  /** An array of column definitions. */\n  @Prop() columns!: ITableColumn[];\n\n  /** Custom CSS class to apply to the inner div. */\n  @Prop() customClass?: string = '';\n\n  /** An array of data objects. */\n  @Prop() data!: Record<string, unknown>[];\n\n  /** The density of the table, used to save space or increase readability. */\n  @Prop() density?: Density = 'comfortable';\n\n  /** Enable hover effect on table rows. */\n  @Prop() hover?: boolean = true;\n\n  /** The current page number in pagination (1-based index). */\n  @Prop() currentPage: number = 1;\n\n  /** Enable pagination for the table. */\n  @Prop() paginated?: boolean = false;\n\n  /** Available options for the number of rows per page. */\n  @Prop() pageSizeOptions: number[] = [5, 10, 15];\n\n  /** Show/hide the page size selector in pagination. */\n  @Prop() showPageSizeSelector?: boolean = true;\n\n  /** Enable sorting functionality for sortable columns. */\n  @Prop() sortable?: boolean = true;\n\n  /** Row selection mode: 'none' for no selection, 'single' for single row, 'multi' for multiple rows. */\n  @Prop() selectable?: 'none' | 'single' | 'multi' = 'none';\n\n  /** Array of selected row IDs. Used for controlled selection state. */\n  @Prop() selectedRowIds?: string[];\n\n  /** Zebra striped tables differentiate rows by styling them in an alternating fashion. */\n  @Prop() zebra?: boolean = false;\n\n  /** Accessibility caption for the table (visually hidden but available to screen readers). */\n  @Prop() caption?: string;\n\n  /** Currently editing cell coordinates */\n  @State() activeEditor?: { rowIndex: number; colId: string } | null = null;\n\n  /** Emits when cell editing starts. */"
      },
      {
        "name": "sortChange",
        "description": "/** Key to access data from row object */\n  accessor: string;\n  /** Custom cell renderer */\n  cellRenderer?: (value: unknown, row: unknown) => string | HTMLElement;\n  /** Class names for the column */\n  className?: string;\n  /** Header content - can be string or HTML */\n  header: string | HTMLElement;\n  /** Unique identifier for the column */\n  id: string;\n  /** Width style (e.g., '200px', '50%') */\n  width?: string;\n  /** Whether the column is sortable */\n  sortable?: boolean;\n  /** Built-in editor type to render when the cell is in edit mode. */\n  editor?: 'text' | 'number' | 'autocomplete' | 'date' | 'custom';\n  /** Extra props specific to the editor component. */\n  editorProps?: Record<string, unknown>;\n  /** Custom renderer invoked when editor === 'custom'. Must call onCommit with the new value. */\n  customEditorRenderer?: (\n    value: unknown,\n    onCommit: (val: unknown) => void,\n    row: Record<string, unknown>\n  ) => HTMLElement | string;\n\n  /**\n   * Alternative to built-in editors: raw HTML string. `${value}` placeholder will\n   * be replaced with the current cell value.\n   */\n  editorTemplate?: string;\n\n  /**\n   * Runs once after the editor element is added to the DOM. Gives full control\n   * for wiring events, populating data, etc.\n   */\n  editorSetup?: (\n    el: HTMLElement,\n    row: Record<string, unknown>,\n    commit: (newVal: unknown) => void\n  ) => void;\n}\n\nexport interface IPaginationChangeEventDetail {\n  currentPage: number;\n  pageSize: number;\n}\n\n@Component({\n  tag: 'modus-wc-table',\n  styleUrl: 'modus-wc-table.scss',\n  shadow: false,\n})\nexport class ModusWcTable {\n  private inheritedAttributes: Attributes = {};\n  private table: Table<Record<string, unknown>> | null = null;\n  private tanStackColumns: ColumnDef<Record<string, unknown>, unknown>[] = [];\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Enable cell editing. Either a boolean (all rows) or a predicate per row. */\n  @Prop() editable?: boolean | ((row: Record<string, unknown>) => boolean) =\n    false;\n\n  /** An array of column definitions. */\n  @Prop() columns!: ITableColumn[];\n\n  /** Custom CSS class to apply to the inner div. */\n  @Prop() customClass?: string = '';\n\n  /** An array of data objects. */\n  @Prop() data!: Record<string, unknown>[];\n\n  /** The density of the table, used to save space or increase readability. */\n  @Prop() density?: Density = 'comfortable';\n\n  /** Enable hover effect on table rows. */\n  @Prop() hover?: boolean = true;\n\n  /** The current page number in pagination (1-based index). */\n  @Prop() currentPage: number = 1;\n\n  /** Enable pagination for the table. */\n  @Prop() paginated?: boolean = false;\n\n  /** Available options for the number of rows per page. */\n  @Prop() pageSizeOptions: number[] = [5, 10, 15];\n\n  /** Show/hide the page size selector in pagination. */\n  @Prop() showPageSizeSelector?: boolean = true;\n\n  /** Enable sorting functionality for sortable columns. */\n  @Prop() sortable?: boolean = true;\n\n  /** Row selection mode: 'none' for no selection, 'single' for single row, 'multi' for multiple rows. */\n  @Prop() selectable?: 'none' | 'single' | 'multi' = 'none';\n\n  /** Array of selected row IDs. Used for controlled selection state. */\n  @Prop() selectedRowIds?: string[];\n\n  /** Zebra striped tables differentiate rows by styling them in an alternating fashion. */\n  @Prop() zebra?: boolean = false;\n\n  /** Accessibility caption for the table (visually hidden but available to screen readers). */\n  @Prop() caption?: string;\n\n  /** Currently editing cell coordinates */\n  @State() activeEditor?: { rowIndex: number; colId: string } | null = null;\n\n  /** Emits when cell editing starts. */"
      },
      {
        "name": "paginationChange",
        "description": "/** Key to access data from row object */\n  accessor: string;\n  /** Custom cell renderer */\n  cellRenderer?: (value: unknown, row: unknown) => string | HTMLElement;\n  /** Class names for the column */\n  className?: string;\n  /** Header content - can be string or HTML */\n  header: string | HTMLElement;\n  /** Unique identifier for the column */\n  id: string;\n  /** Width style (e.g., '200px', '50%') */\n  width?: string;\n  /** Whether the column is sortable */\n  sortable?: boolean;\n  /** Built-in editor type to render when the cell is in edit mode. */\n  editor?: 'text' | 'number' | 'autocomplete' | 'date' | 'custom';\n  /** Extra props specific to the editor component. */\n  editorProps?: Record<string, unknown>;\n  /** Custom renderer invoked when editor === 'custom'. Must call onCommit with the new value. */\n  customEditorRenderer?: (\n    value: unknown,\n    onCommit: (val: unknown) => void,\n    row: Record<string, unknown>\n  ) => HTMLElement | string;\n\n  /**\n   * Alternative to built-in editors: raw HTML string. `${value}` placeholder will\n   * be replaced with the current cell value.\n   */\n  editorTemplate?: string;\n\n  /**\n   * Runs once after the editor element is added to the DOM. Gives full control\n   * for wiring events, populating data, etc.\n   */\n  editorSetup?: (\n    el: HTMLElement,\n    row: Record<string, unknown>,\n    commit: (newVal: unknown) => void\n  ) => void;\n}\n\nexport interface IPaginationChangeEventDetail {\n  currentPage: number;\n  pageSize: number;\n}\n\n@Component({\n  tag: 'modus-wc-table',\n  styleUrl: 'modus-wc-table.scss',\n  shadow: false,\n})\nexport class ModusWcTable {\n  private inheritedAttributes: Attributes = {};\n  private table: Table<Record<string, unknown>> | null = null;\n  private tanStackColumns: ColumnDef<Record<string, unknown>, unknown>[] = [];\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Enable cell editing. Either a boolean (all rows) or a predicate per row. */\n  @Prop() editable?: boolean | ((row: Record<string, unknown>) => boolean) =\n    false;\n\n  /** An array of column definitions. */\n  @Prop() columns!: ITableColumn[];\n\n  /** Custom CSS class to apply to the inner div. */\n  @Prop() customClass?: string = '';\n\n  /** An array of data objects. */\n  @Prop() data!: Record<string, unknown>[];\n\n  /** The density of the table, used to save space or increase readability. */\n  @Prop() density?: Density = 'comfortable';\n\n  /** Enable hover effect on table rows. */\n  @Prop() hover?: boolean = true;\n\n  /** The current page number in pagination (1-based index). */\n  @Prop() currentPage: number = 1;\n\n  /** Enable pagination for the table. */\n  @Prop() paginated?: boolean = false;\n\n  /** Available options for the number of rows per page. */\n  @Prop() pageSizeOptions: number[] = [5, 10, 15];\n\n  /** Show/hide the page size selector in pagination. */\n  @Prop() showPageSizeSelector?: boolean = true;\n\n  /** Enable sorting functionality for sortable columns. */\n  @Prop() sortable?: boolean = true;\n\n  /** Row selection mode: 'none' for no selection, 'single' for single row, 'multi' for multiple rows. */\n  @Prop() selectable?: 'none' | 'single' | 'multi' = 'none';\n\n  /** Array of selected row IDs. Used for controlled selection state. */\n  @Prop() selectedRowIds?: string[];\n\n  /** Zebra striped tables differentiate rows by styling them in an alternating fashion. */\n  @Prop() zebra?: boolean = false;\n\n  /** Accessibility caption for the table (visually hidden but available to screen readers). */\n  @Prop() caption?: string;\n\n  /** Currently editing cell coordinates */\n  @State() activeEditor?: { rowIndex: number; colId: string } | null = null;\n\n  /** Emits when cell editing starts. */"
      },
      {
        "name": "rowSelectionChange",
        "description": "/** Key to access data from row object */\n  accessor: string;\n  /** Custom cell renderer */\n  cellRenderer?: (value: unknown, row: unknown) => string | HTMLElement;\n  /** Class names for the column */\n  className?: string;\n  /** Header content - can be string or HTML */\n  header: string | HTMLElement;\n  /** Unique identifier for the column */\n  id: string;\n  /** Width style (e.g., '200px', '50%') */\n  width?: string;\n  /** Whether the column is sortable */\n  sortable?: boolean;\n  /** Built-in editor type to render when the cell is in edit mode. */\n  editor?: 'text' | 'number' | 'autocomplete' | 'date' | 'custom';\n  /** Extra props specific to the editor component. */\n  editorProps?: Record<string, unknown>;\n  /** Custom renderer invoked when editor === 'custom'. Must call onCommit with the new value. */\n  customEditorRenderer?: (\n    value: unknown,\n    onCommit: (val: unknown) => void,\n    row: Record<string, unknown>\n  ) => HTMLElement | string;\n\n  /**\n   * Alternative to built-in editors: raw HTML string. `${value}` placeholder will\n   * be replaced with the current cell value.\n   */\n  editorTemplate?: string;\n\n  /**\n   * Runs once after the editor element is added to the DOM. Gives full control\n   * for wiring events, populating data, etc.\n   */\n  editorSetup?: (\n    el: HTMLElement,\n    row: Record<string, unknown>,\n    commit: (newVal: unknown) => void\n  ) => void;\n}\n\nexport interface IPaginationChangeEventDetail {\n  currentPage: number;\n  pageSize: number;\n}\n\n@Component({\n  tag: 'modus-wc-table',\n  styleUrl: 'modus-wc-table.scss',\n  shadow: false,\n})\nexport class ModusWcTable {\n  private inheritedAttributes: Attributes = {};\n  private table: Table<Record<string, unknown>> | null = null;\n  private tanStackColumns: ColumnDef<Record<string, unknown>, unknown>[] = [];\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Enable cell editing. Either a boolean (all rows) or a predicate per row. */\n  @Prop() editable?: boolean | ((row: Record<string, unknown>) => boolean) =\n    false;\n\n  /** An array of column definitions. */\n  @Prop() columns!: ITableColumn[];\n\n  /** Custom CSS class to apply to the inner div. */\n  @Prop() customClass?: string = '';\n\n  /** An array of data objects. */\n  @Prop() data!: Record<string, unknown>[];\n\n  /** The density of the table, used to save space or increase readability. */\n  @Prop() density?: Density = 'comfortable';\n\n  /** Enable hover effect on table rows. */\n  @Prop() hover?: boolean = true;\n\n  /** The current page number in pagination (1-based index). */\n  @Prop() currentPage: number = 1;\n\n  /** Enable pagination for the table. */\n  @Prop() paginated?: boolean = false;\n\n  /** Available options for the number of rows per page. */\n  @Prop() pageSizeOptions: number[] = [5, 10, 15];\n\n  /** Show/hide the page size selector in pagination. */\n  @Prop() showPageSizeSelector?: boolean = true;\n\n  /** Enable sorting functionality for sortable columns. */\n  @Prop() sortable?: boolean = true;\n\n  /** Row selection mode: 'none' for no selection, 'single' for single row, 'multi' for multiple rows. */\n  @Prop() selectable?: 'none' | 'single' | 'multi' = 'none';\n\n  /** Array of selected row IDs. Used for controlled selection state. */\n  @Prop() selectedRowIds?: string[];\n\n  /** Zebra striped tables differentiate rows by styling them in an alternating fashion. */\n  @Prop() zebra?: boolean = false;\n\n  /** Accessibility caption for the table (visually hidden but available to screen readers). */\n  @Prop() caption?: string;\n\n  /** Currently editing cell coordinates */\n  @State() activeEditor?: { rowIndex: number; colId: string } | null = null;\n\n  /** Emits when cell editing starts. */"
      }
    ],
    "slots": [],
    "default_values": {
      "editable": "> boolean) =\n    false",
      "columns": "= 'none',\n      pagination: this.internalPagination,\n      enableSorting: this.sortable,\n      manualPagination: !this.paginated,\n      manualSorting: false, // Let TanStack handle sorting internally\n      onSortingChange: this.handleSortingChange,\n      onPaginationChange: this.handlePaginationChange,\n      onRowSelectionChange: this.handleRowSelectionChange,\n      getRowId: (orig: Record<string, unknown>, idx) =>\n        orig && orig['id'] !== undefined && orig['id'] !== null\n          ? String(orig['id'] as string | number)\n          : String(idx),\n    })",
      "customClass": "''",
      "data": "= 'none',\n      pagination: this.internalPagination,\n      enableSorting: this.sortable,\n      manualPagination: !this.paginated,\n      manualSorting: false, // Let TanStack handle sorting internally\n      onSortingChange: this.handleSortingChange,\n      onPaginationChange: this.handlePaginationChange,\n      onRowSelectionChange: this.handleRowSelectionChange,\n      getRowId: (orig: Record<string, unknown>, idx) =>\n        orig && orig['id'] !== undefined && orig['id'] !== null\n          ? String(orig['id'] as string | number)\n          : String(idx),\n    })",
      "density": "'comfortable'",
      "hover": "true",
      "currentPage": "1",
      "paginated": "false",
      "pageSizeOptions": "[5, 10, 15]",
      "showPageSizeSelector": "true",
      "sortable": "true",
      "selectable": "'none'",
      "selectedRowIds": "> [id, true]) ?? []\n    )",
      "zebra": "false"
    },
    "documentation": "\n\n--- modus-wc-table.stories.ts ---\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { action } from '@storybook/addon-actions';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ITableColumn } from './modus-wc-table';\nimport { IAutocompleteItem } from '../types';\nimport { Density } from '../types';\n\ninterface TableStoryArgs {\n  'custom-class'?: string;\n  'current-page'?: number;\n  'page-size-options'?: number[];\n  'selected-row-ids'?: string[];\n  'show-page-size-selector'?: boolean;\n  caption?: string;\n  columns?: ITableColumn[];\n  data?: Record<string, unknown>[];\n  density?: Density;\n  editable?: boolean;\n  hover?: boolean;\n  paginated?: boolean;\n  selectable?: 'none' | 'single' | 'multi';\n  sortable?: boolean;\n  zebra?: boolean;\n}\n\nconst meta: Meta<TableStoryArgs> = {\n  title: 'Components/Table',\n  component: 'modus-wc-table',\n\n  argTypes: {\n    columns: {\n      control: 'object',\n      description: 'An array of column definitions.',\n      table: {\n        type: {\n          detail: `\n            Interface: ITableColumn\n            Properties:\n            - accessor (string): Key to access data from row object\n            - cellRenderer? (function): Custom cell renderer (value, row) => string | HTMLElement\n            - className? (string): Class names for the column\n            - header (string | HTMLElement): Header content\n            - id (string): Unique identifier for the column\n            - width? (string): Width style (e.g., '200px', '50%')\n            - sortable? (boolean): Whether the column is sortable\n            - editor? ('text' | 'number' | 'autocomplete' | 'date' | 'custom'): Built-in editor type\n            - editorProps? (object): Extra props specific to the editor component\n            - customEditorRenderer? (function): Custom renderer for 'custom' editor\n            - editorTemplate? (string): Raw HTML string for editor, with \\`\\${value}\\` placeholder\n            - editorSetup? (function): Runs after the editor element is added to the DOM\n          `,\n        },\n      },\n    },\n    data: {\n      control: 'object',\n      description: 'An array of data objects.',\n      table: {\n        type: {\n          detail: `\n            Data should be an array of objects, where each object represents a row and each key matches a column accessor.\n\n            Example:\n            [\n              { id: '1', name: 'Alice', email: 'alice@example.com', role: 'Admin' },\n              { id: '2', name: 'Bob', email: 'bob@example.com', role: 'User' }\n            ]\n\n            - Each property in the object should correspond to a column's accessor value.\n            - The 'id' property is recommended for row identification and selection.\n          `,\n        },\n      },\n    },\n    density: {\n      control: {\n        type: 'select',\n      },\n      options: ['condensed', 'comfortable', 'relaxed'],\n      description:\n        'The density of the table, used to save space or increase readability.',\n    },\n    hover: {\n      control: 'boolean',\n      description: 'Enable hover effect on table rows.',\n      defaultValue: true,\n    },\n    sortable: {\n      control: 'boolean',\n      description: 'Enable sorting functionality for sortable columns.',\n      defaultValue: true,\n    },\n    paginated: {\n      control: 'boolean',\n      description: 'Enable pagination for the table.',\n      defaultValue: false,\n    },\n    'show-page-size-selector': {\n      control: 'boolean',\n      description: 'Show/hide the page size selector in pagination.',\n      defaultValue: true,\n    },\n    caption: {\n      control: 'text',\n      description:\n        'Accessibility caption for the table that is visually hidden but available to screen readers.',\n    },\n    'custom-class': {\n      control: 'text',\n      description: 'Custom CSS class to apply to the inner div.',\n    },\n    selectable: {\n      control: {\n        type: 'select',\n      },\n      options: ['none', 'single', 'multi'],\n      description:\n        \"Row selection mode: 'none' for no selection, 'single' for single row, 'multi' for multiple rows.\",\n      defaultValue: 'none',\n    },\n    zebra: {\n      control: 'boolean',\n      description:\n        'Zebra striped tables differentiate rows by styling them in an alternating fashion.',\n      defaultValue: false,\n    },\n    'current-page': {\n      control: 'number',\n      description: 'The current page number in pagination (1-based index).',\n      defaultValue: 1,\n    },\n    'page-size-options': {\n      control: 'object',\n      description: 'Available options for the number of rows per page.',\n      defaultValue: [5, 10, 15],\n    },\n    'selected-row-ids': {\n      control: 'object',\n      description:\n        'Array of selected row IDs. Used for controlled selection state.',\n      defaultValue: [],\n    },\n    editable: {\n      control: 'boolean',\n      description:\n        'Enable cell editing. Either a boolean (all rows) or a predicate per row.',\n      defaultValue: false,\n    },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<TableStoryArgs>;\n\n// Helper functions\nconst createDemoColumns = (): ITableColumn[] => [\n  {\n    id: 'id',\n    header: 'ID',\n    accessor: 'id',\n    width: '60px',\n  },\n  {\n    id: 'name',\n    header: 'Name',\n    accessor: 'name',\n    width: '100px',\n  },\n  {\n    id: 'email',\n    header: 'Email',\n    accessor: 'email',\n  },\n  {\n    id: 'role',\n    header: 'Role',\n    accessor: 'role',\n  },\n];\n\nconst createSortableColumns = (): ITableColumn[] => {\n  const columns = createDemoColumns();\n  return columns.map((col) => ({ ...col, sortable: true }));\n};\n\nconst createDemoData = (count = 5): Record<string, any>[] => {\n  const data: Record<string, any>[] = [];\n  for (let i = 1; i <= count; i++) {\n    data.push({\n      id: i.toString(),\n      name: `User ${i}`,\n      email: `user${i}@example.com`,\n      role: i % 2 === 0 ? 'Admin' : 'User',\n    });\n  }\n  return data;\n};\n\nexport const Default: Story = {\n  render: (args) => {\n    const columns = args.columns || createDemoColumns();\n    const data = args.data || createDemoData();\n    return html`\n      <script>\n            // Helper functions\n        const createDemoColumns = (): ITableColumn[] => [\n          {\n            id: 'id',\n            header: 'ID',\n            accessor: 'id',\n            width: '60px',\n          },\n          {\n            id: 'name',\n            header: 'Name',\n            accessor: 'name',\n            width: '100px',\n          },\n          {\n            id: 'email',\n            header: 'Email',\n            accessor: 'email',\n          },\n          {\n            id: 'role',\n            header: 'Role',\n            accessor: 'role',\n          },\n        ];\n\n        const createDemoData = (count = 5): Record<string, any>[] => {\n          const data: Record<string, any>[] = [];\n          for (let i = 1; i <= count; i++) {\n            data.push({\n              id: i.toString(),\n              name: \\`User \\${i}\\`,\n              email: \\`user\\${i}@example.com\\`,\n              role: i % 2 === 0 ? 'Admin' : 'User',\n            });\n          }\n          return data;\n        };\n      </script>\n      <modus-wc-table\n        .columns=${columns}\n        .data=${data}\n        .density=${args.density}\n        .hover=${args.hover}\n        .sortable=${args.sortable}\n        .paginated=${args.paginated}\n        .showPageSizeSelector=${args['show-page-size-selector']}\n        .customClass=${args['custom-class']}\n        .selectable=${args.selectable}\n        .zebra=${args.zebra}\n        .currentPage=${args['current-page']}\n        .pageSizeOptions=${args['page-size-options']}\n        .selectedRowIds=${args['selected-row-ids']}\n        .editable=${args.editable}\n        .caption=${args.caption}\n        @rowClick=${action('rowClick')}\n        @sortChange=${action('sortChange')}\n        @paginationChange=${action('paginationChange')}\n        @rowSelectionChange=${action('rowSelectionChange')}\n        @cellEditStart=${action('cellEditStart')}\n        @cellEditCommit=${action('cellEditCommit')}\n      ></modus-wc-table>\n    `;\n  },\n  args: {\n    density: 'comfortable',\n    hover: false,\n    sortable: true,\n    paginated: false,\n    'show-page-size-selector': true,\n    'custom-class': '',\n    selectable: 'none',\n    zebra: false,\n    'current-page': 1,\n    'page-size-options': [5, 10, 15],\n    'selected-row-ids': [],\n    editable: false,\n  },\n};\n\nexport const Hover: Story = {\n  render: (args) => {\n    const columns = args.columns || createDemoColumns();\n    const data = args.data || createDemoData();\n    return html`\n      <script>\n        // Helper functions\n        const createDemoColumns = (): ITableColumn[] => [\n          {\n            id: 'id',\n            header: 'ID',\n            accessor: 'id',\n            width: '60px',\n          },\n          {\n            id: 'name',\n            header: 'Name',\n            accessor: 'name',\n            width: '100px',\n          },\n          {\n            id: 'email',\n            header: 'Email',\n            accessor: 'email',\n          },\n          {\n            id: 'role',\n            header: 'Role',\n            accessor: 'role',\n          },\n        ];\n\n        const createDemoData = (count = 5): Record<string, any>[] => {\n          const data: Record<string, any>[] = [];\n          for (let i = 1; i <= count; i++) {\n            data.push({\n              id: i.toString(),\n              name: \\`User \\${i}\\`,\n              email: \\`user\\${i}@example.com\\`,\n              role: i % 2 === 0 ? 'Admin' : 'User',\n            });\n          }\n          return data;\n        };\n      </script>\n      <modus-wc-table\n        .columns=${columns}\n        .data=${data}\n        .density=${args.density}\n        .hover=${args.hover}\n        .sortable=${args.sortable}\n        .paginated=${args.paginated}\n        .showPageSizeSelector=${args['show-page-size-selector']}\n        .customClass=${args['custom-class']}\n        .selectable=${args.selectable}\n        .zebra=${args.zebra}\n        .currentPage=${args['current-page']}\n        .pageSizeOptions=${args['page-size-options']}\n        .selectedRowIds=${args['selected-row-ids']}\n        .editable=${args.editable}\n        @rowClick=${action('rowClick')}\n      ></modus-wc-table>\n    `;\n  },\n  args: {\n    density: 'comfortable',\n    hover: true,\n  },\n};\n\nexport const Sorting: Story = {\n  render: (args) => {\n    const columns = args.columns || createSortableColumns();\n    const data = args.data || createDemoData();\n    return html`\n      <script>\n        // Helper functions\n        const createDemoColumns = (): ITableColumn[] => [\n          {\n            id: 'id',\n            header: 'ID',\n            accessor: 'id',\n            width: '60px',\n          },\n          {\n            id: 'name',\n            header: 'Name',\n            accessor: 'name',\n            width: '100px',\n          },\n          {\n            id: 'email',\n            header: 'Email',\n            accessor: 'email',\n          },\n          {\n            id: 'role',\n            header: 'Role',\n            accessor: 'role',\n          },\n        ];\n\n        const createSortableColumns = (): ITableColumn[] => {\n          const columns = createDemoColumns();\n          return columns.map((col) => ({ ...col, sortable: true }));\n        };\n\n        const createDemoData = (count = 5): Record<string, any>[] => {\n          const data: Record<string, any>[] = [];\n          for (let i = 1; i <= count; i++) {\n            data.push({\n              id: i.toString(),\n              name: \\`User \\${i}\\`,\n              email: \\`user\\${i}@example.com\\`,\n              role: i % 2 === 0 ? 'Admin' : 'User',\n            });\n          }\n          return data;\n        };\n      </script>\n      <modus-wc-table\n        .columns=${columns}\n        .data=${data}\n        .density=${args.density}\n        .hover=${args.hover}\n        .sortable=${args.sortable}\n        .paginated=${args.paginated}\n        .showPageSizeSelector=${args['show-page-size-selector']}\n        .customClass=${args['custom-class']}\n        .selectable=${args.selectable}\n        .zebra=${args.zebra}\n        .currentPage=${args['current-page']}\n        .pageSizeOptions=${args['page-size-options']}\n        .selectedRowIds=${args['selected-row-ids']}\n        .editable=${args.editable}\n        @sortChange=${action('sortChange')}\n      ></modus-wc-table>\n    `;\n  },\n  args: {\n    density: 'comfortable',\n    sortable: true,\n  },\n};\n\nexport const Pagination: Story = {\n  render: (args) => {\n    const columns = args.columns || createDemoColumns();\n    const data = args.data || createDemoData(15);\n    return html`\n      <script>\n            // Helper functions\n            const createDemoColumns = (): ITableColumn[] => [\n              {\n                id: 'id',\n                header: 'ID',\n                accessor: 'id',\n                width: '60px',\n              },\n              {\n                id: 'name',\n                header: 'Name',\n                accessor: 'name',\n                width: '100px',\n              },\n              {\n                id: 'email',\n                header: 'Email',\n                accessor: 'email',\n              },\n              {\n                id: 'role',\n                header: 'Role',\n                accessor: 'role',\n              },\n            ];\n\n          const createDemoData = (count = 5): Record<string, any>[] => {\n          const data: Record<string, any>[] = [];\n          for (let i = 1; i <= count; i++) {\n            data.push({\n              id: i.toString(),\n              name: \\`User \\${i}\\`,\n              email: \\`user\\${i}@example.com\\`,\n              role: i % 2 === 0 ? 'Admin' : 'User',\n            });\n          }\n          return data;\n        };\n        const columns = args.columns || createDemoColumns();\n        const data = args.data || createDemoData(15);\n      </script>\n      <modus-wc-table\n        .columns=${columns}\n        .data=${data}\n        .density=${args.density}\n        .hover=${args.hover}\n        .sortable=${args.sortable}\n        .paginated=${args.paginated}\n        .showPageSizeSelector=${args['show-page-size-selector']}\n        .customClass=${args['custom-class']}\n        .selectable=${args.selectable}\n        .zebra=${args.zebra}\n        .currentPage=${args['current-page']}\n        .pageSizeOptions=${args['page-size-options']}\n        .selectedRowIds=${args['selected-row-ids']}\n        .editable=${args.editable}\n        @paginationChange=${action('paginationChange')}\n      ></modus-wc-table>\n    `;\n  },\n  args: {\n    density: 'comfortable',\n    paginated: true,\n    'show-page-size-selector': true,\n  },\n};\n\nexport const CheckBoxRowSelection: Story = {\n  render: (args) => {\n    const columns = args.columns || createDemoColumns();\n    const data = args.data || createDemoData();\n    return html`\n      <script>\n            // Helper functions\n            const createDemoColumns = (): ITableColumn[] => [\n              {\n                id: 'id',\n                header: 'ID',\n                accessor: 'id',\n                width: '60px',\n              },\n              {\n                id: 'name',\n                header: 'Name',\n                accessor: 'name',\n                width: '100px',\n              },\n              {\n                id: 'email',\n                header: 'Email',\n                accessor: 'email',\n              },\n              {\n                id: 'role',\n                header: 'Role',\n                accessor: 'role',\n              },\n            ];\n\n            const createDemoData = (count = 5): Record<string, any>[] => {\n              const data: Record<string, any>[] = [];\n              for (let i = 1; i <= count; i++) {\n                data.push({\n                  id: i.toString(),\n                  name: \\`User \\${i}\\`,\n                  email: \\`user\\${i}@example.com\\`,\n                  role: i % 2 === 0 ? 'Admin' : 'User',\n                });\n              }\n              return data;\n            };\n        const columns = args.columns || createDemoColumns();\n        const data = args.data || createDemoData(15);\n      </script>\n      <modus-wc-table\n        .columns=${columns}\n        .data=${data}\n        .density=${args.density}\n        .hover=${args.hover}\n        .sortable=${args.sortable}\n        .paginated=${args.paginated}\n        .showPageSizeSelector=${args['show-page-size-selector']}\n        .customClass=${args['custom-class']}\n        .selectable=${args.selectable}\n        .zebra=${args.zebra}\n        .currentPage=${args['current-page']}\n        .pageSizeOptions=${args['page-size-options']}\n        .selectedRowIds=${args['selected-row-ids']}\n        .editable=${args.editable}\n        @rowSelectionChange=${action('rowSelectionChange')}\n      ></modus-wc-table>\n    `;\n  },\n  args: {\n    density: 'comfortable',\n    selectable: 'multi',\n  },\n};\n\nexport const InlineEditing: Story = {\n  render: (args) => {\n    const columns: ITableColumn[] = [\n      {\n        id: 'id',\n        header: 'ID',\n        accessor: 'id',\n        width: '20px',\n      },\n      {\n        id: 'name',\n        header: 'Name',\n        accessor: 'name',\n        editor: 'text',\n      },\n      {\n        id: 'status',\n        header: 'Status',\n        accessor: 'status',\n        editor: 'custom',\n        customEditorRenderer: (value, onCommit) => {\n          const container = document.createElement('div');\n          container.style.width = '100%';\n\n          const autocomplete = document.createElement('modus-wc-autocomplete');\n          autocomplete.items = [\n            { label: 'Active', value: 'Active', visibleInMenu: true },\n            { label: 'Inactive', value: 'Inactive', visibleInMenu: true },\n            { label: 'Pending', value: 'Pending', visibleInMenu: true },\n          ];\n          autocomplete.value = value as string;\n          autocomplete.style.width = '100%';\n\n          const handleItemSelect = (e: CustomEvent<IAutocompleteItem>) => {\n            onCommit(e.detail.value);\n          };\n\n          autocomplete.addEventListener(\n            'itemSelect',\n            handleItemSelect as EventListener\n          );\n          container.appendChild(autocomplete);\n\n          setTimeout(() => {\n            const input = autocomplete.querySelector('input');\n            input?.focus();\n          }, 0);\n\n          return container;\n        },\n        cellRenderer: (value) => {\n          const statusColors = {\n            Active: 'green',\n            Inactive: 'gray',\n            Pending: 'blue',\n          };\n          const color = statusColors[value as string] || 'black';\n          const span = document.createElement('span');\n          span.textContent = value as string;\n          span.style.color = color;\n          span.style.fontWeight = 'bold';\n          return span;\n        },\n      },\n    ];\n\n    const data = [\n      { id: '1', name: 'John Doe', status: 'Active' },\n      { id: '2', name: 'Jane Smith', status: 'Inactive' },\n      { id: '3', name: 'Bob Johnson', status: 'Pending' },\n    ];\n\n    return html`\n      <script>\n                // Helper functions\n                const createDemoColumns = (): ITableColumn[] => [\n                  {\n                    id: 'id',\n                    header: 'ID',\n                    accessor: 'id',\n                    width: '60px',\n                  },\n                  {\n                    id: 'name',\n                    header: 'Name',\n                    accessor: 'name',\n                    width: '100px',\n                  },\n                  {\n                    id: 'email',\n                    header: 'Email',\n                    accessor: 'email',\n                  },\n                  {\n                    id: 'role',\n                    header: 'Role',\n                    accessor: 'role',\n                  },\n                ];\n\n                const createDemoData = (count = 5): Record<string, any>[] => {\n                  const data: Record<string, any>[] = [];\n                  for (let i = 1; i <= count; i++) {\n                    data.push({\n                      id: i.toString(),\n                      name: \\`User \\${i}\\`,\n                      email: \\`user\\${i}@example.com\\`,\n                      role: i % 2 === 0 ? 'Admin' : 'User',\n                    });\n                  }\n                  return data;\n                };\n                    const columns: ITableColumn[] = [\n          {\n            id: 'id',\n            header: 'ID',\n            accessor: 'id',\n            width: '20px',\n          },\n          {\n            id: 'name',\n            header: 'Name',\n            accessor: 'name',\n            editor: 'text',\n          },\n          {\n            id: 'status',\n            header: 'Status',\n            accessor: 'status',\n            editor: 'custom',\n            customEditorRenderer: (value, onCommit) => {\n              const container = document.createElement('div');\n              container.style.width = '100%';\n\n              const autocomplete = document.createElement('modus-wc-autocomplete');\n              autocomplete.items = [\n                { label: 'Active', value: 'Active', visibleInMenu: true },\n                { label: 'Inactive', value: 'Inactive', visibleInMenu: true },\n                { label: 'Pending', value: 'Pending', visibleInMenu: true },\n              ];\n              autocomplete.value = value as string;\n              autocomplete.style.width = '100%';\n\n              const handleItemSelect = (e: CustomEvent<IAutocompleteItem>) => {\n                onCommit(e.detail.value);\n              };\n\n              autocomplete.addEventListener(\n                'itemSelect',\n                handleItemSelect as EventListener\n              );\n              container.appendChild(autocomplete);\n\n              setTimeout(() => {\n                const input = autocomplete.querySelector('input');\n                input?.focus();\n              }, 0);\n\n              return container;\n            },\n            cellRenderer: (value) => {\n              const statusColors = {\n                Active: 'green',\n                Inactive: 'gray',\n                Pending: 'blue',\n              };\n              const color = statusColors[value as string] || 'black';\n              const span = document.createElement('span');\n              span.textContent = value as string;\n              span.style.color = color;\n              span.style.fontWeight = 'bold';\n              return span;\n            },\n          },\n        ];\n\n        const data = [\n          { id: '1', name: 'John Doe', status: 'Active' },\n          { id: '2', name: 'Jane Smith', status: 'Inactive' },\n          { id: '3', name: 'Bob Johnson', status: 'Pending' },\n        ];\n      </script>\n      <modus-wc-table\n        .columns=${columns}\n        .data=${data}\n        .density=${args.density}\n        .hover=${args.hover}\n        .sortable=${args.sortable}\n        .paginated=${args.paginated}\n        .showPageSizeSelector=${args['show-page-size-selector']}\n        .customClass=${args['custom-class']}\n        .selectable=${args.selectable}\n        .zebra=${args.zebra}\n        .currentPage=${args['current-page']}\n        .pageSizeOptions=${args['page-size-options']}\n        .selectedRowIds=${args['selected-row-ids']}\n        .editable=${true}\n        @cellEditStart=${action('cellEditStart')}\n        @cellEditCommit=${action('cellEditCommit')}\n      ></modus-wc-table>\n    `;\n  },\n  args: {\n    density: 'comfortable',\n    hover: true,\n    sortable: true,\n    paginated: false,\n    'show-page-size-selector': true,\n    'custom-class': '',\n    selectable: 'none',\n    zebra: false,\n    'current-page': 1,\n    'page-size-options': [5, 10, 15],\n    'selected-row-ids': [],\n  },\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-table\n        .columns=${columns}\n        .data=${data}\n        .density=${args.density}\n        .hover=${args.hover}\n        .sortable=${args.sortable}\n        .paginated=${args.paginated}\n        .showPageSizeSelector=${args['show-page-size-selector']}\n        .customClass=${args['custom-class']}\n        .selectable=${args.selectable}\n        .zebra=${args.zebra}\n        .currentPage=${args['current-page']}\n        .pageSizeOptions=${args['page-size-options']}\n        .selectedRowIds=${args['selected-row-ids']}\n        .editable=${args.editable}\n        .caption=${args.caption}\n        @rowClick=${action('rowClick')}\n        @sortChange=${action('sortChange')}\n        @paginationChange=${action('paginationChange')}\n        @rowSelectionChange=${action('rowSelectionChange')}\n        @cellEditStart=${action('cellEditStart')}\n        @cellEditCommit=${action('cellEditCommit')}\n      ></modus-wc-table>",
        "<modus-wc-table\n        .columns=${columns}\n        .data=${data}\n        .density=${args.density}\n        .hover=${args.hover}\n        .sortable=${args.sortable}\n        .paginated=${args.paginated}\n        .showPageSizeSelector=${args['show-page-size-selector']}\n        .customClass=${args['custom-class']}\n        .selectable=${args.selectable}\n        .zebra=${args.zebra}\n        .currentPage=${args['current-page']}\n        .pageSizeOptions=${args['page-size-options']}\n        .selectedRowIds=${args['selected-row-ids']}\n        .editable=${args.editable}\n        @rowClick=${action('rowClick')}\n      ></modus-wc-table>",
        "<modus-wc-table\n        .columns=${columns}\n        .data=${data}\n        .density=${args.density}\n        .hover=${args.hover}\n        .sortable=${args.sortable}\n        .paginated=${args.paginated}\n        .showPageSizeSelector=${args['show-page-size-selector']}\n        .customClass=${args['custom-class']}\n        .selectable=${args.selectable}\n        .zebra=${args.zebra}\n        .currentPage=${args['current-page']}\n        .pageSizeOptions=${args['page-size-options']}\n        .selectedRowIds=${args['selected-row-ids']}\n        .editable=${args.editable}\n        @sortChange=${action('sortChange')}\n      ></modus-wc-table>",
        "<modus-wc-table\n        .columns=${columns}\n        .data=${data}\n        .density=${args.density}\n        .hover=${args.hover}\n        .sortable=${args.sortable}\n        .paginated=${args.paginated}\n        .showPageSizeSelector=${args['show-page-size-selector']}\n        .customClass=${args['custom-class']}\n        .selectable=${args.selectable}\n        .zebra=${args.zebra}\n        .currentPage=${args['current-page']}\n        .pageSizeOptions=${args['page-size-options']}\n        .selectedRowIds=${args['selected-row-ids']}\n        .editable=${args.editable}\n        @paginationChange=${action('paginationChange')}\n      ></modus-wc-table>",
        "<modus-wc-table\n        .columns=${columns}\n        .data=${data}\n        .density=${args.density}\n        .hover=${args.hover}\n        .sortable=${args.sortable}\n        .paginated=${args.paginated}\n        .showPageSizeSelector=${args['show-page-size-selector']}\n        .customClass=${args['custom-class']}\n        .selectable=${args.selectable}\n        .zebra=${args.zebra}\n        .currentPage=${args['current-page']}\n        .pageSizeOptions=${args['page-size-options']}\n        .selectedRowIds=${args['selected-row-ids']}\n        .editable=${args.editable}\n        @rowSelectionChange=${action('rowSelectionChange')}\n      ></modus-wc-table>"
      ],
      "variants": [],
      "prop_usage": {}
    },
    "tag_name": "modus-wc-table"
  },
  "modus-wc-icon": {
    "props": [
      {
        "name": "customClass",
        "description": "/**\n * A customizable icon component used to render Modus icons.\n *\n * <b>This component requires Modus icons to be installed in the host application. See [Modus Icon Usage](/docs/documentation-modus-icon-usage--docs) for steps.</b>\n\n */\n@Component({\n  tag: 'modus-wc-icon',\n  styleUrl: 'modus-wc-icon.scss',\n  shadow: false,\n})\nexport class ModusWcIcon {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the i element. */",
        "type": ": string"
      },
      {
        "name": "decorative",
        "description": "/**\n * A customizable icon component used to render Modus icons.\n *\n * <b>This component requires Modus icons to be installed in the host application. See [Modus Icon Usage](/docs/documentation-modus-icon-usage--docs) for steps.</b>\n\n */\n@Component({\n  tag: 'modus-wc-icon',\n  styleUrl: 'modus-wc-icon.scss',\n  shadow: false,\n})\nexport class ModusWcIcon {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the i element. */",
        "type": ": boolean"
      },
      {
        "name": "name",
        "description": "/**\n * A customizable icon component used to render Modus icons.\n *\n * <b>This component requires Modus icons to be installed in the host application. See [Modus Icon Usage](/docs/documentation-modus-icon-usage--docs) for steps.</b>\n\n */\n@Component({\n  tag: 'modus-wc-icon',\n  styleUrl: 'modus-wc-icon.scss',\n  shadow: false,\n})\nexport class ModusWcIcon {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the i element. */",
        "type": ": string"
      },
      {
        "name": "size",
        "description": "/**\n * A customizable icon component used to render Modus icons.\n *\n * <b>This component requires Modus icons to be installed in the host application. See [Modus Icon Usage](/docs/documentation-modus-icon-usage--docs) for steps.</b>\n\n */\n@Component({\n  tag: 'modus-wc-icon',\n  styleUrl: 'modus-wc-icon.scss',\n  shadow: false,\n})\nexport class ModusWcIcon {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the i element. */",
        "type": ": DaisySize"
      },
      {
        "name": "variant",
        "description": "/**\n * A customizable icon component used to render Modus icons.\n *\n * <b>This component requires Modus icons to be installed in the host application. See [Modus Icon Usage](/docs/documentation-modus-icon-usage--docs) for steps.</b>\n\n */\n@Component({\n  tag: 'modus-wc-icon',\n  styleUrl: 'modus-wc-icon.scss',\n  shadow: false,\n})\nexport class ModusWcIcon {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the i element. */",
        "type": ": 'outlined' | 'solid'"
      }
    ],
    "events": [],
    "slots": [],
    "default_values": {
      "customClass": "''",
      "decorative": "true",
      "size": "'md'",
      "variant": "== 'outlined') {\n      classList.push('modus-icons-outlined')"
    },
    "documentation": "\n\n--- modus-wc-icon.stories.ts ---\n\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { DaisySize } from '../types';\n\ninterface IconArgs {\n  'custom-class'?: string;\n  decorative: boolean;\n  name: string;\n  size: DaisySize;\n  variant?: 'outlined' | 'solid';\n}\n\nconst meta: Meta<IconArgs> = {\n  title: 'Components/Icon',\n  component: 'modus-wc-icon',\n  args: {\n    'custom-class': '',\n    decorative: false,\n    name: 'alert',\n    size: 'md',\n  },\n  argTypes: {\n    size: {\n      control: { type: 'select' },\n      options: ['xs', 'sm', 'md', 'lg'],\n    },\n    variant: {\n      control: { type: 'select' },\n      options: ['outlined', 'solid'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<IconArgs>;\n\nconst Template: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<modus-wc-icon\n  aria-label=\"Alert icon\"\n  custom-class=\"${ifDefined(args['custom-class'])}\"\n  ?decorative=\"${args.decorative}\"\n  name=\"${args.name}\"\n  size=\"${args.size}\"\n  variant=\"${ifDefined(args.variant)}\"\n>\n</modus-wc-icon>\n    `;\n  },\n};\n\nexport const Default: Story = { ...Template };\n\nexport const CustomColor: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<style>\n  .red-icon {\n    color: red;\n  }\n</style>\n<modus-wc-icon\n  aria-label=\"Red alert icon\"\n  custom-class=\"red-icon\"\n  name=\"alert\"\n  size=\"${args.size}\"\n>\n</modus-wc-icon>\n    `;\n  },\n};\n\nexport const CustomIcons: Story = {\n  args: {\n    'custom-class': 'icon-font tc-icon-cloud-queue',\n    decorative: false,\n    name: '',\n    size: 'lg',\n  },\n  decorators: [\n    (story) => html`\n      <link\n        rel=\"stylesheet\"\n        href=\"https://resources.connect.trimble.com/1.12.0/fonts/icon-font.min.css\"\n      />\n      ${story()}\n    `,\n  ],\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<modus-wc-icon\n  aria-label=\"Cloud Queue icon\"\n  custom-class=\"${ifDefined(args['custom-class'])}\"\n  ?decorative=\"${args.decorative}\"\n  name=\"${args.name}\"\n  size=\"${args.size}\"\n>\n</modus-wc-icon>\n    `;\n  },\n};\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - Requires <b>Modus Icons</b> to be installed in the host application see [Modus Icon Usage](/docs/documentation-modus-icon-usage--docs).\n  - The \\`color\\` property has been removed in favor of using CSS for styling.\n  - The \\`iconClick\\` event has been removed. Use the \\`click\\` event on the host element instead.\n  - In 1.0 the \\`size\\` prop accepted any numeric string (e.g., \\`'16'\\`, \\`'24'\\`, \\`'32'\\`) to set the icon's\n  width and height. 2.0 uses preset sizes: \\`sm\\`, \\`md\\`, \\`lg\\`, and can use CSS for custom sizes.\n\n#### Prop Mapping\n\n| 1.0 Prop | 2.0 Prop | Notes                                                |\n|----------|----------|------------------------------------------------------|\n| color    |          | Not carried over, use CSS instead                    |\n| name     | name     |                                                      |\n| size     | size     | Numeric values changed to \\`sm\\`, \\`md\\`, \\`lg\\`, use CSS for custom sizes |\n\n#### Event Mapping\n\n| 1.0 Event | 2.0 Event | Notes                                                         |\n|-----------|-----------|---------------------------------------------------------------|\n| iconClick |           | Not carried over, use \\`click\\` event on host element instead |\n        `,\n      },\n    },\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  render: () => html`<div></div>`,\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-icon\n  aria-label=\"Alert icon\"\n  custom-class=\"${ifDefined(args['custom-class'])}\"\n  ?decorative=\"${args.decorative}\"\n  name=\"${args.name}\"\n  size=\"${args.size}\"\n  variant=\"${ifDefined(args.variant)}\"\n>\n</modus-wc-icon>",
        "<modus-wc-icon\n  aria-label=\"Red alert icon\"\n  custom-class=\"red-icon\"\n  name=\"alert\"\n  size=\"${args.size}\"\n>\n</modus-wc-icon>",
        "<modus-wc-icon\n  aria-label=\"Cloud Queue icon\"\n  custom-class=\"${ifDefined(args['custom-class'])}\"\n  ?decorative=\"${args.decorative}\"\n  name=\"${args.name}\"\n  size=\"${args.size}\"\n>\n</modus-wc-icon>",
        "\n<modus-wc-icon\n  aria-label=\"Alert icon\"\n  custom-class=\"${ifDefined(args['custom-class'])}\"\n  ?decorative=\"${args.decorative}\"\n  name=\"${args.name}\"\n  size=\"${args.size}\"\n  variant=\"${ifDefined(args.variant)}\"\n>\n</modus-wc-icon>\n    ",
        "\n<style>\n  .red-icon {\n    color: red;\n  }\n</style>\n<modus-wc-icon\n  aria-label=\"Red alert icon\"\n  custom-class=\"red-icon\"\n  name=\"alert\"\n  size=\"${args.size}\"\n>\n</modus-wc-icon>\n    "
      ],
      "variants": [
        "${ifDefined(args.variant)}"
      ],
      "prop_usage": {
        "label": [
          "Alert icon",
          "Red alert icon",
          "Cloud Queue icon"
        ],
        "class": [
          "${ifDefined(args[",
          "red-icon"
        ],
        "decorative": [
          "${args.decorative}"
        ],
        "name": [
          "${args.name}",
          "alert"
        ],
        "size": [
          "${args.size}"
        ],
        "variant": [
          "${ifDefined(args.variant)}"
        ],
        "rel": [
          "stylesheet"
        ],
        "href": [
          "https://resources.connect.trimble.com/1.12.0/fonts/icon-font.min.css"
        ]
      }
    },
    "tag_name": "modus-wc-icon"
  },
  "modus-wc-avatar": {
    "props": [
      {
        "name": "alt",
        "description": "/**\n * A customizable avatar component used to create avatars with different images or user initials.\n * When no image is provided, the component can display initials (up to 3 characters) from the initials prop.\n * The component will extract the first letter of each word in the initials string.\n */\n@Component({\n  tag: 'modus-wc-avatar',\n  styleUrl: 'modus-wc-avatar.scss',\n  shadow: false,\n})\nexport class ModusWcAvatar {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The image alt attribute for accessibility. */",
        "type": ": string"
      },
      {
        "name": "customClass",
        "description": "/**\n * A customizable avatar component used to create avatars with different images or user initials.\n * When no image is provided, the component can display initials (up to 3 characters) from the initials prop.\n * The component will extract the first letter of each word in the initials string.\n */\n@Component({\n  tag: 'modus-wc-avatar',\n  styleUrl: 'modus-wc-avatar.scss',\n  shadow: false,\n})\nexport class ModusWcAvatar {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The image alt attribute for accessibility. */",
        "type": ": string"
      },
      {
        "name": "imgSrc",
        "description": "/**\n * A customizable avatar component used to create avatars with different images or user initials.\n * When no image is provided, the component can display initials (up to 3 characters) from the initials prop.\n * The component will extract the first letter of each word in the initials string.\n */\n@Component({\n  tag: 'modus-wc-avatar',\n  styleUrl: 'modus-wc-avatar.scss',\n  shadow: false,\n})\nexport class ModusWcAvatar {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The image alt attribute for accessibility. */",
        "type": "string"
      },
      {
        "name": "initials",
        "description": "/**\n * A customizable avatar component used to create avatars with different images or user initials.\n * When no image is provided, the component can display initials (up to 3 characters) from the initials prop.\n * The component will extract the first letter of each word in the initials string.\n */\n@Component({\n  tag: 'modus-wc-avatar',\n  styleUrl: 'modus-wc-avatar.scss',\n  shadow: false,\n})\nexport class ModusWcAvatar {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The image alt attribute for accessibility. */",
        "type": ": string"
      },
      {
        "name": "shape",
        "description": "/**\n * A customizable avatar component used to create avatars with different images or user initials.\n * When no image is provided, the component can display initials (up to 3 characters) from the initials prop.\n * The component will extract the first letter of each word in the initials string.\n */\n@Component({\n  tag: 'modus-wc-avatar',\n  styleUrl: 'modus-wc-avatar.scss',\n  shadow: false,\n})\nexport class ModusWcAvatar {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The image alt attribute for accessibility. */",
        "type": ": 'circle' | 'square'"
      },
      {
        "name": "size",
        "description": "/**\n * A customizable avatar component used to create avatars with different images or user initials.\n * When no image is provided, the component can display initials (up to 3 characters) from the initials prop.\n * The component will extract the first letter of each word in the initials string.\n */\n@Component({\n  tag: 'modus-wc-avatar',\n  styleUrl: 'modus-wc-avatar.scss',\n  shadow: false,\n})\nexport class ModusWcAvatar {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The image alt attribute for accessibility. */",
        "type": ": DaisySize"
      }
    ],
    "events": [],
    "slots": [],
    "default_values": {
      "alt": "{altText} />\n            ) : this.initials ? (\n              <span class=\"initials\" aria-label={this.alt || this.initials}>\n                {this.getUserInitials()}\n              </span>\n            ) : (\n              <modus-wc-icon\n                aria-label={altText}\n                name=\"person\"\n                size={this.size}\n                variant=\"solid\"\n              ></modus-wc-icon>\n            )}\n          </div>\n        </div>\n      </Host>\n    )",
      "customClass": "''",
      "imgSrc": "''",
      "initials": "''",
      "shape": "'circle'",
      "size": "'md'"
    },
    "documentation": "\n\n--- modus-wc-avatar.stories.ts ---\n\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { DaisySize } from '../types';\n\ninterface AvatarArgs {\n  alt: string;\n  'custom-class'?: string;\n  'img-src': string;\n  initials: string;\n  shape: string;\n  size: DaisySize;\n}\n\nconst meta: Meta<AvatarArgs> = {\n  title: 'Components/Avatar',\n  component: 'modus-wc-avatar',\n  args: {\n    alt: 'Example avatar',\n    'img-src':\n      'https://i.pinimg.com/474x/73/54/79/7354794bf3873c3ef2666f778da4bcac.jpg',\n    shape: 'circle',\n    initials: '',\n    size: 'md',\n  },\n  argTypes: {\n    shape: {\n      control: { type: 'select' },\n      options: ['circle', 'square'],\n    },\n    size: {\n      control: { type: 'select' },\n      options: ['xs', 'sm', 'md', 'lg'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<AvatarArgs>;\n\nconst Template: Story = {\n  render: (args) => {\n    return html`\n      <modus-wc-avatar\n        alt=\"${args.alt}\"\n        custom-class=\"${ifDefined(args['custom-class'])}\"\n        img-src=\"${args['img-src']}\"\n        initials=\"${args.initials}\"\n        shape=\"${args.shape}\"\n        size=\"${args.size}\"\n      ></modus-wc-avatar>\n    `;\n  },\n};\n\nexport const Default: Story = { ...Template };\n",
    "storybook": {
      "examples": [
        "<modus-wc-avatar\n        alt=\"${args.alt}\"\n        custom-class=\"${ifDefined(args['custom-class'])}\"\n        img-src=\"${args['img-src']}\"\n        initials=\"${args.initials}\"\n        shape=\"${args.shape}\"\n        size=\"${args.size}\"\n      ></modus-wc-avatar>",
        "\n      <modus-wc-avatar\n        alt=\"${args.alt}\"\n        custom-class=\"${ifDefined(args['custom-class'])}\"\n        img-src=\"${args['img-src']}\"\n        initials=\"${args.initials}\"\n        shape=\"${args.shape}\"\n        size=\"${args.size}\"\n      ></modus-wc-avatar>\n    "
      ],
      "variants": [],
      "prop_usage": {
        "alt": [
          "${args.alt}"
        ],
        "class": [
          "${ifDefined(args["
        ],
        "src": [
          "${args["
        ],
        "initials": [
          "${args.initials}"
        ],
        "shape": [
          "${args.shape}"
        ],
        "size": [
          "${args.size}"
        ]
      }
    },
    "tag_name": "modus-wc-avatar"
  },
  "modus-wc-switch": {
    "props": [
      {
        "name": "customClass",
        "description": "/**\n * A customizable switch component\n */\n@Component({\n  tag: 'modus-wc-switch',\n  styleUrl: 'modus-wc-switch.scss',\n  shadow: false,\n})\nexport class ModusWcSwitch {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */",
        "type": ": string"
      },
      {
        "name": "disabled",
        "description": "/**\n * A customizable switch component\n */\n@Component({\n  tag: 'modus-wc-switch',\n  styleUrl: 'modus-wc-switch.scss',\n  shadow: false,\n})\nexport class ModusWcSwitch {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */",
        "type": ": boolean"
      },
      {
        "name": "indeterminate",
        "description": "/**\n * A customizable switch component\n */\n@Component({\n  tag: 'modus-wc-switch',\n  styleUrl: 'modus-wc-switch.scss',\n  shadow: false,\n})\nexport class ModusWcSwitch {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */",
        "type": "boolean"
      },
      {
        "name": "inputId",
        "description": "/**\n * A customizable switch component\n */\n@Component({\n  tag: 'modus-wc-switch',\n  styleUrl: 'modus-wc-switch.scss',\n  shadow: false,\n})\nexport class ModusWcSwitch {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */",
        "type": ": string"
      },
      {
        "name": "inputTabIndex",
        "description": "/**\n * A customizable switch component\n */\n@Component({\n  tag: 'modus-wc-switch',\n  styleUrl: 'modus-wc-switch.scss',\n  shadow: false,\n})\nexport class ModusWcSwitch {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */",
        "type": ": number"
      },
      {
        "name": "label",
        "description": "/**\n * A customizable switch component\n */\n@Component({\n  tag: 'modus-wc-switch',\n  styleUrl: 'modus-wc-switch.scss',\n  shadow: false,\n})\nexport class ModusWcSwitch {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */",
        "type": ": string"
      },
      {
        "name": "name",
        "description": "/**\n * A customizable switch component\n */\n@Component({\n  tag: 'modus-wc-switch',\n  styleUrl: 'modus-wc-switch.scss',\n  shadow: false,\n})\nexport class ModusWcSwitch {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */",
        "type": ": string"
      },
      {
        "name": "required",
        "description": "/**\n * A customizable switch component\n */\n@Component({\n  tag: 'modus-wc-switch',\n  styleUrl: 'modus-wc-switch.scss',\n  shadow: false,\n})\nexport class ModusWcSwitch {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */",
        "type": ": boolean"
      },
      {
        "name": "size",
        "description": "/**\n * A customizable switch component\n */\n@Component({\n  tag: 'modus-wc-switch',\n  styleUrl: 'modus-wc-switch.scss',\n  shadow: false,\n})\nexport class ModusWcSwitch {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */",
        "type": ": ModusSize"
      },
      {
        "name": "value",
        "description": "/**\n * A customizable switch component\n */\n@Component({\n  tag: 'modus-wc-switch',\n  styleUrl: 'modus-wc-switch.scss',\n  shadow: false,\n})\nexport class ModusWcSwitch {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */",
        "type": "boolean"
      }
    ],
    "events": [
      {
        "name": "inputBlur",
        "description": "/**\n * A customizable switch component\n */\n@Component({\n  tag: 'modus-wc-switch',\n  styleUrl: 'modus-wc-switch.scss',\n  shadow: false,\n})\nexport class ModusWcSwitch {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */\n  @Prop() customClass?: string = '';\n\n  /** The disabled state of the switch. */\n  @Prop() disabled?: boolean = false;\n\n  /** The indeterminate state of the switch. */\n  @Prop({ reflect: true, mutable: true }) indeterminate: boolean = false;\n\n  /** The ID of the input element. */\n  @Prop() inputId?: string;\n\n  /** The tabindex of the input. */\n  @Prop() inputTabIndex?: number;\n\n  /** The text to display within the label. */\n  @Prop() label?: string;\n\n  /** Name of the form control. Submitted with the form as part of a name/value pair. */\n  @Prop() name?: string = '';\n\n  /** A value is required for the form to be submittable. */\n  @Prop() required?: boolean = false;\n\n  /** The size of the input. */\n  @Prop() size?: ModusSize = 'md';\n\n  /** The value of the switch. */\n  @Prop({ mutable: true, reflect: true }) value: boolean = false;\n\n  /** Emitted when the input loses focus. */"
      },
      {
        "name": "inputChange",
        "description": "/**\n * A customizable switch component\n */\n@Component({\n  tag: 'modus-wc-switch',\n  styleUrl: 'modus-wc-switch.scss',\n  shadow: false,\n})\nexport class ModusWcSwitch {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */\n  @Prop() customClass?: string = '';\n\n  /** The disabled state of the switch. */\n  @Prop() disabled?: boolean = false;\n\n  /** The indeterminate state of the switch. */\n  @Prop({ reflect: true, mutable: true }) indeterminate: boolean = false;\n\n  /** The ID of the input element. */\n  @Prop() inputId?: string;\n\n  /** The tabindex of the input. */\n  @Prop() inputTabIndex?: number;\n\n  /** The text to display within the label. */\n  @Prop() label?: string;\n\n  /** Name of the form control. Submitted with the form as part of a name/value pair. */\n  @Prop() name?: string = '';\n\n  /** A value is required for the form to be submittable. */\n  @Prop() required?: boolean = false;\n\n  /** The size of the input. */\n  @Prop() size?: ModusSize = 'md';\n\n  /** The value of the switch. */\n  @Prop({ mutable: true, reflect: true }) value: boolean = false;\n\n  /** Emitted when the input loses focus. */"
      },
      {
        "name": "inputFocus",
        "description": "/**\n * A customizable switch component\n */\n@Component({\n  tag: 'modus-wc-switch',\n  styleUrl: 'modus-wc-switch.scss',\n  shadow: false,\n})\nexport class ModusWcSwitch {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */\n  @Prop() customClass?: string = '';\n\n  /** The disabled state of the switch. */\n  @Prop() disabled?: boolean = false;\n\n  /** The indeterminate state of the switch. */\n  @Prop({ reflect: true, mutable: true }) indeterminate: boolean = false;\n\n  /** The ID of the input element. */\n  @Prop() inputId?: string;\n\n  /** The tabindex of the input. */\n  @Prop() inputTabIndex?: number;\n\n  /** The text to display within the label. */\n  @Prop() label?: string;\n\n  /** Name of the form control. Submitted with the form as part of a name/value pair. */\n  @Prop() name?: string = '';\n\n  /** A value is required for the form to be submittable. */\n  @Prop() required?: boolean = false;\n\n  /** The size of the input. */\n  @Prop() size?: ModusSize = 'md';\n\n  /** The value of the switch. */\n  @Prop({ mutable: true, reflect: true }) value: boolean = false;\n\n  /** Emitted when the input loses focus. */"
      }
    ],
    "slots": [],
    "default_values": {
      "customClass": "''",
      "disabled": "false",
      "indeterminate": "false",
      "name": "''",
      "required": "false",
      "size": "'md'",
      "value": "false"
    },
    "documentation": "\n\n--- modus-wc-switch.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { ModusSize } from '../types';\n\ninterface SwitchArgs {\n  'custom-class'?: string;\n  disabled?: boolean;\n  indeterminate?: boolean;\n  'input-id'?: string;\n  'input-tab-index'?: number;\n  label?: string;\n  name?: string;\n  required?: boolean;\n  size?: ModusSize;\n  value: boolean;\n}\n\nconst meta: Meta<SwitchArgs> = {\n  title: 'Components/Forms/Switch',\n  component: 'modus-wc-switch',\n  args: {\n    'custom-class': '',\n    disabled: false,\n    indeterminate: false,\n    label: 'Label',\n    name: '',\n    required: false,\n    size: 'md',\n    value: true,\n  },\n  argTypes: {\n    size: {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg'],\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['inputBlur', 'inputChange', 'inputFocus'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<SwitchArgs>;\n\nexport const Default: Story = {\n  render: (args) => {\n    return html`\n      <modus-wc-switch\n        aria-label=\"Toggle\"\n        custom-class=${ifDefined(args['custom-class'])}\n        ?disabled=${args.disabled}\n        .indeterminate=${args.indeterminate}\n        input-id=${ifDefined(args['input-id'])}\n        input-tab-index=${ifDefined(args['input-tab-index'])}\n        label=${ifDefined(args.label)}\n        name=${ifDefined(args.name)}\n        ?required=${args.required}\n        size=${ifDefined(args.size)}\n        .value=${args.value}\n      ></modus-wc-switch>\n    `;\n  },\n};\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - In 1.0 input state was maintained by the component. 2.0 components encourage users to follow a controlled\n  input model. See the Form Inputs documentation for additional info and examples.\n  - \\`checked\\` prop has been renamed to \\`value\\` to maintain consistency across form components.\n  - Size values have changed from verbose names (\\`small\\`, \\`medium\\`) to abbreviations (\\`sm\\`, \\`md\\`, \\`lg\\`).\n\n#### Prop Mapping\n\n| 1.0 Prop         | 2.0 Prop            | Notes                                                       |\n|------------------|---------------------|-------------------------------------------------------------|\n| aria-label       | aria-label          |                                                             |\n| checked          | value               |                                                             |\n| disabled         | disabled            |                                                             |\n| label            | label               |                                                             |\n| size             | size                | \\`small\\` \u2192 \\`sm\\`, \\`medium\\` \u2192 \\`md\\`                     |\n\n#### Event Mapping\n\n| 1.0 Event      | 2.0 Event      | Notes                                                 |\n|----------------|----------------|-------------------------------------------------------|\n| switchClick    | inputChange    |                                                       |\n        `,\n      },\n    },\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  render: () => html`<div></div>`,\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-switch\n        aria-label=\"Toggle\"\n        custom-class=${ifDefined(args['custom-class'])}\n        ?disabled=${args.disabled}\n        .indeterminate=${args.indeterminate}\n        input-id=${ifDefined(args['input-id'])}\n        input-tab-index=${ifDefined(args['input-tab-index'])}\n        label=${ifDefined(args.label)}\n        name=${ifDefined(args.name)}\n        ?required=${args.required}\n        size=${ifDefined(args.size)}\n        .value=${args.value}\n      ></modus-wc-switch>",
        "\n      <modus-wc-switch\n        aria-label=\"Toggle\"\n        custom-class=${ifDefined(args['custom-class'])}\n        ?disabled=${args.disabled}\n        .indeterminate=${args.indeterminate}\n        input-id=${ifDefined(args['input-id'])}\n        input-tab-index=${ifDefined(args['input-tab-index'])}\n        label=${ifDefined(args.label)}\n        name=${ifDefined(args.name)}\n        ?required=${args.required}\n        size=${ifDefined(args.size)}\n        .value=${args.value}\n      ></modus-wc-switch>\n    "
      ],
      "variants": [],
      "prop_usage": {
        "label": [
          "Toggle"
        ]
      }
    },
    "tag_name": "modus-wc-switch"
  },
  "modus-wc-select": {
    "props": [
      {
        "name": "bordered",
        "description": "/** Whether the option is disabled and cannot be selected. */\n  disabled?: boolean;\n  /** The text to render in the option. */\n  label: string;\n  /** The value of the option. */\n  value: string;\n}\n\n/**\n * A customizable select component used to pick a value from a list of options\n */\n@Component({\n  tag: 'modus-wc-select',\n  styleUrl: 'modus-wc-select.scss',\n  shadow: false,\n})\nexport class ModusWcSelect {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */",
        "type": ": boolean"
      },
      {
        "name": "customClass",
        "description": "/** Whether the option is disabled and cannot be selected. */\n  disabled?: boolean;\n  /** The text to render in the option. */\n  label: string;\n  /** The value of the option. */\n  value: string;\n}\n\n/**\n * A customizable select component used to pick a value from a list of options\n */\n@Component({\n  tag: 'modus-wc-select',\n  styleUrl: 'modus-wc-select.scss',\n  shadow: false,\n})\nexport class ModusWcSelect {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */",
        "type": ": string"
      },
      {
        "name": "disabled",
        "description": "/** Whether the option is disabled and cannot be selected. */\n  disabled?: boolean;\n  /** The text to render in the option. */\n  label: string;\n  /** The value of the option. */\n  value: string;\n}\n\n/**\n * A customizable select component used to pick a value from a list of options\n */\n@Component({\n  tag: 'modus-wc-select',\n  styleUrl: 'modus-wc-select.scss',\n  shadow: false,\n})\nexport class ModusWcSelect {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */",
        "type": ": boolean"
      },
      {
        "name": "feedback",
        "description": "/** Whether the option is disabled and cannot be selected. */\n  disabled?: boolean;\n  /** The text to render in the option. */\n  label: string;\n  /** The value of the option. */\n  value: string;\n}\n\n/**\n * A customizable select component used to pick a value from a list of options\n */\n@Component({\n  tag: 'modus-wc-select',\n  styleUrl: 'modus-wc-select.scss',\n  shadow: false,\n})\nexport class ModusWcSelect {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */",
        "type": ": IInputFeedbackProp"
      },
      {
        "name": "inputId",
        "description": "/** Whether the option is disabled and cannot be selected. */\n  disabled?: boolean;\n  /** The text to render in the option. */\n  label: string;\n  /** The value of the option. */\n  value: string;\n}\n\n/**\n * A customizable select component used to pick a value from a list of options\n */\n@Component({\n  tag: 'modus-wc-select',\n  styleUrl: 'modus-wc-select.scss',\n  shadow: false,\n})\nexport class ModusWcSelect {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */",
        "type": ": string"
      },
      {
        "name": "inputTabIndex",
        "description": "/** Whether the option is disabled and cannot be selected. */\n  disabled?: boolean;\n  /** The text to render in the option. */\n  label: string;\n  /** The value of the option. */\n  value: string;\n}\n\n/**\n * A customizable select component used to pick a value from a list of options\n */\n@Component({\n  tag: 'modus-wc-select',\n  styleUrl: 'modus-wc-select.scss',\n  shadow: false,\n})\nexport class ModusWcSelect {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */",
        "type": ": number"
      },
      {
        "name": "label",
        "description": "/** Whether the option is disabled and cannot be selected. */\n  disabled?: boolean;\n  /** The text to render in the option. */\n  label: string;\n  /** The value of the option. */\n  value: string;\n}\n\n/**\n * A customizable select component used to pick a value from a list of options\n */\n@Component({\n  tag: 'modus-wc-select',\n  styleUrl: 'modus-wc-select.scss',\n  shadow: false,\n})\nexport class ModusWcSelect {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */",
        "type": "string"
      },
      {
        "name": "name",
        "description": "/** Whether the option is disabled and cannot be selected. */\n  disabled?: boolean;\n  /** The text to render in the option. */\n  label: string;\n  /** The value of the option. */\n  value: string;\n}\n\n/**\n * A customizable select component used to pick a value from a list of options\n */\n@Component({\n  tag: 'modus-wc-select',\n  styleUrl: 'modus-wc-select.scss',\n  shadow: false,\n})\nexport class ModusWcSelect {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */",
        "type": ": string"
      },
      {
        "name": "options",
        "description": "/** Whether the option is disabled and cannot be selected. */\n  disabled?: boolean;\n  /** The text to render in the option. */\n  label: string;\n  /** The value of the option. */\n  value: string;\n}\n\n/**\n * A customizable select component used to pick a value from a list of options\n */\n@Component({\n  tag: 'modus-wc-select',\n  styleUrl: 'modus-wc-select.scss',\n  shadow: false,\n})\nexport class ModusWcSelect {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */",
        "type": "ISelectOption[]"
      },
      {
        "name": "required",
        "description": "/** Whether the option is disabled and cannot be selected. */\n  disabled?: boolean;\n  /** The text to render in the option. */\n  label: string;\n  /** The value of the option. */\n  value: string;\n}\n\n/**\n * A customizable select component used to pick a value from a list of options\n */\n@Component({\n  tag: 'modus-wc-select',\n  styleUrl: 'modus-wc-select.scss',\n  shadow: false,\n})\nexport class ModusWcSelect {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */",
        "type": ": boolean"
      },
      {
        "name": "size",
        "description": "/** Whether the option is disabled and cannot be selected. */\n  disabled?: boolean;\n  /** The text to render in the option. */\n  label: string;\n  /** The value of the option. */\n  value: string;\n}\n\n/**\n * A customizable select component used to pick a value from a list of options\n */\n@Component({\n  tag: 'modus-wc-select',\n  styleUrl: 'modus-wc-select.scss',\n  shadow: false,\n})\nexport class ModusWcSelect {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */",
        "type": ": ModusSize"
      },
      {
        "name": "value",
        "description": "/** Whether the option is disabled and cannot be selected. */\n  disabled?: boolean;\n  /** The text to render in the option. */\n  label: string;\n  /** The value of the option. */\n  value: string;\n}\n\n/**\n * A customizable select component used to pick a value from a list of options\n */\n@Component({\n  tag: 'modus-wc-select',\n  styleUrl: 'modus-wc-select.scss',\n  shadow: false,\n})\nexport class ModusWcSelect {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */",
        "type": "string"
      }
    ],
    "events": [
      {
        "name": "inputBlur",
        "description": "/** Whether the option is disabled and cannot be selected. */\n  disabled?: boolean;\n  /** The text to render in the option. */\n  label: string;\n  /** The value of the option. */\n  value: string;\n}\n\n/**\n * A customizable select component used to pick a value from a list of options\n */\n@Component({\n  tag: 'modus-wc-select',\n  styleUrl: 'modus-wc-select.scss',\n  shadow: false,\n})\nexport class ModusWcSelect {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */\n  @Prop() bordered?: boolean = true;\n\n  /** Custom CSS class to apply to the inner div. */\n  @Prop() customClass?: string = '';\n\n  /** Whether the form control is disabled. */\n  @Prop() disabled?: boolean = false;\n\n  /** Feedback to render below the input. */\n  @Prop() feedback?: IInputFeedbackProp;\n\n  /** The ID of the input element. */\n  @Prop() inputId?: string;\n\n  /** Determine the control's relative ordering for sequential focus navigation (typically with the Tab key). */\n  @Prop() inputTabIndex?: number;\n\n  /** The text to display within the label. */\n  @Prop() label?: string;\n\n  /** Name of the form control. Submitted with the form as part of a name/value pair. */\n  @Prop() name?: string;\n\n  /** The options to display in the select dropdown. */\n  @Prop({ mutable: true, reflect: true }) options: ISelectOption[] = [];\n\n  /** A value is required for the form to be submittable. */\n  @Prop() required?: boolean = false;\n\n  /** The size of the input. */\n  @Prop() size?: ModusSize = 'md';\n\n  /** The value of the control. */\n  @Prop({ mutable: true, reflect: true }) value: string = '';\n\n  /** Event emitted when the input loses focus. */"
      },
      {
        "name": "inputChange",
        "description": "/** Whether the option is disabled and cannot be selected. */\n  disabled?: boolean;\n  /** The text to render in the option. */\n  label: string;\n  /** The value of the option. */\n  value: string;\n}\n\n/**\n * A customizable select component used to pick a value from a list of options\n */\n@Component({\n  tag: 'modus-wc-select',\n  styleUrl: 'modus-wc-select.scss',\n  shadow: false,\n})\nexport class ModusWcSelect {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */\n  @Prop() bordered?: boolean = true;\n\n  /** Custom CSS class to apply to the inner div. */\n  @Prop() customClass?: string = '';\n\n  /** Whether the form control is disabled. */\n  @Prop() disabled?: boolean = false;\n\n  /** Feedback to render below the input. */\n  @Prop() feedback?: IInputFeedbackProp;\n\n  /** The ID of the input element. */\n  @Prop() inputId?: string;\n\n  /** Determine the control's relative ordering for sequential focus navigation (typically with the Tab key). */\n  @Prop() inputTabIndex?: number;\n\n  /** The text to display within the label. */\n  @Prop() label?: string;\n\n  /** Name of the form control. Submitted with the form as part of a name/value pair. */\n  @Prop() name?: string;\n\n  /** The options to display in the select dropdown. */\n  @Prop({ mutable: true, reflect: true }) options: ISelectOption[] = [];\n\n  /** A value is required for the form to be submittable. */\n  @Prop() required?: boolean = false;\n\n  /** The size of the input. */\n  @Prop() size?: ModusSize = 'md';\n\n  /** The value of the control. */\n  @Prop({ mutable: true, reflect: true }) value: string = '';\n\n  /** Event emitted when the input loses focus. */"
      },
      {
        "name": "inputFocus",
        "description": "/** Whether the option is disabled and cannot be selected. */\n  disabled?: boolean;\n  /** The text to render in the option. */\n  label: string;\n  /** The value of the option. */\n  value: string;\n}\n\n/**\n * A customizable select component used to pick a value from a list of options\n */\n@Component({\n  tag: 'modus-wc-select',\n  styleUrl: 'modus-wc-select.scss',\n  shadow: false,\n})\nexport class ModusWcSelect {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */\n  @Prop() bordered?: boolean = true;\n\n  /** Custom CSS class to apply to the inner div. */\n  @Prop() customClass?: string = '';\n\n  /** Whether the form control is disabled. */\n  @Prop() disabled?: boolean = false;\n\n  /** Feedback to render below the input. */\n  @Prop() feedback?: IInputFeedbackProp;\n\n  /** The ID of the input element. */\n  @Prop() inputId?: string;\n\n  /** Determine the control's relative ordering for sequential focus navigation (typically with the Tab key). */\n  @Prop() inputTabIndex?: number;\n\n  /** The text to display within the label. */\n  @Prop() label?: string;\n\n  /** Name of the form control. Submitted with the form as part of a name/value pair. */\n  @Prop() name?: string;\n\n  /** The options to display in the select dropdown. */\n  @Prop({ mutable: true, reflect: true }) options: ISelectOption[] = [];\n\n  /** A value is required for the form to be submittable. */\n  @Prop() required?: boolean = false;\n\n  /** The size of the input. */\n  @Prop() size?: ModusSize = 'md';\n\n  /** The value of the control. */\n  @Prop({ mutable: true, reflect: true }) value: string = '';\n\n  /** Event emitted when the input loses focus. */"
      }
    ],
    "slots": [],
    "default_values": {
      "bordered": "true",
      "customClass": "''",
      "disabled": "false",
      "name": "{this.name}\n          onBlur={this.handleBlur}\n          onFocus={this.handleFocus}\n          onInput={this.handleInput}\n          required={this.required}\n          tabindex={this.inputTabIndex}\n          {...this.inheritedAttributes}\n        >\n          {this.options.map((option) => (\n            <option\n              disabled={option.disabled}\n              selected={option.value === this.value}\n              value={option.value}\n            >\n              {option.label}\n            </option>\n          ))}\n        </select>\n        {this.feedback && (\n          <modus-wc-input-feedback\n            level={this.feedback.level}\n            message={this.feedback.message}\n            size={this.size}\n          />\n        )}\n      </Host>\n    )",
      "options": "[]",
      "required": "false",
      "size": "'md'",
      "value": "''"
    },
    "documentation": "\n\n--- modus-wc-select.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { ISelectOption } from './modus-wc-select';\nimport { IInputFeedbackProp, ModusSize } from '../types';\n\nconst options: ISelectOption[] = [\n  { label: 'Option 1', value: '1' },\n  { label: 'Option 2', value: '2' },\n  { label: 'Option 3', value: '3' },\n];\n\ninterface SelectArgs {\n  bordered?: boolean;\n  'custom-class'?: string;\n  disabled?: boolean;\n  feedback?: IInputFeedbackProp;\n  'input-aria-invalid'?: 'true' | 'false';\n  'input-id'?: string;\n  'input-tab-index'?: number;\n  label?: string;\n  name?: string;\n  options: ISelectOption[];\n  required?: boolean;\n  size?: ModusSize;\n  value: string;\n}\n\nconst meta: Meta<SelectArgs> = {\n  title: 'Components/Forms/Select',\n  component: 'modus-wc-select',\n  args: {\n    bordered: true,\n    disabled: false,\n    label: 'Label',\n    options,\n    size: 'md',\n    value: '',\n  },\n  argTypes: {\n    feedback: {\n      description: 'Feedback prop for input components',\n      table: {\n        type: {\n          detail: `\n            Interface: IInputFeedbackProp\n            Properties:\n            - level ('error' | 'info' | 'success' | 'warning'): The feedback level\n            - message (string, optional): The feedback message\n          `,\n        },\n      },\n    },\n    'input-aria-invalid': {\n      control: { type: 'select' },\n      options: ['true', 'false'],\n    },\n    options: {\n      description: 'Array of option objects for the select dropdown',\n      table: {\n        type: {\n          detail: `\n            Interface: ISelectOption\n            Properties:\n            - disabled (boolean, optional): Whether the option is disabled and cannot be selected\n            - label (string): Display text for the option\n            - value (string): The value of the option\n          `,\n        },\n      },\n    },\n    size: {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg'],\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['inputBlur', 'inputChange', 'inputFocus'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<SelectArgs>;\n\nexport const Default: Story = {\n  render: (args) => html`\n    <modus-wc-select\n      aria-label=\"Select input\"\n      ?bordered=${args.bordered}\n      custom-class=${ifDefined(args['custom-class'])}\n      ?disabled=${args.disabled}\n      .feedback=${args.feedback}\n      input-aria-invalid=${ifDefined(args['input-aria-invalid'])}\n      input-id=${ifDefined(args['input-id'])}\n      input-tab-index=${ifDefined(args['input-tab-index'])}\n      label=${ifDefined(args.label)}\n      name=${ifDefined(args.name)}\n      .options=${args.options}\n      ?required=${args.required}\n      size=${ifDefined(args.size)}\n      .value=${args.value}\n    ></modus-wc-select>\n  `,\n};\n\nconst errorFeedback: IInputFeedbackProp = {\n  level: 'error',\n  message: 'Value is required.',\n};\n\nexport const WithErrorFeedback: Story = {\n  render: (args) => html`\n    <modus-wc-select\n      aria-label=\"Select input\"\n      .feedback=${errorFeedback}\n      label=${ifDefined(args.label)}\n      .options=${[]}\n      ?required=${true}\n      .value=${args.value}\n    ></modus-wc-select>\n  `,\n};\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - In 1.0 input state was maintained by the component. 2.0 components encourage users to follow a controlled\n  input model. See the Form Inputs [documentation](/docs/documentation-form-inputs--docs) for\n  additional info and examples.\n  - The options format has changed to use a standardized \\`ISelectOption\\` object array.\n  - Size values have changed from verbose names (\\`medium\\`, \\`large\\`) to abbreviations (\\`sm\\`, \\`md\\`, \\`lg\\`).\n\n#### Prop Mapping\n\n| 1.0 Prop              | 2.0 Prop            | Notes                                                |\n|-----------------------|---------------------|------------------------------------------------------|\n| aria-label            | aria-label          |                                                      |\n| disabled              | disabled            |                                                      |\n| error-text            | feedback.message    | Use \\`feedback\\` level                               |\n| helper-text           |                     | Not carried over                                     |\n| label                 | label               |                                                      |\n| options               | options             | Format changed to require array of \\`ISelectOption\\` objects |\n| options-display-prop  |                     | Not carried over                                     |\n| placeholder           |                     | Not carried over                                     |\n| required              | required            |                                                      |\n| size                  | size                | \\`medium\\` \u2192 \\`md\\`, \\`large\\` \u2192 \\`lg\\`              |\n| valid-text            | feedback.message    | Use \\`feedback\\` level                               |\n| value                 | value               |                                                      |\n\n#### Event Mapping\n\n| 1.0 Event    | 2.0 Event   | Notes            |\n|--------------|-------------|------------------|\n| valueChange  | inputChange |                  |\n| inputBlur    | inputBlur   |                  |\n        `,\n      },\n    },\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  render: () => html`<div></div>`,\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-select\n      aria-label=\"Select input\"\n      ?bordered=${args.bordered}\n      custom-class=${ifDefined(args['custom-class'])}\n      ?disabled=${args.disabled}\n      .feedback=${args.feedback}\n      input-aria-invalid=${ifDefined(args['input-aria-invalid'])}\n      input-id=${ifDefined(args['input-id'])}\n      input-tab-index=${ifDefined(args['input-tab-index'])}\n      label=${ifDefined(args.label)}\n      name=${ifDefined(args.name)}\n      .options=${args.options}\n      ?required=${args.required}\n      size=${ifDefined(args.size)}\n      .value=${args.value}\n    ></modus-wc-select>",
        "<modus-wc-select\n      aria-label=\"Select input\"\n      .feedback=${errorFeedback}\n      label=${ifDefined(args.label)}\n      .options=${[]}\n      ?required=${true}\n      .value=${args.value}\n    ></modus-wc-select>",
        "\n    <modus-wc-select\n      aria-label=\"Select input\"\n      ?bordered=${args.bordered}\n      custom-class=${ifDefined(args['custom-class'])}\n      ?disabled=${args.disabled}\n      .feedback=${args.feedback}\n      input-aria-invalid=${ifDefined(args['input-aria-invalid'])}\n      input-id=${ifDefined(args['input-id'])}\n      input-tab-index=${ifDefined(args['input-tab-index'])}\n      label=${ifDefined(args.label)}\n      name=${ifDefined(args.name)}\n      .options=${args.options}\n      ?required=${args.required}\n      size=${ifDefined(args.size)}\n      .value=${args.value}\n    ></modus-wc-select>\n  ",
        "\n    <modus-wc-select\n      aria-label=\"Select input\"\n      .feedback=${errorFeedback}\n      label=${ifDefined(args.label)}\n      .options=${[]}\n      ?required=${true}\n      .value=${args.value}\n    ></modus-wc-select>\n  "
      ],
      "variants": [],
      "prop_usage": {
        "label": [
          "Select input"
        ]
      }
    },
    "tag_name": "modus-wc-select"
  },
  "modus-wc-collapse": {
    "props": [
      {
        "name": "bordered",
        "description": "/** The description to render in the collapse header. */\n  description?: string;\n  /** The Modus icon name to render in the collapse header. */\n  icon?: string;\n  /** The icon's aria-label. */\n  iconAriaLabel?: string;\n  /** The size of the collapse header. */\n  size?: DaisySize;\n  /** The title to render in the collapse header. */\n  title: string;\n}\n\n/**\n * A customizable collapse component used for showing and hiding content.\n *\n * The component supports a 'header' and 'content' `<slot>` for injecting custom HTML.\n * Do not set\n */\n@Component({\n  tag: 'modus-wc-collapse',\n  styleUrl: 'modus-wc-collapse.scss',\n  shadow: false,\n})\nexport class ModusWcCollapse {\n  private inheritedAttributes: Attributes = {};\n  private detailsRef?: HTMLDetailsElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the component should have a border. */",
        "type": ": boolean"
      },
      {
        "name": "customClass",
        "description": "/** The description to render in the collapse header. */\n  description?: string;\n  /** The Modus icon name to render in the collapse header. */\n  icon?: string;\n  /** The icon's aria-label. */\n  iconAriaLabel?: string;\n  /** The size of the collapse header. */\n  size?: DaisySize;\n  /** The title to render in the collapse header. */\n  title: string;\n}\n\n/**\n * A customizable collapse component used for showing and hiding content.\n *\n * The component supports a 'header' and 'content' `<slot>` for injecting custom HTML.\n * Do not set\n */\n@Component({\n  tag: 'modus-wc-collapse',\n  styleUrl: 'modus-wc-collapse.scss',\n  shadow: false,\n})\nexport class ModusWcCollapse {\n  private inheritedAttributes: Attributes = {};\n  private detailsRef?: HTMLDetailsElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the component should have a border. */",
        "type": ": string"
      },
      {
        "name": "expanded",
        "description": "/** The description to render in the collapse header. */\n  description?: string;\n  /** The Modus icon name to render in the collapse header. */\n  icon?: string;\n  /** The icon's aria-label. */\n  iconAriaLabel?: string;\n  /** The size of the collapse header. */\n  size?: DaisySize;\n  /** The title to render in the collapse header. */\n  title: string;\n}\n\n/**\n * A customizable collapse component used for showing and hiding content.\n *\n * The component supports a 'header' and 'content' `<slot>` for injecting custom HTML.\n * Do not set\n */\n@Component({\n  tag: 'modus-wc-collapse',\n  styleUrl: 'modus-wc-collapse.scss',\n  shadow: false,\n})\nexport class ModusWcCollapse {\n  private inheritedAttributes: Attributes = {};\n  private detailsRef?: HTMLDetailsElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the component should have a border. */",
        "type": ": boolean"
      },
      {
        "name": "collapseId",
        "description": "/** The description to render in the collapse header. */\n  description?: string;\n  /** The Modus icon name to render in the collapse header. */\n  icon?: string;\n  /** The icon's aria-label. */\n  iconAriaLabel?: string;\n  /** The size of the collapse header. */\n  size?: DaisySize;\n  /** The title to render in the collapse header. */\n  title: string;\n}\n\n/**\n * A customizable collapse component used for showing and hiding content.\n *\n * The component supports a 'header' and 'content' `<slot>` for injecting custom HTML.\n * Do not set\n */\n@Component({\n  tag: 'modus-wc-collapse',\n  styleUrl: 'modus-wc-collapse.scss',\n  shadow: false,\n})\nexport class ModusWcCollapse {\n  private inheritedAttributes: Attributes = {};\n  private detailsRef?: HTMLDetailsElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the component should have a border. */",
        "type": ": string"
      },
      {
        "name": "options",
        "description": "/** The description to render in the collapse header. */\n  description?: string;\n  /** The Modus icon name to render in the collapse header. */\n  icon?: string;\n  /** The icon's aria-label. */\n  iconAriaLabel?: string;\n  /** The size of the collapse header. */\n  size?: DaisySize;\n  /** The title to render in the collapse header. */\n  title: string;\n}\n\n/**\n * A customizable collapse component used for showing and hiding content.\n *\n * The component supports a 'header' and 'content' `<slot>` for injecting custom HTML.\n * Do not set\n */\n@Component({\n  tag: 'modus-wc-collapse',\n  styleUrl: 'modus-wc-collapse.scss',\n  shadow: false,\n})\nexport class ModusWcCollapse {\n  private inheritedAttributes: Attributes = {};\n  private detailsRef?: HTMLDetailsElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the component should have a border. */",
        "type": ": ICollapseOptions"
      }
    ],
    "events": [
      {
        "name": "expandedChange",
        "description": "/** The description to render in the collapse header. */\n  description?: string;\n  /** The Modus icon name to render in the collapse header. */\n  icon?: string;\n  /** The icon's aria-label. */\n  iconAriaLabel?: string;\n  /** The size of the collapse header. */\n  size?: DaisySize;\n  /** The title to render in the collapse header. */\n  title: string;\n}\n\n/**\n * A customizable collapse component used for showing and hiding content.\n *\n * The component supports a 'header' and 'content' `<slot>` for injecting custom HTML.\n * Do not set\n */\n@Component({\n  tag: 'modus-wc-collapse',\n  styleUrl: 'modus-wc-collapse.scss',\n  shadow: false,\n})\nexport class ModusWcCollapse {\n  private inheritedAttributes: Attributes = {};\n  private detailsRef?: HTMLDetailsElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the component should have a border. */\n  @Prop() bordered?: boolean = false;\n\n  /** Custom CSS class to apply to the outer div. */\n  @Prop() customClass?: string = '';\n\n  /** Controls whether the collapse is expanded or not. */\n  @Prop({ mutable: true }) expanded?: boolean = false;\n\n  /** A unique identifier used to set the id attributes of various elements.  */\n  @Prop({ mutable: true }) collapseId?: string;\n\n  /**\n   * Configuration options for rendering the pre-laid out collapse component.\n   * Do not set this prop if you intend to use the 'header' slot.\n   */\n  @Prop() options?: ICollapseOptions;\n\n  /** Event emitted when the expanded prop is internally changed. */"
      }
    ],
    "slots": [
      "header",
      "content"
    ],
    "default_values": {
      "bordered": "false",
      "customClass": "''",
      "expanded": "false",
      "collapseId": "generateRandomId()",
      "options": "{this.getTitleChildDivClasses()}>\n                  {this.options.icon && (\n                    <modus-wc-icon\n                      aria-label={this.options.iconAriaLabel}\n                      decorative={true}\n                      name={this.options.icon}\n                      size={this.options.size}\n                    ></modus-wc-icon>\n                  )}\n                  {this.options.title}\n                </div>\n                {this.options.description && (\n                  <div class={this.getDescriptionDivClasses()}>\n                    {this.options.description}\n                  </div>\n                )}\n              </Fragment>\n            ) : (\n              <slot name=\"header\" />\n            )}\n          </summary>\n          <div\n            aria-labelledby={titleId}\n            class=\"modus-wc-collapse-content modus-wc-cursor-default\"\n            id={contentId}\n          >\n            <slot name=\"content\" />\n          </div>\n        </details>\n      </Host>\n    )"
    },
    "documentation": "\n\n--- modus-wc-collapse.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { ICollapseOptions } from './modus-wc-collapse';\n\ninterface CollapseArgs {\n  bordered?: boolean;\n  'custom-class'?: string;\n  expanded?: boolean;\n  id?: string;\n  options?: ICollapseOptions;\n}\n\nconst options: ICollapseOptions = {\n  title: 'Collapse Title',\n  description: 'Collapse description',\n  icon: 'alert',\n  iconAriaLabel: 'Alert',\n};\n\nconst meta: Meta<CollapseArgs> = {\n  title: 'Components/Collapse',\n  component: 'modus-wc-collapse',\n  args: { bordered: false, expanded: false, options },\n  argTypes: {\n    options: {\n      description: 'Configuration options for the collapse component',\n      table: {\n        type: {\n          detail: `\n            Interface: ICollapseOptions\n            Properties:\n            - description (string, optional): The description to render in the collapse header\n            - icon (string, optional): The Modus icon name to render in the collapse header\n            - iconAriaLabel (string, optional): The icon's aria-label\n            - size (DaisySize, optional): The size of the collapse header\n            - title (string): The title to render in the collapse header\n          `,\n        },\n      },\n    },\n  },\n  decorators: [withActions],\n  parameters: { actions: { handles: ['expandedChange'] }, layout: 'padded' },\n};\n\nexport default meta;\n\ntype Story = StoryObj<CollapseArgs>;\n\nconst Template: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<modus-wc-collapse\n  ?bordered=${args.bordered}\n  custom-class=${ifDefined(args['custom-class'])}\n  ?expanded=${args.expanded}\n  id=${ifDefined(args.id)}\n  .options=${args.options}\n>\n  <div slot=\"content\">Collapse content</div>\n</modus-wc-collapse>\n    `;\n  },\n};\n\nexport const Default: Story = { ...Template };\n\nexport const WithCustomClickableHeader = {\n  render: (args) => {\n    const handleButtonClick = () => {\n      window.alert('Button was clicked!');\n    };\n\n    // prettier-ignore\n    return html`\n<style>\n  .clickable-div {\n    position: relative;\n    width: fit-content;\n    z-index: 99;\n  }\n</style>\n<modus-wc-collapse\n  ?bordered=${args.bordered}\n  custom-class=${ifDefined(args['custom-class'])}\n  ?expanded=${args.expanded}\n  id=\"123\"\n>\n  <div slot=\"header\" class=\"modus-wc-collapse-title\" id=\"123\">\n    <div class=\"clickable-div\">\n      <modus-wc-button @buttonClick=${handleButtonClick}>Alert 1</modus-wc-button>\n      <modus-wc-button @buttonClick=${handleButtonClick}>Alert 2</modus-wc-button>\n    </div>\n  </div>\n  <div slot=\"content\">Collapse content</div>\n</modus-wc-collapse>\n    `;\n  },\n};\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - The 1.0 accordion-item component maps to the 2.0 collapse component. See the [Accordion component](?path=/docs/components-accordion--docs).\n  - Size values have changed from \\`condensed\\`, \\`standard\\` in 1.0 to abbreviations (\\`xs\\`, \\`sm\\`, \\`md\\`, \\`lg\\`) in 2.0.\n\n#### Prop Mapping\n\n##### accordion-item (1.0) \u2192 collapse (2.0)\n\n| 1.0 Prop           | 2.0 Prop            | Notes            |\n|--------------------|---------------------|------------------|\n| aria-label         | aria-label          |                  |\n| disabled           |                     | Not carried over |\n| expand-button-type |                     | Not carried over |\n| expanded           | expanded            |                  |\n| header-text        | options.title       |                  |\n| icon               | options.icon        |                  |\n| size               | options.size        |                  |\n| supporting-label   | options.description |                  |\n\n#### Event Mapping\n\n| 1.0 Event | 2.0 Event      | Notes            |\n|-----------|----------------|------------------|\n| closed    | expandedChange |                  |\n| opened    | expandedChange |                  |\n        `,\n      },\n    },\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  render: () => html`<div></div>`,\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-button @buttonClick=${handleButtonClick}>Alert 1</modus-wc-button>",
        "<modus-wc-button @buttonClick=${handleButtonClick}>Alert 2</modus-wc-button>",
        "\n<modus-wc-collapse\n  ?bordered=${args.bordered}\n  custom-class=${ifDefined(args['custom-class'])}\n  ?expanded=${args.expanded}\n  id=${ifDefined(args.id)}\n  .options=${args.options}\n>\n  <div slot=\"content\">Collapse content</div>\n</modus-wc-collapse>\n    ",
        "\n<style>\n  .clickable-div {\n    position: relative;\n    width: fit-content;\n    z-index: 99;\n  }\n</style>\n<modus-wc-collapse\n  ?bordered=${args.bordered}\n  custom-class=${ifDefined(args['custom-class'])}\n  ?expanded=${args.expanded}\n  id=\"123\"\n>\n  <div slot=\"header\" class=\"modus-wc-collapse-title\" id=\"123\">\n    <div class=\"clickable-div\">\n      <modus-wc-button @buttonClick=${handleButtonClick}>Alert 1</modus-wc-button>\n      <modus-wc-button @buttonClick=${handleButtonClick}>Alert 2</modus-wc-button>\n    </div>\n  </div>\n  <div slot=\"content\">Collapse content</div>\n</modus-wc-collapse>\n    "
      ],
      "variants": [],
      "prop_usage": {
        "slot": [
          "content",
          "header"
        ],
        "id": [
          "123"
        ],
        "class": [
          "modus-wc-collapse-title",
          "clickable-div"
        ]
      }
    },
    "tag_name": "modus-wc-collapse"
  },
  "modus-wc-badge": {
    "props": [
      {
        "name": "color",
        "description": "/**\n * A customizable badge component used to create badges with different sizes, types, and colors.\n *\n * The component supports a `<slot>` for injecting content within the badge.\n */\n@Component({\n  tag: 'modus-wc-badge',\n  styleUrl: 'modus-wc-badge.scss',\n  shadow: false,\n})\nexport class ModusWcBadge {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The color variant of the badge. */",
        "type": "| 'primary'\n    | 'secondary'\n    | 'tertiary'\n    | 'high-contrast'\n    | 'success'\n    | 'warning'\n    | 'danger'"
      },
      {
        "name": "customClass",
        "description": "/**\n * A customizable badge component used to create badges with different sizes, types, and colors.\n *\n * The component supports a `<slot>` for injecting content within the badge.\n */\n@Component({\n  tag: 'modus-wc-badge',\n  styleUrl: 'modus-wc-badge.scss',\n  shadow: false,\n})\nexport class ModusWcBadge {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The color variant of the badge. */",
        "type": "string"
      },
      {
        "name": "size",
        "description": "/**\n * A customizable badge component used to create badges with different sizes, types, and colors.\n *\n * The component supports a `<slot>` for injecting content within the badge.\n */\n@Component({\n  tag: 'modus-wc-badge',\n  styleUrl: 'modus-wc-badge.scss',\n  shadow: false,\n})\nexport class ModusWcBadge {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The color variant of the badge. */",
        "type": "ModusSize"
      },
      {
        "name": "variant",
        "description": "/**\n * A customizable badge component used to create badges with different sizes, types, and colors.\n *\n * The component supports a `<slot>` for injecting content within the badge.\n */\n@Component({\n  tag: 'modus-wc-badge',\n  styleUrl: 'modus-wc-badge.scss',\n  shadow: false,\n})\nexport class ModusWcBadge {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The color variant of the badge. */",
        "type": "'counter' | 'filled' | 'outlined' | 'text'"
      }
    ],
    "events": [],
    "slots": [],
    "default_values": {
      "color": "'primary'",
      "customClass": "''",
      "size": "'md'",
      "variant": "'filled'"
    },
    "documentation": "\n\n--- modus-wc-badge.stories.ts ---\n\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { ModusSize } from '../types';\n\ninterface BadgeArgs {\n  color:\n    | 'primary'\n    | 'secondary'\n    | 'tertiary'\n    | 'high-contrast'\n    | 'success'\n    | 'warning'\n    | 'danger';\n  'custom-class'?: string;\n  size: ModusSize;\n  variant: 'counter' | 'filled' | 'outlined' | 'text';\n}\n\nconst meta: Meta<BadgeArgs> = {\n  title: 'Components/Badge',\n  component: 'modus-wc-badge',\n  args: {\n    color: 'primary',\n    size: 'md',\n    variant: 'filled',\n  },\n  argTypes: {\n    color: {\n      control: { type: 'select' },\n      options: [\n        'primary',\n        'secondary',\n        'tertiary',\n        'high-contrast',\n        'success',\n        'warning',\n        'danger',\n      ],\n    },\n    size: {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg'],\n    },\n    variant: {\n      control: { type: 'select' },\n      options: ['counter', 'filled', 'outlined', 'text'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<BadgeArgs>;\n\nconst Template: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<modus-wc-badge\n  color=\"${args.color}\"\n  custom-class=\"${ifDefined(args['custom-class'])}\"\n  size=\"${args.size}\"\n  variant=\"${args.variant}\"\n>\n  Badge\n</modus-wc-badge>\n    `;\n  },\n};\n\nexport const Default: Story = {\n  ...Template,\n};\n\nexport const WithIcon: Story = {\n  render: () => {\n    // prettier-ignore\n    return html`\n<style>\n  .modus-wc-icon {\n    padding-inline-end: 4px;\n  }\n</style>\n<modus-wc-badge>\n  <modus-wc-icon decorative name=\"check\" size=\"xs\"></modus-wc-icon>\n  Item\n</modus-wc-badge>\n    `;\n  },\n};\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - The \\`dark\\` color option is now \\`high-contrast\\`\n  - The \\`type\\` prop is now \\`variant\\` and \\`default\\` type is now \\`filled\\`\n  - Size values have changed from verbose names (\\`small\\`, \\`medium\\`, \\`large\\`) to abbreviations (\\`sm\\`, \\`md\\`, \\`lg\\`).\n\n#### Prop Mapping\n\n| 1.0 Prop   | 2.0 Prop   | Notes                                                       |\n|------------|------------|-------------------------------------------------------------|\n| aria-label | aria-label |                                                             |\n| color      | color      | \\`dark\\` is now \\`high-contrast\\`                           |\n| size       | size       | \\`small\\` \u2192 \\`sm\\`, \\`medium\\` \u2192 \\`md\\`, \\`large\\` \u2192 \\`lg\\` |\n| type       | variant    | \\`default\\` is now \\`filled\\`                               |\n        `,\n      },\n    },\n    // To hide the actual story rendering and only show docs:\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  // Simple render function or leave it empty\n  render: () => html`<div></div>`,\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-badge\n  color=\"${args.color}\"\n  custom-class=\"${ifDefined(args['custom-class'])}\"\n  size=\"${args.size}\"\n  variant=\"${args.variant}\"\n>\n  Badge\n</modus-wc-badge>",
        "<modus-wc-icon decorative name=\"check\" size=\"xs\"></modus-wc-icon>",
        "\n<modus-wc-badge\n  color=\"${args.color}\"\n  custom-class=\"${ifDefined(args['custom-class'])}\"\n  size=\"${args.size}\"\n  variant=\"${args.variant}\"\n>\n  Badge\n</modus-wc-badge>\n    ",
        "\n<style>\n  .modus-wc-icon {\n    padding-inline-end: 4px;\n  }\n</style>\n<modus-wc-badge>\n  <modus-wc-icon decorative name=\"check\" size=\"xs\"></modus-wc-icon>\n  Item\n</modus-wc-badge>\n    "
      ],
      "variants": [
        "${args.variant}"
      ],
      "prop_usage": {
        "color": [
          "${args.color}"
        ],
        "class": [
          "${ifDefined(args["
        ],
        "size": [
          "${args.size}",
          "xs"
        ],
        "variant": [
          "${args.variant}"
        ],
        "name": [
          "check"
        ]
      }
    },
    "tag_name": "modus-wc-badge"
  },
  "modus-wc-menu": {
    "props": [
      {
        "name": "bordered",
        "description": "/**\n * A customizable menu component used to display a list of li elements vertically or horizontally.\n *\n * The component supports a `<slot>` for injecting custom li elements inside the ul\n */\n@Component({\n  tag: 'modus-wc-menu',\n  styleUrl: 'modus-wc-menu.scss',\n  shadow: false,\n})\nexport class ModusWcMenu {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the menu should have a border. */",
        "type": ": boolean"
      },
      {
        "name": "customClass",
        "description": "/**\n * A customizable menu component used to display a list of li elements vertically or horizontally.\n *\n * The component supports a `<slot>` for injecting custom li elements inside the ul\n */\n@Component({\n  tag: 'modus-wc-menu',\n  styleUrl: 'modus-wc-menu.scss',\n  shadow: false,\n})\nexport class ModusWcMenu {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the menu should have a border. */",
        "type": ": string"
      },
      {
        "name": "orientation",
        "description": "/**\n * A customizable menu component used to display a list of li elements vertically or horizontally.\n *\n * The component supports a `<slot>` for injecting custom li elements inside the ul\n */\n@Component({\n  tag: 'modus-wc-menu',\n  styleUrl: 'modus-wc-menu.scss',\n  shadow: false,\n})\nexport class ModusWcMenu {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the menu should have a border. */",
        "type": ": Orientation"
      },
      {
        "name": "size",
        "description": "/**\n * A customizable menu component used to display a list of li elements vertically or horizontally.\n *\n * The component supports a `<slot>` for injecting custom li elements inside the ul\n */\n@Component({\n  tag: 'modus-wc-menu',\n  styleUrl: 'modus-wc-menu.scss',\n  shadow: false,\n})\nexport class ModusWcMenu {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the menu should have a border. */",
        "type": ": ModusSize"
      }
    ],
    "events": [
      {
        "name": "menuFocusout",
        "description": "/**\n * A customizable menu component used to display a list of li elements vertically or horizontally.\n *\n * The component supports a `<slot>` for injecting custom li elements inside the ul\n */\n@Component({\n  tag: 'modus-wc-menu',\n  styleUrl: 'modus-wc-menu.scss',\n  shadow: false,\n})\nexport class ModusWcMenu {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the menu should have a border. */\n  @Prop() bordered?: boolean;\n\n  /** Custom CSS class to apply to the ul element. */\n  @Prop() customClass?: string = '';\n\n  /** The orientation of the menu. */\n  @Prop() orientation?: Orientation = 'vertical';\n\n  /** The size of the menu. */\n  @Prop() size?: ModusSize = 'md';\n\n  /** Event emitted when the menu loses focus. */"
      }
    ],
    "slots": [],
    "default_values": {
      "customClass": "''",
      "orientation": "'vertical'",
      "size": "'md'"
    },
    "documentation": "\n\n--- modus-wc-menu.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { ModusSize, Orientation } from '../types';\n\ninterface MenuArgs {\n  bordered?: boolean;\n  'custom-class'?: string;\n  orientation?: Orientation;\n  size?: ModusSize;\n}\n\nconst meta: Meta<MenuArgs> = {\n  title: 'Components/Menu',\n  component: 'modus-wc-menu',\n  args: {\n    orientation: 'vertical',\n    size: 'md',\n  },\n  argTypes: {\n    orientation: {\n      control: { type: 'select' },\n      options: ['horizontal', 'vertical'],\n    },\n    size: {\n      control: { type: 'select' },\n      options: ['xs', 'sm', 'md', 'lg'],\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['menuFocusout'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<MenuArgs>;\n\nexport const Default: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<modus-wc-menu\n  aria-label=\"Menu\"\n  ?bordered=${args.bordered}\n  custom-class=${ifDefined(args['custom-class'])}\n  orientation=${ifDefined(args.orientation)}\n  size=${ifDefined(args.size)}\n>\n  <modus-wc-menu-item\n    label=\"Small\"\n    value=\"1\"\n    size=\"sm\"\n  ></modus-wc-menu-item>\n  <modus-wc-menu-item label=\"Medium\" value=\"2\"></modus-wc-menu-item>\n  <modus-wc-menu-item\n    label=\"Large\"\n    value=\"3\"\n    size=\"lg\"\n  ></modus-wc-menu-item>\n  <modus-wc-menu-item\n    label=\"Bordered\"\n    value=\"3\"\n    bordered=\"true\"\n  ></modus-wc-menu-item>\n  <modus-wc-menu-item\n    label=\"With Sub-label\"\n    value=\"3\"\n    sub-label=\"Sub-label\"\n  ></modus-wc-menu-item>\n  <modus-wc-menu-item\n    label=\"Selected\"\n    value=\"3\"\n    selected=\"true\"\n  ></modus-wc-menu-item>\n  <modus-wc-menu-item\n    label=\"With Start Icon\"\n    value=\"3\"\n  >\n    <modus-wc-icon slot=\"start-icon\" name=\"info\"></modus-wc-icon>\n  </modus-wc-menu-item>\n  <modus-wc-menu-item\n    label=\"Disabled\"\n    value=\"3\"\n    disabled=\"true\"\n  ></modus-wc-menu-item>\n</modus-wc-menu>\n    `;\n  },\n};\n\nexport const CustomMenu: Story = {\n  render: () => {\n    // prettier-ignore\n    return html`\n<style>\n  .menu-width {\n    width: 400px;\n  }\n  .flex-row {\n    display: flex;\n    align-items: center;\n  }\n  .nested-row {\n    padding-inline-start: 3rem;\n  }\n  .justify-end {\n    margin-left: auto;\n  }\n  .green-square {\n    height: 18px;\n    width: 18px;\n    background-color: green;\n  }\n  .red-square {\n    height: 18px;\n    width: 18px;\n    background-color: red;\n  }\n</style>\n<modus-wc-menu\n  aria-label=\"Custom menu\"\n  custom-class=\"menu-width\"\n>\n  <li>\n    <div class=\"flex-row\">\n      <modus-wc-icon decorative=\"true\" name=\"expand_more\"></modus-wc-icon>\n      <modus-wc-button aria-label=\"Visible button\" size=\"sm\" shape=\"circle\" variant=\"borderless\">\n        <modus-wc-icon aria-label=\"Visible icon\" name=\"visibility_on\"></modus-wc-icon>\n      </modus-wc-button>\n      <div>Parent</div>\n      <div class=\"justify-end\">\n        <modus-wc-button aria-label=\"Actions button\" size=\"sm\" shape=\"circle\" variant=\"borderless\">\n          <modus-wc-icon aria-label=\"Actions icon\" name=\"more_vertical\"></modus-wc-icon>\n        </modus-wc-button>\n      </div>\n    </div>\n  </li>\n  <li>\n    <div class=\"flex-row nested-row\">\n      <modus-wc-button aria-label=\"Visible button\" size=\"sm\" shape=\"circle\" variant=\"borderless\">\n        <modus-wc-icon aria-label=\"Visible icon\" name=\"visibility_on\"></modus-wc-icon>\n      </modus-wc-button>\n      <div class=\"green-square\"></div>\n      <div>Child</div>\n      <div class=\"justify-end\">\n        <modus-wc-button aria-label=\"Actions button\" size=\"sm\" shape=\"circle\" variant=\"borderless\">\n          <modus-wc-icon aria-label=\"Actions icon\" name=\"more_vertical\"></modus-wc-icon>\n        </modus-wc-button>\n      </div>\n    </div>\n  </li>\n  <li>\n    <div class=\"flex-row nested-row\">\n      <modus-wc-button aria-label=\"Visible button\" size=\"sm\" shape=\"circle\" variant=\"borderless\">\n        <modus-wc-icon aria-label=\"Invisible icon\" name=\"visibility_off\"></modus-wc-icon>\n      </modus-wc-button>\n      <div class=\"red-square\"></div>\n      <div>Child</div>\n      <div class=\"justify-end\">\n        <modus-wc-button aria-label=\"Actions button\" size=\"sm\" shape=\"circle\" variant=\"borderless\">\n          <modus-wc-icon aria-label=\"Actions icon\" name=\"more_vertical\"></modus-wc-icon>\n        </modus-wc-button>\n      </div>\n    </div>\n  </li>\n  <li>\n    <div class=\"flex-row\">\n      <modus-wc-icon decorative=\"true\" name=\"chevron_right\"></modus-wc-icon>\n      <modus-wc-button aria-label=\"Visible button\" size=\"sm\" shape=\"circle\" variant=\"borderless\">\n        <modus-wc-icon aria-label=\"Visible icon\" name=\"visibility_on\"></modus-wc-icon>\n      </modus-wc-button>\n      <div>Parent</div>\n      <div class=\"justify-end\">\n        <modus-wc-button aria-label=\"Actions button\" size=\"sm\" shape=\"circle\" variant=\"borderless\">\n          <modus-wc-icon aria-label=\"Actions icon\" name=\"more_vertical\"></modus-wc-icon>\n        </modus-wc-button>\n      </div>\n    </div>\n  </li>\n</modus-wc-menu>\n    `;\n  },\n};\n\nexport const CollapsibleMenu: Story = {\n  render: () => {\n    const handleCollapseToggle = (e: MouseEvent) => {\n      const clickedEl = e.currentTarget as HTMLElement;\n      const parentLi = clickedEl.closest('li');\n      if (!parentLi) return;\n\n      // Find the icon element that needs to be toggled\n      const iconEl = clickedEl.querySelector('.dropdown-toggle') as HTMLElement;\n      if (!iconEl) return;\n\n      // Toggle between expand_more and expand_less icons\n      const isExpanded = iconEl.getAttribute('name') === 'expand_more';\n      iconEl.setAttribute('name', isExpanded ? 'expand_less' : 'expand_more');\n\n      // Find and toggle children visibility\n      const childContainer = parentLi.nextElementSibling?.classList.contains(\n        'children-container'\n      )\n        ? (parentLi.nextElementSibling as HTMLElement)\n        : null;\n\n      if (childContainer) {\n        childContainer.classList.toggle('hidden');\n        childContainer.setAttribute(\n          'aria-hidden',\n          !isExpanded ? 'true' : 'false'\n        );\n      }\n    };\n\n    return html`\n      <style>\n        .children-container {\n          transition: height 0.2s ease-out;\n          padding-inline-start: 1rem;\n        }\n        .collapse-icon {\n          min-width: 24px;\n          padding-inline-start: 0.2rem;\n        }\n        .dropdown-menu {\n          overflow: hidden;\n          text-overflow: ellipsis;\n          white-space: nowrap;\n        }\n        .flex-row {\n          align-items: center;\n          display: flex;\n          gap: 1.3rem;\n          padding: 0.8rem 0.25rem;\n          padding-inline-start: 1rem;\n          cursor: pointer;\n        }\n        .hidden {\n          display: none;\n        }\n        .justify-end {\n          margin-left: auto;\n        }\n        .menu-width {\n          width: 400px;\n        }\n        .nested-row {\n          padding-inline-start: 2.5rem;\n        }\n        ul {\n          list-style: none;\n          margin: 0;\n          padding: 0;\n        }\n      </style>\n      <script>\n        function handleCollapseToggle(e) {\n          const clickedEl = e.currentTarget;\n          const parentLi = clickedEl.closest('li');\n          if (!parentLi) return;\n\n          // Find the icon element that needs to be toggled\n          const iconEl = clickedEl.querySelector('.dropdown-toggle');\n          if (!iconEl) return;\n\n          // Toggle between expand_more and expand_less icons\n          const isExpanded = iconEl.getAttribute('name') === 'expand_more';\n          iconEl.setAttribute(\n            'name',\n            isExpanded ? 'expand_less' : 'expand_more'\n          );\n\n          // Find and toggle children visibility\n          const childContainer =\n            parentLi.nextElementSibling?.classList.contains(\n              'children-container'\n            )\n              ? parentLi.nextElementSibling\n              : null;\n\n          if (childContainer) {\n            childContainer.classList.toggle('hidden');\n            childContainer.setAttribute(\n              'aria-hidden',\n              !isExpanded ? 'true' : 'false'\n            );\n          }\n        }\n      </script>\n      <modus-wc-menu aria-label=\"Collapsible menu\" custom-class=\"menu-width\">\n        <!-- Charts group -->\n        <li>\n          <div class=\"flex-row\" @click=${handleCollapseToggle}>\n            <modus-wc-icon\n              decorative=\"true\"\n              name=\"bar_graph\"\n              class=\"collapse-icon icon-left\"\n            ></modus-wc-icon>\n            <div class=\"dropdown-menu\">Charts</div>\n            <div class=\"justify-end\">\n              <modus-wc-icon\n                decorative=\"true\"\n                name=\"expand_more\"\n                class=\"collapse-icon dropdown-toggle\"\n              ></modus-wc-icon>\n            </div>\n          </div>\n        </li>\n        <li class=\"children-container hidden\" aria-hidden=\"true\">\n          <ul>\n            <li>\n              <div class=\"flex-row nested-row\">\n                <div>Bar Chart</div>\n              </div>\n            </li>\n            <li>\n              <div class=\"flex-row nested-row\">\n                <div>Line Chart</div>\n              </div>\n            </li>\n          </ul>\n        </li>\n\n        <!-- Calendar item (no children) -->\n        <li>\n          <div class=\"flex-row\">\n            <modus-wc-icon\n              decorative=\"true\"\n              name=\"calendar\"\n              class=\"collapse-icon icon-left\"\n            ></modus-wc-icon>\n            <div class=\"dropdown-menu\">Calendar</div>\n          </div>\n        </li>\n\n        <!-- Maps group -->\n        <li>\n          <div class=\"flex-row\" @click=${handleCollapseToggle}>\n            <modus-wc-icon\n              decorative=\"true\"\n              name=\"compass\"\n              class=\"collapse-icon icon-left\"\n            ></modus-wc-icon>\n            <div class=\"dropdown-menu\">Maps</div>\n            <div class=\"justify-end\">\n              <modus-wc-icon\n                decorative=\"true\"\n                name=\"expand_more\"\n                class=\"collapse-icon dropdown-toggle\"\n              ></modus-wc-icon>\n            </div>\n          </div>\n        </li>\n        <li class=\"children-container hidden\" aria-hidden=\"true\">\n          <ul>\n            <li>\n              <div class=\"flex-row nested-row\">\n                <div>Map 1</div>\n              </div>\n            </li>\n            <li>\n              <div class=\"flex-row nested-row\" @click=${handleCollapseToggle}>\n                <div>Map 2</div>\n                <div class=\"justify-end\">\n                  <modus-wc-icon\n                    decorative=\"true\"\n                    name=\"expand_more\"\n                    class=\"collapse-icon dropdown-toggle\"\n                  ></modus-wc-icon>\n                </div>\n              </div>\n            </li>\n            <li class=\"children-container hidden\" aria-hidden=\"true\">\n              <ul>\n                <li>\n                  <div class=\"flex-row\" style=\"padding-inline-start: 4rem;\">\n                    <div>Map 2.1</div>\n                  </div>\n                </li>\n                <li>\n                  <div class=\"flex-row\" style=\"padding-inline-start: 4rem;\">\n                    <div>Map 2.2</div>\n                  </div>\n                </li>\n              </ul>\n            </li>\n            <li>\n              <div class=\"flex-row nested-row\">\n                <div>Map 3</div>\n              </div>\n            </li>\n          </ul>\n        </li>\n\n        <!-- Reports group -->\n        <li>\n          <div class=\"flex-row\" @click=${handleCollapseToggle}>\n            <modus-wc-icon\n              decorative=\"true\"\n              name=\"master_data\"\n              class=\"collapse-icon icon-left\"\n            ></modus-wc-icon>\n            <div class=\"dropdown-menu\">Reports</div>\n            <div class=\"justify-end\">\n              <modus-wc-icon\n                decorative=\"true\"\n                name=\"expand_more\"\n                class=\"collapse-icon dropdown-toggle\"\n              ></modus-wc-icon>\n            </div>\n          </div>\n        </li>\n        <li class=\"children-container hidden\" aria-hidden=\"true\">\n          <ul>\n            <li>\n              <div class=\"flex-row nested-row\">\n                <div>Daily Report</div>\n              </div>\n            </li>\n            <li>\n              <div class=\"flex-row nested-row\">\n                <div>Weekly Report</div>\n              </div>\n            </li>\n            <li>\n              <div class=\"flex-row nested-row\">\n                <div>Monthly Report</div>\n              </div>\n            </li>\n          </ul>\n        </li>\n      </modus-wc-menu>\n    `;\n  },\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-menu-item\n    label=\"Small\"\n    value=\"1\"\n    size=\"sm\"\n  ></modus-wc-menu-item>",
        "<modus-wc-menu-item label=\"Medium\" value=\"2\"></modus-wc-menu-item>",
        "<modus-wc-menu-item\n    label=\"Large\"\n    value=\"3\"\n    size=\"lg\"\n  ></modus-wc-menu-item>",
        "<modus-wc-menu-item\n    label=\"Bordered\"\n    value=\"3\"\n    bordered=\"true\"\n  ></modus-wc-menu-item>",
        "<modus-wc-menu-item\n    label=\"With Sub-label\"\n    value=\"3\"\n    sub-label=\"Sub-label\"\n  ></modus-wc-menu-item>"
      ],
      "variants": [
        "borderless"
      ],
      "prop_usage": {
        "label": [
          "Menu",
          "Small",
          "Medium",
          "Large",
          "Bordered",
          "With Sub-label",
          "Sub-label",
          "Selected",
          "With Start Icon",
          "Disabled",
          "Custom menu",
          "Visible button",
          "Visible icon",
          "Actions button",
          "Actions icon",
          "Invisible icon",
          "Collapsible menu"
        ],
        "value": [
          "1",
          "2",
          "3"
        ],
        "size": [
          "sm",
          "lg"
        ],
        "bordered": [
          "true"
        ],
        "selected": [
          "true"
        ],
        "slot": [
          "start-icon"
        ],
        "name": [
          "info",
          "expand_more",
          "visibility_on",
          "more_vertical",
          "visibility_off",
          "chevron_right",
          "bar_graph",
          "calendar",
          "compass",
          "master_data"
        ],
        "disabled": [
          "true"
        ],
        "class": [
          "menu-width",
          "flex-row",
          "justify-end",
          "flex-row nested-row",
          "green-square",
          "red-square",
          "collapse-icon icon-left",
          "dropdown-menu",
          "collapse-icon dropdown-toggle",
          "children-container hidden"
        ],
        "decorative": [
          "true"
        ],
        "shape": [
          "circle"
        ],
        "variant": [
          "borderless"
        ],
        "hidden": [
          "true"
        ],
        "style": [
          "padding-inline-start: 4rem;"
        ]
      }
    },
    "tag_name": "modus-wc-menu"
  },
  "modus-wc-checkbox": {
    "props": [
      {
        "name": "customClass",
        "description": "/**\n * A customizable checkbox component\n */\n@Component({\n  tag: 'modus-wc-checkbox',\n  styleUrl: 'modus-wc-checkbox.scss',\n  shadow: false,\n})\nexport class ModusWcCheckbox {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */",
        "type": ": string"
      },
      {
        "name": "disabled",
        "description": "/**\n * A customizable checkbox component\n */\n@Component({\n  tag: 'modus-wc-checkbox',\n  styleUrl: 'modus-wc-checkbox.scss',\n  shadow: false,\n})\nexport class ModusWcCheckbox {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */",
        "type": ": boolean"
      },
      {
        "name": "indeterminate",
        "description": "/**\n * A customizable checkbox component\n */\n@Component({\n  tag: 'modus-wc-checkbox',\n  styleUrl: 'modus-wc-checkbox.scss',\n  shadow: false,\n})\nexport class ModusWcCheckbox {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */",
        "type": "boolean"
      },
      {
        "name": "inputId",
        "description": "/**\n * A customizable checkbox component\n */\n@Component({\n  tag: 'modus-wc-checkbox',\n  styleUrl: 'modus-wc-checkbox.scss',\n  shadow: false,\n})\nexport class ModusWcCheckbox {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */",
        "type": ": string"
      },
      {
        "name": "inputTabIndex",
        "description": "/**\n * A customizable checkbox component\n */\n@Component({\n  tag: 'modus-wc-checkbox',\n  styleUrl: 'modus-wc-checkbox.scss',\n  shadow: false,\n})\nexport class ModusWcCheckbox {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */",
        "type": ": number"
      },
      {
        "name": "label",
        "description": "/**\n * A customizable checkbox component\n */\n@Component({\n  tag: 'modus-wc-checkbox',\n  styleUrl: 'modus-wc-checkbox.scss',\n  shadow: false,\n})\nexport class ModusWcCheckbox {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */",
        "type": ": string"
      },
      {
        "name": "name",
        "description": "/**\n * A customizable checkbox component\n */\n@Component({\n  tag: 'modus-wc-checkbox',\n  styleUrl: 'modus-wc-checkbox.scss',\n  shadow: false,\n})\nexport class ModusWcCheckbox {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */",
        "type": ": string"
      },
      {
        "name": "required",
        "description": "/**\n * A customizable checkbox component\n */\n@Component({\n  tag: 'modus-wc-checkbox',\n  styleUrl: 'modus-wc-checkbox.scss',\n  shadow: false,\n})\nexport class ModusWcCheckbox {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */",
        "type": ": boolean"
      },
      {
        "name": "size",
        "description": "/**\n * A customizable checkbox component\n */\n@Component({\n  tag: 'modus-wc-checkbox',\n  styleUrl: 'modus-wc-checkbox.scss',\n  shadow: false,\n})\nexport class ModusWcCheckbox {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */",
        "type": ": ModusSize"
      },
      {
        "name": "value",
        "description": "/**\n * A customizable checkbox component\n */\n@Component({\n  tag: 'modus-wc-checkbox',\n  styleUrl: 'modus-wc-checkbox.scss',\n  shadow: false,\n})\nexport class ModusWcCheckbox {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */",
        "type": "boolean"
      }
    ],
    "events": [
      {
        "name": "inputBlur",
        "description": "/**\n * A customizable checkbox component\n */\n@Component({\n  tag: 'modus-wc-checkbox',\n  styleUrl: 'modus-wc-checkbox.scss',\n  shadow: false,\n})\nexport class ModusWcCheckbox {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */\n  @Prop() customClass?: string = '';\n\n  /** The disabled state of the checkbox. */\n  @Prop() disabled?: boolean = false;\n\n  /** The indeterminate state of the checkbox. */\n  @Prop({ reflect: true, mutable: true }) indeterminate: boolean = false;\n\n  /** The ID of the input element. */\n  @Prop() inputId?: string;\n\n  /** The tabindex of the input. */\n  @Prop() inputTabIndex?: number;\n\n  /** The text to display within the label. */\n  @Prop() label?: string;\n\n  /** Name of the form control. Submitted with the form as part of a name/value pair. */\n  @Prop() name?: string = '';\n\n  /** A value is required for the form to be submittable. */\n  @Prop() required?: boolean = false;\n\n  /** The size of the input. */\n  @Prop() size?: ModusSize = 'md';\n\n  /** The value of the checkbox. */\n  @Prop({ mutable: true, reflect: true }) value: boolean = false;\n\n  /** Emitted when the input loses focus. */"
      },
      {
        "name": "inputChange",
        "description": "/**\n * A customizable checkbox component\n */\n@Component({\n  tag: 'modus-wc-checkbox',\n  styleUrl: 'modus-wc-checkbox.scss',\n  shadow: false,\n})\nexport class ModusWcCheckbox {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */\n  @Prop() customClass?: string = '';\n\n  /** The disabled state of the checkbox. */\n  @Prop() disabled?: boolean = false;\n\n  /** The indeterminate state of the checkbox. */\n  @Prop({ reflect: true, mutable: true }) indeterminate: boolean = false;\n\n  /** The ID of the input element. */\n  @Prop() inputId?: string;\n\n  /** The tabindex of the input. */\n  @Prop() inputTabIndex?: number;\n\n  /** The text to display within the label. */\n  @Prop() label?: string;\n\n  /** Name of the form control. Submitted with the form as part of a name/value pair. */\n  @Prop() name?: string = '';\n\n  /** A value is required for the form to be submittable. */\n  @Prop() required?: boolean = false;\n\n  /** The size of the input. */\n  @Prop() size?: ModusSize = 'md';\n\n  /** The value of the checkbox. */\n  @Prop({ mutable: true, reflect: true }) value: boolean = false;\n\n  /** Emitted when the input loses focus. */"
      },
      {
        "name": "inputFocus",
        "description": "/**\n * A customizable checkbox component\n */\n@Component({\n  tag: 'modus-wc-checkbox',\n  styleUrl: 'modus-wc-checkbox.scss',\n  shadow: false,\n})\nexport class ModusWcCheckbox {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */\n  @Prop() customClass?: string = '';\n\n  /** The disabled state of the checkbox. */\n  @Prop() disabled?: boolean = false;\n\n  /** The indeterminate state of the checkbox. */\n  @Prop({ reflect: true, mutable: true }) indeterminate: boolean = false;\n\n  /** The ID of the input element. */\n  @Prop() inputId?: string;\n\n  /** The tabindex of the input. */\n  @Prop() inputTabIndex?: number;\n\n  /** The text to display within the label. */\n  @Prop() label?: string;\n\n  /** Name of the form control. Submitted with the form as part of a name/value pair. */\n  @Prop() name?: string = '';\n\n  /** A value is required for the form to be submittable. */\n  @Prop() required?: boolean = false;\n\n  /** The size of the input. */\n  @Prop() size?: ModusSize = 'md';\n\n  /** The value of the checkbox. */\n  @Prop({ mutable: true, reflect: true }) value: boolean = false;\n\n  /** Emitted when the input loses focus. */"
      }
    ],
    "slots": [],
    "default_values": {
      "customClass": "''",
      "disabled": "false",
      "indeterminate": "false",
      "name": "''",
      "required": "false",
      "size": "'md'",
      "value": "false"
    },
    "documentation": "\n\n--- modus-wc-checkbox.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { ModusSize } from '../types';\n\ninterface CheckboxArgs {\n  'custom-class'?: string;\n  disabled?: boolean;\n  indeterminate?: boolean;\n  'input-id'?: string;\n  'input-tab-index'?: number;\n  label?: string;\n  name?: string;\n  required?: boolean;\n  size?: ModusSize;\n  value: boolean;\n}\n\nconst meta: Meta<CheckboxArgs> = {\n  title: 'Components/Forms/Checkbox',\n  component: 'modus-wc-checkbox',\n  args: {\n    'custom-class': '',\n    disabled: false,\n    indeterminate: false,\n    label: 'Label',\n    name: '',\n    required: false,\n    size: 'md',\n    value: true,\n  },\n  argTypes: {\n    size: {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg'],\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['inputBlur', 'inputChange', 'inputFocus'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<CheckboxArgs>;\n\nexport const Default: Story = {\n  render: (args) => {\n    return html`\n      <modus-wc-checkbox\n        aria-label=\"Checkbox\"\n        custom-class=${ifDefined(args['custom-class'])}\n        ?disabled=${args.disabled}\n        .indeterminate=${args.indeterminate}\n        input-id=${ifDefined(args['input-id'])}\n        input-tab-index=${ifDefined(args['input-tab-index'])}\n        label=${ifDefined(args.label)}\n        name=${ifDefined(args.name)}\n        ?required=${args.required}\n        size=${ifDefined(args.size)}\n        .value=${args.value}\n      ></modus-wc-checkbox>\n    `;\n  },\n};\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - In 1.0 input state was maintained by the component. 2.0 components encourage users to follow a controlled\n  input model. See the Form Inputs [documentation]([Angular](?path=/docs/documentation-form-inputs--docs) for\n  additional info and examples.\n  - The \\`checked\\` prop is now \\`value\\` in 2.0.\n  - The \\`checkboxClick\\` event is now \\`inputChange\\` in 2.0.\n  - Size values have changed from verbose names (\\`small\\`, \\`medium\\`) to abbreviations (\\`sm\\`, \\`md\\`, \\`lg\\`).\n\n#### Prop Mapping\n\n| 1.0 Prop         | 2.0 Prop      | Notes                                   |\n|------------------|---------------|-----------------------------------------|\n| aria-label       | aria-label    |                                         |\n| checked          | value         |                                         |\n| disabled         | disabled      |                                         |\n| indeterminate    | indeterminate |                                         |\n| label            | label         |                                         |\n| size             | size          | \\`small\\` \u2192 \\`sm\\`, \\`medium\\` \u2192 \\`md\\` |\n| stop-propagation |               | Not carried over                        |\n\n#### Event Mapping\n\n| 1.0 Event     | 2.0 Event   | Notes                                                 |\n|---------------|-------------|-------------------------------------------------------|\n| checkboxClick | inputChange | Event now emits \\`InputEvent\\` instead of \\`boolean\\` |\n        `,\n      },\n    },\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  render: () => html`<div></div>`,\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-checkbox\n        aria-label=\"Checkbox\"\n        custom-class=${ifDefined(args['custom-class'])}\n        ?disabled=${args.disabled}\n        .indeterminate=${args.indeterminate}\n        input-id=${ifDefined(args['input-id'])}\n        input-tab-index=${ifDefined(args['input-tab-index'])}\n        label=${ifDefined(args.label)}\n        name=${ifDefined(args.name)}\n        ?required=${args.required}\n        size=${ifDefined(args.size)}\n        .value=${args.value}\n      ></modus-wc-checkbox>",
        "\n      <modus-wc-checkbox\n        aria-label=\"Checkbox\"\n        custom-class=${ifDefined(args['custom-class'])}\n        ?disabled=${args.disabled}\n        .indeterminate=${args.indeterminate}\n        input-id=${ifDefined(args['input-id'])}\n        input-tab-index=${ifDefined(args['input-tab-index'])}\n        label=${ifDefined(args.label)}\n        name=${ifDefined(args.name)}\n        ?required=${args.required}\n        size=${ifDefined(args.size)}\n        .value=${args.value}\n      ></modus-wc-checkbox>\n    "
      ],
      "variants": [],
      "prop_usage": {
        "label": [
          "Checkbox"
        ]
      }
    },
    "tag_name": "modus-wc-checkbox"
  },
  "modus-wc-input-feedback": {
    "props": [
      {
        "name": "customClass",
        "description": "/**\n * A customizable feedback component used to provide additional context related to form input interactions.\n *\n * <b>To use a custom icon, this component requires Modus icons to be installed in the host application. See [Modus Icon Usage](/docs/documentation-modus-icon-usage--docs) for steps.</b>\n\n */\n@Component({\n  tag: 'modus-wc-input-feedback',\n  styleUrl: 'modus-wc-input-feedback.scss',\n  shadow: false,\n})\nexport class ModusWcInputFeedback {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the outer div element. */",
        "type": ": string"
      },
      {
        "name": "icon",
        "description": "/**\n * A customizable feedback component used to provide additional context related to form input interactions.\n *\n * <b>To use a custom icon, this component requires Modus icons to be installed in the host application. See [Modus Icon Usage](/docs/documentation-modus-icon-usage--docs) for steps.</b>\n\n */\n@Component({\n  tag: 'modus-wc-input-feedback',\n  styleUrl: 'modus-wc-input-feedback.scss',\n  shadow: false,\n})\nexport class ModusWcInputFeedback {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the outer div element. */",
        "type": ": string"
      },
      {
        "name": "level",
        "description": "/**\n * A customizable feedback component used to provide additional context related to form input interactions.\n *\n * <b>To use a custom icon, this component requires Modus icons to be installed in the host application. See [Modus Icon Usage](/docs/documentation-modus-icon-usage--docs) for steps.</b>\n\n */\n@Component({\n  tag: 'modus-wc-input-feedback',\n  styleUrl: 'modus-wc-input-feedback.scss',\n  shadow: false,\n})\nexport class ModusWcInputFeedback {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the outer div element. */",
        "type": ": IInputFeedbackLevel"
      },
      {
        "name": "message",
        "description": "/**\n * A customizable feedback component used to provide additional context related to form input interactions.\n *\n * <b>To use a custom icon, this component requires Modus icons to be installed in the host application. See [Modus Icon Usage](/docs/documentation-modus-icon-usage--docs) for steps.</b>\n\n */\n@Component({\n  tag: 'modus-wc-input-feedback',\n  styleUrl: 'modus-wc-input-feedback.scss',\n  shadow: false,\n})\nexport class ModusWcInputFeedback {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the outer div element. */",
        "type": ": string"
      },
      {
        "name": "size",
        "description": "/**\n * A customizable feedback component used to provide additional context related to form input interactions.\n *\n * <b>To use a custom icon, this component requires Modus icons to be installed in the host application. See [Modus Icon Usage](/docs/documentation-modus-icon-usage--docs) for steps.</b>\n\n */\n@Component({\n  tag: 'modus-wc-input-feedback',\n  styleUrl: 'modus-wc-input-feedback.scss',\n  shadow: false,\n})\nexport class ModusWcInputFeedback {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the outer div element. */",
        "type": ": ModusSize"
      }
    ],
    "events": [],
    "slots": [],
    "default_values": {
      "customClass": "''",
      "icon": "''",
      "message": "''",
      "size": "'md'"
    },
    "documentation": "\n\n--- modus-wc-input-feedback.stories.ts ---\n\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { IInputFeedbackLevel } from './modus-wc-input-feedback';\nimport { ModusSize } from '../types';\n\ninterface InputFeedbackArgs {\n  'custom-class'?: string;\n  icon?: string;\n  level: IInputFeedbackLevel;\n  message?: string;\n  size?: ModusSize;\n}\n\nconst meta: Meta<InputFeedbackArgs> = {\n  title: 'Components/Forms/Input Feedback',\n  component: 'modus-wc-input-feedback',\n  args: {\n    level: 'error',\n    message: 'Uh oh. You done messed up.',\n    size: 'md',\n  },\n  argTypes: {\n    level: {\n      control: { type: 'select' },\n      options: ['error', 'info', 'success', 'warning'],\n    },\n    size: {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<InputFeedbackArgs>;\n\nconst Template: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<modus-wc-input-feedback\n  custom-class=${ifDefined(args['custom-class'])}\n  icon=${ifDefined(args.icon)}\n  level=${args.level}\n  message=${ifDefined(args.message)}\n  size=${ifDefined(args.size)}\n>\n</modus-wc-input-feedback>\n    `;\n  },\n};\n\nexport const Default: Story = { ...Template };\n\nexport const WithCustomModusIcon: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<modus-wc-input-feedback\n  custom-class=${ifDefined(args['custom-class'])}\n  icon='calendar_check'\n  level='success'\n  message='Event added to calendar!'\n  size=${ifDefined(args.size)}\n>\n</modus-wc-input-feedback>\n    `;\n  },\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-input-feedback\n  custom-class=${ifDefined(args['custom-class'])}\n  icon=${ifDefined(args.icon)}\n  level=${args.level}\n  message=${ifDefined(args.message)}\n  size=${ifDefined(args.size)}\n>\n</modus-wc-input-feedback>",
        "<modus-wc-input-feedback\n  custom-class=${ifDefined(args['custom-class'])}\n  icon='calendar_check'\n  level='success'\n  message='Event added to calendar!'\n  size=${ifDefined(args.size)}\n>\n</modus-wc-input-feedback>",
        "\n<modus-wc-input-feedback\n  custom-class=${ifDefined(args['custom-class'])}\n  icon=${ifDefined(args.icon)}\n  level=${args.level}\n  message=${ifDefined(args.message)}\n  size=${ifDefined(args.size)}\n>\n</modus-wc-input-feedback>\n    ",
        "\n<modus-wc-input-feedback\n  custom-class=${ifDefined(args['custom-class'])}\n  icon='calendar_check'\n  level='success'\n  message='Event added to calendar!'\n  size=${ifDefined(args.size)}\n>\n</modus-wc-input-feedback>\n    "
      ],
      "variants": [],
      "prop_usage": {
        "icon": [
          "calendar_check"
        ],
        "level": [
          "success"
        ],
        "message": [
          "Event added to calendar!"
        ]
      }
    },
    "tag_name": "modus-wc-input-feedback"
  },
  "modus-wc-typography": {
    "props": [
      {
        "name": "customClass",
        "description": "/**\n * A customizable typography component used to render text with different sizes, hierarchy, and weights.\n *\n * Note: When using heading elements (h1-h6), the default heading CSS styling can be accessed without modifying\n * the default size (size=\"md\") and weight (weight=\"normal\") properties. Default styling can be overridden by\n * providing your own custom values for the size or weight properties from the available options.\n */\n@Component({\n  tag: 'modus-wc-typography',\n  styleUrl: 'modus-wc-typography.scss',\n  shadow: false,\n})\nexport class ModusWCTypography {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the typography element. */",
        "type": ": string"
      },
      {
        "name": "hierarchy",
        "description": "/**\n * A customizable typography component used to render text with different sizes, hierarchy, and weights.\n *\n * Note: When using heading elements (h1-h6), the default heading CSS styling can be accessed without modifying\n * the default size (size=\"md\") and weight (weight=\"normal\") properties. Default styling can be overridden by\n * providing your own custom values for the size or weight properties from the available options.\n */\n@Component({\n  tag: 'modus-wc-typography',\n  styleUrl: 'modus-wc-typography.scss',\n  shadow: false,\n})\nexport class ModusWCTypography {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the typography element. */",
        "type": "TypographyHierarchy"
      },
      {
        "name": "size",
        "description": "/**\n * A customizable typography component used to render text with different sizes, hierarchy, and weights.\n *\n * Note: When using heading elements (h1-h6), the default heading CSS styling can be accessed without modifying\n * the default size (size=\"md\") and weight (weight=\"normal\") properties. Default styling can be overridden by\n * providing your own custom values for the size or weight properties from the available options.\n */\n@Component({\n  tag: 'modus-wc-typography',\n  styleUrl: 'modus-wc-typography.scss',\n  shadow: false,\n})\nexport class ModusWCTypography {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the typography element. */",
        "type": ": TypographySize"
      },
      {
        "name": "weight",
        "description": "/**\n * A customizable typography component used to render text with different sizes, hierarchy, and weights.\n *\n * Note: When using heading elements (h1-h6), the default heading CSS styling can be accessed without modifying\n * the default size (size=\"md\") and weight (weight=\"normal\") properties. Default styling can be overridden by\n * providing your own custom values for the size or weight properties from the available options.\n */\n@Component({\n  tag: 'modus-wc-typography',\n  styleUrl: 'modus-wc-typography.scss',\n  shadow: false,\n})\nexport class ModusWCTypography {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the typography element. */",
        "type": ": TypographyWeight"
      }
    ],
    "events": [],
    "slots": [],
    "default_values": {
      "customClass": "''",
      "hierarchy": "'p'",
      "size": "\"md\") and weight (weight=\"normal\") properties. Default styling can be overridden by\n * providing your own custom values for the size or weight properties from the available options.\n */\n@Component({\n  tag: 'modus-wc-typography',\n  styleUrl: 'modus-wc-typography.scss',\n  shadow: false,\n})\nexport class ModusWCTypography {\n  private inheritedAttributes: Attributes = {}",
      "weight": "\"normal\") properties. Default styling can be overridden by\n * providing your own custom values for the size or weight properties from the available options.\n */\n@Component({\n  tag: 'modus-wc-typography',\n  styleUrl: 'modus-wc-typography.scss',\n  shadow: false,\n})\nexport class ModusWCTypography {\n  private inheritedAttributes: Attributes = {}"
    },
    "documentation": "\n\n--- modus-wc-typography.stories.ts ---\n\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html, render } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport {\n  TypographyHierarchy,\n  TypographySize,\n  TypographyWeight,\n} from './modus-wc-typography';\n\n// Slot content was lost due to rendering issues when changing the \"variant\" attribute.\n// Because of this, each variant is rendered as a unique story below.\n\nconst content = 'The quick brown fox jumps over the lazy dog';\n\ninterface TypographyArgs {\n  'custom-class'?: string;\n  hierarchy: TypographyHierarchy;\n  size?: TypographySize;\n  weight?: TypographyWeight;\n}\n\nconst meta: Meta<TypographyArgs> = {\n  title: 'Components/Typography',\n  component: 'modus-wc-typography',\n  args: {\n    hierarchy: 'p',\n    size: 'md',\n    weight: 'normal',\n  },\n  argTypes: {\n    hierarchy: {\n      control: { type: 'select' },\n      options: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'p'],\n    },\n    size: {\n      control: { type: 'select' },\n      options: [\n        'xs',\n        'sm',\n        'md',\n        'lg',\n        'xl',\n        '2xl',\n        '3xl',\n        '4xl',\n        '5xl',\n        '6xl',\n        '7xl',\n        '8xl',\n        '9xl',\n      ],\n    },\n    weight: {\n      control: { type: 'select' },\n      options: ['light', 'normal', 'semibold', 'bold'],\n    },\n  },\n  decorators: [\n    (story) => {\n      // Create a stable container that won't be recreated on re-renders\n      const container = document.createElement('div');\n      const template = document.createElement('template');\n      template.innerHTML = content;\n\n      const renderStory = () => {\n        render(story(), container);\n\n        // Ensure slot content is present after render\n        const typography = container.querySelector('modus-wc-typography');\n        if (typography && !typography.textContent) {\n          typography.textContent = template.innerHTML;\n        }\n      };\n\n      renderStory();\n      return container;\n    },\n  ],\n};\n\nexport default meta;\n\ntype Story = StoryObj<TypographyArgs>;\n\nexport const Default: Story = {\n  render: (args) => html`\n    <modus-wc-typography\n      custom-class=${ifDefined(args['custom-class'])}\n      hierarchy=${args.hierarchy}\n      size=${ifDefined(args.size)}\n      weight=${ifDefined(args.weight)}\n    ></modus-wc-typography>\n  `,\n};\n\nexport const Heading1: Story = {\n  args: {\n    hierarchy: 'h1',\n  },\n};\n\nexport const Heading2: Story = {\n  args: {\n    hierarchy: 'h2',\n  },\n};\n\nexport const Heading3: Story = {\n  args: {\n    hierarchy: 'h3',\n  },\n};\n\nexport const Heading4: Story = {\n  args: {\n    hierarchy: 'h4',\n  },\n};\n\nexport const Heading5: Story = {\n  args: {\n    hierarchy: 'h5',\n  },\n};\n\nexport const Heading6: Story = {\n  args: {\n    hierarchy: 'h6',\n  },\n};\n\nexport const Paragraph: Story = {\n  args: {\n    hierarchy: 'p',\n  },\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-typography\n      custom-class=${ifDefined(args['custom-class'])}\n      hierarchy=${args.hierarchy}\n      size=${ifDefined(args.size)}\n      weight=${ifDefined(args.weight)}\n    ></modus-wc-typography>",
        "\n    <modus-wc-typography\n      custom-class=${ifDefined(args['custom-class'])}\n      hierarchy=${args.hierarchy}\n      size=${ifDefined(args.size)}\n      weight=${ifDefined(args.weight)}\n    ></modus-wc-typography>\n  "
      ],
      "variants": [],
      "prop_usage": {}
    },
    "tag_name": "modus-wc-typography"
  },
  "modus-wc-tooltip": {
    "props": [
      {
        "name": "content",
        "description": "/**\n * A customizable tooltip component used to create tooltips with different content.\n *\n * The tooltip can be dismissed by pressing the Escape key when hovering over it.\n * When forceOpen is enabled, the tooltip will remain open and can only be closed by setting forceOpen to false.\n */\n@Component({\n  tag: 'modus-wc-tooltip',\n  styleUrl: 'modus-wc-tooltip.scss',\n  shadow: false,\n})\nexport class ModusWcTooltip {\n  private inheritedAttributes: Attributes = {};\n  private popperInstance: PopperInstance | null = null;\n  private tooltipElement: HTMLDivElement | null = null;\n  private triggerElement: HTMLElement | null = null;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The text content of the tooltip. */",
        "type": "string"
      },
      {
        "name": "customClass",
        "description": "/**\n * A customizable tooltip component used to create tooltips with different content.\n *\n * The tooltip can be dismissed by pressing the Escape key when hovering over it.\n * When forceOpen is enabled, the tooltip will remain open and can only be closed by setting forceOpen to false.\n */\n@Component({\n  tag: 'modus-wc-tooltip',\n  styleUrl: 'modus-wc-tooltip.scss',\n  shadow: false,\n})\nexport class ModusWcTooltip {\n  private inheritedAttributes: Attributes = {};\n  private popperInstance: PopperInstance | null = null;\n  private tooltipElement: HTMLDivElement | null = null;\n  private triggerElement: HTMLElement | null = null;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The text content of the tooltip. */",
        "type": ": string"
      },
      {
        "name": "disabled",
        "description": "/**\n * A customizable tooltip component used to create tooltips with different content.\n *\n * The tooltip can be dismissed by pressing the Escape key when hovering over it.\n * When forceOpen is enabled, the tooltip will remain open and can only be closed by setting forceOpen to false.\n */\n@Component({\n  tag: 'modus-wc-tooltip',\n  styleUrl: 'modus-wc-tooltip.scss',\n  shadow: false,\n})\nexport class ModusWcTooltip {\n  private inheritedAttributes: Attributes = {};\n  private popperInstance: PopperInstance | null = null;\n  private tooltipElement: HTMLDivElement | null = null;\n  private triggerElement: HTMLElement | null = null;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The text content of the tooltip. */",
        "type": ": boolean"
      },
      {
        "name": "forceOpen",
        "description": "/**\n * A customizable tooltip component used to create tooltips with different content.\n *\n * The tooltip can be dismissed by pressing the Escape key when hovering over it.\n * When forceOpen is enabled, the tooltip will remain open and can only be closed by setting forceOpen to false.\n */\n@Component({\n  tag: 'modus-wc-tooltip',\n  styleUrl: 'modus-wc-tooltip.scss',\n  shadow: false,\n})\nexport class ModusWcTooltip {\n  private inheritedAttributes: Attributes = {};\n  private popperInstance: PopperInstance | null = null;\n  private tooltipElement: HTMLDivElement | null = null;\n  private triggerElement: HTMLElement | null = null;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The text content of the tooltip. */",
        "type": ": boolean"
      },
      {
        "name": "tooltipId",
        "description": "/**\n * A customizable tooltip component used to create tooltips with different content.\n *\n * The tooltip can be dismissed by pressing the Escape key when hovering over it.\n * When forceOpen is enabled, the tooltip will remain open and can only be closed by setting forceOpen to false.\n */\n@Component({\n  tag: 'modus-wc-tooltip',\n  styleUrl: 'modus-wc-tooltip.scss',\n  shadow: false,\n})\nexport class ModusWcTooltip {\n  private inheritedAttributes: Attributes = {};\n  private popperInstance: PopperInstance | null = null;\n  private tooltipElement: HTMLDivElement | null = null;\n  private triggerElement: HTMLElement | null = null;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The text content of the tooltip. */",
        "type": ": string"
      },
      {
        "name": "position",
        "description": "/**\n * A customizable tooltip component used to create tooltips with different content.\n *\n * The tooltip can be dismissed by pressing the Escape key when hovering over it.\n * When forceOpen is enabled, the tooltip will remain open and can only be closed by setting forceOpen to false.\n */\n@Component({\n  tag: 'modus-wc-tooltip',\n  styleUrl: 'modus-wc-tooltip.scss',\n  shadow: false,\n})\nexport class ModusWcTooltip {\n  private inheritedAttributes: Attributes = {};\n  private popperInstance: PopperInstance | null = null;\n  private tooltipElement: HTMLDivElement | null = null;\n  private triggerElement: HTMLElement | null = null;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The text content of the tooltip. */",
        "type": ": 'auto' | 'top' | 'right' | 'bottom' | 'left'"
      }
    ],
    "events": [],
    "slots": [],
    "default_values": {
      "content": "''",
      "customClass": "''",
      "disabled": "false",
      "position": "'auto'"
    },
    "documentation": "\n\n--- modus-wc-tooltip.stories.ts ---\n\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\n\ninterface TooltipArgs {\n  content?: string;\n  'custom-class'?: string;\n  disabled?: boolean;\n  'force-open'?: boolean;\n  'tooltip-id'?: string;\n  position: 'auto' | 'top' | 'right' | 'bottom' | 'left';\n}\n\nconst meta: Meta<TooltipArgs> = {\n  title: 'Components/Tooltip',\n  component: 'modus-wc-tooltip',\n  args: {\n    content: 'Tooltip content',\n    position: 'auto',\n  },\n  argTypes: {\n    position: {\n      control: { type: 'select' },\n      options: ['auto', 'top', 'right', 'left', 'bottom'],\n    },\n  },\n  parameters: {\n    docs: {\n      description: {\n        component: `\nA customizable tooltip component used to create tooltips with different content.\n\n### Features\n- **Escape Key Dismissal**: Tooltips can be dismissed by pressing the Escape key\n- **Auto-positioning**: Automatically positions the tooltip to avoid viewport edges\n- **Customizable**: Supports custom CSS classes and positioning\n\n### Keyboard Interaction\n- Press **Escape** to dismiss the tooltip while it's visible\n- The tooltip will automatically re-enable on mouse enter\n        `,\n      },\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<TooltipArgs>;\n\nconst Template: Story = {\n  parameters: {\n    actions: {\n      handles: ['dismissEscape'],\n    },\n  },\n  render: (args) => {\n    // prettier-ignore\n    return html`\n      <modus-wc-tooltip\n        content=${ifDefined(args.content)}\n        custom-class=\"${ifDefined(args['custom-class'])}\"\n        ?disabled=\"${args.disabled}\"\n        ?force-open=\"${args['force-open']}\"\n        tooltip-id=\"${ifDefined(args['tooltip-id'])}\"\n        position=${ifDefined(args.position)}\n      >\n        <modus-wc-badge>Hover</modus-wc-badge>\n      </modus-wc-tooltip>\n    `;\n  },\n};\n\nexport const Default: Story = { ...Template };\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - In 1.0 tooltip positioning was handled by Popper.js. In 2.0, positioning is handled using CSS.\n  - The \\`text\\` prop has been renamed to \\`content\\`.\n\n#### Prop Mapping\n\n| 1.0 Prop    | 2.0 Prop    | Notes                                    |\n|-------------|-------------|------------------------------------------|\n| aria-label  | aria-label  |                                          |\n| disabled    | disabled    |                                          |\n| position    | position    | Added \\`auto\\` option as default value   |\n| text        | content     |                                          |\n        `,\n      },\n    },\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  render: () => html`<div></div>`,\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-badge>Hover</modus-wc-badge>",
        "\n      <modus-wc-tooltip\n        content=${ifDefined(args.content)}\n        custom-class=\"${ifDefined(args['custom-class'])}\"\n        ?disabled=\"${args.disabled}\"\n        ?force-open=\"${args['force-open']}\"\n        tooltip-id=\"${ifDefined(args['tooltip-id'])}\"\n        position=${ifDefined(args.position)}\n      >\n        <modus-wc-badge>Hover</modus-wc-badge>\n      </modus-wc-tooltip>\n    "
      ],
      "variants": [],
      "prop_usage": {
        "class": [
          "${ifDefined(args["
        ],
        "disabled": [
          "${args.disabled}"
        ],
        "open": [
          "${args["
        ],
        "id": [
          "${ifDefined(args["
        ]
      }
    },
    "tag_name": "modus-wc-tooltip"
  },
  "modus-wc-modal": {
    "props": [
      {
        "name": "backdrop",
        "description": "/**\n * A customizable modal component used to display content in a dialog.\n *\n * The component supports a 'header', 'content', and 'footer' <slot> for injecting custom HTML\n */\n@Component({\n  tag: 'modus-wc-modal',\n  styleUrl: 'modus-wc-modal.scss',\n  shadow: false,\n})\nexport class ModusWcModal {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /**\n   * The modal's backdrop.\n   * Specify 'static' for a backdrop that doesn't close the modal when clicked outside the modal content.\n   */",
        "type": ": 'default' | 'static'"
      },
      {
        "name": "customClass",
        "description": "/**\n * A customizable modal component used to display content in a dialog.\n *\n * The component supports a 'header', 'content', and 'footer' <slot> for injecting custom HTML\n */\n@Component({\n  tag: 'modus-wc-modal',\n  styleUrl: 'modus-wc-modal.scss',\n  shadow: false,\n})\nexport class ModusWcModal {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /**\n   * The modal's backdrop.\n   * Specify 'static' for a backdrop that doesn't close the modal when clicked outside the modal content.\n   */",
        "type": ": string"
      },
      {
        "name": "fullscreen",
        "description": "/**\n * A customizable modal component used to display content in a dialog.\n *\n * The component supports a 'header', 'content', and 'footer' <slot> for injecting custom HTML\n */\n@Component({\n  tag: 'modus-wc-modal',\n  styleUrl: 'modus-wc-modal.scss',\n  shadow: false,\n})\nexport class ModusWcModal {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /**\n   * The modal's backdrop.\n   * Specify 'static' for a backdrop that doesn't close the modal when clicked outside the modal content.\n   */",
        "type": ": boolean"
      },
      {
        "name": "modalId",
        "description": "/**\n * A customizable modal component used to display content in a dialog.\n *\n * The component supports a 'header', 'content', and 'footer' <slot> for injecting custom HTML\n */\n@Component({\n  tag: 'modus-wc-modal',\n  styleUrl: 'modus-wc-modal.scss',\n  shadow: false,\n})\nexport class ModusWcModal {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /**\n   * The modal's backdrop.\n   * Specify 'static' for a backdrop that doesn't close the modal when clicked outside the modal content.\n   */",
        "type": ": string"
      },
      {
        "name": "position",
        "description": "/**\n * A customizable modal component used to display content in a dialog.\n *\n * The component supports a 'header', 'content', and 'footer' <slot> for injecting custom HTML\n */\n@Component({\n  tag: 'modus-wc-modal',\n  styleUrl: 'modus-wc-modal.scss',\n  shadow: false,\n})\nexport class ModusWcModal {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /**\n   * The modal's backdrop.\n   * Specify 'static' for a backdrop that doesn't close the modal when clicked outside the modal content.\n   */",
        "type": ": 'bottom' | 'center' | 'top'"
      },
      {
        "name": "showClose",
        "description": "/**\n * A customizable modal component used to display content in a dialog.\n *\n * The component supports a 'header', 'content', and 'footer' <slot> for injecting custom HTML\n */\n@Component({\n  tag: 'modus-wc-modal',\n  styleUrl: 'modus-wc-modal.scss',\n  shadow: false,\n})\nexport class ModusWcModal {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /**\n   * The modal's backdrop.\n   * Specify 'static' for a backdrop that doesn't close the modal when clicked outside the modal content.\n   */",
        "type": ": boolean"
      },
      {
        "name": "showFullscreenToggle",
        "description": "/**\n * A customizable modal component used to display content in a dialog.\n *\n * The component supports a 'header', 'content', and 'footer' <slot> for injecting custom HTML\n */\n@Component({\n  tag: 'modus-wc-modal',\n  styleUrl: 'modus-wc-modal.scss',\n  shadow: false,\n})\nexport class ModusWcModal {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /**\n   * The modal's backdrop.\n   * Specify 'static' for a backdrop that doesn't close the modal when clicked outside the modal content.\n   */",
        "type": ": boolean"
      }
    ],
    "events": [],
    "slots": [
      "header",
      "content",
      "footer"
    ],
    "default_values": {
      "backdrop": "'default'",
      "customClass": "''",
      "fullscreen": "false",
      "position": "'center'",
      "showClose": "true",
      "showFullscreenToggle": "false"
    },
    "documentation": "\n\n--- modus-wc-modal.stories.ts ---\n\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { generateRandomId } from '../utils';\n\ninterface ModalArgs {\n  backdrop: 'default' | 'static';\n  'custom-class'?: string;\n  fullscreen: boolean;\n  'modal-id'?: string;\n  position: 'bottom' | 'center' | 'top';\n  'show-close': boolean;\n  'show-fullscreen-toggle': boolean;\n}\n\nconst meta: Meta<ModalArgs> = {\n  title: 'Components/Modal',\n  component: 'modus-wc-modal',\n  args: {\n    backdrop: 'default',\n    'custom-class': '',\n    fullscreen: false,\n    'modal-id': 'my_modal_1',\n    position: 'center',\n    'show-close': true,\n    'show-fullscreen-toggle': false,\n  },\n  argTypes: {\n    backdrop: {\n      control: { type: 'select' },\n      options: ['default', 'static'],\n    },\n    position: {\n      control: { type: 'select' },\n      options: ['bottom', 'center', 'top'],\n    },\n  },\n  parameters: {\n    layout: 'centered',\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<ModalArgs>;\n\nexport const Default: Story = {\n  render: (args) => {\n    const modalId = `${args['modal-id']}${generateRandomId(4)}}`;\n\n    const handleModalVisibility = (action: 'show' | 'hide') => {\n      const modal = document.getElementById(modalId) as HTMLDialogElement;\n      if (modal) {\n        if (action === 'show') {\n          modal.showModal();\n        } else {\n          modal.close();\n        }\n      }\n    };\n\n    // prettier-ignore\n    return html`\n<modus-wc-button @buttonClick=${() => handleModalVisibility('show')}>\n  Open modal\n</modus-wc-button>\n<modus-wc-modal\n  aria-label=\"Example modal\"\n  custom-class=${ifDefined(args['custom-class'])}\n  fullscreen=${args.fullscreen}\n  modal-id=${modalId}\n  backdrop=${args.backdrop}\n  position=${args.position}\n  show-close=${args['show-close']}\n  show-fullscreen-toggle=${args['show-fullscreen-toggle']}\n>\n  <span slot=\"header\">Modal Title</span>\n  <span slot=\"content\"> This is sample modal content. </span>\n  <modus-wc-button slot=\"footer\" @buttonClick=${() => handleModalVisibility('hide')}>\n    Close\n  </modus-wc-button>\n</modus-wc-modal>\n    `;\n  },\n};\n\nexport const CustomWidthAndHeight: Story = {\n  render: (args) => {\n    const modalId = `${args['modal-id']}${generateRandomId(4)}}`;\n\n    const handleModalVisibility = (action: 'show' | 'hide') => {\n      const modal = document.getElementById(modalId) as HTMLDialogElement;\n      if (modal) {\n        if (action === 'show') {\n          modal.showModal();\n        } else {\n          modal.close();\n        }\n      }\n    };\n\n    // prettier-ignore\n    return html`\n<style>\n  .expanded-modal .modus-wc-modal-box {\n    width: 80%;\n    max-width: none;\n    height: 60%;\n    max-height: none;\n  }\n</style>\n<modus-wc-button @buttonClick=${() => handleModalVisibility('show')}>\n  Open modal\n</modus-wc-button>\n<modus-wc-modal\n  aria-label=\"Example modal\"\n  custom-class=\"expanded-modal\"\n  modal-id=${modalId}\n  backdrop=${ifDefined(args.backdrop)}\n  position=${ifDefined(args.position)}\n  show-close=${ifDefined(args['show-close'])}\n>\n  <span slot=\"header\">Modal Title</span>\n  <p slot=\"content\">Sample modal content.</p>\n  <modus-wc-button slot=\"footer\" @buttonClick=${() => handleModalVisibility('hide')}>\n    Close\n  </modus-wc-button>\n</modus-wc-modal>\n    `;\n  },\n};\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - Modal identification is now required via the \\`modal-id\\` prop.\n  - 2.0 requires the use of slots for a fully customizable \\`header\\`, \\`content\\`, and \\`footer\\`.\n  Primary and secondary buttons as well as \\`header-text\\` are no longer built-in.\n  - In 1.0, modals had built-in open/close state management with methods. 2.0 uses the native HTML dialog\n  element with \\`modal-id\\` to target the dialog with native \\`showModal()\\` and \\`close()\\` methods.\n\n#### Prop Mapping\n\n| 1.0 Prop                     | 2.0 Prop                | Notes                                         |\n|------------------------------|-------------------------|-----------------------------------------------|\n| aria-label                   | aria-label              |                                               |\n| backdrop                     | backdrop                |                                               |\n| fullscreen                   | fullscreen              |                                               |\n| header-text                  |                         | Not carried over, use \\`header\\` slot instead |\n| primary-button-aria-label    |                         | Not carried over, use \\`footer\\` slot instead |\n| primary-button-disabled      |                         | Not carried over, use \\`footer\\` slot instead |\n| primary-button-text          |                         | Not carried over, use \\`footer\\` slot instead |\n| secondary-button-aria-label  |                         | Not carried over, use \\`footer\\` slot instead |\n| secondary-button-disabled    |                         | Not carried over, use \\`footer\\` slot instead |\n| secondary-button-text        |                         | Not carried over, use \\`footer\\` slot instead |\n| show-fullscreen-toggle       | show-fullscreen-toggle  |                                               |\n| z-index                      |                         | Not carried over, use CSS instead             |\n\n#### Event Mapping\n\n| 1.0 Event            | 2.0 Event | Notes                                                                             |\n|----------------------|-----------|-----------------------------------------------------------------------------------|\n| closed               |           | Not carried over, use dialog \\`close()\\` event instead                            |\n| opened               |           | Not carried over, use dialog \\`showModal()\\` event instead                        |\n| primaryButtonClick   |           | Not carried over, handle with events on custom buttons in \\`footer\\` slot instead |\n| secondaryButtonClick |           | Not carried over, handle with events on custom buttons in \\`footer\\` slot instead |\n        `,\n      },\n    },\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  render: () => html`<div></div>`,\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-button @buttonClick=${() => handleModalVisibility('show')}>\n  Open modal\n</modus-wc-button>",
        "<modus-wc-button slot=\"footer\" @buttonClick=${() => handleModalVisibility('hide')}>\n    Close\n  </modus-wc-button>",
        "<modus-wc-button @buttonClick=${() => handleModalVisibility('show')}>\n  Open modal\n</modus-wc-button>",
        "<modus-wc-button slot=\"footer\" @buttonClick=${() => handleModalVisibility('hide')}>\n    Close\n  </modus-wc-button>",
        "\n<modus-wc-button @buttonClick=${() => handleModalVisibility('show')}>\n  Open modal\n</modus-wc-button>\n<modus-wc-modal\n  aria-label=\"Example modal\"\n  custom-class=${ifDefined(args['custom-class'])}\n  fullscreen=${args.fullscreen}\n  modal-id=${modalId}\n  backdrop=${args.backdrop}\n  position=${args.position}\n  show-close=${args['show-close']}\n  show-fullscreen-toggle=${args['show-fullscreen-toggle']}\n>\n  <span slot=\"header\">Modal Title</span>\n  <span slot=\"content\"> This is sample modal content. </span>\n  <modus-wc-button slot=\"footer\" @buttonClick=${() => handleModalVisibility('hide')}>\n    Close\n  </modus-wc-button>\n</modus-wc-modal>\n    "
      ],
      "variants": [],
      "prop_usage": {
        "label": [
          "Example modal"
        ],
        "slot": [
          "header",
          "content",
          "footer"
        ],
        "class": [
          "expanded-modal"
        ]
      }
    },
    "tag_name": "modus-wc-modal"
  },
  "modus-wc-autocomplete": {
    "props": [],
    "events": [],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-wc-autocomplete.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { IAutocompleteItem, IAutocompleteNoResults } from '../types';\nimport { ModusSize } from '../types';\n\n// Updated items array includes an optional \"focused\" property.\nconst items: IAutocompleteItem[] = [\n  {\n    label: 'Apple',\n    value: 'apple',\n    visibleInMenu: true,\n    focused: false,\n    disabled: false,\n    checkbox: false,\n  },\n  {\n    label: 'Banana',\n    value: 'banana',\n    visibleInMenu: true,\n    focused: false,\n    disabled: false,\n    checkbox: false,\n  },\n  {\n    label: 'Blueberry',\n    value: 'blueberry',\n    visibleInMenu: true,\n    focused: false,\n    checkbox: false,\n  },\n  {\n    label: 'Cherry',\n    value: 'cherry',\n    visibleInMenu: true,\n    focused: false,\n    checkbox: false,\n  },\n  {\n    label: 'Grape',\n    value: 'grape',\n    visibleInMenu: true,\n    focused: false,\n    checkbox: false,\n  },\n  {\n    label: 'Lemon',\n    value: 'lemon',\n    visibleInMenu: true,\n    focused: false,\n    checkbox: false,\n  },\n  {\n    label: 'Orange',\n    value: 'orange',\n    visibleInMenu: true,\n    focused: false,\n    disabled: false,\n    checkbox: false,\n  },\n  {\n    label: 'Peach',\n    value: 'peach',\n    visibleInMenu: true,\n    focused: false,\n    checkbox: false,\n  },\n  {\n    label: 'Pear',\n    value: 'pear',\n    visibleInMenu: true,\n    focused: false,\n    checkbox: false,\n  },\n  {\n    label: 'Strawberry',\n    value: 'strawberry',\n    visibleInMenu: true,\n    focused: false,\n    disabled: false,\n    checkbox: false,\n  },\n  {\n    label: 'Watermelon',\n    value: 'watermelon',\n    visibleInMenu: true,\n    focused: false,\n    disabled: false,\n    checkbox: false,\n  },\n  {\n    label: 'Pineapple',\n    value: 'pineapple',\n    visibleInMenu: true,\n    focused: false,\n    checkbox: false,\n  },\n  {\n    label: 'Kiwi',\n    value: 'kiwi',\n    visibleInMenu: true,\n    focused: false,\n    checkbox: false,\n  },\n  {\n    label: 'Mango',\n    value: 'mango',\n    visibleInMenu: true,\n    focused: false,\n    checkbox: false,\n  },\n  {\n    label: 'Papaya',\n    value: 'papaya',\n    visibleInMenu: true,\n    focused: false,\n    checkbox: false,\n  },\n  {\n    label: 'Plum',\n    value: 'plum',\n    visibleInMenu: true,\n    focused: false,\n    checkbox: false,\n  },\n  {\n    label: 'Raspberry',\n    value: 'raspberry',\n    visibleInMenu: true,\n    focused: false,\n    checkbox: false,\n  },\n  {\n    label: 'Tangerine',\n    value: 'tangerine',\n    visibleInMenu: true,\n    focused: false,\n    checkbox: false,\n  },\n];\n\ninterface AutocompleteArgs {\n  visibleItems: IAutocompleteItem[];\n  bordered?: boolean;\n  'custom-class'?: string;\n  'debounce-ms'?: number;\n  disabled?: boolean;\n  'include-clear'?: boolean;\n  'include-search'?: boolean;\n  'input-id'?: string;\n  'input-tab-index'?: number;\n  items: IAutocompleteItem[];\n  initialNavigation?: boolean;\n  label?: string;\n  'leave-menu-open'?: boolean;\n  'max-chips'?: number;\n  'min-chars': number;\n  'min-input-width'?: number;\n  'multi-select'?: boolean;\n  name?: string;\n  'no-results': IAutocompleteNoResults;\n  placeholder?: string;\n  'read-only'?: boolean;\n  required?: boolean;\n  'show-menu-on-focus'?: boolean;\n  'show-spinner'?: boolean;\n  size?: ModusSize;\n  value: string;\n  'custom-blur'?: (event: FocusEvent) => void;\n  'custom-input-change'?: (value: string) => void;\n  'custom-item-select'?: (item: IAutocompleteItem) => void;\n  'custom-key-down'?: (event: KeyboardEvent) => void;\n}\n\nconst meta: Meta<AutocompleteArgs> = {\n  title: 'Components/Forms/Autocomplete',\n  component: 'modus-wc-autocomplete',\n  args: {\n    bordered: true,\n    'debounce-ms': 300,\n    disabled: false,\n    'include-clear': false,\n    'include-search': false,\n    items: items,\n    label: 'Label',\n    'leave-menu-open': false,\n    'max-chips': 4,\n    'min-chars': 0,\n    'min-input-width': 15,\n    'multi-select': false,\n    'show-menu-on-focus': false,\n    'show-spinner': false,\n    'no-results': {\n      ariaLabel: 'No results found',\n      label: 'No results found',\n      subLabel: 'Check spelling or try a different keyword',\n    },\n    size: 'md',\n    value: '',\n  },\n  argTypes: {\n    items: {\n      description: 'Array of items for the autocomplete component',\n      table: {\n        type: {\n          detail: `\n            Interface: IAutocompleteItem\n            Properties:\n            - label (string): The display text shown for the autocomplete item\n            - selected (boolean, optional): Whether the item is currently selected\n            - focused (boolean, optional): Whether the item is focused\n            - value (string): The unique value identifier for the item\n            - visibleInMenu (boolean): Whether the item should be shown in the dropdown menu\n          `,\n        },\n      },\n    },\n    'max-chips': {\n      control: { type: 'number', min: 1, max: 10 },\n      description:\n        'Maximum number of chips to display before showing \"+N more\" button',\n    },\n    'min-input-width': {\n      control: { type: 'number', min: 10, max: 300 },\n      description:\n        'Minimum width for the text input in pixels. When chips would make input smaller, container height increases instead. Default: 20px.',\n    },\n    size: {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg'],\n    },\n    'custom-blur': {\n      description:\n        'Custom blur handler function that overrides default blur behavior',\n      table: {\n        type: { summary: '(event: FocusEvent) => void' },\n        category: 'Custom Handlers',\n      },\n    },\n    'custom-input-change': {\n      description:\n        'Custom input change handler function that overrides default input change behavior',\n      table: {\n        type: { summary: '(value: string) => void' },\n        category: 'Custom Handlers',\n      },\n    },\n    'custom-item-select': {\n      description:\n        'Custom item select handler function that overrides default item selection behavior',\n      table: {\n        type: { summary: '(item: IAutocompleteItem) => void' },\n        category: 'Custom Handlers',\n      },\n    },\n    'custom-key-down': {\n      description:\n        'Custom keydown handler function that overrides default keyboard navigation',\n      table: {\n        type: { summary: '(event: KeyboardEvent) => void' },\n        category: 'Custom Handlers',\n      },\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: [\n        'chipRemove',\n        'chipsExpansionChange',\n        'inputBlur',\n        'inputChange',\n        'inputFocus',\n        'itemSelect',\n      ],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<AutocompleteArgs>;\n\nconst Template: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<style>\n  div[id^='story--components-forms-autocomplete--default'] {\n    height: 400px;\n  }\n</style>\n<modus-wc-autocomplete\n  aria-label=\"Fruit autocomplete\"\n  ?bordered=${args.bordered}\n  custom-class=${ifDefined(args['custom-class'])}\n  debounce-ms=${ifDefined(args['debounce-ms'])}\n  ?disabled=${args.disabled}\n  ?include-clear=${args['include-clear']}\n  ?include-search=${args['include-search']}\n  input-id=${ifDefined(args['input-id'])}\n  input-tab-index=${ifDefined(args['input-tab-index'])}\n  .items=${args.items}\n  label=${ifDefined(args.label)}\n  ?leave-menu-open=${args['leave-menu-open']}\n  min-chars=${args['min-chars']}\n  min-input-width=${ifDefined(args['min-input-width'])}\n  ?multi-select=${false}\n  name=${ifDefined(args.name)}\n  .noResults=${args['no-results']}\n  placeholder=${ifDefined(args.placeholder)}\n  ?read-only=${args['read-only']}\n  ?required=${args.required}\n  ?show-menu-on-focus=${args['show-menu-on-focus']}\n  ?show-spinner=${args['show-spinner']}\n  size=${ifDefined(args.size)}\n  value=${args.value}\n></modus-wc-autocomplete>\n    `;\n  },\n};\n\nexport const Default: Story = {\n  ...Template,\n};\n\nexport const WithCustomIconSlot: Story = {\n  // prettier-ignore\n  render: (args) => html`\n<style>\n  div[id^='story--components-forms-autocomplete--with-custom-icon-slot'] {\n    height: 400px;\n  }\n</style>\n<modus-wc-autocomplete\n  aria-label=\"Autocomplete with custom icon\"\n  ?bordered=${args.bordered}\n  custom-class=${ifDefined(args['custom-class'])}\n  debounce-ms=${ifDefined(args['debounce-ms'])}\n  ?disabled=${args.disabled}\n  ?include-clear=${args['include-clear']}\n  ?include-search=${args['include-search']}\n  input-id=${ifDefined(args['input-id'])}\n  input-tab-index=${ifDefined(args['input-tab-index'])}\n  .items=${args.items}\n  label=${ifDefined(args.label)}\n  ?leave-menu-open=${args['leave-menu-open']}\n  min-chars=${args['min-chars']}\n  min-input-width=${ifDefined(args['min-input-width'])}\n  ?multi-select=${false}\n  name=${ifDefined(args.name)}\n  .noResults=${args['no-results']}\n  placeholder=${ifDefined(args.placeholder)}\n  ?read-only=${args['read-only']}\n  ?required=${args.required}\n  ?show-menu-on-focus=${args['show-menu-on-focus']}\n  ?show-spinner=${args['show-spinner']}\n  size=${ifDefined(args.size)}\n  value=${args.value}\n>\n  <modus-wc-icon slot=\"custom-icon\" name=\"heart\" size=\"sm\"></modus-wc-icon>\n</modus-wc-autocomplete>\n  `,\n  args: {\n    placeholder: 'Search fruits...',\n  },\n};\n\nexport const WithTooltips: Story = {\n  name: 'With Tooltips',\n  parameters: {\n    docs: {\n      description: {\n        story:\n          'This example demonstrates menu items with tooltips. Hover over the items to see the tooltips.',\n      },\n      source: {\n        code: `\nconst tooltipItems = [\n  {\n    label: 'Apple',\n    value: 'apple',\n    tooltipContent: 'A crisp and sweet fruit',\n    tooltipPosition: 'top',\n    visibleInMenu: true,\n    focused: false,\n  },\n  {\n    label: 'Banana',\n    value: 'banana',\n    tooltipContent: 'A tropical yellow fruit',\n    tooltipPosition: 'right',\n    visibleInMenu: true,\n    focused: false,\n  },\n  {\n    label: 'Cherry',\n    value: 'cherry',\n    tooltipContent: 'Small red stone fruit',\n    tooltipPosition: 'bottom',\n    visibleInMenu: true,\n    focused: false,\n  },\n  {\n    label: 'Grape',\n    value: 'grape',\n    tooltipContent: 'Small juicy fruit that grows in clusters',\n    tooltipPosition: 'left',\n    visibleInMenu: true,\n    focused: false,\n  },\n  {\n    label: 'Orange',\n    value: 'orange',\n    tooltipContent: 'Citrus fruit with a bright color',\n    tooltipPosition: 'top',\n    visibleInMenu: true,\n    focused: false,\n  },\n];\n<modus-wc-autocomplete\n  aria-label=\"Fruits with tooltips\"\n  leave-menu-open=\"true\"\n  placeholder=\"Search fruits\"\n  .items={tooltipItems}\n  min-chars=\"0\"\n></modus-wc-autocomplete>\n`,\n      },\n    },\n  },\n  render: () => {\n    const tooltipItems: IAutocompleteItem[] = [\n      {\n        label: 'Apple',\n        value: 'apple',\n        tooltipContent: 'A crisp and sweet fruit',\n        tooltipPosition: 'top',\n        visibleInMenu: true,\n        focused: false,\n      },\n      {\n        label: 'Banana',\n        value: 'banana',\n        tooltipContent: 'A tropical yellow fruit',\n        tooltipPosition: 'right',\n        visibleInMenu: true,\n        focused: false,\n      },\n      {\n        label: 'Cherry',\n        value: 'cherry',\n        tooltipContent: 'Small red stone fruit',\n        tooltipPosition: 'bottom',\n        visibleInMenu: true,\n        focused: false,\n      },\n      {\n        label: 'Grape',\n        value: 'grape',\n        tooltipContent: 'Small juicy fruit that grows in clusters',\n        tooltipPosition: 'left',\n        visibleInMenu: true,\n        focused: false,\n      },\n      {\n        label: 'Orange',\n        value: 'orange',\n        tooltipContent: 'Citrus fruit with a bright color',\n        tooltipPosition: 'top',\n        visibleInMenu: true,\n        focused: false,\n      },\n    ];\n\n    return html`\n      <style>\n        div[id^='story--components-forms-autocomplete--with-tooltips'] {\n          height: 400px;\n        }\n      </style>\n      <div style=\"width: 300px;\">\n        <modus-wc-autocomplete\n          aria-label=\"Fruits with tooltips\"\n          leave-menu-open=\"true\"\n          placeholder=\"Search fruits\"\n          .items=${tooltipItems}\n          min-chars=\"0\"\n        ></modus-wc-autocomplete>\n      </div>\n    `;\n  },\n};\n\nexport const MultiSelect: Story = {\n  render: (args) => {\n    // Ensure args.items is initialized\n    if (!args.items) {\n      args.items = [...items];\n    }\n    // If multi-select, set selected state for some items\n    args.items = args.items.map((item) => {\n      if (item.value === 'apple' || item.value === 'banana') {\n        return { ...item, selected: true };\n      }\n      return item;\n    });\n    // prettier-ignore\n    return html`\n<script>\n  // Initialize args.items if empty\n  if (!args.items || args.items.length === 0) {\n    args.items = [...items];\n  }\n  // If multi-select, set selected state for some items\n  args.items = items.map((item) => {\n    if (item.value === 'apple' || item.value === 'banana') {\n      return { ...item, selected: true };\n    }\n    return item;\n  });\n</script>\n<style>\ndiv[id^='story--components-forms-autocomplete--multi-select'] {\n    height: 400px;\n  }\n  .modus-wc-autocomplete-multi-select {\n    width: 480px !important;\n  }\n</style>\n<modus-wc-autocomplete\n  aria-label=\"Fruit autocomplete\"\n  ?bordered=${args.bordered}\n  custom-class=${ifDefined(args['custom-class'])}\n  debounce-ms=${ifDefined(args['debounce-ms'])}\n  ?disabled=${args.disabled}\n  ?include-clear=${args['include-clear']}\n  ?include-search=${args['include-search']}\n  input-id=${ifDefined(args['input-id'])}\n  input-tab-index=${ifDefined(args['input-tab-index'])}\n  .items=${args.items}\n  label=${ifDefined(args.label)}\n  ?leave-menu-open=${args['leave-menu-open']}\n  max-chips=${args['max-chips'] ?? 4}\n  min-chars=${args['min-chars']}\n  min-input-width=${ifDefined(args['min-input-width'])}\n  ?multi-select=${true}\n  name=${ifDefined(args.name)}\n  .noResults=${args['no-results']}\n  placeholder=${ifDefined(args.placeholder)}\n  ?read-only=${args['read-only']}\n  ?required=${args.required}\n  ?show-menu-on-focus=${args['show-menu-on-focus']}\n  size=${ifDefined(args.size)}\n  value=${args.value}\n></modus-wc-autocomplete>\n    `;\n  },\n};\n\nexport const WithSpinner: Story = {\n  render: (args) => {\n    let debounceTimer: number;\n\n    const handleInputChange = (e: CustomEvent<Event>) => {\n      if (!e.detail?.target) return;\n\n      const autocomplete = (e.target as HTMLInputElement).closest(\n        'modus-wc-autocomplete'\n      ) as Element & {\n        items: IAutocompleteItem[];\n        showSpinner: boolean;\n        value: string;\n      };\n\n      if (autocomplete) {\n        const input = e.detail.target as HTMLInputElement;\n        const searchText = input.value.toLowerCase();\n\n        // Clear previous timeout to avoid multiple API calls\n        if (debounceTimer) {\n          window.clearTimeout(debounceTimer);\n        }\n\n        // Show spinner immediately and update input value\n        autocomplete.showSpinner = true;\n\n        // Simulate an API call with a 2-second delay\n        debounceTimer = window.setTimeout(() => {\n          // Filter the master list of items to get the new results\n          const filteredItems = items.filter((item) =>\n            item.label.toLowerCase().includes(searchText)\n          );\n\n          // Update the component with the new filtered list and hide the spinner\n          autocomplete.items = filteredItems;\n          autocomplete.showSpinner = false;\n        }, 2000);\n      }\n    };\n    // prettier-ignore\n    return html`\n<script>\n        let debounceTimer: number;\n\n  const handleInputChange = (e: CustomEvent<Event>) => {\n    if (!e.detail?.target) return;\n\n    const autocomplete = (e.target as HTMLInputElement).closest(\n      'modus-wc-autocomplete'\n    ) as Element & {\n      items: IAutocompleteItem[];\n      showSpinner: boolean;\n      value: string;\n    };\n\n    if (autocomplete) {\n      const input = e.detail.target as HTMLInputElement;\n      const searchText = input.value.toLowerCase();\n\n      // Clear previous timeout to avoid multiple API calls\n      if (debounceTimer) {\n        window.clearTimeout(debounceTimer);\n      }\n\n      // Show spinner immediately and update input value\n      autocomplete.showSpinner = true;\n\n      // Simulate an API call with a 2-second delay\n      debounceTimer = window.setTimeout(() => {\n        // Filter the master list of items to get the new results\n        const filteredItems = items.filter((item) =>\n          item.label.toLowerCase().includes(searchText)\n        );\n\n        // Update the component with the new filtered list and hide the spinner\n        autocomplete.items = filteredItems;\n        autocomplete.showSpinner = false;\n      }, 2000);\n    }\n  };\n</script>\n<style>\n  div[id^='story--components-forms-autocomplete--with-spinner'] {\n    height: 400px;\n  }\n</style>\n<modus-wc-autocomplete\n  aria-label=\"Fruit autocomplete with spinner\"\n  ?bordered=${args.bordered}\n  custom-class=${ifDefined(args['custom-class'])}\n  debounce-ms=${ifDefined(args['debounce-ms'])}\n  ?disabled=${args.disabled}\n  input-id=${ifDefined(args['input-id'])}\n  input-tab-index=${ifDefined(args['input-tab-index'])}\n  .items=${args.items}\n  label=${ifDefined(args.label)}\n  ?leave-menu-open=${args['leave-menu-open']}\n  min-chars=${args['min-chars']}\n  ?multi-select=${false}\n  name=${ifDefined(args.name)}\n  placeholder=${ifDefined(args.placeholder)}\n  ?read-only=${args['read-only']}\n  ?required=${args.required}\n  ?show-menu-on-focus=${args['show-menu-on-focus']}\n  ?show-spinner=${args['show-spinner']}\n  size=${ifDefined(args.size)}\n  value=${args.value}\n  @inputChange=${handleInputChange}\n></modus-wc-autocomplete>\n    `;\n  },\n};\n\nexport const CustomMenuItems: Story = {\n  render: (args) => {\n    const originalNoResults = args['no-results'];\n    if (args['leave-menu-open'] == true) {\n      args['no-results'] = {\n        ariaLabel: '',\n        label: '',\n        subLabel: '',\n      };\n    }\n\n    const getVisibleItems = (autocomplete: Element): HTMLElement[] => {\n      const menuItems = autocomplete.querySelectorAll(\n        'modus-wc-menu-item:not([disabled])'\n      );\n      return Array.from(menuItems).filter(\n        (item: Element): item is HTMLElement => {\n          const style = window.getComputedStyle(item);\n          return style.display !== 'none' && !item.classList.contains('hidden');\n        }\n      );\n    };\n\n    const handleCustomKeyDown = (e: KeyboardEvent) => {\n      const autocomplete = (e.target as HTMLInputElement).closest(\n        'modus-wc-autocomplete'\n      ) as Element & {\n        openMenu: () => Promise<void>;\n        closeMenu: () => Promise<void>;\n        readOnly?: boolean;\n        disabled?: boolean;\n      };\n      if (!autocomplete) return;\n\n      // Don't process keyboard events when disabled or readOnly\n      if (autocomplete.disabled || autocomplete.readOnly) return;\n\n      const visibleItems = getVisibleItems(autocomplete);\n\n      // Get all button elements within visible menu items\n      const buttons = visibleItems\n        .map((item) => item.querySelector('button'))\n        .filter(Boolean) as HTMLButtonElement[];\n      const currentFocusedButton = document.activeElement as HTMLButtonElement;\n      const currentIndex = buttons.indexOf(currentFocusedButton);\n\n      switch (e.key) {\n        case 'ArrowDown': {\n          e.preventDefault();\n          // Open menu when arrow key is pressed\n          void autocomplete.openMenu();\n\n          let nextIndex = currentIndex + 1;\n          // Stop at the last item instead of wrapping\n          if (nextIndex >= buttons.length) return;\n          if (nextIndex < 0) nextIndex = 0;\n\n          buttons[nextIndex]?.focus();\n          break;\n        }\n\n        case 'ArrowUp': {\n          e.preventDefault();\n          // Open menu when arrow key is pressed\n          void autocomplete.openMenu();\n\n          let prevIndex = currentIndex - 1;\n          // Stop at the first item instead of wrapping\n          if (prevIndex < 0) return;\n\n          buttons[prevIndex]?.focus();\n          break;\n        }\n\n        case 'Enter': {\n          e.preventDefault();\n          // If a button is focused, click it\n          if (buttons.includes(currentFocusedButton)) {\n            currentFocusedButton.click();\n          }\n          const input = autocomplete.querySelector('input');\n          input?.focus();\n          break;\n        }\n\n        case 'Escape': {\n          e.preventDefault();\n          void autocomplete.closeMenu();\n          // Return focus to input\n          const input = autocomplete.querySelector('input');\n          input?.focus();\n          break;\n        }\n      }\n    };\n\n    const handleInputChange = (e: CustomEvent<Event>) => {\n      if (!e.detail?.target) return;\n\n      const autocomplete = (e.target as HTMLInputElement).closest(\n        'modus-wc-autocomplete'\n      ) as Element & { noResults: IAutocompleteNoResults };\n\n      if (autocomplete) {\n        const searchText = (\n          e.detail.target as HTMLInputElement\n        ).value.toLowerCase();\n\n        const menuItems = autocomplete?.querySelectorAll('modus-wc-menu-item');\n\n        // Clear selected state when input is empty\n        if (searchText === '') {\n          menuItems?.forEach((item) => {\n            item.removeAttribute('selected');\n          });\n        }\n\n        let hiddenCount = 0;\n        Array.from(menuItems ?? []).forEach((menuItem) => {\n          const label = menuItem.getAttribute('label')?.toLowerCase() || '';\n          if (!label.includes(searchText)) {\n            menuItem.classList.add('hidden');\n            hiddenCount++;\n          } else {\n            menuItem.classList.remove('hidden');\n          }\n        });\n\n        // Show no results if all items are hidden\n        autocomplete.noResults =\n          hiddenCount === menuItems?.length\n            ? originalNoResults\n            : { ariaLabel: '', label: '', subLabel: '' };\n\n        // Show/hide the no results element\n        const noResultsElement = autocomplete.querySelector(\n          '.no-results-item'\n        ) as HTMLElement;\n        if (noResultsElement) {\n          if (hiddenCount === menuItems?.length) {\n            noResultsElement.classList.add('visible');\n          } else {\n            noResultsElement.classList.remove('visible');\n          }\n        }\n      }\n    };\n\n    const handleItemSelect = (e: CustomEvent<{ value: string }>) => {\n      const autocomplete = (e.target as HTMLInputElement).closest(\n        'modus-wc-autocomplete'\n      ) as HTMLElement & { value: string; closeMenu: () => Promise<void> };\n\n      if (autocomplete) {\n        const selectedValue = e.detail.value;\n        autocomplete.value = selectedValue;\n        // Update selected state on menu items\n        const menuItems = autocomplete.querySelectorAll('modus-wc-menu-item');\n        menuItems.forEach((item) => {\n          if (item.getAttribute('value') === selectedValue) {\n            item.setAttribute('selected', 'true');\n          } else {\n            item.removeAttribute('selected');\n          }\n        });\n        // Close menu after selection unless leaveMenuOpen is true\n        if (!args['leave-menu-open']) {\n          void autocomplete.closeMenu();\n        }\n      }\n    };\n    // prettier-ignore\n    return html`\n<script>\nconst originalNoResults = args['no-results'];\nif (args['leave-menu-open'] == true) {\n  args['no-results'] = {\n    ariaLabel: '',\n    label: '',\n    subLabel: '',\n  };\n}\n\nconst getVisibleItems = (autocomplete: Element): HTMLElement[] => {\n  const menuItems = autocomplete.querySelectorAll(\n    'modus-wc-menu-item:not([disabled])'\n  );\n  return Array.from(menuItems).filter(\n    (item: Element): item is HTMLElement => {\n      const style = window.getComputedStyle(item);\n      return style.display !== 'none' && !item.classList.contains('hidden');\n    }\n  );\n};\n\nconst handleCustomKeyDown = (e: KeyboardEvent) => {\n  const autocomplete = (e.target as HTMLInputElement).closest(\n    'modus-wc-autocomplete'\n  ) as Element & {\n    openMenu: () => Promise<void>;\n    closeMenu: () => Promise<void>;\n    readOnly?: boolean;\n    disabled?: boolean;\n  };\n  if (!autocomplete) return;\n\n  // Don't process keyboard events when disabled or readOnly\n  if (autocomplete.disabled || autocomplete.readOnly) return;\n\n  const visibleItems = getVisibleItems(autocomplete);\n\n  // Get all button elements within visible menu items\n  const buttons = visibleItems\n    .map((item) => item.querySelector('button'))\n    .filter(Boolean) as HTMLButtonElement[];\n  const currentFocusedButton = document.activeElement as HTMLButtonElement;\n  const currentIndex = buttons.indexOf(currentFocusedButton);\n\n  switch (e.key) {\n    case 'ArrowDown': {\n      e.preventDefault();\n      // Open menu when arrow key is pressed\n      void autocomplete.openMenu();\n\n      let nextIndex = currentIndex + 1;\n      // Stop at the last item instead of wrapping\n      if (nextIndex >= buttons.length) return;\n      if (nextIndex < 0) nextIndex = 0;\n\n      buttons[nextIndex]?.focus();\n      break;\n    }\n\n    case 'ArrowUp': {\n      e.preventDefault();\n      // Open menu when arrow key is pressed\n      void autocomplete.openMenu();\n\n      let prevIndex = currentIndex - 1;\n      // Stop at the first item instead of wrapping\n      if (prevIndex < 0) return;\n\n      buttons[prevIndex]?.focus();\n      break;\n    }\n\n    case 'Enter': {\n      e.preventDefault();\n      // If a button is focused, click it\n      if (buttons.includes(currentFocusedButton)) {\n        currentFocusedButton.click();\n      }\n      break;\n    }\n\n    case 'Escape': {\n      e.preventDefault();\n      void autocomplete.closeMenu();\n      // Return focus to input\n      const input = autocomplete.querySelector('input');\n      input?.focus();\n      break;\n    }\n  }\n};\n\nconst handleInputChange = (e: CustomEvent<Event>) => {\n  if (!e.detail?.target) return;\n\n  const autocomplete = (e.target as HTMLInputElement).closest(\n    'modus-wc-autocomplete'\n  ) as Element & { noResults: IAutocompleteNoResults };\n\n  if (autocomplete) {\n    const searchText = (\n      e.detail.target as HTMLInputElement\n    ).value.toLowerCase();\n    const menuItems = autocomplete?.querySelectorAll('modus-wc-menu-item');\n\n    // Clear selected state when input is empty\n    if (searchText === '') {\n      menuItems?.forEach((item) => {\n        item.removeAttribute('selected');\n      });\n    }\n\n    let hiddenCount = 0;\n    Array.from(menuItems ?? []).forEach((menuItem) => {\n      const label = menuItem.getAttribute('label')?.toLowerCase() || '';\n      if (!label.includes(searchText)) {\n        menuItem.classList.add('hidden');\n        hiddenCount++;\n      } else {\n        menuItem.classList.remove('hidden');\n      }\n    });\n\n    // Show no results if all items are hidden\n    autocomplete.noResults =\n      hiddenCount === menuItems?.length\n        ? originalNoResults\n        : { ariaLabel: '', label: '', subLabel: '' };\n\n    // Show/hide the no results element\n    const noResultsElement = autocomplete.querySelector('.no-results-item') as HTMLElement;\n    if (noResultsElement) {\n      if (hiddenCount === menuItems?.length) {\n        noResultsElement.classList.add('visible');\n      } else {\n        noResultsElement.classList.remove('visible');\n      }\n    }\n  }\n};\n\nconst handleItemSelect = (e: CustomEvent<{ value: string }>) => {\n  const autocomplete = (e.target as HTMLInputElement).closest(\n    'modus-wc-autocomplete'\n  ) as HTMLElement & { value: string; closeMenu: () => Promise<void> };\n\n  if (autocomplete) {\n    const selectedValue = e.detail.value;\n    autocomplete.value = selectedValue;\n    // Update selected state on menu items\n    const menuItems = autocomplete.querySelectorAll('modus-wc-menu-item');\n    menuItems.forEach((item) => {\n      if (item.getAttribute('value') === selectedValue) {\n        item.setAttribute('selected', 'true');\n      } else {\n        item.removeAttribute('selected');\n      }\n    });\n    // Close menu after selection unless leaveMenuOpen is true\n    if (!args['leave-menu-open']) {\n      void autocomplete.closeMenu();\n    }\n  }\n};\n</script>\n<style>\ndiv[id^='story--components-forms-autocomplete--custom-menu-items'] {\n  height: 400px;\n}\n.modus-wc-autocomplete {\n    width: 480px !important;\n  }\n.custom-menu-content {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  width: 100%;\n}\n.content-wrapper {\n  flex: 1;\n}\n.title {\n  font-weight: 500;\n}\n.subtitle {\n  font-size: 0.875rem;\n  color: #666;\n}\nmodus-wc-menu-item.hidden {\n  display: none;\n}\n.no-results-item {\n  display: none;\n  padding: 16px;\n  text-align: center;\n}\n.no-results-item.visible {\n  display: block;\n}\n.no-results-header {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 8px;\n  margin-bottom: 8px;\n}\n.no-results-title {\n  font-weight: bold;\n}\n.no-results-header modus-wc-icon {\n  color: var(--modus-wc-color-gray-6);\n}\n\n</style>\n<modus-wc-autocomplete\n  aria-label=\"Custom menu items example\"\n  ?bordered=${args.bordered}\n  custom-class=${ifDefined(args['custom-class'])}\n  debounce-ms=${ifDefined(args['debounce-ms'])}\n  ?disabled=${args.disabled}\n  input-id=${ifDefined(args['input-id'])}\n  input-tab-index=${ifDefined(args['input-tab-index'])}\n  label=${ifDefined(args.label)}\n  ?leave-menu-open=${args['leave-menu-open']}\n  min-chars=${args['min-chars']}\n  ?multi-select=${false}\n  name=${ifDefined(args.name)}\n  .noResults=${args['no-results']}\n  placeholder=${ifDefined(args.placeholder)}\n  ?read-only=${args['read-only']}\n  ?required=${args.required}\n  ?show-menu-on-focus=${args['show-menu-on-focus']}\n  size=${ifDefined(args.size)}\n  ?show-spinner=${args['show-spinner']}\n  value=${args.value}\n  .customKeyDown=${handleCustomKeyDown}\n  @inputChange=${handleInputChange}\n  ?include-search=${true}\n>\n  <div slot=\"menu-items\">\n    <modus-wc-menu-item\n      label=\"John Doe\"\n      sub-label=\"john.doe@example.com\"\n      value=\"John Doe\"\n      @itemSelect=${handleItemSelect}\n    >\n           <div slot=\"start-icon\">\n      <modus-wc-avatar aria-label=\"Avatar\" size=\"xs\" img-src=\"https://i.pinimg.com/474x/73/54/79/7354794bf3873c3ef2666f778da4bcac.jpg\" shape=\"circle\" size=\"xs\"></modus-wc-avatar>\n      </div>\n    </modus-wc-menu-item>\n    <modus-wc-menu-item\n      label=\"Jane Smith\"\n      sub-label=\"jane.smith@example.com\"\n      value=\"Jane Smith\"\n      @itemSelect=${handleItemSelect}\n    >\n      <div slot=\"start-icon\">\n      <modus-wc-avatar aria-label=\"Avatar\" size=\"xs\" img-src=\"https://i.pinimg.com/474x/73/54/79/7354794bf3873c3ef2666f778da4bcac.jpg\" shape=\"circle\" size=\"xs\"></modus-wc-avatar>\n      </div>\n    </modus-wc-menu-item>\n    <modus-wc-menu-item\n      label=\"Bob Johnson\"\n      sub-label=\"bob.johnson@example.com\"\n      value=\"Bob Johnson\"\n      @itemSelect=${handleItemSelect}\n    >\n                <div slot=\"start-icon\">\n      <modus-wc-avatar aria-label=\"Avatar\" size=\"xs\" img-src=\"https://i.pinimg.com/474x/73/54/79/7354794bf3873c3ef2666f778da4bcac.jpg\" shape=\"circle\" size=\"xs\"></modus-wc-avatar>\n      </div>\n    </modus-wc-menu-item>\n    <modus-wc-menu-item\n      label=\"Alice Williams\"\n      sub-label=\"alice.williams@example.com\"\n      value=\"Alice Williams\"\n      @itemSelect=${handleItemSelect}\n    >\n      <div slot=\"start-icon\">\n      <modus-wc-avatar aria-label=\"Avatar\" size=\"xs\" alt=\"Example avatar\" img-src=\"https://i.pinimg.com/474x/73/54/79/7354794bf3873c3ef2666f778da4bcac.jpg\" shape=\"circle\" size=\"md\"></modus-wc-avatar>\n      </div>\n    </modus-wc-menu-item>\n    <li class=\"no-results-item\">\n      <div class=\"no-results-header\">\n        <modus-wc-icon name=\"search\" size=\"lg\"></modus-wc-icon>\n        <div class=\"no-results-title\">No results found</div>\n      </div>\n    </li>\n  </div>\n</modus-wc-autocomplete>\n    `;\n  },\n};\n\nexport const CustomEventHandlers: Story = {\n  render: (args) => {\n    interface AutocompleteElement extends HTMLElement {\n      items: IAutocompleteItem[];\n      value: string;\n      openMenu(): Promise<void>;\n      closeMenu(): Promise<void>;\n    }\n\n    // Custom keydown handler with skip navigation and escape animation\n    const customKeyDown = (e: KeyboardEvent) => {\n      const autocomplete = (e.target as HTMLInputElement).closest(\n        'modus-wc-autocomplete'\n      ) as AutocompleteElement;\n      if (!autocomplete) return;\n\n      // Prevent default for navigation keys\n      if (['ArrowDown', 'ArrowUp', 'Enter', 'Escape'].includes(e.key)) {\n        e.preventDefault();\n      }\n\n      const visibleItems = args.items.filter(\n        (item) => item.visibleInMenu && !item.disabled\n      );\n\n      switch (e.key) {\n        case 'Escape':\n          args.items = args.items.map((item) => ({\n            ...item,\n            focused: false,\n          }));\n          autocomplete.items = [...args.items];\n          void autocomplete.closeMenu();\n          // Custom: Show escape animation\n          autocomplete.style.transform = 'scale(0.98)';\n          setTimeout(() => {\n            autocomplete.style.transform = '';\n          }, 200);\n          break;\n\n        case 'ArrowDown': {\n          // Open menu if not already open\n          void autocomplete.openMenu();\n\n          const currentIndex = visibleItems.findIndex((item) => item.focused);\n          const nextIndex =\n            currentIndex < 0\n              ? 0\n              : Math.min(currentIndex + 1, visibleItems.length - 1);\n\n          // Custom: Skip every other item for faster navigation\n          const skipIndex =\n            nextIndex + 1 < visibleItems.length ? nextIndex + 1 : nextIndex;\n\n          args.items = args.items.map((item) => ({\n            ...item,\n            focused: visibleItems[skipIndex]?.value === item.value,\n          }));\n          break;\n        }\n\n        case 'ArrowUp': {\n          const currentIndex = visibleItems.findIndex((item) => item.focused);\n          const prevIndex =\n            currentIndex < 0\n              ? visibleItems.length - 1\n              : Math.max(currentIndex - 1, 0);\n\n          // Custom: Skip every other item for faster navigation\n          const skipIndex = prevIndex - 1 >= 0 ? prevIndex - 1 : prevIndex;\n\n          args.items = args.items.map((item) => ({\n            ...item,\n            focused: visibleItems[skipIndex]?.value === item.value,\n          }));\n          break;\n        }\n\n        case 'Enter': {\n          const focusedItem = visibleItems.find((item) => item.focused);\n          if (focusedItem) {\n            // For single select, clear previous selection\n            args.items = args.items.map((item) => ({\n              ...item,\n              selected: item.value === focusedItem.value,\n              focused: false,\n            }));\n            autocomplete.value = focusedItem.label;\n            void autocomplete.closeMenu();\n          }\n          break;\n        }\n\n        default:\n          return;\n      }\n\n      autocomplete.items = [...args.items];\n    };\n\n    // Custom input change handler with fuzzy character matching\n    const customInputChange = (value: string) => {\n      const autocomplete = document.querySelector(\n        'modus-wc-autocomplete'\n      ) as AutocompleteElement;\n      if (!autocomplete) return;\n\n      const searchChars = value.toLowerCase().split('');\n\n      // Custom fuzzy search: Match items that contain ALL typed characters (in any order)\n      if (value.length > 0) {\n        // Calculate match score for each item\n        const scoredItems = args.items.map((item) => {\n          const itemLower = item.label.toLowerCase();\n          let score = 0;\n          let allCharsFound = true;\n\n          // Check if all search characters exist in the item\n          for (const char of searchChars) {\n            if (itemLower.includes(char)) {\n              // Bonus points for consecutive characters\n              const charIndex = itemLower.indexOf(char);\n              if (charIndex === 0)\n                score += 3; // Start of word bonus\n              else if (itemLower[charIndex - 1] === ' ')\n                score += 2; // Start of any word\n              else score += 1;\n            } else {\n              allCharsFound = false;\n              break;\n            }\n          }\n\n          // Additional bonus for exact substring match\n          if (allCharsFound && itemLower.includes(value.toLowerCase())) {\n            score += 10;\n          }\n\n          return {\n            item,\n            score: allCharsFound ? score : -1,\n            visible: allCharsFound,\n          };\n        });\n\n        // Sort by score (highest first) and update items\n        scoredItems.sort((a, b) => b.score - a.score);\n        args.items = scoredItems.map(({ item, visible }) => ({\n          ...item,\n          visibleInMenu: visible,\n          focused: false,\n          selected: item.selected && visible,\n          // Add score as part of label for demonstration (you can remove this in production)\n          label: item.label,\n        }));\n      } else {\n        // No search text, show all items\n        args.items = args.items.map((item) => ({\n          ...item,\n          visibleInMenu: true,\n          focused: false,\n        }));\n      }\n\n      autocomplete.items = [...args.items];\n      autocomplete.value = value;\n      // Show match count in console for demonstration\n      const matchCount = args.items.filter((item) => item.visibleInMenu).length;\n      console.log(`Fuzzy search for \"${value}\": ${matchCount} matches found`);\n\n      // Show menu if there are visible items\n      const hasVisibleItems = args.items.some((item) => item.visibleInMenu);\n      if (hasVisibleItems && value.length >= args['min-chars']) {\n        void autocomplete.openMenu();\n      } else {\n        void autocomplete.closeMenu();\n      }\n    };\n\n    // Custom item select handler\n    const customItemSelect = (item: IAutocompleteItem) => {\n      const autocomplete = document.querySelector(\n        'modus-wc-autocomplete'\n      ) as AutocompleteElement;\n      if (!autocomplete) return;\n\n      // Clear previous selections for single select\n      args.items = args.items.map((menuItem) => ({\n        ...menuItem,\n        selected: menuItem.value === item.value,\n        focused: false,\n      }));\n\n      autocomplete.items = [...args.items];\n      autocomplete.value = item.label;\n      void autocomplete.closeMenu();\n    };\n\n    return html`\n      <style>\n        div[id^='story--components-forms-autocomplete--custom-event-handlers'] {\n          height: 400px;\n        }\n\n        .modus-wc-autocomplete.modus-wc-autocomplete {\n          width: 300px;\n        }\n\n        .fuzzy-info {\n          margin-top: 1rem;\n          padding: 1rem;\n          background-color: var(--modus-wc-color-info-light);\n          border-radius: 4px;\n          font-size: 0.875rem;\n        }\n      </style>\n\n      <modus-wc-autocomplete\n        aria-label=\"Custom handlers autocomplete\"\n        ?bordered=${args.bordered}\n        custom-class=${ifDefined(args['custom-class'])}\n        debounce-ms=${0}\n        ?disabled=${args.disabled}\n        ?include-clear=${args['include-clear']}\n        ?include-search=${args['include-search']}\n        input-id=${ifDefined(args['input-id'])}\n        input-tab-index=${ifDefined(args['input-tab-index'])}\n        .items=${args.items}\n        label=\"Fruit list with custom handlers\"\n        ?leave-menu-open=${args['leave-menu-open']}\n        min-chars=${args['min-chars']}\n        ?multi-select=${false}\n        name=${ifDefined(args.name)}\n        .noResults=${args['no-results']}\n        placeholder=\"Type 'bry' for Blueberry or Raspberry\"\n        ?read-only=${args['read-only']}\n        ?required=${args.required}\n        ?show-menu-on-focus=${args['show-menu-on-focus']}\n        ?show-spinner=${args['show-spinner']}\n        size=${ifDefined(args.size)}\n        value=${args.value}\n        .customKeyDown=${customKeyDown}\n        .customInputChange=${customInputChange}\n        .customItemSelect=${customItemSelect}\n      ></modus-wc-autocomplete>\n    `;\n  },\n  args: {\n    bordered: true,\n    'debounce-ms': 0, // Set to 0 to see immediate feedback\n    disabled: false,\n    'include-clear': true,\n    'include-search': true,\n    items: items,\n    'leave-menu-open': false,\n    'min-chars': 0,\n    'no-results': {\n      label: 'No fruits found',\n      subLabel: 'Try different characters',\n    },\n    placeholder: 'Search fruits...',\n    'read-only': false,\n    required: false,\n    'show-menu-on-focus': true,\n    'show-spinner': false,\n    size: 'md',\n    value: '',\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: `This example demonstrates custom event handlers with three specific behaviors:\n\n1. **Skip Navigation**: Arrow keys skip every other item for 2x faster navigation\n2. **Escape Animation**: Pressing Escape triggers a subtle scale animation\n3. **Fuzzy Character Search**: Instead of normal substring matching, this searches for items containing ALL typed characters in any order\n\nThe fuzzy search allows finding items with scattered characters:\n- Type \"pae\" to find Pine**a**ppl**e**\n- Type \"bry\" to find Blue**b**er**ry**, Straw**b**er**ry**, Rasp**b**er**ry**\n\nItems are automatically sorted by relevance with exact substring matches appearing first.`,\n      },\n    },\n  },\n};\n\nexport const WithProgrammaticControl: Story = {\n  args: {\n    ...meta.args,\n    items: items, // Explicitly set items for this story\n  },\n  render: (args) => {\n    // Type for autocomplete element with methods\n    interface AutocompleteElement extends HTMLElement {\n      selectItem(item: IAutocompleteItem | null): Promise<void>;\n      openMenu(): Promise<void>;\n      closeMenu(): Promise<void>;\n      toggleMenu(): Promise<void>;\n      focusInput(): Promise<void>;\n      clearInput(): Promise<void>;\n    }\n\n    // Handler functions that will be attached to buttons\n    const handleSelectApple = async () => {\n      const autocomplete = document.getElementById(\n        'programmatic-autocomplete'\n      ) as AutocompleteElement;\n      if (autocomplete) {\n        const appleItem = items.find((item) => item.value === 'apple') || null;\n        await autocomplete.selectItem(appleItem);\n      }\n    };\n\n    const handleSelectNull = async () => {\n      const autocomplete = document.getElementById(\n        'programmatic-autocomplete'\n      ) as AutocompleteElement;\n      if (autocomplete) {\n        await autocomplete.selectItem(null);\n      }\n    };\n\n    const handleOpenMenu = async () => {\n      const autocomplete = document.getElementById(\n        'programmatic-autocomplete'\n      ) as AutocompleteElement;\n      if (autocomplete) {\n        await autocomplete.openMenu();\n      }\n    };\n\n    const handleCloseMenu = async () => {\n      const autocomplete = document.getElementById(\n        'programmatic-autocomplete'\n      ) as AutocompleteElement;\n      if (autocomplete) {\n        await autocomplete.closeMenu();\n      }\n    };\n\n    const handleToggleMenu = async () => {\n      const autocomplete = document.getElementById(\n        'programmatic-autocomplete'\n      ) as AutocompleteElement;\n      if (autocomplete) {\n        await autocomplete.toggleMenu();\n      }\n    };\n\n    const handleFocusInput = async () => {\n      const autocomplete = document.getElementById(\n        'programmatic-autocomplete'\n      ) as AutocompleteElement;\n      if (autocomplete) {\n        await autocomplete.focusInput();\n      }\n    };\n\n    const handleClearInput = async () => {\n      const autocomplete = document.getElementById(\n        'programmatic-autocomplete'\n      ) as AutocompleteElement;\n      if (autocomplete) {\n        await autocomplete.clearInput();\n      }\n    };\n\n    // Attach handlers to window for inline onclick\n    interface WindowWithHandlers extends Window {\n      handleSelectApple?: () => Promise<void>;\n      handleSelectNull?: () => Promise<void>;\n      handleOpenMenu?: () => Promise<void>;\n      handleCloseMenu?: () => Promise<void>;\n      handleToggleMenu?: () => Promise<void>;\n      handleFocusInput?: () => Promise<void>;\n      handleClearInput?: () => Promise<void>;\n    }\n\n    const windowWithHandlers = window as WindowWithHandlers;\n    windowWithHandlers.handleSelectApple = handleSelectApple;\n    windowWithHandlers.handleSelectNull = handleSelectNull;\n    windowWithHandlers.handleOpenMenu = handleOpenMenu;\n    windowWithHandlers.handleCloseMenu = handleCloseMenu;\n    windowWithHandlers.handleToggleMenu = handleToggleMenu;\n    windowWithHandlers.handleFocusInput = handleFocusInput;\n    windowWithHandlers.handleClearInput = handleClearInput;\n\n    return html`\n      <style>\n        div[id^='story--components-forms-autocomplete--with-programmatic-control'] {\n          height: 500px;\n        }\n\n        .controls-content {\n          display: flex;\n          flex-direction: column;\n          gap: 1rem;\n        }\n        .control-group {\n          margin-bottom: 1rem;\n        }\n        .control-group label {\n          display: block;\n          margin-bottom: 0.5rem;\n          font-weight: 600;\n        }\n        .button-row {\n          display: flex;\n          gap: 0.5rem;\n          flex-wrap: wrap;\n        }\n      </style>\n\n      <modus-wc-card class=\"controls-card\">\n        <div class=\"controls-content\">\n          <h3>Programmatic Control Methods</h3>\n\n          <div class=\"control-group\">\n            <label>Selection Methods:</label>\n            <div class=\"button-row\">\n              <modus-wc-button\n                onclick=\"window.handleSelectApple()\"\n                variant=\"primary\"\n                size=\"sm\"\n              >\n                Select Apple\n              </modus-wc-button>\n              <modus-wc-button\n                onclick=\"window.handleSelectNull()\"\n                variant=\"secondary\"\n                size=\"sm\"\n              >\n                Clear Selection\n              </modus-wc-button>\n            </div>\n          </div>\n\n          <div class=\"control-group\">\n            <label>Menu Control Methods:</label>\n            <div class=\"button-row\">\n              <modus-wc-button\n                onclick=\"window.handleOpenMenu()\"\n                variant=\"primary\"\n                size=\"sm\"\n              >\n                Open Menu\n              </modus-wc-button>\n              <modus-wc-button\n                onclick=\"window.handleCloseMenu()\"\n                variant=\"primary\"\n                size=\"sm\"\n              >\n                Close Menu\n              </modus-wc-button>\n              <modus-wc-button\n                onclick=\"window.handleToggleMenu()\"\n                variant=\"secondary\"\n                size=\"sm\"\n              >\n                Toggle Menu\n              </modus-wc-button>\n            </div>\n          </div>\n\n          <div class=\"control-group\">\n            <label>Input Control Methods:</label>\n            <div class=\"button-row\">\n              <modus-wc-button\n                onclick=\"window.handleFocusInput()\"\n                variant=\"primary\"\n                size=\"sm\"\n              >\n                Focus Input\n              </modus-wc-button>\n              <modus-wc-button\n                onclick=\"window.handleClearInput()\"\n                variant=\"danger\"\n                size=\"sm\"\n              >\n                Clear All\n              </modus-wc-button>\n            </div>\n          </div>\n        </div>\n      </modus-wc-card>\n\n      <modus-wc-autocomplete\n        id=\"programmatic-autocomplete\"\n        aria-label=\"Programmatic control demo\"\n        ?bordered=${args.bordered}\n        custom-class=${ifDefined(args['custom-class'])}\n        debounce-ms=${ifDefined(args['debounce-ms'])}\n        ?disabled=${args.disabled}\n        ?include-clear=${args['include-clear']}\n        ?include-search=${args['include-search']}\n        input-id=${ifDefined(args['input-id'])}\n        input-tab-index=${ifDefined(args['input-tab-index'])}\n        .items=${args.items}\n        label=\"Try the control buttons above\"\n        ?leave-menu-open=${args['leave-menu-open']}\n        max-chips=${args['max-chips'] ?? 4}\n        min-chars=${args['min-chars']}\n        min-input-width=${ifDefined(args['min-input-width'])}\n        ?multi-select=${args['multi-select']}\n        name=${ifDefined(args.name)}\n        .noResults=${args['no-results']}\n        placeholder=\"Use buttons above to control\"\n        ?read-only=${args['read-only']}\n        ?required=${args.required}\n        ?show-menu-on-focus=${args['show-menu-on-focus']}\n        ?show-spinner=${args['show-spinner']}\n        size=${ifDefined(args.size)}\n        value=${args.value}\n      ></modus-wc-autocomplete>\n    `;\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: `\n## Public Methods\n\nThe autocomplete component exposes several methods that can be called programmatically:\n\n### selectItem(item: IAutocompleteItem | null): Promise<void>\nProgrammatically select an item. Pass \\`null\\` to clear selection.\n\n\\`\\`\\`javascript\nconst autocomplete = document.querySelector('modus-wc-autocomplete');\nconst item = { label: 'Apple', value: 'apple', visibleInMenu: true };\nawait autocomplete.selectItem(item);\n\\`\\`\\`\n\n### openMenu(): Promise<void>\nProgrammatically open the dropdown menu.\n\n\\`\\`\\`javascript\nawait autocomplete.openMenu();\n\\`\\`\\`\n\n### closeMenu(): Promise<void>\nProgrammatically close the dropdown menu.\n\n\\`\\`\\`javascript\nawait autocomplete.closeMenu();\n\\`\\`\\`\n\n### toggleMenu(): Promise<void>\nToggle the dropdown menu open/closed.\n\n\\`\\`\\`javascript\nawait autocomplete.toggleMenu();\n\\`\\`\\`\n\n### focusInput(): Promise<void>\nSet focus to the input element.\n\n\\`\\`\\`javascript\nawait autocomplete.focusInput();\n\\`\\`\\`\n\n### clearInput(): Promise<void>\nClear the input value and all selections.\n\n\\`\\`\\`javascript\nawait autocomplete.clearInput();\n\\`\\`\\`\n\n        `,\n      },\n    },\n  },\n};\n\nexport const DynamicOptions: Story = {\n  render: (args) => {\n    const defaultFruits = [\n      { label: 'Apple', value: 'apple', visibleInMenu: true },\n      { label: 'Banana', value: 'banana', visibleInMenu: true },\n      { label: 'Orange', value: 'orange', visibleInMenu: true },\n      { label: 'Strawberry', value: 'strawberry', visibleInMenu: true },\n    ];\n\n    // Extended dataset that will be searched when typing\n    const allFruits = [\n      ...defaultFruits,\n      { label: 'Blackberry', value: 'blackberry', visibleInMenu: true },\n      { label: 'Blueberry', value: 'blueberry', visibleInMenu: true },\n      { label: 'Cherry', value: 'cherry', visibleInMenu: true },\n      { label: 'Cranberry', value: 'cranberry', visibleInMenu: true },\n      { label: 'Fig', value: 'fig', visibleInMenu: true },\n      { label: 'Grape', value: 'grape', visibleInMenu: true },\n      { label: 'Kiwi', value: 'kiwi', visibleInMenu: true },\n      { label: 'Lemon', value: 'lemon', visibleInMenu: true },\n      { label: 'Lime', value: 'lime', visibleInMenu: true },\n      { label: 'Mango', value: 'mango', visibleInMenu: true },\n      { label: 'Melon', value: 'melon', visibleInMenu: true },\n      { label: 'Peach', value: 'peach', visibleInMenu: true },\n      { label: 'Pineapple', value: 'pineapple', visibleInMenu: true },\n      { label: 'Raspberry', value: 'raspberry', visibleInMenu: true },\n      { label: 'Watermelon', value: 'watermelon', visibleInMenu: true },\n    ];\n\n    const handleInputChange = (e: CustomEvent<Event>) => {\n      if (!e.detail?.target) return;\n\n      const autocomplete = (e.target as HTMLInputElement).closest(\n        'modus-wc-autocomplete'\n      );\n\n      if (autocomplete) {\n        const input = e.detail.target as HTMLInputElement;\n        const searchText = input.value.toLowerCase();\n\n        if (searchText === '') {\n          autocomplete.items = [...defaultFruits];\n          autocomplete.value = input.value;\n          return;\n        }\n\n        autocomplete.showSpinner = true;\n        setTimeout(() => {\n          const filteredFruits = allFruits.filter((fruit) =>\n            fruit.label.toLowerCase().includes(searchText)\n          );\n\n          autocomplete.items = filteredFruits;\n          autocomplete.showSpinner = false;\n        }, 1000);\n\n        autocomplete.value = input.value;\n      }\n    };\n\n    const handleItemSelect = (e: CustomEvent<IAutocompleteItem>) => {\n      const autocomplete = (e.target as HTMLInputElement).closest(\n        'modus-wc-autocomplete'\n      );\n\n      if (autocomplete) {\n        const label = e.detail.label;\n        if (label) {\n          autocomplete.value = label;\n        }\n      }\n    };\n\n    return html`\n      <style>\n        div[id^='story--components-forms-autocomplete--dynamic-options'] {\n          height: 400px;\n        }\n      </style>\n      <script>\n          const defaultFruits = [\n          { label: 'Apple', value: 'apple', visibleInMenu: true },\n          { label: 'Banana', value: 'banana', visibleInMenu: true },\n          { label: 'Orange', value: 'orange', visibleInMenu: true },\n          { label: 'Strawberry', value: 'strawberry', visibleInMenu: true },\n        ];\n\n        // Extended dataset that will be searched when typing\n        const allFruits = [\n          ...defaultFruits,\n          { label: 'Blackberry', value: 'blackberry', visibleInMenu: true },\n          { label: 'Blueberry', value: 'blueberry', visibleInMenu: true },\n          { label: 'Cherry', value: 'cherry', visibleInMenu: true },\n          { label: 'Cranberry', value: 'cranberry', visibleInMenu: true },\n          { label: 'Fig', value: 'fig', visibleInMenu: true },\n          { label: 'Grape', value: 'grape', visibleInMenu: true },\n          { label: 'Kiwi', value: 'kiwi', visibleInMenu: true },\n          { label: 'Lemon', value: 'lemon', visibleInMenu: true },\n          { label: 'Lime', value: 'lime', visibleInMenu: true },\n          { label: 'Mango', value: 'mango', visibleInMenu: true },\n          { label: 'Melon', value: 'melon', visibleInMenu: true },\n          { label: 'Peach', value: 'peach', visibleInMenu: true },\n          { label: 'Pineapple', value: 'pineapple', visibleInMenu: true },\n          { label: 'Raspberry', value: 'raspberry', visibleInMenu: true },\n          { label: 'Watermelon', value: 'watermelon', visibleInMenu: true },\n        ];\n\n        const handleInputChange = (e: CustomEvent<Event>) => {\n          if (!e.detail?.target) return;\n\n          const autocomplete = (e.target as HTMLInputElement).closest(\n            'modus-wc-autocomplete'\n          );\n\n          if (autocomplete) {\n            const input = e.detail.target as HTMLInputElement;\n            const searchText = input.value.toLowerCase();\n\n            // // If empty, show default fruits again\n            if (searchText === '') {\n              autocomplete.items = [...defaultFruits];\n              autocomplete.value = input.value;\n              return;\n            }\n\n            // Show spinner while \"loading\" data\n            autocomplete.showSpinner = true;\n\n            // Simulate API call delay with setTimeout\n            setTimeout(() => {\n              const filteredFruits = allFruits.filter((fruit) =>\n                fruit.label.toLowerCase().includes(searchText)\n              );\n\n              // Update the items with the \"API response\"\n              autocomplete.items = filteredFruits;\n\n              // Hide spinner after \"loading\" completes\n              autocomplete.showSpinner = false;\n            }, 1000);\n\n            autocomplete.value = input.value;\n          }\n        };\n\n        const handleItemSelect = (e: CustomEvent<IAutocompleteItem>) => {\n          const autocomplete = (e.target as HTMLInputElement).closest(\n            'modus-wc-autocomplete'\n          );\n\n          if (autocomplete) {\n            const label = e.detail.label;\n            if (label) {\n              autocomplete.value = label;\n            }\n          }\n        };\n      </script>\n      <modus-wc-autocomplete\n        aria-label=\"Dynamic fruits autocomplete\"\n        ?bordered=${args.bordered}\n        custom-class=${ifDefined(args['custom-class'])}\n        debounce-ms=${ifDefined(args['debounce-ms'])}\n        ?disabled=${args.disabled}\n        input-id=${ifDefined(args['input-id'])}\n        input-tab-index=${ifDefined(args['input-tab-index'])}\n        .items=${defaultFruits}\n        label=${ifDefined(args.label)}\n        ?leave-menu-open=${args['leave-menu-open']}\n        min-chars=${0}\n        ?multi-select=${false}\n        name=${ifDefined(args.name)}\n        .noResults=${args['no-results']}\n        placeholder=\"Type to search fruits...\"\n        ?read-only=${args['read-only']}\n        ?required=${args.required}\n        ?show-menu-on-focus=${true}\n        size=${ifDefined(args.size)}\n        value=${args.value}\n        @inputChange=${handleInputChange}\n        @itemSelect=${handleItemSelect}\n      ></modus-wc-autocomplete>\n    `;\n  },\n};\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - In 1.0 input state was maintained by the component. 2.0 components encourage users to follow a controlled\n  input model. See the Form Inputs [documentation]([Angular](?path=/docs/documentation-form-inputs--docs) for\n  additional info and examples.\n  - To handle updating items in 2.0, simply create a new array of items and bind it to the \\`items\\` prop. The 1.0 prop\n  \\`filter-options\\` is no longer necessary.\n  - Size values have changed from verbose names (\\`small\\`, \\`medium\\`, \\`large\\`) to abbreviations (\\`sm\\`, \\`md\\`, \\`lg\\`).\n\n#### Prop Mapping\n\n| 1.0 Prop                      | 2.0 Prop            | Notes                                                       |\n|-------------------------------|---------------------|-------------------------------------------------------------|\n| aria-label                    | aria-label          |                                                             |\n| clearable                     |                     | Upcoming feature                                            |\n| disabled                      | disabled            |                                                             |\n| disable-close-on-select       | leave-menu-open     |                                                             |\n| dropdown-max-height           |                     | Not carried over, use CSS instead                           |\n| dropdown-z-index              |                     | Not carried over, use CSS instead                           |\n| error-text                    | feedback.message    | Use feedback level                                          |\n| filter-options                |                     | Rebind options                                              |\n| include-search-icon           |                     | Coming soon                                                 |\n| label                         | label               |                                                             |\n| loading                       |                     | Upcoming feature                                            |\n| multiple                      | multi-select        |                                                             |\n| no-results-found-text         | no-results.label    |                                                             |\n| no-results-found-subtext      | no-results.subLabel |                                                             |\n| options                       | items               |                                                             |\n| placeholder                   | placeholder         |                                                             |\n| read-only                     | read-only           |                                                             |\n| required                      | required            |                                                             |\n| show-no-results-found-message |                     | Not carried over, use \\`no-results\\` prop                   |\n| show-options-on-focus         |                     | Not carried over                                            |\n| size                          | size                | \\`small\\` \u2192 \\`sm\\`, \\`medium\\` \u2192 \\`md\\`, \\`large\\` \u2192 \\`lg\\` |\n| value                         | value               |                                                             |\n\n#### Event Mapping\n\n| 1.0 Event   | 2.0 Event   | Notes            |\n|-------------|-------------|------------------|\n| optionSelected ||\n| selectionsChanged ||\n| valueChange | inputChange |                  |\n\n#### Interfaces\n\n##### 1.0\n\n\\`\\`\\`typescript\ninterface ModusAutocompleteOption {\n  id: string;\n  value: string;\n}\n\\`\\`\\`\n\n##### 2.0\n\n\\`\\`\\`typescript\ninterface IAutocompleteItem {\n  label: string;\n  selected?: boolean;\n  value: string;\n  visibleInMenu: boolean;\n}\n\\`\\`\\`\n        `,\n      },\n    },\n    // To hide the actual story rendering and only show docs:\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  // Simple render function or leave it empty\n  render: () => html`<div></div>`,\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-autocomplete\n  aria-label=\"Fruit autocomplete\"\n  ?bordered=${args.bordered}\n  custom-class=${ifDefined(args['custom-class'])}\n  debounce-ms=${ifDefined(args['debounce-ms'])}\n  ?disabled=${args.disabled}\n  ?include-clear=${args['include-clear']}\n  ?include-search=${args['include-search']}\n  input-id=${ifDefined(args['input-id'])}\n  input-tab-index=${ifDefined(args['input-tab-index'])}\n  .items=${args.items}\n  label=${ifDefined(args.label)}\n  ?leave-menu-open=${args['leave-menu-open']}\n  min-chars=${args['min-chars']}\n  min-input-width=${ifDefined(args['min-input-width'])}\n  ?multi-select=${false}\n  name=${ifDefined(args.name)}\n  .noResults=${args['no-results']}\n  placeholder=${ifDefined(args.placeholder)}\n  ?read-only=${args['read-only']}\n  ?required=${args.required}\n  ?show-menu-on-focus=${args['show-menu-on-focus']}\n  ?show-spinner=${args['show-spinner']}\n  size=${ifDefined(args.size)}\n  value=${args.value}\n></modus-wc-autocomplete>",
        "<modus-wc-icon slot=\"custom-icon\" name=\"heart\" size=\"sm\"></modus-wc-icon>",
        "<modus-wc-autocomplete\n  aria-label=\"Fruits with tooltips\"\n  leave-menu-open=\"true\"\n  placeholder=\"Search fruits\"\n  .items={tooltipItems}\n  min-chars=\"0\"\n></modus-wc-autocomplete>",
        "<modus-wc-autocomplete\n          aria-label=\"Fruits with tooltips\"\n          leave-menu-open=\"true\"\n          placeholder=\"Search fruits\"\n          .items=${tooltipItems}\n          min-chars=\"0\"\n        ></modus-wc-autocomplete>",
        "<modus-wc-autocomplete\n  aria-label=\"Fruit autocomplete\"\n  ?bordered=${args.bordered}\n  custom-class=${ifDefined(args['custom-class'])}\n  debounce-ms=${ifDefined(args['debounce-ms'])}\n  ?disabled=${args.disabled}\n  ?include-clear=${args['include-clear']}\n  ?include-search=${args['include-search']}\n  input-id=${ifDefined(args['input-id'])}\n  input-tab-index=${ifDefined(args['input-tab-index'])}\n  .items=${args.items}\n  label=${ifDefined(args.label)}\n  ?leave-menu-open=${args['leave-menu-open']}\n  max-chips=${args['max-chips'] ?? 4}\n  min-chars=${args['min-chars']}\n  min-input-width=${ifDefined(args['min-input-width'])}\n  ?multi-select=${true}\n  name=${ifDefined(args.name)}\n  .noResults=${args['no-results']}\n  placeholder=${ifDefined(args.placeholder)}\n  ?read-only=${args['read-only']}\n  ?required=${args.required}\n  ?show-menu-on-focus=${args['show-menu-on-focus']}\n  size=${ifDefined(args.size)}\n  value=${args.value}\n></modus-wc-autocomplete>"
      ],
      "variants": [
        "secondary",
        "primary",
        "danger"
      ],
      "prop_usage": {
        "label": [
          "Fruit autocomplete",
          "Autocomplete with custom icon",
          "Fruits with tooltips",
          "Fruit autocomplete with spinner",
          "Custom menu items example",
          "John Doe",
          "john.doe@example.com",
          "Avatar",
          "Jane Smith",
          "jane.smith@example.com",
          "Bob Johnson",
          "bob.johnson@example.com",
          "Alice Williams",
          "alice.williams@example.com",
          "Custom handlers autocomplete",
          "Fruit list with custom handlers",
          "Programmatic control demo",
          "Try the control buttons above",
          "Dynamic fruits autocomplete"
        ],
        "slot": [
          "custom-icon",
          "menu-items",
          "start-icon"
        ],
        "name": [
          "heart",
          "search"
        ],
        "size": [
          "sm",
          "xs",
          "md",
          "lg"
        ],
        "open": [
          "true"
        ],
        "placeholder": [
          "Search fruits",
          "Type ",
          "Use buttons above to control",
          "Type to search fruits..."
        ],
        "chars": [
          "0"
        ],
        "style": [
          "width: 300px;"
        ],
        "value": [
          "John Doe",
          "Jane Smith",
          "Bob Johnson",
          "Alice Williams"
        ],
        "src": [
          "https://i.pinimg.com/474x/73/54/79/7354794bf3873c3ef2666f778da4bcac.jpg"
        ],
        "shape": [
          "circle"
        ],
        "alt": [
          "Example avatar"
        ],
        "class": [
          "no-results-item",
          "no-results-header",
          "no-results-title",
          "controls-card",
          "controls-content",
          "control-group",
          "button-row"
        ],
        "onclick": [
          "window.handleSelectApple()",
          "window.handleSelectNull()",
          "window.handleOpenMenu()",
          "window.handleCloseMenu()",
          "window.handleToggleMenu()",
          "window.handleFocusInput()",
          "window.handleClearInput()"
        ],
        "variant": [
          "primary",
          "secondary",
          "danger"
        ],
        "id": [
          "programmatic-autocomplete"
        ]
      }
    },
    "tag_name": "modus-wc-autocomplete"
  },
  "modus-wc-skeleton": {
    "props": [
      {
        "name": "customClass",
        "description": "/**\n * A customizable skeleton component used to create skeletons of various sizes and shapes\n */\n@Component({\n  tag: 'modus-wc-skeleton',\n  styleUrl: 'modus-wc-skeleton.scss',\n  shadow: false,\n})\nexport class ModusWcSkeleton {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */",
        "type": ": string"
      },
      {
        "name": "height",
        "description": "/**\n * A customizable skeleton component used to create skeletons of various sizes and shapes\n */\n@Component({\n  tag: 'modus-wc-skeleton',\n  styleUrl: 'modus-wc-skeleton.scss',\n  shadow: false,\n})\nexport class ModusWcSkeleton {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */",
        "type": "string"
      },
      {
        "name": "shape",
        "description": "/**\n * A customizable skeleton component used to create skeletons of various sizes and shapes\n */\n@Component({\n  tag: 'modus-wc-skeleton',\n  styleUrl: 'modus-wc-skeleton.scss',\n  shadow: false,\n})\nexport class ModusWcSkeleton {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */",
        "type": ": 'circle' | 'rectangle'"
      },
      {
        "name": "width",
        "description": "/**\n * A customizable skeleton component used to create skeletons of various sizes and shapes\n */\n@Component({\n  tag: 'modus-wc-skeleton',\n  styleUrl: 'modus-wc-skeleton.scss',\n  shadow: false,\n})\nexport class ModusWcSkeleton {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */",
        "type": "string"
      }
    ],
    "events": [],
    "slots": [],
    "default_values": {
      "customClass": "''",
      "height": "'var(--modus-wc-line-height-md)'",
      "shape": "'rectangle'",
      "width": "'100%'"
    },
    "documentation": "\n\n--- modus-wc-skeleton.stories.ts ---\n\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\n\ninterface SkeletonArgs {\n  'custom-class'?: string;\n  height?: string;\n  shape?: 'circle' | 'rectangle';\n  width?: string;\n}\n\nconst meta: Meta<SkeletonArgs> = {\n  title: 'Components/Skeleton',\n  component: 'modus-wc-skeleton',\n  args: {\n    'custom-class': '',\n    height: '1.5rem',\n    shape: 'rectangle',\n    width: '100%',\n  },\n  argTypes: {\n    shape: {\n      control: {\n        type: 'select',\n      },\n      options: ['circle', 'rectangle'],\n    },\n  },\n  parameters: {\n    layout: 'padded',\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<SkeletonArgs>;\n\nexport const Default: Story = {\n  render: (args) => {\n    return html`\n      <modus-wc-skeleton\n        custom-class=${ifDefined(args['custom-class'])}\n        height=${ifDefined(args.height)}\n        shape=${ifDefined(args.shape)}\n        width=${ifDefined(args.width)}\n      ></modus-wc-skeleton>\n    `;\n  },\n};\n\nexport const Circle: Story = {\n  render: () => {\n    return html`\n      <modus-wc-skeleton\n        height=\"5rem\"\n        shape=\"circle\"\n        width=\"5rem\"\n      ></modus-wc-skeleton>\n    `;\n  },\n};\n\nexport const Square: Story = {\n  render: () => {\n    return html`\n      <modus-wc-skeleton height=\"5rem\" width=\"5rem\"></modus-wc-skeleton>\n    `;\n  },\n};\n\nexport const Composed: Story = {\n  render: () => {\n    // prettier-ignore\n    return html`\n<style>\n  .skeleton-container {\n    width: 13rem;\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n  }\n\n  .skeleton-profile {\n    display: flex;\n    gap: 1rem;\n  }\n\n  .skeleton-text {\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n  }\n</style>\n<div class=\"skeleton-container\">\n  <div class=\"skeleton-profile\">\n    <modus-wc-skeleton\n      height=\"4rem\"\n      shape=\"circle\"\n      width=\"4rem\"\n    ></modus-wc-skeleton>\n    <div class=\"skeleton-text\">\n      <modus-wc-skeleton width=\"5rem\"></modus-wc-skeleton>\n      <modus-wc-skeleton width=\"7rem\"></modus-wc-skeleton>\n    </div>\n  </div>\n  <modus-wc-skeleton height=\"8rem\"></modus-wc-skeleton>\n</div>\n    `;\n  },\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-skeleton\n        custom-class=${ifDefined(args['custom-class'])}\n        height=${ifDefined(args.height)}\n        shape=${ifDefined(args.shape)}\n        width=${ifDefined(args.width)}\n      ></modus-wc-skeleton>",
        "<modus-wc-skeleton\n        height=\"5rem\"\n        shape=\"circle\"\n        width=\"5rem\"\n      ></modus-wc-skeleton>",
        "<modus-wc-skeleton height=\"5rem\" width=\"5rem\"></modus-wc-skeleton>",
        "<modus-wc-skeleton\n      height=\"4rem\"\n      shape=\"circle\"\n      width=\"4rem\"\n    ></modus-wc-skeleton>",
        "<modus-wc-skeleton width=\"5rem\"></modus-wc-skeleton>"
      ],
      "variants": [],
      "prop_usage": {
        "height": [
          "5rem",
          "4rem",
          "8rem"
        ],
        "shape": [
          "circle"
        ],
        "width": [
          "5rem",
          "4rem",
          "7rem"
        ],
        "class": [
          "skeleton-container",
          "skeleton-profile",
          "skeleton-text"
        ]
      }
    },
    "tag_name": "modus-wc-skeleton"
  },
  "modus-wc-side-navigation": {
    "props": [
      {
        "name": "collapseOnClickOutside",
        "description": "/**\n * A customizable side navigation component for organizing primary navigation and content areas in an application.\n */\n@Component({\n  tag: 'modus-wc-side-navigation',\n  styleUrl: 'modus-wc-side-navigation.scss',\n  shadow: false,\n})\nexport class ModusWcSideNavigation {\n  private inheritedAttributes: Attributes = {};\n  private minWidth = '4rem';\n  private navRef?: HTMLElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Whether the side navigation should collapse when clicking outside of it. */",
        "type": ""
      },
      {
        "name": "customClass",
        "description": "/**\n * A customizable side navigation component for organizing primary navigation and content areas in an application.\n */\n@Component({\n  tag: 'modus-wc-side-navigation',\n  styleUrl: 'modus-wc-side-navigation.scss',\n  shadow: false,\n})\nexport class ModusWcSideNavigation {\n  private inheritedAttributes: Attributes = {};\n  private minWidth = '4rem';\n  private navRef?: HTMLElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Whether the side navigation should collapse when clicking outside of it. */",
        "type": ": string"
      },
      {
        "name": "expanded",
        "description": "/**\n * A customizable side navigation component for organizing primary navigation and content areas in an application.\n */\n@Component({\n  tag: 'modus-wc-side-navigation',\n  styleUrl: 'modus-wc-side-navigation.scss',\n  shadow: false,\n})\nexport class ModusWcSideNavigation {\n  private inheritedAttributes: Attributes = {};\n  private minWidth = '4rem';\n  private navRef?: HTMLElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Whether the side navigation should collapse when clicking outside of it. */",
        "type": "this.expanded,\n    })"
      },
      {
        "name": "maxWidth",
        "description": "/**\n * A customizable side navigation component for organizing primary navigation and content areas in an application.\n */\n@Component({\n  tag: 'modus-wc-side-navigation',\n  styleUrl: 'modus-wc-side-navigation.scss',\n  shadow: false,\n})\nexport class ModusWcSideNavigation {\n  private inheritedAttributes: Attributes = {};\n  private minWidth = '4rem';\n  private navRef?: HTMLElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Whether the side navigation should collapse when clicking outside of it. */",
        "type": "this.minWidth"
      },
      {
        "name": "mode",
        "description": "/**\n * A customizable side navigation component for organizing primary navigation and content areas in an application.\n */\n@Component({\n  tag: 'modus-wc-side-navigation',\n  styleUrl: 'modus-wc-side-navigation.scss',\n  shadow: false,\n})\nexport class ModusWcSideNavigation {\n  private inheritedAttributes: Attributes = {};\n  private minWidth = '4rem';\n  private navRef?: HTMLElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Whether the side navigation should collapse when clicking outside of it. */",
        "type": "'overlay' | 'push'"
      },
      {
        "name": "targetContent",
        "description": "/**\n * A customizable side navigation component for organizing primary navigation and content areas in an application.\n */\n@Component({\n  tag: 'modus-wc-side-navigation',\n  styleUrl: 'modus-wc-side-navigation.scss',\n  shadow: false,\n})\nexport class ModusWcSideNavigation {\n  private inheritedAttributes: Attributes = {};\n  private minWidth = '4rem';\n  private navRef?: HTMLElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Whether the side navigation should collapse when clicking outside of it. */",
        "type": "string"
      }
    ],
    "events": [
      {
        "name": "expandedChange",
        "description": "/**\n * A customizable side navigation component for organizing primary navigation and content areas in an application.\n */\n@Component({\n  tag: 'modus-wc-side-navigation',\n  styleUrl: 'modus-wc-side-navigation.scss',\n  shadow: false,\n})\nexport class ModusWcSideNavigation {\n  private inheritedAttributes: Attributes = {};\n  private minWidth = '4rem';\n  private navRef?: HTMLElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Whether the side navigation should collapse when clicking outside of it. */\n  @Prop() collapseOnClickOutside = true;\n\n  /** Custom CSS class to apply to the inner div. */\n  @Prop() customClass?: string = '';\n\n  /** Whether the side navigation is expanded. */\n  @Prop({ mutable: true, reflect: true }) expanded = false;\n\n  /** Maximum width of the side navigation panel in an expanded state. */\n  @Prop() maxWidth = '256px';\n\n  /** Mode to make side navigation either overlay or push the content for the selector specified in targetContent */\n  @Prop() mode: 'overlay' | 'push' = 'overlay';\n\n  /** (optional) Specify the selector for the page's content for which paddings and margins will be set by side navigation based on the mode. */\n  @Prop() targetContent: string = '';\n\n  /** Event emitted when the expanded state changes (expanded/collapsed). */"
      }
    ],
    "slots": [],
    "default_values": {
      "collapseOnClickOutside": "true",
      "customClass": "''",
      "expanded": "false",
      "maxWidth": "'256px'",
      "mode": "'overlay'",
      "targetContent": "''"
    },
    "documentation": "\n\n--- modus-wc-side-navigation.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\n\ninterface SideNavigationArgs {\n  'custom-class'?: string;\n  expanded: boolean;\n  'max-width': string;\n  'collapse-on-click-outside'?: boolean;\n  mode: 'overlay' | 'push';\n  'target-content'?: string;\n}\n\nconst meta: Meta<SideNavigationArgs> = {\n  title: 'Components/Side Navigation',\n  component: 'modus-wc-side-navigation',\n  args: {\n    'collapse-on-click-outside': true,\n    expanded: false,\n    'max-width': '256px',\n    mode: 'push',\n    'target-content': '.panel-content',\n  },\n  argTypes: {\n    'max-width': {\n      control: { type: 'text' },\n      description:\n        'Maximum width of the side navigation panel in an expanded state.',\n    },\n    mode: {\n      control: { type: 'select' },\n      options: ['overlay', 'push'],\n      description: 'Display mode of the side navigation (overlay or push).',\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    layout: 'padded',\n    actions: {\n      handles: ['expandedChange'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<SideNavigationArgs>;\n\nexport const Default: Story = {\n  render: (args) => {\n    const handleMenuOpenChange = (e: CustomEvent) => {\n      const eventSource = e.target as HTMLElement;\n      const storyContainer = eventSource?.closest('.layout-with-navbar');\n      let sideNav: Element | null;\n\n      if (storyContainer) {\n        sideNav = storyContainer.querySelector('modus-wc-side-navigation');\n      } else {\n        sideNav = document.querySelector('modus-wc-side-navigation');\n      }\n\n      if (sideNav) {\n        (sideNav as HTMLElement & { expanded: boolean }).expanded = e.detail;\n      }\n    };\n\n    return html`\n      <style>\n        .layout-with-navbar {\n          display: flex;\n          flex-direction: column;\n          height: 100%;\n        }\n        .main-content-row {\n          display: flex;\n          flex: 1;\n          overflow: hidden;\n        }\n        .modus-wc-menu-item-labels {\n          padding: 0 16px;\n        }\n        .navbar {\n          box-shadow: none;\n        }\n        .panel-content {\n          margin-left: 4rem;\n          padding: 10px;\n        }\n        .side-navigation {\n          height: 500px;\n          align-self: flex-start;\n          position: relative;\n        }\n      </style>\n      <script>\n        document.addEventListener('DOMContentLoaded', () => {\n          const menuItems = document.querySelectorAll('modus-wc-menu-item');\n\n          menuItems.forEach((item) => {\n            item.addEventListener('itemSelect', () => {\n              menuItems.forEach((i) => i.removeAttribute('selected'));\n              item.setAttribute('selected', '');\n            });\n          });\n        });\n\n        function handleMenuOpenChange(e) {\n          const eventSource = e.target;\n          const storyContainer = eventSource?.closest('.layout-with-navbar');\n\n          let sideNav;\n\n          if (storyContainer) {\n            sideNav = storyContainer.querySelector('modus-wc-side-navigation');\n          } else {\n            sideNav = document.querySelector('modus-wc-side-navigation');\n          }\n\n          if (sideNav) {\n            sideNav.expanded = e.detail;\n          }\n        }\n      </script>\n      <div class=\"layout-with-navbar\">\n        <modus-wc-navbar\n          app-title=\"Modus App\"\n          class=\"navbar\"\n          logo=\"/assets/logo.svg\"\n          @mainMenuOpenChange=${handleMenuOpenChange}\n          .userCard=${{\n            avatarAlt: 'User Avatar',\n            avatarSrc:\n              'https://i1.sndcdn.com/artworks-000405996468-wmh3uv-t500x500.jpg',\n            email: 'user@trimble.com',\n            name: 'Sonic the Hedgehog',\n          }}\n          .visibility=${{\n            ai: true,\n            apps: true,\n            help: true,\n            mainMenu: true,\n            notifications: true,\n            search: true,\n            searchInput: false,\n            user: true,\n          }}\n          style=\"z-index: 2;\"\n        ></modus-wc-navbar>\n        <div class=\"main-content-row\">\n          <modus-wc-side-navigation\n            class=\"side-navigation\"\n            collapse-on-click-outside=${args['collapse-on-click-outside']}\n            custom-class=${ifDefined(args['custom-class'])}\n            expanded=${args.expanded}\n            max-width=${args['max-width']}\n            mode=${ifDefined(args.mode)}\n            target-content=${ifDefined(args['target-content'])}\n          >\n            <modus-wc-menu size=\"lg\">\n              <modus-wc-menu-item label=\"home\" selected>\n                <modus-wc-icon slot=\"start-icon\" name=\"home\"></modus-wc-icon>\n              </modus-wc-menu-item>\n              <modus-wc-menu-item label=\"profile\">\n                <modus-wc-icon slot=\"start-icon\" name=\"person\"></modus-wc-icon>\n              </modus-wc-menu-item>\n              <modus-wc-menu-item label=\"settings\">\n                <modus-wc-icon slot=\"start-icon\" name=\"gears\"></modus-wc-icon>\n              </modus-wc-menu-item>\n            </modus-wc-menu>\n          </modus-wc-side-navigation>\n          <div class=\"panel-content\">\n            <div id=\"overview\">\n              <p>\n                The side navigation of an application provides context through\n                accessible menu options and positions a consistent component to\n                connect to various pages in the application.\n              </p>\n              <p>\n                The side navigation is a collapsible side content of the site\u2019s\n                pages. It is located alongside the page\u2019s primary content. The\n                component is designed to add side content to a fullscreen\n                application. It is activated through the \u201chamburger\u201d menu in the\n                Navbar.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n  },\n};\n\nexport const collapsibleMenu: Story = {\n  render: (args) => {\n    const handleMenuOpenChange = (e: CustomEvent) => {\n      const eventSource = e.target as HTMLElement;\n      const storyContainer = eventSource?.closest('.layout-with-navbar');\n      let sideNav: Element | null;\n\n      if (storyContainer) {\n        sideNav = storyContainer.querySelector('modus-wc-side-navigation');\n      } else {\n        sideNav = document.querySelector('modus-wc-side-navigation');\n      }\n\n      if (sideNav) {\n        (sideNav as HTMLElement & { expanded: boolean }).expanded = e.detail;\n      }\n    };\n\n    const handleExpandChange = (e: CustomEvent) => {\n      if (!e.detail) {\n        const eventSource = e.target as HTMLElement;\n        const container = eventSource?.closest('.layout-with-navbar');\n\n        if (container) {\n          const childrenContainers = container.querySelectorAll(\n            '.children-container'\n          );\n          childrenContainers.forEach((container) => {\n            container.classList.add('hidden');\n            container.setAttribute('aria-hidden', 'true');\n          });\n\n          const collapseIcons = container.querySelectorAll('.dropdown-toggle');\n          collapseIcons.forEach((icon) => {\n            if (icon.getAttribute('name') === 'expand_less') {\n              icon.setAttribute('name', 'expand_more');\n            }\n          });\n        }\n      }\n    };\n\n    return html`\n      <style>\n        .children-container {\n          transition: height 0.2s ease-out;\n        }\n\n        .collapse-icon {\n          min-width: 24px;\n          padding-inline-start: 0.2rem;\n        }\n\n        .dropdown-menu {\n          overflow: hidden;\n          text-overflow: ellipsis;\n          white-space: nowrap;\n        }\n\n        .flex-row {\n          align-items: center;\n          display: flex;\n          gap: 1.3rem;\n          padding: 0.8rem 0.25rem;\n          padding-inline-start: 1rem;\n        }\n\n        .hidden {\n          display: none;\n        }\n\n        .justify-end {\n          margin-left: auto;\n        }\n\n        .layout-with-navbar {\n          box-shadow: rgba(36, 35, 45, 0.3) 1px 0 4px;\n          display: flex;\n          flex-direction: column;\n          height: 100%;\n        }\n\n        .main-content-row {\n          display: flex;\n          flex: 1;\n          overflow: hidden;\n        }\n\n        .menu-icon {\n          margin-right: 1rem;\n        }\n\n        .menu-item {\n          color: var(--modus-wc-color-gray-9);\n          display: block;\n          font-size: 16px;\n          line-height: 1.5;\n          padding: 0.5rem 1rem;\n          text-decoration: none;\n        }\n\n        .menu-width {\n          width: 100%;\n        }\n\n        .modus-wc-menu li ul {\n          margin-inline-start: 1.8rem;\n        }\n\n        .modus-wc-menu-dropdown {\n          padding-left: 1rem;\n        }\n\n        .modus-wc-menu-dropdown-toggle {\n          align-items: center;\n          cursor: pointer;\n          font-size: 16px;\n          line-height: 1.5;\n          padding: 0.7rem 1.25rem;\n        }\n\n        .nested-row {\n          padding-inline-start: 2.5rem;\n        }\n\n        .panel-content {\n          margin-left: 4rem;\n          padding: 10px;\n        }\n\n        .side-navigation {\n          align-self: flex-start;\n          height: 500px;\n          position: relative;\n        }\n\n        ul {\n          list-style: none;\n          margin: 0;\n          padding: 0;\n        }\n      </style>\n      <script>\n        function handleMenuOpenChange(e) {\n          const eventSource = e.target;\n          const storyContainer = eventSource?.closest('.layout-with-navbar');\n\n          let sideNav;\n\n          if (storyContainer) {\n            sideNav = storyContainer.querySelector('modus-wc-side-navigation');\n          } else {\n            sideNav = document.querySelector('modus-wc-side-navigation');\n          }\n\n          if (sideNav) {\n            sideNav.expanded = e.detail;\n          }\n        }\n\n        function handleCollapseToggle(e) {\n          const clickedEl = e.currentTarget;\n          const parentLi = clickedEl.closest('li');\n          if (!parentLi) return;\n\n          // Find the icon element that needs to be toggled using the dropdown-toggle class\n          const iconEl = clickedEl.querySelector('.dropdown-toggle');\n          if (!iconEl) return;\n\n          // Find the parent side nav element\n          const parentContainer = clickedEl.closest('.layout-with-navbar');\n          const sideNav = parentContainer?.querySelector(\n            'modus-wc-side-navigation'\n          );\n\n          // Toggle between expand_more and expand_less icons only if side nav is expanded\n          const isExpanded = iconEl.getAttribute('name') === 'expand_more';\n          if (sideNav?.expanded) {\n            iconEl.setAttribute(\n              'name',\n              isExpanded ? 'expand_less' : 'expand_more'\n            );\n          }\n\n          // Find and toggle children visibility\n          const childContainer =\n            parentLi.nextElementSibling?.classList.contains(\n              'children-container'\n            )\n              ? parentLi.nextElementSibling\n              : null;\n\n          if (childContainer && sideNav?.expanded) {\n            childContainer.classList.toggle('hidden');\n            childContainer.setAttribute(\n              'aria-hidden',\n              !isExpanded ? 'true' : 'false'\n            );\n          }\n        }\n\n        function handleExpandChange(e) {\n          if (!e.detail) {\n            const eventSource = e.target;\n            const container = eventSource?.closest('.layout-with-navbar');\n\n            if (container) {\n              // Collapse all child containers if the side navigation is collapsed\n              const childrenContainers = container.querySelectorAll(\n                '.children-container'\n              );\n              childrenContainers.forEach((container) => {\n                container.classList.add('hidden');\n                container.setAttribute('aria-hidden', 'true');\n              });\n\n              // Reset all collapse icons to expand_more\n              const collapseIcons =\n                container.querySelectorAll('.dropdown-toggle');\n              collapseIcons.forEach((icon) => {\n                if (icon.getAttribute('name') === 'expand_less') {\n                  icon.setAttribute('name', 'expand_more');\n                }\n              });\n            }\n          }\n        }\n      </script>\n      <div class=\"layout-with-navbar\">\n        <modus-wc-navbar\n          app-title=\"Modus App\"\n          class=\"navbar\"\n          logo=\"/assets/logo.svg\"\n          @mainMenuOpenChange=${handleMenuOpenChange}\n          .userCard=${{\n            avatarAlt: 'User Avatar',\n            avatarSrc:\n              'https://i1.sndcdn.com/artworks-000405996468-wmh3uv-t500x500.jpg',\n            email: 'user@trimble.com',\n            name: 'Sonic the Hedgehog',\n          }}\n          .visibility=${{\n            ai: true,\n            apps: true,\n            help: true,\n            mainMenu: true,\n            notifications: true,\n            search: true,\n            searchInput: false,\n            user: true,\n          }}\n          style=\"z-index: 2;\"\n        ></modus-wc-navbar>\n        <div class=\"main-content-row\">\n          <modus-wc-side-navigation\n            class=\"side-navigation\"\n            collapse-on-click-outside=${args['collapse-on-click-outside']}\n            custom-class=${ifDefined(args['custom-class'])}\n            expanded=${args.expanded}\n            max-width=${args['max-width']}\n            mode=${ifDefined(args.mode)}\n            target-content=${ifDefined(args['target-content'])}\n            @expandedChange=${handleExpandChange}\n          >\n            <modus-wc-menu aria-label=\"Custom menu\" custom-class=\"menu-width\">\n              <li>\n                <div class=\"flex-row\" onClick=\"handleCollapseToggle(event)\">\n                  <modus-wc-icon\n                    decorative=\"true\"\n                    name=\"bar_graph\"\n                    class=\"collapse-icon icon-left\"\n                  ></modus-wc-icon>\n                  <div class=\"dropdown-menu\">Charts</div>\n                  <div class=\"justify-end\">\n                    <modus-wc-icon\n                      decorative=\"true\"\n                      name=\"expand_more\"\n                      class=\"collapse-icon dropdown-toggle\"\n                    ></modus-wc-icon>\n                  </div>\n                </div>\n              </li>\n              <li class=\"children-container hidden\" aria-hidden=\"true\">\n                <ul>\n                  <li>\n                    <div class=\"flex-row nested-row\">\n                      <div>Bar Chart</div>\n                    </div>\n                  </li>\n                  <li>\n                    <div class=\"flex-row nested-row\">\n                      <div>Line Chart</div>\n                    </div>\n                  </li>\n                </ul>\n              </li>\n\n              <!-- Item without children -->\n              <li>\n                <div class=\"flex-row\">\n                  <modus-wc-icon\n                    decorative=\"true\"\n                    name=\"calendar\"\n                    class=\"collapse-icon icon-left\"\n                  ></modus-wc-icon>\n                  <div class=\"dropdown-menu\">Calendar</div>\n                </div>\n              </li>\n              <!-- Second parent group (collapsed) -->\n              <li>\n                <div class=\"flex-row\" onClick=\"handleCollapseToggle(event)\">\n                  <modus-wc-icon\n                    decorative=\"true\"\n                    name=\"compass\"\n                    class=\"collapse-icon icon-left\"\n                  ></modus-wc-icon>\n                  <div class=\"dropdown-menu\">Maps</div>\n                  <div class=\"justify-end\">\n                    <modus-wc-icon\n                      decorative=\"true\"\n                      name=\"expand_more\"\n                      class=\"collapse-icon dropdown-toggle\"\n                    ></modus-wc-icon>\n                  </div>\n                </div>\n              </li>\n              <li class=\"children-container hidden\" aria-hidden=\"true\">\n                <ul>\n                  <li>\n                    <div class=\"flex-row nested-row\">\n                      <div>Map 1</div>\n                    </div>\n                  </li>\n                  <li>\n                    <div\n                      class=\"flex-row nested-row\"\n                      onClick=\"handleCollapseToggle(event)\"\n                    >\n                      <div>Map 2</div>\n                      <div class=\"justify-end\">\n                        <modus-wc-icon\n                          decorative=\"true\"\n                          name=\"expand_more\"\n                          class=\"collapse-icon dropdown-toggle\"\n                        ></modus-wc-icon>\n                      </div>\n                    </div>\n                  </li>\n                  <li class=\"children-container hidden\" aria-hidden=\"true\">\n                    <ul>\n                      <li>\n                        <div\n                          class=\"flex-row\"\n                          style=\"padding-inline-start: 2rem;\"\n                        >\n                          <div>Map 1</div>\n                        </div>\n                      </li>\n                      <li>\n                        <div\n                          class=\"flex-row\"\n                          style=\"padding-inline-start: 2rem;\"\n                        >\n                          <div>Map 2</div>\n                        </div>\n                      </li>\n                    </ul>\n                  </li>\n                  <li>\n                    <div class=\"flex-row nested-row\">\n                      <div>Map 3</div>\n                    </div>\n                  </li>\n                </ul>\n              </li>\n            </modus-wc-menu>\n          </modus-wc-side-navigation>\n          <div class=\"panel-content\">\n            <div id=\"overview\">\n              <p>\n                The side navigation of an application provides context through\n                accessible menu options and positions a consistent component to\n                connect to various pages in the application.\n              </p>\n              <p>\n                The side navigation is a collapsible side content of the site's\n                pages. It is located alongside the page's primary content. The\n                component is designed to add side content to a fullscreen\n                application. It is activated through the \"hamburger\" menu in the\n                Navbar.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n  },\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-navbar\n          app-title=\"Modus App\"\n          class=\"navbar\"\n          logo=\"/assets/logo.svg\"\n          @mainMenuOpenChange=${handleMenuOpenChange}\n          .userCard=${{\n            avatarAlt: 'User Avatar',\n            avatarSrc:\n              'https://i1.sndcdn.com/artworks-000405996468-wmh3uv-t500x500.jpg',\n            email: 'user@trimble.com',\n            name: 'Sonic the Hedgehog',\n          }}\n          .visibility=${{\n            ai: true,\n            apps: true,\n            help: true,\n            mainMenu: true,\n            notifications: true,\n            search: true,\n            searchInput: false,\n            user: true,\n          }}\n          style=\"z-index: 2;\"\n        ></modus-wc-navbar>",
        "<modus-wc-icon slot=\"start-icon\" name=\"home\"></modus-wc-icon>",
        "<modus-wc-icon slot=\"start-icon\" name=\"person\"></modus-wc-icon>",
        "<modus-wc-icon slot=\"start-icon\" name=\"gears\"></modus-wc-icon>",
        "<modus-wc-navbar\n          app-title=\"Modus App\"\n          class=\"navbar\"\n          logo=\"/assets/logo.svg\"\n          @mainMenuOpenChange=${handleMenuOpenChange}\n          .userCard=${{\n            avatarAlt: 'User Avatar',\n            avatarSrc:\n              'https://i1.sndcdn.com/artworks-000405996468-wmh3uv-t500x500.jpg',\n            email: 'user@trimble.com',\n            name: 'Sonic the Hedgehog',\n          }}\n          .visibility=${{\n            ai: true,\n            apps: true,\n            help: true,\n            mainMenu: true,\n            notifications: true,\n            search: true,\n            searchInput: false,\n            user: true,\n          }}\n          style=\"z-index: 2;\"\n        ></modus-wc-navbar>"
      ],
      "variants": [],
      "prop_usage": {
        "class": [
          "layout-with-navbar",
          "navbar",
          "main-content-row",
          "side-navigation",
          "panel-content",
          "menu-width",
          "flex-row",
          "collapse-icon icon-left",
          "dropdown-menu",
          "justify-end",
          "collapse-icon dropdown-toggle",
          "children-container hidden",
          "flex-row nested-row"
        ],
        "title": [
          "Modus App"
        ],
        "logo": [
          "/assets/logo.svg"
        ],
        "style": [
          "z-index: 2;",
          "padding-inline-start: 2rem;"
        ],
        "size": [
          "lg"
        ],
        "label": [
          "home",
          "profile",
          "settings",
          "Custom menu"
        ],
        "slot": [
          "start-icon"
        ],
        "name": [
          "home",
          "person",
          "gears",
          "bar_graph",
          "expand_more",
          "calendar",
          "compass"
        ],
        "id": [
          "overview"
        ],
        "onClick": [
          "handleCollapseToggle(event)"
        ],
        "decorative": [
          "true"
        ],
        "hidden": [
          "true"
        ]
      }
    },
    "tag_name": "modus-wc-side-navigation"
  },
  "modus-wc-theme-switcher": {
    "props": [
      {
        "name": "customClass",
        "description": "/**\n * A theme switcher component used to toggle the application theme and/or mode.\n *\n * Allows consumers to set the initial theme (Modus Classic, Modus Modern, etc.) and end-users to toggle modes (Light, Dark).\n */\n@Component({\n  tag: 'modus-wc-theme-switcher',\n  styleUrl: 'modus-wc-theme-switcher.scss',\n  shadow: false,\n})\nexport class ModusWcThemeSwitcher {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the theme switcher element. */",
        "type": ": string"
      }
    ],
    "events": [],
    "slots": [],
    "default_values": {
      "customClass": "''"
    },
    "documentation": "\n\n--- modus-wc-theme-switcher.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { IThemeConfig } from '../../providers/theme/theme.types';\n\ninterface ThemeSwitcherArgs {\n  'custom-class'?: string;\n  'initial-theme'?: Partial<IThemeConfig>;\n}\n\ninterface ThemeTestArgs {\n  theme: 'modus-modern' | 'modus-classic';\n  mode: 'light' | 'dark';\n}\n\nconst meta: Meta<ThemeSwitcherArgs> = {\n  title: 'Components/ThemeSwitcher',\n  component: 'modus-wc-theme-switcher',\n  args: {\n    'custom-class': undefined,\n    'initial-theme': undefined,\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['themeChange'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<ThemeSwitcherArgs>;\n\nconst Template: Story = {\n  // prettier-ignore\n  render: (args) => html`\n<modus-wc-theme-provider .initialTheme=${args['initial-theme']}>\n  <modus-wc-theme-switcher\n    aria-label=\"Theme toggle\"\n    custom-class=${ifDefined(args['custom-class'])}\n  ></modus-wc-theme-switcher>\n</modus-wc-theme-provider>\n  `,\n};\n\nexport const Default: Story = { ...Template };\n\n// New story for testing theme configurations\ntype ThemeTestStory = StoryObj<ThemeTestArgs>;\n\nconst ThemeTestTemplate: ThemeTestStory = {\n  args: {\n    theme: 'modus-modern',\n    mode: 'light',\n  },\n  argTypes: {\n    theme: {\n      control: { type: 'select' },\n      options: ['modus-modern', 'modus-classic'],\n      description: 'The theme to apply',\n    },\n    mode: {\n      control: { type: 'select' },\n      options: ['light', 'dark'],\n      description: 'The theme mode (light or dark)',\n    },\n  },\n  render: (args) => html`\n    <modus-wc-theme-provider\n      .initialTheme=${{ theme: args.theme, mode: args.mode }}\n    >\n      <div style=\"padding: 40px\">\n        <h2 style=\"text-align: center; color: var(--mwc-color-on-surface);\">\n          Theme Configuration Test\n        </h2>\n        <p\n          style=\"text-align: center; color: var(--mwc-color-on-surface-secondary); margin-bottom: 30px;\"\n        >\n          Testing ${args.mode} mode with ${args.theme} theme\n        </p>\n\n        <div\n          style=\"display: flex; gap: 10px; flex-wrap: wrap; justify-content: center; margin-bottom: 30px;\"\n        >\n          <modus-wc-button color=\"primary\">Primary Button</modus-wc-button>\n          <modus-wc-button color=\"secondary\">Secondary Button</modus-wc-button>\n          <modus-wc-button color=\"tertiary\">Tertiary Button</modus-wc-button>\n          <modus-wc-button color=\"danger\">Danger Button</modus-wc-button>\n        </div>\n\n        <div\n          style=\"display: flex; gap: 15px; flex-wrap: wrap; justify-content: center; align-items: center;\"\n        >\n          <modus-wc-badge color=\"primary\">Badge</modus-wc-badge>\n          <modus-wc-badge color=\"secondary\">Badge 2</modus-wc-badge>\n          <modus-wc-chip label=\"Chip 1\"></modus-wc-chip>\n          <modus-wc-chip label=\"Chip 2\" active></modus-wc-chip>\n          <modus-wc-switch label=\"Switch\"></modus-wc-switch>\n        </div>\n      </div>\n    </modus-wc-theme-provider>\n  `,\n};\n\nexport const ThemeTest: ThemeTestStory = {\n  ...ThemeTestTemplate,\n  parameters: {\n    docs: {\n      description: {\n        story:\n          'Test different theme and mode combinations. Use the controls to switch between themes and modes.',\n      },\n    },\n  },\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-theme-switcher\n    aria-label=\"Theme toggle\"\n    custom-class=${ifDefined(args['custom-class'])}\n  ></modus-wc-theme-switcher>",
        "<modus-wc-button color=\"primary\">Primary Button</modus-wc-button>",
        "<modus-wc-button color=\"secondary\">Secondary Button</modus-wc-button>",
        "<modus-wc-button color=\"tertiary\">Tertiary Button</modus-wc-button>",
        "<modus-wc-button color=\"danger\">Danger Button</modus-wc-button>"
      ],
      "variants": [],
      "prop_usage": {
        "label": [
          "Theme toggle",
          "Chip 1",
          "Chip 2",
          "Switch"
        ],
        "style": [
          "padding: 40px",
          "text-align: center; color: var(--mwc-color-on-surface);",
          "text-align: center; color: var(--mwc-color-on-surface-secondary); margin-bottom: 30px;",
          "display: flex; gap: 10px; flex-wrap: wrap; justify-content: center; margin-bottom: 30px;",
          "display: flex; gap: 15px; flex-wrap: wrap; justify-content: center; align-items: center;"
        ],
        "color": [
          "primary",
          "secondary",
          "tertiary",
          "danger"
        ]
      }
    },
    "tag_name": "modus-wc-theme-switcher"
  },
  "modus-wc-time-input": {
    "props": [
      {
        "name": "autoComplete",
        "description": "/**\n * A customizable input component used to create time inputs.\n */\n@Component({\n  tag: 'modus-wc-time-input',\n  styleUrl: 'modus-wc-time-input.scss',\n  shadow: false,\n})\nexport class ModusWcTimeInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */",
        "type": ": 'on' | 'off'"
      },
      {
        "name": "bordered",
        "description": "/**\n * A customizable input component used to create time inputs.\n */\n@Component({\n  tag: 'modus-wc-time-input',\n  styleUrl: 'modus-wc-time-input.scss',\n  shadow: false,\n})\nexport class ModusWcTimeInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */",
        "type": ": boolean"
      },
      {
        "name": "customClass",
        "description": "/**\n * A customizable input component used to create time inputs.\n */\n@Component({\n  tag: 'modus-wc-time-input',\n  styleUrl: 'modus-wc-time-input.scss',\n  shadow: false,\n})\nexport class ModusWcTimeInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */",
        "type": ": string"
      },
      {
        "name": "datalistOptions",
        "description": "/**\n * A customizable input component used to create time inputs.\n */\n@Component({\n  tag: 'modus-wc-time-input',\n  styleUrl: 'modus-wc-time-input.scss',\n  shadow: false,\n})\nexport class ModusWcTimeInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */",
        "type": "string[]"
      },
      {
        "name": "disabled",
        "description": "/**\n * A customizable input component used to create time inputs.\n */\n@Component({\n  tag: 'modus-wc-time-input',\n  styleUrl: 'modus-wc-time-input.scss',\n  shadow: false,\n})\nexport class ModusWcTimeInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */",
        "type": ": boolean"
      },
      {
        "name": "feedback",
        "description": "/**\n * A customizable input component used to create time inputs.\n */\n@Component({\n  tag: 'modus-wc-time-input',\n  styleUrl: 'modus-wc-time-input.scss',\n  shadow: false,\n})\nexport class ModusWcTimeInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */",
        "type": ": IInputFeedbackProp"
      },
      {
        "name": "inputId",
        "description": "/**\n * A customizable input component used to create time inputs.\n */\n@Component({\n  tag: 'modus-wc-time-input',\n  styleUrl: 'modus-wc-time-input.scss',\n  shadow: false,\n})\nexport class ModusWcTimeInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */",
        "type": ": string"
      },
      {
        "name": "inputTabIndex",
        "description": "/**\n * A customizable input component used to create time inputs.\n */\n@Component({\n  tag: 'modus-wc-time-input',\n  styleUrl: 'modus-wc-time-input.scss',\n  shadow: false,\n})\nexport class ModusWcTimeInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */",
        "type": ": number"
      },
      {
        "name": "datalistId",
        "description": "/**\n * A customizable input component used to create time inputs.\n */\n@Component({\n  tag: 'modus-wc-time-input',\n  styleUrl: 'modus-wc-time-input.scss',\n  shadow: false,\n})\nexport class ModusWcTimeInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */",
        "type": ": string"
      },
      {
        "name": "label",
        "description": "/**\n * A customizable input component used to create time inputs.\n */\n@Component({\n  tag: 'modus-wc-time-input',\n  styleUrl: 'modus-wc-time-input.scss',\n  shadow: false,\n})\nexport class ModusWcTimeInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */",
        "type": ": string"
      },
      {
        "name": "max",
        "description": "/**\n * A customizable input component used to create time inputs.\n */\n@Component({\n  tag: 'modus-wc-time-input',\n  styleUrl: 'modus-wc-time-input.scss',\n  shadow: false,\n})\nexport class ModusWcTimeInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */",
        "type": ": string"
      },
      {
        "name": "min",
        "description": "/**\n * A customizable input component used to create time inputs.\n */\n@Component({\n  tag: 'modus-wc-time-input',\n  styleUrl: 'modus-wc-time-input.scss',\n  shadow: false,\n})\nexport class ModusWcTimeInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */",
        "type": ": string"
      },
      {
        "name": "name",
        "description": "/**\n * A customizable input component used to create time inputs.\n */\n@Component({\n  tag: 'modus-wc-time-input',\n  styleUrl: 'modus-wc-time-input.scss',\n  shadow: false,\n})\nexport class ModusWcTimeInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */",
        "type": ": string"
      },
      {
        "name": "readOnly",
        "description": "/**\n * A customizable input component used to create time inputs.\n */\n@Component({\n  tag: 'modus-wc-time-input',\n  styleUrl: 'modus-wc-time-input.scss',\n  shadow: false,\n})\nexport class ModusWcTimeInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */",
        "type": ": boolean"
      },
      {
        "name": "required",
        "description": "/**\n * A customizable input component used to create time inputs.\n */\n@Component({\n  tag: 'modus-wc-time-input',\n  styleUrl: 'modus-wc-time-input.scss',\n  shadow: false,\n})\nexport class ModusWcTimeInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */",
        "type": ": boolean"
      },
      {
        "name": "showSeconds",
        "description": "/**\n * A customizable input component used to create time inputs.\n */\n@Component({\n  tag: 'modus-wc-time-input',\n  styleUrl: 'modus-wc-time-input.scss',\n  shadow: false,\n})\nexport class ModusWcTimeInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */",
        "type": ": boolean"
      },
      {
        "name": "size",
        "description": "/**\n * A customizable input component used to create time inputs.\n */\n@Component({\n  tag: 'modus-wc-time-input',\n  styleUrl: 'modus-wc-time-input.scss',\n  shadow: false,\n})\nexport class ModusWcTimeInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */",
        "type": ": ModusSize"
      },
      {
        "name": "step",
        "description": "/**\n * A customizable input component used to create time inputs.\n */\n@Component({\n  tag: 'modus-wc-time-input',\n  styleUrl: 'modus-wc-time-input.scss',\n  shadow: false,\n})\nexport class ModusWcTimeInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */",
        "type": ": number"
      },
      {
        "name": "value",
        "description": "/**\n * A customizable input component used to create time inputs.\n */\n@Component({\n  tag: 'modus-wc-time-input',\n  styleUrl: 'modus-wc-time-input.scss',\n  shadow: false,\n})\nexport class ModusWcTimeInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */",
        "type": "string"
      }
    ],
    "events": [
      {
        "name": "inputBlur",
        "description": "/**\n * A customizable input component used to create time inputs.\n */\n@Component({\n  tag: 'modus-wc-time-input',\n  styleUrl: 'modus-wc-time-input.scss',\n  shadow: false,\n})\nexport class ModusWcTimeInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */\n  @Prop() autoComplete?: 'on' | 'off';\n\n  /** Indicates that the input should have a border. */\n  @Prop() bordered?: boolean = true;\n\n  /** Custom CSS class to apply to the input. */\n  @Prop() customClass?: string = '';\n\n  /** The options to display in the time input dropdown. Options must be in `HH:mm` or `HH:mm:ss` format. */\n  @Prop() datalistOptions: string[] = [];\n\n  /** Whether the form control is disabled. */\n  @Prop() disabled?: boolean = false;\n\n  /** Feedback to render below the input. */\n  @Prop() feedback?: IInputFeedbackProp;\n\n  /** The ID of the input element. */\n  @Prop() inputId?: string;\n\n  /** Determine the control's relative ordering for sequential focus navigation (typically with the Tab key). */\n  @Prop() inputTabIndex?: number;\n\n  /**\n   * ID of a `<datalist>` element that contains pre-defined time options.\n   * The value must be the ID of a `<datalist>` element in the same document.\n   */\n  @Prop({ mutable: true }) datalistId?: string;\n\n  /** The text to display within the label. */\n  @Prop() label?: string;\n\n  /** Maximum value. Format: `HH:mm`, `HH:mm:ss`. */\n  @Prop() max?: string;\n\n  /** Minimum value. Format: `HH:mm`, `HH:mm:ss.`*/\n  @Prop() min?: string;\n\n  /** Name of the form control. Submitted with the form as part of a name/value pair. */\n  @Prop() name?: string;\n\n  /** Whether the value is editable. */\n  @Prop() readOnly?: boolean = false;\n\n  /** A value is required for the form to be submittable. */\n  @Prop() required?: boolean = false;\n\n  /**\n   * Displays the time input format as `HH:mm:ss` if `true`.\n   * Internally sets the `step` to 1 second.\n   * If a `step` value is provided, it will override this attribute.\n   */\n  @Prop() showSeconds?: boolean = false;\n\n  /** The size of the input. */\n  @Prop() size?: ModusSize = 'md';\n\n  /**\n   * Specifies the granularity that the `value` must adhere to.\n   * Value of step given in seconds. Default value is 60 seconds.\n   * Overrides the `seconds` attribute if both are provided.\n   */\n  @Prop() step?: number;\n\n  /**\n   * The value of the time input.\n   * Always in 24-hour format that includes leading zeros:\n   * `HH:mm` or `HH:mm:ss`, regardless of input format which is likely\n   * to be selected based on user's locale (or by the user agent).\n   * If time includes seconds the format is always `HH:mm:ss`.\n   */\n  @Prop({ mutable: true, reflect: true }) value: string = '';\n\n  /** Event emitted when the input loses focus. */"
      },
      {
        "name": "inputChange",
        "description": "/**\n * A customizable input component used to create time inputs.\n */\n@Component({\n  tag: 'modus-wc-time-input',\n  styleUrl: 'modus-wc-time-input.scss',\n  shadow: false,\n})\nexport class ModusWcTimeInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */\n  @Prop() autoComplete?: 'on' | 'off';\n\n  /** Indicates that the input should have a border. */\n  @Prop() bordered?: boolean = true;\n\n  /** Custom CSS class to apply to the input. */\n  @Prop() customClass?: string = '';\n\n  /** The options to display in the time input dropdown. Options must be in `HH:mm` or `HH:mm:ss` format. */\n  @Prop() datalistOptions: string[] = [];\n\n  /** Whether the form control is disabled. */\n  @Prop() disabled?: boolean = false;\n\n  /** Feedback to render below the input. */\n  @Prop() feedback?: IInputFeedbackProp;\n\n  /** The ID of the input element. */\n  @Prop() inputId?: string;\n\n  /** Determine the control's relative ordering for sequential focus navigation (typically with the Tab key). */\n  @Prop() inputTabIndex?: number;\n\n  /**\n   * ID of a `<datalist>` element that contains pre-defined time options.\n   * The value must be the ID of a `<datalist>` element in the same document.\n   */\n  @Prop({ mutable: true }) datalistId?: string;\n\n  /** The text to display within the label. */\n  @Prop() label?: string;\n\n  /** Maximum value. Format: `HH:mm`, `HH:mm:ss`. */\n  @Prop() max?: string;\n\n  /** Minimum value. Format: `HH:mm`, `HH:mm:ss.`*/\n  @Prop() min?: string;\n\n  /** Name of the form control. Submitted with the form as part of a name/value pair. */\n  @Prop() name?: string;\n\n  /** Whether the value is editable. */\n  @Prop() readOnly?: boolean = false;\n\n  /** A value is required for the form to be submittable. */\n  @Prop() required?: boolean = false;\n\n  /**\n   * Displays the time input format as `HH:mm:ss` if `true`.\n   * Internally sets the `step` to 1 second.\n   * If a `step` value is provided, it will override this attribute.\n   */\n  @Prop() showSeconds?: boolean = false;\n\n  /** The size of the input. */\n  @Prop() size?: ModusSize = 'md';\n\n  /**\n   * Specifies the granularity that the `value` must adhere to.\n   * Value of step given in seconds. Default value is 60 seconds.\n   * Overrides the `seconds` attribute if both are provided.\n   */\n  @Prop() step?: number;\n\n  /**\n   * The value of the time input.\n   * Always in 24-hour format that includes leading zeros:\n   * `HH:mm` or `HH:mm:ss`, regardless of input format which is likely\n   * to be selected based on user's locale (or by the user agent).\n   * If time includes seconds the format is always `HH:mm:ss`.\n   */\n  @Prop({ mutable: true, reflect: true }) value: string = '';\n\n  /** Event emitted when the input loses focus. */"
      },
      {
        "name": "inputFocus",
        "description": "/**\n * A customizable input component used to create time inputs.\n */\n@Component({\n  tag: 'modus-wc-time-input',\n  styleUrl: 'modus-wc-time-input.scss',\n  shadow: false,\n})\nexport class ModusWcTimeInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */\n  @Prop() autoComplete?: 'on' | 'off';\n\n  /** Indicates that the input should have a border. */\n  @Prop() bordered?: boolean = true;\n\n  /** Custom CSS class to apply to the input. */\n  @Prop() customClass?: string = '';\n\n  /** The options to display in the time input dropdown. Options must be in `HH:mm` or `HH:mm:ss` format. */\n  @Prop() datalistOptions: string[] = [];\n\n  /** Whether the form control is disabled. */\n  @Prop() disabled?: boolean = false;\n\n  /** Feedback to render below the input. */\n  @Prop() feedback?: IInputFeedbackProp;\n\n  /** The ID of the input element. */\n  @Prop() inputId?: string;\n\n  /** Determine the control's relative ordering for sequential focus navigation (typically with the Tab key). */\n  @Prop() inputTabIndex?: number;\n\n  /**\n   * ID of a `<datalist>` element that contains pre-defined time options.\n   * The value must be the ID of a `<datalist>` element in the same document.\n   */\n  @Prop({ mutable: true }) datalistId?: string;\n\n  /** The text to display within the label. */\n  @Prop() label?: string;\n\n  /** Maximum value. Format: `HH:mm`, `HH:mm:ss`. */\n  @Prop() max?: string;\n\n  /** Minimum value. Format: `HH:mm`, `HH:mm:ss.`*/\n  @Prop() min?: string;\n\n  /** Name of the form control. Submitted with the form as part of a name/value pair. */\n  @Prop() name?: string;\n\n  /** Whether the value is editable. */\n  @Prop() readOnly?: boolean = false;\n\n  /** A value is required for the form to be submittable. */\n  @Prop() required?: boolean = false;\n\n  /**\n   * Displays the time input format as `HH:mm:ss` if `true`.\n   * Internally sets the `step` to 1 second.\n   * If a `step` value is provided, it will override this attribute.\n   */\n  @Prop() showSeconds?: boolean = false;\n\n  /** The size of the input. */\n  @Prop() size?: ModusSize = 'md';\n\n  /**\n   * Specifies the granularity that the `value` must adhere to.\n   * Value of step given in seconds. Default value is 60 seconds.\n   * Overrides the `seconds` attribute if both are provided.\n   */\n  @Prop() step?: number;\n\n  /**\n   * The value of the time input.\n   * Always in 24-hour format that includes leading zeros:\n   * `HH:mm` or `HH:mm:ss`, regardless of input format which is likely\n   * to be selected based on user's locale (or by the user agent).\n   * If time includes seconds the format is always `HH:mm:ss`.\n   */\n  @Prop({ mutable: true, reflect: true }) value: string = '';\n\n  /** Event emitted when the input loses focus. */"
      }
    ],
    "slots": [],
    "default_values": {
      "bordered": "true",
      "customClass": "''",
      "datalistOptions": "[]",
      "disabled": "false",
      "datalistId": "this.internalDatalistId",
      "max": "{this.max}\n          min={this.min}\n          name={this.name}\n          onBlur={this.handleBlur}\n          onFocus={this.handleFocus}\n          onInput={this.handleInput}\n          readonly={this.readOnly}\n          required={this.required}\n          step={this.step || this.showSeconds ? 1 : 60}\n          tabIndex={this.inputTabIndex}\n          type=\"time\"\n          value={this.value}\n          {...this.inheritedAttributes}\n        />\n        {this.renderDatalist()}\n        {this.feedback && (\n          <modus-wc-input-feedback\n            level={this.feedback.level}\n            message={this.feedback.message}\n            size={this.size}\n          />\n        )}\n      </Host>\n    )",
      "min": "{this.min}\n          name={this.name}\n          onBlur={this.handleBlur}\n          onFocus={this.handleFocus}\n          onInput={this.handleInput}\n          readonly={this.readOnly}\n          required={this.required}\n          step={this.step || this.showSeconds ? 1 : 60}\n          tabIndex={this.inputTabIndex}\n          type=\"time\"\n          value={this.value}\n          {...this.inheritedAttributes}\n        />\n        {this.renderDatalist()}\n        {this.feedback && (\n          <modus-wc-input-feedback\n            level={this.feedback.level}\n            message={this.feedback.message}\n            size={this.size}\n          />\n        )}\n      </Host>\n    )",
      "name": "{this.name}\n          onBlur={this.handleBlur}\n          onFocus={this.handleFocus}\n          onInput={this.handleInput}\n          readonly={this.readOnly}\n          required={this.required}\n          step={this.step || this.showSeconds ? 1 : 60}\n          tabIndex={this.inputTabIndex}\n          type=\"time\"\n          value={this.value}\n          {...this.inheritedAttributes}\n        />\n        {this.renderDatalist()}\n        {this.feedback && (\n          <modus-wc-input-feedback\n            level={this.feedback.level}\n            message={this.feedback.message}\n            size={this.size}\n          />\n        )}\n      </Host>\n    )",
      "readOnly": "false",
      "required": "false",
      "showSeconds": "false",
      "size": "'md'",
      "step": "{this.step || this.showSeconds ? 1 : 60}\n          tabIndex={this.inputTabIndex}\n          type=\"time\"\n          value={this.value}\n          {...this.inheritedAttributes}\n        />\n        {this.renderDatalist()}\n        {this.feedback && (\n          <modus-wc-input-feedback\n            level={this.feedback.level}\n            message={this.feedback.message}\n            size={this.size}\n          />\n        )}\n      </Host>\n    )",
      "value": "''"
    },
    "documentation": "\n\n--- modus-wc-time-input.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { IInputFeedbackProp, ModusSize } from '../types';\n\n// const timeOptions = ['08:00', '12:00', '17:00'];\n\ninterface TimeInputArgs {\n  'auto-complete'?: 'on' | 'off';\n  bordered?: boolean;\n  'custom-class'?: string;\n  'datalist-id'?: string;\n  'datalist-options'?: string[];\n  disabled?: boolean;\n  feedback?: IInputFeedbackProp;\n  'input-id'?: string;\n  'input-tab-index'?: number;\n  label?: string;\n  max?: string;\n  min?: string;\n  name?: string;\n  'read-only'?: boolean;\n  required?: boolean;\n  'show-seconds'?: boolean;\n  size?: ModusSize;\n  step?: number;\n  value: string;\n}\n\nconst meta: Meta<TimeInputArgs> = {\n  title: 'Components/Forms/Time Input',\n  component: 'modus-wc-time-input',\n  args: {\n    disabled: false,\n    label: 'Label',\n    size: 'md',\n  },\n  argTypes: {\n    'auto-complete': {\n      control: { type: 'select' },\n      options: ['on', 'off'],\n    },\n    feedback: {\n      description: 'Feedback prop for input components',\n      table: {\n        type: {\n          detail: `\n            Interface: IInputFeedbackProp\n            Properties:\n            - level ('error' | 'info' | 'success' | 'warning'): The feedback level\n            - message (string, optional): The feedback message\n          `,\n        },\n      },\n    },\n    size: {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg'],\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['inputBlur', 'inputChange', 'inputFocus'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<TimeInputArgs>;\n\nexport const Template: Story = {\n  render: (args) => html`\n    <modus-wc-time-input\n      aria-label=\"Time input\"\n      auto-complete=${ifDefined(args['auto-complete'])}\n      bordered=${ifDefined(args.bordered)}\n      custom-class=${ifDefined(args['custom-class'])}\n      datalist-id=${ifDefined(args['datalist-id'])}\n      ?disabled=${args.disabled}\n      .feedback=${args.feedback}\n      input-id=${ifDefined(args['input-id'])}\n      input-tab-index=${ifDefined(args['input-tab-index'])}\n      label=${ifDefined(args.label)}\n      max=${ifDefined(args.max)}\n      min=${ifDefined(args.min)}\n      name=${ifDefined(args.name)}\n      ?read-only=${args['read-only']}\n      ?required=${args.required}\n      show-seconds=${ifDefined(args['show-seconds'])}\n      size=${ifDefined(args.size)}\n      step=${ifDefined(args.step)}\n      .datalistOptions=${args['datalist-options']}\n      .value=${args.value}\n    ></modus-wc-time-input>\n  `,\n};\n\nexport const WithSeconds: Story = {\n  render: () => {\n    return html`\n      <modus-wc-time-input\n        aria-label=\"Example time input\"\n        show-seconds=\"true\"\n      ></modus-wc-time-input>\n    `;\n  },\n};\n\nexport const WithDatalist: Story = {\n  render: () => {\n    // prettier-ignore\n    return html`\n<modus-wc-time-input\n  aria-label=\"Example time input\"\n  datalist-id=\"datalist-id-1\"\n></modus-wc-time-input>\n<datalist id=\"datalist-id-1\">\n  <option value=\"06:00\"></option>\n  <option value=\"12:00\"></option>\n  <option value=\"17:00\"></option>\n</datalist>\n    `;\n  },\n};\n\nexport const WithDatalistOptions: Story = {\n  render: () => {\n    // prettier-ignore\n    return html`\n<script>\n  document.addEventListener('DOMContentLoaded', () => {\n    // Example of programmatically adding 'datalistOptions'\n    const preferredTimes = ['09:30', '12:00', '17:30'];\n    document.querySelector('#time-input-with-options').datalistOptions = preferredTimes;\n  });\n</script>\n<modus-wc-time-input\n  aria-label=\"Example time input\"\n  id=\"time-input-with-options\"\n></modus-wc-time-input>\n    `;\n  },\n};\n\nconst errorFeedback: IInputFeedbackProp = {\n  level: 'error',\n  message: 'Value is required.',\n};\n\nexport const WithErrorFeedback: Story = {\n  render: (args) => html`\n    <modus-wc-time-input\n      aria-label=\"Time input\"\n      .feedback=${errorFeedback}\n      label=${ifDefined(args.label)}\n      ?required=${true}\n      .value=${args.value}\n    ></modus-wc-time-input>\n  `,\n};\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - In 1.0 input state was maintained by the component. 2.0 components encourage users to follow a controlled\n  input model. See the Form Inputs [documentation](/docs/documentation-form-inputs--docs) for\n  additional info and examples.\n  - Size values have changed from verbose names (\\`medium\\`, \\`large\\`) to abbreviations (\\`sm\\`, \\`md\\`, \\`lg\\`).\n\n#### Prop Mapping\n\n| 1.0 Prop                | 2.0 Prop            | Notes                                   |\n|-------------------------|---------------------|-----------------------------------------|\n| allowed-chars-regex     |                     | Not carried over                        |\n| ampm                    |                     | Not carried over                        |\n| aria-label              | aria-label          |                                         |\n| auto-focus-input        | autofocus           |                                         |\n| auto-format             |                     | Not carried over                        |\n| disable-validation      |                     | Not carried over                        |\n| disabled                | disabled            |                                         |\n| error-text              | feedback.message    | Use \\`feedback\\` level                  |\n| helper-text             |                     | Not carried over                        |\n| label                   | label               |                                         |\n| max                     | max                 |                                         |\n| min                     | min                 |                                         |\n| placeholder             |                     | Not carried over                        |\n| read-only               | read-only           |                                         |\n| required                | required            |                                         |\n| size                    | size                | \\`medium\\` \u2192 \\`md\\`, \\`large\\` \u2192 \\`lg\\` |\n| valid-text              | feedback.message    | Use \\`feedback\\` level                  |\n| value                   | value               |                                         |\n\n#### Event Mapping\n\n| 1.0 Event      | 2.0 Event   | Notes                                                |\n|----------------|-------------|------------------------------------------------------|\n| timeInputBlur  | inputBlur   |                                                      |\n| valueChange    | inputChange |                                                      |\n        `,\n      },\n    },\n    // To hide the actual story rendering and only show docs:\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  // Simple render function or leave it empty\n  render: () => html`<div></div>`,\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-time-input\n      aria-label=\"Time input\"\n      auto-complete=${ifDefined(args['auto-complete'])}\n      bordered=${ifDefined(args.bordered)}\n      custom-class=${ifDefined(args['custom-class'])}\n      datalist-id=${ifDefined(args['datalist-id'])}\n      ?disabled=${args.disabled}\n      .feedback=${args.feedback}\n      input-id=${ifDefined(args['input-id'])}\n      input-tab-index=${ifDefined(args['input-tab-index'])}\n      label=${ifDefined(args.label)}\n      max=${ifDefined(args.max)}\n      min=${ifDefined(args.min)}\n      name=${ifDefined(args.name)}\n      ?read-only=${args['read-only']}\n      ?required=${args.required}\n      show-seconds=${ifDefined(args['show-seconds'])}\n      size=${ifDefined(args.size)}\n      step=${ifDefined(args.step)}\n      .datalistOptions=${args['datalist-options']}\n      .value=${args.value}\n    ></modus-wc-time-input>",
        "<modus-wc-time-input\n        aria-label=\"Example time input\"\n        show-seconds=\"true\"\n      ></modus-wc-time-input>",
        "<modus-wc-time-input\n  aria-label=\"Example time input\"\n  datalist-id=\"datalist-id-1\"\n></modus-wc-time-input>",
        "<modus-wc-time-input\n  aria-label=\"Example time input\"\n  id=\"time-input-with-options\"\n></modus-wc-time-input>",
        "<modus-wc-time-input\n      aria-label=\"Time input\"\n      .feedback=${errorFeedback}\n      label=${ifDefined(args.label)}\n      ?required=${true}\n      .value=${args.value}\n    ></modus-wc-time-input>"
      ],
      "variants": [],
      "prop_usage": {
        "label": [
          "Time input",
          "Example time input"
        ],
        "seconds": [
          "true"
        ],
        "id": [
          "datalist-id-1",
          "time-input-with-options"
        ],
        "value": [
          "06:00",
          "12:00",
          "17:00"
        ]
      }
    },
    "tag_name": "modus-wc-time-input"
  },
  "modus-wc-navbar": {
    "props": [
      {
        "name": "appsMenuOpen",
        "description": "/** Replaces the text for \"Apps\" in the condensed menu. */\n  apps?: string;\n  /** Replaces the text for \"Help\" in the condensed menu. */\n  help?: string;\n  /** Replaces the text for \"Notifications\" in the condensed menu. */\n  notifications?: string;\n  /** Replaces the text for \"Search\" in the condensed menu. */\n  search?: string;\n}\n\nexport interface INavbarVisibility {\n  /** Controls the visibility of the AI button. */\n  ai?: boolean;\n  /** Controls visibility of the apps button. */\n  apps?: boolean;\n  /** Controls visibility of the help button. */\n  help?: boolean;\n  /** Controls visibility of the main menu button. */\n  mainMenu?: boolean;\n  /** Controls visibility of the notifications button. */\n  notifications?: boolean;\n  /** Controls visibility of the search button. */\n  search?: boolean;\n  /** Controls visibility of the search input. */\n  searchInput?: boolean;\n  /** Controls visibility of the user button. */\n  user?: boolean;\n}\n\nexport interface INavbarUserCard {\n  /** The alt value to set on the avatar. */\n  avatarAlt?: string;\n  /** The avatar image source value. */\n  avatarSrc?: string;\n  /** The email address of the user. */\n  email: string;\n  /** Text override for the Access MyTrimble button, allows for translation. */\n  myTrimbleButton?: string;\n  /** The name of the user */\n  name: string;\n  /** Text override for the Sign out button, allows for translation. */\n  signOutButton?: string;\n}\n\n/**\n * A customizable navbar component used for top level navigation of all Trimble applications.\n *\n * The component supports a 'main-menu', 'notifications', and 'apps' `<slot>` for injecting custom HTML menus.\n * It also supports a 'start', 'center', and 'end' `<slot>` for injecting additional custom HTML\n */\n@Component({\n  tag: 'modus-wc-navbar',\n  styleUrl: 'modus-wc-navbar.scss',\n  shadow: false,\n})\nexport class ModusWcNavbar {\n  private appsRef?: HTMLDivElement;\n  private condensedMenuRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLDivElement;\n  private notificationsRef?: HTMLDivElement;\n  private searchDebounceTimer: number | null = null;\n  private userRef?: HTMLDivElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The open state of the apps menu. */",
        "type": ": boolean"
      },
      {
        "name": "condensed",
        "description": "/** Replaces the text for \"Apps\" in the condensed menu. */\n  apps?: string;\n  /** Replaces the text for \"Help\" in the condensed menu. */\n  help?: string;\n  /** Replaces the text for \"Notifications\" in the condensed menu. */\n  notifications?: string;\n  /** Replaces the text for \"Search\" in the condensed menu. */\n  search?: string;\n}\n\nexport interface INavbarVisibility {\n  /** Controls the visibility of the AI button. */\n  ai?: boolean;\n  /** Controls visibility of the apps button. */\n  apps?: boolean;\n  /** Controls visibility of the help button. */\n  help?: boolean;\n  /** Controls visibility of the main menu button. */\n  mainMenu?: boolean;\n  /** Controls visibility of the notifications button. */\n  notifications?: boolean;\n  /** Controls visibility of the search button. */\n  search?: boolean;\n  /** Controls visibility of the search input. */\n  searchInput?: boolean;\n  /** Controls visibility of the user button. */\n  user?: boolean;\n}\n\nexport interface INavbarUserCard {\n  /** The alt value to set on the avatar. */\n  avatarAlt?: string;\n  /** The avatar image source value. */\n  avatarSrc?: string;\n  /** The email address of the user. */\n  email: string;\n  /** Text override for the Access MyTrimble button, allows for translation. */\n  myTrimbleButton?: string;\n  /** The name of the user */\n  name: string;\n  /** Text override for the Sign out button, allows for translation. */\n  signOutButton?: string;\n}\n\n/**\n * A customizable navbar component used for top level navigation of all Trimble applications.\n *\n * The component supports a 'main-menu', 'notifications', and 'apps' `<slot>` for injecting custom HTML menus.\n * It also supports a 'start', 'center', and 'end' `<slot>` for injecting additional custom HTML\n */\n@Component({\n  tag: 'modus-wc-navbar',\n  styleUrl: 'modus-wc-navbar.scss',\n  shadow: false,\n})\nexport class ModusWcNavbar {\n  private appsRef?: HTMLDivElement;\n  private condensedMenuRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLDivElement;\n  private notificationsRef?: HTMLDivElement;\n  private searchDebounceTimer: number | null = null;\n  private userRef?: HTMLDivElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The open state of the apps menu. */",
        "type": ": boolean"
      },
      {
        "name": "condensedMenuOpen",
        "description": "/** Replaces the text for \"Apps\" in the condensed menu. */\n  apps?: string;\n  /** Replaces the text for \"Help\" in the condensed menu. */\n  help?: string;\n  /** Replaces the text for \"Notifications\" in the condensed menu. */\n  notifications?: string;\n  /** Replaces the text for \"Search\" in the condensed menu. */\n  search?: string;\n}\n\nexport interface INavbarVisibility {\n  /** Controls the visibility of the AI button. */\n  ai?: boolean;\n  /** Controls visibility of the apps button. */\n  apps?: boolean;\n  /** Controls visibility of the help button. */\n  help?: boolean;\n  /** Controls visibility of the main menu button. */\n  mainMenu?: boolean;\n  /** Controls visibility of the notifications button. */\n  notifications?: boolean;\n  /** Controls visibility of the search button. */\n  search?: boolean;\n  /** Controls visibility of the search input. */\n  searchInput?: boolean;\n  /** Controls visibility of the user button. */\n  user?: boolean;\n}\n\nexport interface INavbarUserCard {\n  /** The alt value to set on the avatar. */\n  avatarAlt?: string;\n  /** The avatar image source value. */\n  avatarSrc?: string;\n  /** The email address of the user. */\n  email: string;\n  /** Text override for the Access MyTrimble button, allows for translation. */\n  myTrimbleButton?: string;\n  /** The name of the user */\n  name: string;\n  /** Text override for the Sign out button, allows for translation. */\n  signOutButton?: string;\n}\n\n/**\n * A customizable navbar component used for top level navigation of all Trimble applications.\n *\n * The component supports a 'main-menu', 'notifications', and 'apps' `<slot>` for injecting custom HTML menus.\n * It also supports a 'start', 'center', and 'end' `<slot>` for injecting additional custom HTML\n */\n@Component({\n  tag: 'modus-wc-navbar',\n  styleUrl: 'modus-wc-navbar.scss',\n  shadow: false,\n})\nexport class ModusWcNavbar {\n  private appsRef?: HTMLDivElement;\n  private condensedMenuRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLDivElement;\n  private notificationsRef?: HTMLDivElement;\n  private searchDebounceTimer: number | null = null;\n  private userRef?: HTMLDivElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The open state of the apps menu. */",
        "type": ": boolean"
      },
      {
        "name": "customClass",
        "description": "/** Replaces the text for \"Apps\" in the condensed menu. */\n  apps?: string;\n  /** Replaces the text for \"Help\" in the condensed menu. */\n  help?: string;\n  /** Replaces the text for \"Notifications\" in the condensed menu. */\n  notifications?: string;\n  /** Replaces the text for \"Search\" in the condensed menu. */\n  search?: string;\n}\n\nexport interface INavbarVisibility {\n  /** Controls the visibility of the AI button. */\n  ai?: boolean;\n  /** Controls visibility of the apps button. */\n  apps?: boolean;\n  /** Controls visibility of the help button. */\n  help?: boolean;\n  /** Controls visibility of the main menu button. */\n  mainMenu?: boolean;\n  /** Controls visibility of the notifications button. */\n  notifications?: boolean;\n  /** Controls visibility of the search button. */\n  search?: boolean;\n  /** Controls visibility of the search input. */\n  searchInput?: boolean;\n  /** Controls visibility of the user button. */\n  user?: boolean;\n}\n\nexport interface INavbarUserCard {\n  /** The alt value to set on the avatar. */\n  avatarAlt?: string;\n  /** The avatar image source value. */\n  avatarSrc?: string;\n  /** The email address of the user. */\n  email: string;\n  /** Text override for the Access MyTrimble button, allows for translation. */\n  myTrimbleButton?: string;\n  /** The name of the user */\n  name: string;\n  /** Text override for the Sign out button, allows for translation. */\n  signOutButton?: string;\n}\n\n/**\n * A customizable navbar component used for top level navigation of all Trimble applications.\n *\n * The component supports a 'main-menu', 'notifications', and 'apps' `<slot>` for injecting custom HTML menus.\n * It also supports a 'start', 'center', and 'end' `<slot>` for injecting additional custom HTML\n */\n@Component({\n  tag: 'modus-wc-navbar',\n  styleUrl: 'modus-wc-navbar.scss',\n  shadow: false,\n})\nexport class ModusWcNavbar {\n  private appsRef?: HTMLDivElement;\n  private condensedMenuRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLDivElement;\n  private notificationsRef?: HTMLDivElement;\n  private searchDebounceTimer: number | null = null;\n  private userRef?: HTMLDivElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The open state of the apps menu. */",
        "type": ": string"
      },
      {
        "name": "mainMenuOpen",
        "description": "/** Replaces the text for \"Apps\" in the condensed menu. */\n  apps?: string;\n  /** Replaces the text for \"Help\" in the condensed menu. */\n  help?: string;\n  /** Replaces the text for \"Notifications\" in the condensed menu. */\n  notifications?: string;\n  /** Replaces the text for \"Search\" in the condensed menu. */\n  search?: string;\n}\n\nexport interface INavbarVisibility {\n  /** Controls the visibility of the AI button. */\n  ai?: boolean;\n  /** Controls visibility of the apps button. */\n  apps?: boolean;\n  /** Controls visibility of the help button. */\n  help?: boolean;\n  /** Controls visibility of the main menu button. */\n  mainMenu?: boolean;\n  /** Controls visibility of the notifications button. */\n  notifications?: boolean;\n  /** Controls visibility of the search button. */\n  search?: boolean;\n  /** Controls visibility of the search input. */\n  searchInput?: boolean;\n  /** Controls visibility of the user button. */\n  user?: boolean;\n}\n\nexport interface INavbarUserCard {\n  /** The alt value to set on the avatar. */\n  avatarAlt?: string;\n  /** The avatar image source value. */\n  avatarSrc?: string;\n  /** The email address of the user. */\n  email: string;\n  /** Text override for the Access MyTrimble button, allows for translation. */\n  myTrimbleButton?: string;\n  /** The name of the user */\n  name: string;\n  /** Text override for the Sign out button, allows for translation. */\n  signOutButton?: string;\n}\n\n/**\n * A customizable navbar component used for top level navigation of all Trimble applications.\n *\n * The component supports a 'main-menu', 'notifications', and 'apps' `<slot>` for injecting custom HTML menus.\n * It also supports a 'start', 'center', and 'end' `<slot>` for injecting additional custom HTML\n */\n@Component({\n  tag: 'modus-wc-navbar',\n  styleUrl: 'modus-wc-navbar.scss',\n  shadow: false,\n})\nexport class ModusWcNavbar {\n  private appsRef?: HTMLDivElement;\n  private condensedMenuRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLDivElement;\n  private notificationsRef?: HTMLDivElement;\n  private searchDebounceTimer: number | null = null;\n  private userRef?: HTMLDivElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The open state of the apps menu. */",
        "type": ": boolean"
      },
      {
        "name": "notificationsMenuOpen",
        "description": "/** Replaces the text for \"Apps\" in the condensed menu. */\n  apps?: string;\n  /** Replaces the text for \"Help\" in the condensed menu. */\n  help?: string;\n  /** Replaces the text for \"Notifications\" in the condensed menu. */\n  notifications?: string;\n  /** Replaces the text for \"Search\" in the condensed menu. */\n  search?: string;\n}\n\nexport interface INavbarVisibility {\n  /** Controls the visibility of the AI button. */\n  ai?: boolean;\n  /** Controls visibility of the apps button. */\n  apps?: boolean;\n  /** Controls visibility of the help button. */\n  help?: boolean;\n  /** Controls visibility of the main menu button. */\n  mainMenu?: boolean;\n  /** Controls visibility of the notifications button. */\n  notifications?: boolean;\n  /** Controls visibility of the search button. */\n  search?: boolean;\n  /** Controls visibility of the search input. */\n  searchInput?: boolean;\n  /** Controls visibility of the user button. */\n  user?: boolean;\n}\n\nexport interface INavbarUserCard {\n  /** The alt value to set on the avatar. */\n  avatarAlt?: string;\n  /** The avatar image source value. */\n  avatarSrc?: string;\n  /** The email address of the user. */\n  email: string;\n  /** Text override for the Access MyTrimble button, allows for translation. */\n  myTrimbleButton?: string;\n  /** The name of the user */\n  name: string;\n  /** Text override for the Sign out button, allows for translation. */\n  signOutButton?: string;\n}\n\n/**\n * A customizable navbar component used for top level navigation of all Trimble applications.\n *\n * The component supports a 'main-menu', 'notifications', and 'apps' `<slot>` for injecting custom HTML menus.\n * It also supports a 'start', 'center', and 'end' `<slot>` for injecting additional custom HTML\n */\n@Component({\n  tag: 'modus-wc-navbar',\n  styleUrl: 'modus-wc-navbar.scss',\n  shadow: false,\n})\nexport class ModusWcNavbar {\n  private appsRef?: HTMLDivElement;\n  private condensedMenuRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLDivElement;\n  private notificationsRef?: HTMLDivElement;\n  private searchDebounceTimer: number | null = null;\n  private userRef?: HTMLDivElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The open state of the apps menu. */",
        "type": ": boolean"
      },
      {
        "name": "searchDebounceMs",
        "description": "/** Replaces the text for \"Apps\" in the condensed menu. */\n  apps?: string;\n  /** Replaces the text for \"Help\" in the condensed menu. */\n  help?: string;\n  /** Replaces the text for \"Notifications\" in the condensed menu. */\n  notifications?: string;\n  /** Replaces the text for \"Search\" in the condensed menu. */\n  search?: string;\n}\n\nexport interface INavbarVisibility {\n  /** Controls the visibility of the AI button. */\n  ai?: boolean;\n  /** Controls visibility of the apps button. */\n  apps?: boolean;\n  /** Controls visibility of the help button. */\n  help?: boolean;\n  /** Controls visibility of the main menu button. */\n  mainMenu?: boolean;\n  /** Controls visibility of the notifications button. */\n  notifications?: boolean;\n  /** Controls visibility of the search button. */\n  search?: boolean;\n  /** Controls visibility of the search input. */\n  searchInput?: boolean;\n  /** Controls visibility of the user button. */\n  user?: boolean;\n}\n\nexport interface INavbarUserCard {\n  /** The alt value to set on the avatar. */\n  avatarAlt?: string;\n  /** The avatar image source value. */\n  avatarSrc?: string;\n  /** The email address of the user. */\n  email: string;\n  /** Text override for the Access MyTrimble button, allows for translation. */\n  myTrimbleButton?: string;\n  /** The name of the user */\n  name: string;\n  /** Text override for the Sign out button, allows for translation. */\n  signOutButton?: string;\n}\n\n/**\n * A customizable navbar component used for top level navigation of all Trimble applications.\n *\n * The component supports a 'main-menu', 'notifications', and 'apps' `<slot>` for injecting custom HTML menus.\n * It also supports a 'start', 'center', and 'end' `<slot>` for injecting additional custom HTML\n */\n@Component({\n  tag: 'modus-wc-navbar',\n  styleUrl: 'modus-wc-navbar.scss',\n  shadow: false,\n})\nexport class ModusWcNavbar {\n  private appsRef?: HTMLDivElement;\n  private condensedMenuRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLDivElement;\n  private notificationsRef?: HTMLDivElement;\n  private searchDebounceTimer: number | null = null;\n  private userRef?: HTMLDivElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The open state of the apps menu. */",
        "type": ": number"
      },
      {
        "name": "searchInputOpen",
        "description": "/** Replaces the text for \"Apps\" in the condensed menu. */\n  apps?: string;\n  /** Replaces the text for \"Help\" in the condensed menu. */\n  help?: string;\n  /** Replaces the text for \"Notifications\" in the condensed menu. */\n  notifications?: string;\n  /** Replaces the text for \"Search\" in the condensed menu. */\n  search?: string;\n}\n\nexport interface INavbarVisibility {\n  /** Controls the visibility of the AI button. */\n  ai?: boolean;\n  /** Controls visibility of the apps button. */\n  apps?: boolean;\n  /** Controls visibility of the help button. */\n  help?: boolean;\n  /** Controls visibility of the main menu button. */\n  mainMenu?: boolean;\n  /** Controls visibility of the notifications button. */\n  notifications?: boolean;\n  /** Controls visibility of the search button. */\n  search?: boolean;\n  /** Controls visibility of the search input. */\n  searchInput?: boolean;\n  /** Controls visibility of the user button. */\n  user?: boolean;\n}\n\nexport interface INavbarUserCard {\n  /** The alt value to set on the avatar. */\n  avatarAlt?: string;\n  /** The avatar image source value. */\n  avatarSrc?: string;\n  /** The email address of the user. */\n  email: string;\n  /** Text override for the Access MyTrimble button, allows for translation. */\n  myTrimbleButton?: string;\n  /** The name of the user */\n  name: string;\n  /** Text override for the Sign out button, allows for translation. */\n  signOutButton?: string;\n}\n\n/**\n * A customizable navbar component used for top level navigation of all Trimble applications.\n *\n * The component supports a 'main-menu', 'notifications', and 'apps' `<slot>` for injecting custom HTML menus.\n * It also supports a 'start', 'center', and 'end' `<slot>` for injecting additional custom HTML\n */\n@Component({\n  tag: 'modus-wc-navbar',\n  styleUrl: 'modus-wc-navbar.scss',\n  shadow: false,\n})\nexport class ModusWcNavbar {\n  private appsRef?: HTMLDivElement;\n  private condensedMenuRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLDivElement;\n  private notificationsRef?: HTMLDivElement;\n  private searchDebounceTimer: number | null = null;\n  private userRef?: HTMLDivElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The open state of the apps menu. */",
        "type": ": boolean"
      },
      {
        "name": "textOverrides",
        "description": "/** Replaces the text for \"Apps\" in the condensed menu. */\n  apps?: string;\n  /** Replaces the text for \"Help\" in the condensed menu. */\n  help?: string;\n  /** Replaces the text for \"Notifications\" in the condensed menu. */\n  notifications?: string;\n  /** Replaces the text for \"Search\" in the condensed menu. */\n  search?: string;\n}\n\nexport interface INavbarVisibility {\n  /** Controls the visibility of the AI button. */\n  ai?: boolean;\n  /** Controls visibility of the apps button. */\n  apps?: boolean;\n  /** Controls visibility of the help button. */\n  help?: boolean;\n  /** Controls visibility of the main menu button. */\n  mainMenu?: boolean;\n  /** Controls visibility of the notifications button. */\n  notifications?: boolean;\n  /** Controls visibility of the search button. */\n  search?: boolean;\n  /** Controls visibility of the search input. */\n  searchInput?: boolean;\n  /** Controls visibility of the user button. */\n  user?: boolean;\n}\n\nexport interface INavbarUserCard {\n  /** The alt value to set on the avatar. */\n  avatarAlt?: string;\n  /** The avatar image source value. */\n  avatarSrc?: string;\n  /** The email address of the user. */\n  email: string;\n  /** Text override for the Access MyTrimble button, allows for translation. */\n  myTrimbleButton?: string;\n  /** The name of the user */\n  name: string;\n  /** Text override for the Sign out button, allows for translation. */\n  signOutButton?: string;\n}\n\n/**\n * A customizable navbar component used for top level navigation of all Trimble applications.\n *\n * The component supports a 'main-menu', 'notifications', and 'apps' `<slot>` for injecting custom HTML menus.\n * It also supports a 'start', 'center', and 'end' `<slot>` for injecting additional custom HTML\n */\n@Component({\n  tag: 'modus-wc-navbar',\n  styleUrl: 'modus-wc-navbar.scss',\n  shadow: false,\n})\nexport class ModusWcNavbar {\n  private appsRef?: HTMLDivElement;\n  private condensedMenuRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLDivElement;\n  private notificationsRef?: HTMLDivElement;\n  private searchDebounceTimer: number | null = null;\n  private userRef?: HTMLDivElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The open state of the apps menu. */",
        "type": ": INavbarTextOverrides"
      },
      {
        "name": "userCard",
        "description": "/** Replaces the text for \"Apps\" in the condensed menu. */\n  apps?: string;\n  /** Replaces the text for \"Help\" in the condensed menu. */\n  help?: string;\n  /** Replaces the text for \"Notifications\" in the condensed menu. */\n  notifications?: string;\n  /** Replaces the text for \"Search\" in the condensed menu. */\n  search?: string;\n}\n\nexport interface INavbarVisibility {\n  /** Controls the visibility of the AI button. */\n  ai?: boolean;\n  /** Controls visibility of the apps button. */\n  apps?: boolean;\n  /** Controls visibility of the help button. */\n  help?: boolean;\n  /** Controls visibility of the main menu button. */\n  mainMenu?: boolean;\n  /** Controls visibility of the notifications button. */\n  notifications?: boolean;\n  /** Controls visibility of the search button. */\n  search?: boolean;\n  /** Controls visibility of the search input. */\n  searchInput?: boolean;\n  /** Controls visibility of the user button. */\n  user?: boolean;\n}\n\nexport interface INavbarUserCard {\n  /** The alt value to set on the avatar. */\n  avatarAlt?: string;\n  /** The avatar image source value. */\n  avatarSrc?: string;\n  /** The email address of the user. */\n  email: string;\n  /** Text override for the Access MyTrimble button, allows for translation. */\n  myTrimbleButton?: string;\n  /** The name of the user */\n  name: string;\n  /** Text override for the Sign out button, allows for translation. */\n  signOutButton?: string;\n}\n\n/**\n * A customizable navbar component used for top level navigation of all Trimble applications.\n *\n * The component supports a 'main-menu', 'notifications', and 'apps' `<slot>` for injecting custom HTML menus.\n * It also supports a 'start', 'center', and 'end' `<slot>` for injecting additional custom HTML\n */\n@Component({\n  tag: 'modus-wc-navbar',\n  styleUrl: 'modus-wc-navbar.scss',\n  shadow: false,\n})\nexport class ModusWcNavbar {\n  private appsRef?: HTMLDivElement;\n  private condensedMenuRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLDivElement;\n  private notificationsRef?: HTMLDivElement;\n  private searchDebounceTimer: number | null = null;\n  private userRef?: HTMLDivElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The open state of the apps menu. */",
        "type": ": INavbarUserCard"
      },
      {
        "name": "userMenuOpen",
        "description": "/** Replaces the text for \"Apps\" in the condensed menu. */\n  apps?: string;\n  /** Replaces the text for \"Help\" in the condensed menu. */\n  help?: string;\n  /** Replaces the text for \"Notifications\" in the condensed menu. */\n  notifications?: string;\n  /** Replaces the text for \"Search\" in the condensed menu. */\n  search?: string;\n}\n\nexport interface INavbarVisibility {\n  /** Controls the visibility of the AI button. */\n  ai?: boolean;\n  /** Controls visibility of the apps button. */\n  apps?: boolean;\n  /** Controls visibility of the help button. */\n  help?: boolean;\n  /** Controls visibility of the main menu button. */\n  mainMenu?: boolean;\n  /** Controls visibility of the notifications button. */\n  notifications?: boolean;\n  /** Controls visibility of the search button. */\n  search?: boolean;\n  /** Controls visibility of the search input. */\n  searchInput?: boolean;\n  /** Controls visibility of the user button. */\n  user?: boolean;\n}\n\nexport interface INavbarUserCard {\n  /** The alt value to set on the avatar. */\n  avatarAlt?: string;\n  /** The avatar image source value. */\n  avatarSrc?: string;\n  /** The email address of the user. */\n  email: string;\n  /** Text override for the Access MyTrimble button, allows for translation. */\n  myTrimbleButton?: string;\n  /** The name of the user */\n  name: string;\n  /** Text override for the Sign out button, allows for translation. */\n  signOutButton?: string;\n}\n\n/**\n * A customizable navbar component used for top level navigation of all Trimble applications.\n *\n * The component supports a 'main-menu', 'notifications', and 'apps' `<slot>` for injecting custom HTML menus.\n * It also supports a 'start', 'center', and 'end' `<slot>` for injecting additional custom HTML\n */\n@Component({\n  tag: 'modus-wc-navbar',\n  styleUrl: 'modus-wc-navbar.scss',\n  shadow: false,\n})\nexport class ModusWcNavbar {\n  private appsRef?: HTMLDivElement;\n  private condensedMenuRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLDivElement;\n  private notificationsRef?: HTMLDivElement;\n  private searchDebounceTimer: number | null = null;\n  private userRef?: HTMLDivElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The open state of the apps menu. */",
        "type": ": boolean"
      },
      {
        "name": "visibility",
        "description": "/** Replaces the text for \"Apps\" in the condensed menu. */\n  apps?: string;\n  /** Replaces the text for \"Help\" in the condensed menu. */\n  help?: string;\n  /** Replaces the text for \"Notifications\" in the condensed menu. */\n  notifications?: string;\n  /** Replaces the text for \"Search\" in the condensed menu. */\n  search?: string;\n}\n\nexport interface INavbarVisibility {\n  /** Controls the visibility of the AI button. */\n  ai?: boolean;\n  /** Controls visibility of the apps button. */\n  apps?: boolean;\n  /** Controls visibility of the help button. */\n  help?: boolean;\n  /** Controls visibility of the main menu button. */\n  mainMenu?: boolean;\n  /** Controls visibility of the notifications button. */\n  notifications?: boolean;\n  /** Controls visibility of the search button. */\n  search?: boolean;\n  /** Controls visibility of the search input. */\n  searchInput?: boolean;\n  /** Controls visibility of the user button. */\n  user?: boolean;\n}\n\nexport interface INavbarUserCard {\n  /** The alt value to set on the avatar. */\n  avatarAlt?: string;\n  /** The avatar image source value. */\n  avatarSrc?: string;\n  /** The email address of the user. */\n  email: string;\n  /** Text override for the Access MyTrimble button, allows for translation. */\n  myTrimbleButton?: string;\n  /** The name of the user */\n  name: string;\n  /** Text override for the Sign out button, allows for translation. */\n  signOutButton?: string;\n}\n\n/**\n * A customizable navbar component used for top level navigation of all Trimble applications.\n *\n * The component supports a 'main-menu', 'notifications', and 'apps' `<slot>` for injecting custom HTML menus.\n * It also supports a 'start', 'center', and 'end' `<slot>` for injecting additional custom HTML\n */\n@Component({\n  tag: 'modus-wc-navbar',\n  styleUrl: 'modus-wc-navbar.scss',\n  shadow: false,\n})\nexport class ModusWcNavbar {\n  private appsRef?: HTMLDivElement;\n  private condensedMenuRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLDivElement;\n  private notificationsRef?: HTMLDivElement;\n  private searchDebounceTimer: number | null = null;\n  private userRef?: HTMLDivElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The open state of the apps menu. */",
        "type": ": INavbarVisibility"
      }
    ],
    "events": [
      {
        "name": "aiClick",
        "description": "/** Replaces the text for \"Apps\" in the condensed menu. */\n  apps?: string;\n  /** Replaces the text for \"Help\" in the condensed menu. */\n  help?: string;\n  /** Replaces the text for \"Notifications\" in the condensed menu. */\n  notifications?: string;\n  /** Replaces the text for \"Search\" in the condensed menu. */\n  search?: string;\n}\n\nexport interface INavbarVisibility {\n  /** Controls the visibility of the AI button. */\n  ai?: boolean;\n  /** Controls visibility of the apps button. */\n  apps?: boolean;\n  /** Controls visibility of the help button. */\n  help?: boolean;\n  /** Controls visibility of the main menu button. */\n  mainMenu?: boolean;\n  /** Controls visibility of the notifications button. */\n  notifications?: boolean;\n  /** Controls visibility of the search button. */\n  search?: boolean;\n  /** Controls visibility of the search input. */\n  searchInput?: boolean;\n  /** Controls visibility of the user button. */\n  user?: boolean;\n}\n\nexport interface INavbarUserCard {\n  /** The alt value to set on the avatar. */\n  avatarAlt?: string;\n  /** The avatar image source value. */\n  avatarSrc?: string;\n  /** The email address of the user. */\n  email: string;\n  /** Text override for the Access MyTrimble button, allows for translation. */\n  myTrimbleButton?: string;\n  /** The name of the user */\n  name: string;\n  /** Text override for the Sign out button, allows for translation. */\n  signOutButton?: string;\n}\n\n/**\n * A customizable navbar component used for top level navigation of all Trimble applications.\n *\n * The component supports a 'main-menu', 'notifications', and 'apps' `<slot>` for injecting custom HTML menus.\n * It also supports a 'start', 'center', and 'end' `<slot>` for injecting additional custom HTML\n */\n@Component({\n  tag: 'modus-wc-navbar',\n  styleUrl: 'modus-wc-navbar.scss',\n  shadow: false,\n})\nexport class ModusWcNavbar {\n  private appsRef?: HTMLDivElement;\n  private condensedMenuRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLDivElement;\n  private notificationsRef?: HTMLDivElement;\n  private searchDebounceTimer: number | null = null;\n  private userRef?: HTMLDivElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The open state of the apps menu. */\n  @Prop({ mutable: true }) appsMenuOpen?: boolean = false;\n\n  /** Applies condensed layout and styling. */\n  @Prop() condensed?: boolean = false;\n\n  /** The open state of the condensed menu. */\n  @Prop({ mutable: true }) condensedMenuOpen?: boolean = false;\n\n  /** Custom CSS class to apply to the host element. */\n  @Prop() customClass?: string = '';\n\n  /** The open state of the main menu. */\n  @Prop({ mutable: true }) mainMenuOpen?: boolean = false;\n\n  /** The open state of the notifications menu. */\n  @Prop({ mutable: true }) notificationsMenuOpen?: boolean = false;\n\n  /** Debounce time in milliseconds for search input changes. Default is 300ms. */\n  @Prop() searchDebounceMs?: number = 300;\n\n  /** The open state of the search input. */\n  @Prop({ mutable: true }) searchInputOpen?: boolean = false;\n\n  /** Text replacements for the navbar. */\n  @Prop() textOverrides?: INavbarTextOverrides;\n\n  /** User information used to render the user card. */\n  @Prop() userCard!: INavbarUserCard;\n\n  /** The open state of the user menu. */\n  @Prop({ mutable: true }) userMenuOpen?: boolean = false;\n\n  /** The visibility of individual navbar buttons. Default is user profile visible, others hidden. */\n  @Prop() visibility?: INavbarVisibility = {\n    ai: false,\n    apps: false,\n    help: false,\n    mainMenu: false,\n    notifications: false,\n    search: false,\n    searchInput: false,\n    user: true,\n  };\n\n  /** Event emitted when the AI button is clicked or activated via keyboard. */"
      },
      {
        "name": "appsClick",
        "description": "/** Replaces the text for \"Apps\" in the condensed menu. */\n  apps?: string;\n  /** Replaces the text for \"Help\" in the condensed menu. */\n  help?: string;\n  /** Replaces the text for \"Notifications\" in the condensed menu. */\n  notifications?: string;\n  /** Replaces the text for \"Search\" in the condensed menu. */\n  search?: string;\n}\n\nexport interface INavbarVisibility {\n  /** Controls the visibility of the AI button. */\n  ai?: boolean;\n  /** Controls visibility of the apps button. */\n  apps?: boolean;\n  /** Controls visibility of the help button. */\n  help?: boolean;\n  /** Controls visibility of the main menu button. */\n  mainMenu?: boolean;\n  /** Controls visibility of the notifications button. */\n  notifications?: boolean;\n  /** Controls visibility of the search button. */\n  search?: boolean;\n  /** Controls visibility of the search input. */\n  searchInput?: boolean;\n  /** Controls visibility of the user button. */\n  user?: boolean;\n}\n\nexport interface INavbarUserCard {\n  /** The alt value to set on the avatar. */\n  avatarAlt?: string;\n  /** The avatar image source value. */\n  avatarSrc?: string;\n  /** The email address of the user. */\n  email: string;\n  /** Text override for the Access MyTrimble button, allows for translation. */\n  myTrimbleButton?: string;\n  /** The name of the user */\n  name: string;\n  /** Text override for the Sign out button, allows for translation. */\n  signOutButton?: string;\n}\n\n/**\n * A customizable navbar component used for top level navigation of all Trimble applications.\n *\n * The component supports a 'main-menu', 'notifications', and 'apps' `<slot>` for injecting custom HTML menus.\n * It also supports a 'start', 'center', and 'end' `<slot>` for injecting additional custom HTML\n */\n@Component({\n  tag: 'modus-wc-navbar',\n  styleUrl: 'modus-wc-navbar.scss',\n  shadow: false,\n})\nexport class ModusWcNavbar {\n  private appsRef?: HTMLDivElement;\n  private condensedMenuRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLDivElement;\n  private notificationsRef?: HTMLDivElement;\n  private searchDebounceTimer: number | null = null;\n  private userRef?: HTMLDivElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The open state of the apps menu. */\n  @Prop({ mutable: true }) appsMenuOpen?: boolean = false;\n\n  /** Applies condensed layout and styling. */\n  @Prop() condensed?: boolean = false;\n\n  /** The open state of the condensed menu. */\n  @Prop({ mutable: true }) condensedMenuOpen?: boolean = false;\n\n  /** Custom CSS class to apply to the host element. */\n  @Prop() customClass?: string = '';\n\n  /** The open state of the main menu. */\n  @Prop({ mutable: true }) mainMenuOpen?: boolean = false;\n\n  /** The open state of the notifications menu. */\n  @Prop({ mutable: true }) notificationsMenuOpen?: boolean = false;\n\n  /** Debounce time in milliseconds for search input changes. Default is 300ms. */\n  @Prop() searchDebounceMs?: number = 300;\n\n  /** The open state of the search input. */\n  @Prop({ mutable: true }) searchInputOpen?: boolean = false;\n\n  /** Text replacements for the navbar. */\n  @Prop() textOverrides?: INavbarTextOverrides;\n\n  /** User information used to render the user card. */\n  @Prop() userCard!: INavbarUserCard;\n\n  /** The open state of the user menu. */\n  @Prop({ mutable: true }) userMenuOpen?: boolean = false;\n\n  /** The visibility of individual navbar buttons. Default is user profile visible, others hidden. */\n  @Prop() visibility?: INavbarVisibility = {\n    ai: false,\n    apps: false,\n    help: false,\n    mainMenu: false,\n    notifications: false,\n    search: false,\n    searchInput: false,\n    user: true,\n  };\n\n  /** Event emitted when the AI button is clicked or activated via keyboard. */"
      },
      {
        "name": "appsMenuOpenChange",
        "description": "/** Replaces the text for \"Apps\" in the condensed menu. */\n  apps?: string;\n  /** Replaces the text for \"Help\" in the condensed menu. */\n  help?: string;\n  /** Replaces the text for \"Notifications\" in the condensed menu. */\n  notifications?: string;\n  /** Replaces the text for \"Search\" in the condensed menu. */\n  search?: string;\n}\n\nexport interface INavbarVisibility {\n  /** Controls the visibility of the AI button. */\n  ai?: boolean;\n  /** Controls visibility of the apps button. */\n  apps?: boolean;\n  /** Controls visibility of the help button. */\n  help?: boolean;\n  /** Controls visibility of the main menu button. */\n  mainMenu?: boolean;\n  /** Controls visibility of the notifications button. */\n  notifications?: boolean;\n  /** Controls visibility of the search button. */\n  search?: boolean;\n  /** Controls visibility of the search input. */\n  searchInput?: boolean;\n  /** Controls visibility of the user button. */\n  user?: boolean;\n}\n\nexport interface INavbarUserCard {\n  /** The alt value to set on the avatar. */\n  avatarAlt?: string;\n  /** The avatar image source value. */\n  avatarSrc?: string;\n  /** The email address of the user. */\n  email: string;\n  /** Text override for the Access MyTrimble button, allows for translation. */\n  myTrimbleButton?: string;\n  /** The name of the user */\n  name: string;\n  /** Text override for the Sign out button, allows for translation. */\n  signOutButton?: string;\n}\n\n/**\n * A customizable navbar component used for top level navigation of all Trimble applications.\n *\n * The component supports a 'main-menu', 'notifications', and 'apps' `<slot>` for injecting custom HTML menus.\n * It also supports a 'start', 'center', and 'end' `<slot>` for injecting additional custom HTML\n */\n@Component({\n  tag: 'modus-wc-navbar',\n  styleUrl: 'modus-wc-navbar.scss',\n  shadow: false,\n})\nexport class ModusWcNavbar {\n  private appsRef?: HTMLDivElement;\n  private condensedMenuRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLDivElement;\n  private notificationsRef?: HTMLDivElement;\n  private searchDebounceTimer: number | null = null;\n  private userRef?: HTMLDivElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The open state of the apps menu. */\n  @Prop({ mutable: true }) appsMenuOpen?: boolean = false;\n\n  /** Applies condensed layout and styling. */\n  @Prop() condensed?: boolean = false;\n\n  /** The open state of the condensed menu. */\n  @Prop({ mutable: true }) condensedMenuOpen?: boolean = false;\n\n  /** Custom CSS class to apply to the host element. */\n  @Prop() customClass?: string = '';\n\n  /** The open state of the main menu. */\n  @Prop({ mutable: true }) mainMenuOpen?: boolean = false;\n\n  /** The open state of the notifications menu. */\n  @Prop({ mutable: true }) notificationsMenuOpen?: boolean = false;\n\n  /** Debounce time in milliseconds for search input changes. Default is 300ms. */\n  @Prop() searchDebounceMs?: number = 300;\n\n  /** The open state of the search input. */\n  @Prop({ mutable: true }) searchInputOpen?: boolean = false;\n\n  /** Text replacements for the navbar. */\n  @Prop() textOverrides?: INavbarTextOverrides;\n\n  /** User information used to render the user card. */\n  @Prop() userCard!: INavbarUserCard;\n\n  /** The open state of the user menu. */\n  @Prop({ mutable: true }) userMenuOpen?: boolean = false;\n\n  /** The visibility of individual navbar buttons. Default is user profile visible, others hidden. */\n  @Prop() visibility?: INavbarVisibility = {\n    ai: false,\n    apps: false,\n    help: false,\n    mainMenu: false,\n    notifications: false,\n    search: false,\n    searchInput: false,\n    user: true,\n  };\n\n  /** Event emitted when the AI button is clicked or activated via keyboard. */"
      },
      {
        "name": "condensedMenuOpenChange",
        "description": "/** Replaces the text for \"Apps\" in the condensed menu. */\n  apps?: string;\n  /** Replaces the text for \"Help\" in the condensed menu. */\n  help?: string;\n  /** Replaces the text for \"Notifications\" in the condensed menu. */\n  notifications?: string;\n  /** Replaces the text for \"Search\" in the condensed menu. */\n  search?: string;\n}\n\nexport interface INavbarVisibility {\n  /** Controls the visibility of the AI button. */\n  ai?: boolean;\n  /** Controls visibility of the apps button. */\n  apps?: boolean;\n  /** Controls visibility of the help button. */\n  help?: boolean;\n  /** Controls visibility of the main menu button. */\n  mainMenu?: boolean;\n  /** Controls visibility of the notifications button. */\n  notifications?: boolean;\n  /** Controls visibility of the search button. */\n  search?: boolean;\n  /** Controls visibility of the search input. */\n  searchInput?: boolean;\n  /** Controls visibility of the user button. */\n  user?: boolean;\n}\n\nexport interface INavbarUserCard {\n  /** The alt value to set on the avatar. */\n  avatarAlt?: string;\n  /** The avatar image source value. */\n  avatarSrc?: string;\n  /** The email address of the user. */\n  email: string;\n  /** Text override for the Access MyTrimble button, allows for translation. */\n  myTrimbleButton?: string;\n  /** The name of the user */\n  name: string;\n  /** Text override for the Sign out button, allows for translation. */\n  signOutButton?: string;\n}\n\n/**\n * A customizable navbar component used for top level navigation of all Trimble applications.\n *\n * The component supports a 'main-menu', 'notifications', and 'apps' `<slot>` for injecting custom HTML menus.\n * It also supports a 'start', 'center', and 'end' `<slot>` for injecting additional custom HTML\n */\n@Component({\n  tag: 'modus-wc-navbar',\n  styleUrl: 'modus-wc-navbar.scss',\n  shadow: false,\n})\nexport class ModusWcNavbar {\n  private appsRef?: HTMLDivElement;\n  private condensedMenuRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLDivElement;\n  private notificationsRef?: HTMLDivElement;\n  private searchDebounceTimer: number | null = null;\n  private userRef?: HTMLDivElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The open state of the apps menu. */\n  @Prop({ mutable: true }) appsMenuOpen?: boolean = false;\n\n  /** Applies condensed layout and styling. */\n  @Prop() condensed?: boolean = false;\n\n  /** The open state of the condensed menu. */\n  @Prop({ mutable: true }) condensedMenuOpen?: boolean = false;\n\n  /** Custom CSS class to apply to the host element. */\n  @Prop() customClass?: string = '';\n\n  /** The open state of the main menu. */\n  @Prop({ mutable: true }) mainMenuOpen?: boolean = false;\n\n  /** The open state of the notifications menu. */\n  @Prop({ mutable: true }) notificationsMenuOpen?: boolean = false;\n\n  /** Debounce time in milliseconds for search input changes. Default is 300ms. */\n  @Prop() searchDebounceMs?: number = 300;\n\n  /** The open state of the search input. */\n  @Prop({ mutable: true }) searchInputOpen?: boolean = false;\n\n  /** Text replacements for the navbar. */\n  @Prop() textOverrides?: INavbarTextOverrides;\n\n  /** User information used to render the user card. */\n  @Prop() userCard!: INavbarUserCard;\n\n  /** The open state of the user menu. */\n  @Prop({ mutable: true }) userMenuOpen?: boolean = false;\n\n  /** The visibility of individual navbar buttons. Default is user profile visible, others hidden. */\n  @Prop() visibility?: INavbarVisibility = {\n    ai: false,\n    apps: false,\n    help: false,\n    mainMenu: false,\n    notifications: false,\n    search: false,\n    searchInput: false,\n    user: true,\n  };\n\n  /** Event emitted when the AI button is clicked or activated via keyboard. */"
      },
      {
        "name": "helpClick",
        "description": "/** Replaces the text for \"Apps\" in the condensed menu. */\n  apps?: string;\n  /** Replaces the text for \"Help\" in the condensed menu. */\n  help?: string;\n  /** Replaces the text for \"Notifications\" in the condensed menu. */\n  notifications?: string;\n  /** Replaces the text for \"Search\" in the condensed menu. */\n  search?: string;\n}\n\nexport interface INavbarVisibility {\n  /** Controls the visibility of the AI button. */\n  ai?: boolean;\n  /** Controls visibility of the apps button. */\n  apps?: boolean;\n  /** Controls visibility of the help button. */\n  help?: boolean;\n  /** Controls visibility of the main menu button. */\n  mainMenu?: boolean;\n  /** Controls visibility of the notifications button. */\n  notifications?: boolean;\n  /** Controls visibility of the search button. */\n  search?: boolean;\n  /** Controls visibility of the search input. */\n  searchInput?: boolean;\n  /** Controls visibility of the user button. */\n  user?: boolean;\n}\n\nexport interface INavbarUserCard {\n  /** The alt value to set on the avatar. */\n  avatarAlt?: string;\n  /** The avatar image source value. */\n  avatarSrc?: string;\n  /** The email address of the user. */\n  email: string;\n  /** Text override for the Access MyTrimble button, allows for translation. */\n  myTrimbleButton?: string;\n  /** The name of the user */\n  name: string;\n  /** Text override for the Sign out button, allows for translation. */\n  signOutButton?: string;\n}\n\n/**\n * A customizable navbar component used for top level navigation of all Trimble applications.\n *\n * The component supports a 'main-menu', 'notifications', and 'apps' `<slot>` for injecting custom HTML menus.\n * It also supports a 'start', 'center', and 'end' `<slot>` for injecting additional custom HTML\n */\n@Component({\n  tag: 'modus-wc-navbar',\n  styleUrl: 'modus-wc-navbar.scss',\n  shadow: false,\n})\nexport class ModusWcNavbar {\n  private appsRef?: HTMLDivElement;\n  private condensedMenuRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLDivElement;\n  private notificationsRef?: HTMLDivElement;\n  private searchDebounceTimer: number | null = null;\n  private userRef?: HTMLDivElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The open state of the apps menu. */\n  @Prop({ mutable: true }) appsMenuOpen?: boolean = false;\n\n  /** Applies condensed layout and styling. */\n  @Prop() condensed?: boolean = false;\n\n  /** The open state of the condensed menu. */\n  @Prop({ mutable: true }) condensedMenuOpen?: boolean = false;\n\n  /** Custom CSS class to apply to the host element. */\n  @Prop() customClass?: string = '';\n\n  /** The open state of the main menu. */\n  @Prop({ mutable: true }) mainMenuOpen?: boolean = false;\n\n  /** The open state of the notifications menu. */\n  @Prop({ mutable: true }) notificationsMenuOpen?: boolean = false;\n\n  /** Debounce time in milliseconds for search input changes. Default is 300ms. */\n  @Prop() searchDebounceMs?: number = 300;\n\n  /** The open state of the search input. */\n  @Prop({ mutable: true }) searchInputOpen?: boolean = false;\n\n  /** Text replacements for the navbar. */\n  @Prop() textOverrides?: INavbarTextOverrides;\n\n  /** User information used to render the user card. */\n  @Prop() userCard!: INavbarUserCard;\n\n  /** The open state of the user menu. */\n  @Prop({ mutable: true }) userMenuOpen?: boolean = false;\n\n  /** The visibility of individual navbar buttons. Default is user profile visible, others hidden. */\n  @Prop() visibility?: INavbarVisibility = {\n    ai: false,\n    apps: false,\n    help: false,\n    mainMenu: false,\n    notifications: false,\n    search: false,\n    searchInput: false,\n    user: true,\n  };\n\n  /** Event emitted when the AI button is clicked or activated via keyboard. */"
      },
      {
        "name": "mainMenuOpenChange",
        "description": "/** Replaces the text for \"Apps\" in the condensed menu. */\n  apps?: string;\n  /** Replaces the text for \"Help\" in the condensed menu. */\n  help?: string;\n  /** Replaces the text for \"Notifications\" in the condensed menu. */\n  notifications?: string;\n  /** Replaces the text for \"Search\" in the condensed menu. */\n  search?: string;\n}\n\nexport interface INavbarVisibility {\n  /** Controls the visibility of the AI button. */\n  ai?: boolean;\n  /** Controls visibility of the apps button. */\n  apps?: boolean;\n  /** Controls visibility of the help button. */\n  help?: boolean;\n  /** Controls visibility of the main menu button. */\n  mainMenu?: boolean;\n  /** Controls visibility of the notifications button. */\n  notifications?: boolean;\n  /** Controls visibility of the search button. */\n  search?: boolean;\n  /** Controls visibility of the search input. */\n  searchInput?: boolean;\n  /** Controls visibility of the user button. */\n  user?: boolean;\n}\n\nexport interface INavbarUserCard {\n  /** The alt value to set on the avatar. */\n  avatarAlt?: string;\n  /** The avatar image source value. */\n  avatarSrc?: string;\n  /** The email address of the user. */\n  email: string;\n  /** Text override for the Access MyTrimble button, allows for translation. */\n  myTrimbleButton?: string;\n  /** The name of the user */\n  name: string;\n  /** Text override for the Sign out button, allows for translation. */\n  signOutButton?: string;\n}\n\n/**\n * A customizable navbar component used for top level navigation of all Trimble applications.\n *\n * The component supports a 'main-menu', 'notifications', and 'apps' `<slot>` for injecting custom HTML menus.\n * It also supports a 'start', 'center', and 'end' `<slot>` for injecting additional custom HTML\n */\n@Component({\n  tag: 'modus-wc-navbar',\n  styleUrl: 'modus-wc-navbar.scss',\n  shadow: false,\n})\nexport class ModusWcNavbar {\n  private appsRef?: HTMLDivElement;\n  private condensedMenuRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLDivElement;\n  private notificationsRef?: HTMLDivElement;\n  private searchDebounceTimer: number | null = null;\n  private userRef?: HTMLDivElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The open state of the apps menu. */\n  @Prop({ mutable: true }) appsMenuOpen?: boolean = false;\n\n  /** Applies condensed layout and styling. */\n  @Prop() condensed?: boolean = false;\n\n  /** The open state of the condensed menu. */\n  @Prop({ mutable: true }) condensedMenuOpen?: boolean = false;\n\n  /** Custom CSS class to apply to the host element. */\n  @Prop() customClass?: string = '';\n\n  /** The open state of the main menu. */\n  @Prop({ mutable: true }) mainMenuOpen?: boolean = false;\n\n  /** The open state of the notifications menu. */\n  @Prop({ mutable: true }) notificationsMenuOpen?: boolean = false;\n\n  /** Debounce time in milliseconds for search input changes. Default is 300ms. */\n  @Prop() searchDebounceMs?: number = 300;\n\n  /** The open state of the search input. */\n  @Prop({ mutable: true }) searchInputOpen?: boolean = false;\n\n  /** Text replacements for the navbar. */\n  @Prop() textOverrides?: INavbarTextOverrides;\n\n  /** User information used to render the user card. */\n  @Prop() userCard!: INavbarUserCard;\n\n  /** The open state of the user menu. */\n  @Prop({ mutable: true }) userMenuOpen?: boolean = false;\n\n  /** The visibility of individual navbar buttons. Default is user profile visible, others hidden. */\n  @Prop() visibility?: INavbarVisibility = {\n    ai: false,\n    apps: false,\n    help: false,\n    mainMenu: false,\n    notifications: false,\n    search: false,\n    searchInput: false,\n    user: true,\n  };\n\n  /** Event emitted when the AI button is clicked or activated via keyboard. */"
      },
      {
        "name": "myTrimbleClick",
        "description": "/** Replaces the text for \"Apps\" in the condensed menu. */\n  apps?: string;\n  /** Replaces the text for \"Help\" in the condensed menu. */\n  help?: string;\n  /** Replaces the text for \"Notifications\" in the condensed menu. */\n  notifications?: string;\n  /** Replaces the text for \"Search\" in the condensed menu. */\n  search?: string;\n}\n\nexport interface INavbarVisibility {\n  /** Controls the visibility of the AI button. */\n  ai?: boolean;\n  /** Controls visibility of the apps button. */\n  apps?: boolean;\n  /** Controls visibility of the help button. */\n  help?: boolean;\n  /** Controls visibility of the main menu button. */\n  mainMenu?: boolean;\n  /** Controls visibility of the notifications button. */\n  notifications?: boolean;\n  /** Controls visibility of the search button. */\n  search?: boolean;\n  /** Controls visibility of the search input. */\n  searchInput?: boolean;\n  /** Controls visibility of the user button. */\n  user?: boolean;\n}\n\nexport interface INavbarUserCard {\n  /** The alt value to set on the avatar. */\n  avatarAlt?: string;\n  /** The avatar image source value. */\n  avatarSrc?: string;\n  /** The email address of the user. */\n  email: string;\n  /** Text override for the Access MyTrimble button, allows for translation. */\n  myTrimbleButton?: string;\n  /** The name of the user */\n  name: string;\n  /** Text override for the Sign out button, allows for translation. */\n  signOutButton?: string;\n}\n\n/**\n * A customizable navbar component used for top level navigation of all Trimble applications.\n *\n * The component supports a 'main-menu', 'notifications', and 'apps' `<slot>` for injecting custom HTML menus.\n * It also supports a 'start', 'center', and 'end' `<slot>` for injecting additional custom HTML\n */\n@Component({\n  tag: 'modus-wc-navbar',\n  styleUrl: 'modus-wc-navbar.scss',\n  shadow: false,\n})\nexport class ModusWcNavbar {\n  private appsRef?: HTMLDivElement;\n  private condensedMenuRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLDivElement;\n  private notificationsRef?: HTMLDivElement;\n  private searchDebounceTimer: number | null = null;\n  private userRef?: HTMLDivElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The open state of the apps menu. */\n  @Prop({ mutable: true }) appsMenuOpen?: boolean = false;\n\n  /** Applies condensed layout and styling. */\n  @Prop() condensed?: boolean = false;\n\n  /** The open state of the condensed menu. */\n  @Prop({ mutable: true }) condensedMenuOpen?: boolean = false;\n\n  /** Custom CSS class to apply to the host element. */\n  @Prop() customClass?: string = '';\n\n  /** The open state of the main menu. */\n  @Prop({ mutable: true }) mainMenuOpen?: boolean = false;\n\n  /** The open state of the notifications menu. */\n  @Prop({ mutable: true }) notificationsMenuOpen?: boolean = false;\n\n  /** Debounce time in milliseconds for search input changes. Default is 300ms. */\n  @Prop() searchDebounceMs?: number = 300;\n\n  /** The open state of the search input. */\n  @Prop({ mutable: true }) searchInputOpen?: boolean = false;\n\n  /** Text replacements for the navbar. */\n  @Prop() textOverrides?: INavbarTextOverrides;\n\n  /** User information used to render the user card. */\n  @Prop() userCard!: INavbarUserCard;\n\n  /** The open state of the user menu. */\n  @Prop({ mutable: true }) userMenuOpen?: boolean = false;\n\n  /** The visibility of individual navbar buttons. Default is user profile visible, others hidden. */\n  @Prop() visibility?: INavbarVisibility = {\n    ai: false,\n    apps: false,\n    help: false,\n    mainMenu: false,\n    notifications: false,\n    search: false,\n    searchInput: false,\n    user: true,\n  };\n\n  /** Event emitted when the AI button is clicked or activated via keyboard. */"
      },
      {
        "name": "notificationsClick",
        "description": "/** Replaces the text for \"Apps\" in the condensed menu. */\n  apps?: string;\n  /** Replaces the text for \"Help\" in the condensed menu. */\n  help?: string;\n  /** Replaces the text for \"Notifications\" in the condensed menu. */\n  notifications?: string;\n  /** Replaces the text for \"Search\" in the condensed menu. */\n  search?: string;\n}\n\nexport interface INavbarVisibility {\n  /** Controls the visibility of the AI button. */\n  ai?: boolean;\n  /** Controls visibility of the apps button. */\n  apps?: boolean;\n  /** Controls visibility of the help button. */\n  help?: boolean;\n  /** Controls visibility of the main menu button. */\n  mainMenu?: boolean;\n  /** Controls visibility of the notifications button. */\n  notifications?: boolean;\n  /** Controls visibility of the search button. */\n  search?: boolean;\n  /** Controls visibility of the search input. */\n  searchInput?: boolean;\n  /** Controls visibility of the user button. */\n  user?: boolean;\n}\n\nexport interface INavbarUserCard {\n  /** The alt value to set on the avatar. */\n  avatarAlt?: string;\n  /** The avatar image source value. */\n  avatarSrc?: string;\n  /** The email address of the user. */\n  email: string;\n  /** Text override for the Access MyTrimble button, allows for translation. */\n  myTrimbleButton?: string;\n  /** The name of the user */\n  name: string;\n  /** Text override for the Sign out button, allows for translation. */\n  signOutButton?: string;\n}\n\n/**\n * A customizable navbar component used for top level navigation of all Trimble applications.\n *\n * The component supports a 'main-menu', 'notifications', and 'apps' `<slot>` for injecting custom HTML menus.\n * It also supports a 'start', 'center', and 'end' `<slot>` for injecting additional custom HTML\n */\n@Component({\n  tag: 'modus-wc-navbar',\n  styleUrl: 'modus-wc-navbar.scss',\n  shadow: false,\n})\nexport class ModusWcNavbar {\n  private appsRef?: HTMLDivElement;\n  private condensedMenuRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLDivElement;\n  private notificationsRef?: HTMLDivElement;\n  private searchDebounceTimer: number | null = null;\n  private userRef?: HTMLDivElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The open state of the apps menu. */\n  @Prop({ mutable: true }) appsMenuOpen?: boolean = false;\n\n  /** Applies condensed layout and styling. */\n  @Prop() condensed?: boolean = false;\n\n  /** The open state of the condensed menu. */\n  @Prop({ mutable: true }) condensedMenuOpen?: boolean = false;\n\n  /** Custom CSS class to apply to the host element. */\n  @Prop() customClass?: string = '';\n\n  /** The open state of the main menu. */\n  @Prop({ mutable: true }) mainMenuOpen?: boolean = false;\n\n  /** The open state of the notifications menu. */\n  @Prop({ mutable: true }) notificationsMenuOpen?: boolean = false;\n\n  /** Debounce time in milliseconds for search input changes. Default is 300ms. */\n  @Prop() searchDebounceMs?: number = 300;\n\n  /** The open state of the search input. */\n  @Prop({ mutable: true }) searchInputOpen?: boolean = false;\n\n  /** Text replacements for the navbar. */\n  @Prop() textOverrides?: INavbarTextOverrides;\n\n  /** User information used to render the user card. */\n  @Prop() userCard!: INavbarUserCard;\n\n  /** The open state of the user menu. */\n  @Prop({ mutable: true }) userMenuOpen?: boolean = false;\n\n  /** The visibility of individual navbar buttons. Default is user profile visible, others hidden. */\n  @Prop() visibility?: INavbarVisibility = {\n    ai: false,\n    apps: false,\n    help: false,\n    mainMenu: false,\n    notifications: false,\n    search: false,\n    searchInput: false,\n    user: true,\n  };\n\n  /** Event emitted when the AI button is clicked or activated via keyboard. */"
      },
      {
        "name": "notificationsMenuOpenChange",
        "description": "/** Replaces the text for \"Apps\" in the condensed menu. */\n  apps?: string;\n  /** Replaces the text for \"Help\" in the condensed menu. */\n  help?: string;\n  /** Replaces the text for \"Notifications\" in the condensed menu. */\n  notifications?: string;\n  /** Replaces the text for \"Search\" in the condensed menu. */\n  search?: string;\n}\n\nexport interface INavbarVisibility {\n  /** Controls the visibility of the AI button. */\n  ai?: boolean;\n  /** Controls visibility of the apps button. */\n  apps?: boolean;\n  /** Controls visibility of the help button. */\n  help?: boolean;\n  /** Controls visibility of the main menu button. */\n  mainMenu?: boolean;\n  /** Controls visibility of the notifications button. */\n  notifications?: boolean;\n  /** Controls visibility of the search button. */\n  search?: boolean;\n  /** Controls visibility of the search input. */\n  searchInput?: boolean;\n  /** Controls visibility of the user button. */\n  user?: boolean;\n}\n\nexport interface INavbarUserCard {\n  /** The alt value to set on the avatar. */\n  avatarAlt?: string;\n  /** The avatar image source value. */\n  avatarSrc?: string;\n  /** The email address of the user. */\n  email: string;\n  /** Text override for the Access MyTrimble button, allows for translation. */\n  myTrimbleButton?: string;\n  /** The name of the user */\n  name: string;\n  /** Text override for the Sign out button, allows for translation. */\n  signOutButton?: string;\n}\n\n/**\n * A customizable navbar component used for top level navigation of all Trimble applications.\n *\n * The component supports a 'main-menu', 'notifications', and 'apps' `<slot>` for injecting custom HTML menus.\n * It also supports a 'start', 'center', and 'end' `<slot>` for injecting additional custom HTML\n */\n@Component({\n  tag: 'modus-wc-navbar',\n  styleUrl: 'modus-wc-navbar.scss',\n  shadow: false,\n})\nexport class ModusWcNavbar {\n  private appsRef?: HTMLDivElement;\n  private condensedMenuRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLDivElement;\n  private notificationsRef?: HTMLDivElement;\n  private searchDebounceTimer: number | null = null;\n  private userRef?: HTMLDivElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The open state of the apps menu. */\n  @Prop({ mutable: true }) appsMenuOpen?: boolean = false;\n\n  /** Applies condensed layout and styling. */\n  @Prop() condensed?: boolean = false;\n\n  /** The open state of the condensed menu. */\n  @Prop({ mutable: true }) condensedMenuOpen?: boolean = false;\n\n  /** Custom CSS class to apply to the host element. */\n  @Prop() customClass?: string = '';\n\n  /** The open state of the main menu. */\n  @Prop({ mutable: true }) mainMenuOpen?: boolean = false;\n\n  /** The open state of the notifications menu. */\n  @Prop({ mutable: true }) notificationsMenuOpen?: boolean = false;\n\n  /** Debounce time in milliseconds for search input changes. Default is 300ms. */\n  @Prop() searchDebounceMs?: number = 300;\n\n  /** The open state of the search input. */\n  @Prop({ mutable: true }) searchInputOpen?: boolean = false;\n\n  /** Text replacements for the navbar. */\n  @Prop() textOverrides?: INavbarTextOverrides;\n\n  /** User information used to render the user card. */\n  @Prop() userCard!: INavbarUserCard;\n\n  /** The open state of the user menu. */\n  @Prop({ mutable: true }) userMenuOpen?: boolean = false;\n\n  /** The visibility of individual navbar buttons. Default is user profile visible, others hidden. */\n  @Prop() visibility?: INavbarVisibility = {\n    ai: false,\n    apps: false,\n    help: false,\n    mainMenu: false,\n    notifications: false,\n    search: false,\n    searchInput: false,\n    user: true,\n  };\n\n  /** Event emitted when the AI button is clicked or activated via keyboard. */"
      },
      {
        "name": "searchChange",
        "description": "/** Replaces the text for \"Apps\" in the condensed menu. */\n  apps?: string;\n  /** Replaces the text for \"Help\" in the condensed menu. */\n  help?: string;\n  /** Replaces the text for \"Notifications\" in the condensed menu. */\n  notifications?: string;\n  /** Replaces the text for \"Search\" in the condensed menu. */\n  search?: string;\n}\n\nexport interface INavbarVisibility {\n  /** Controls the visibility of the AI button. */\n  ai?: boolean;\n  /** Controls visibility of the apps button. */\n  apps?: boolean;\n  /** Controls visibility of the help button. */\n  help?: boolean;\n  /** Controls visibility of the main menu button. */\n  mainMenu?: boolean;\n  /** Controls visibility of the notifications button. */\n  notifications?: boolean;\n  /** Controls visibility of the search button. */\n  search?: boolean;\n  /** Controls visibility of the search input. */\n  searchInput?: boolean;\n  /** Controls visibility of the user button. */\n  user?: boolean;\n}\n\nexport interface INavbarUserCard {\n  /** The alt value to set on the avatar. */\n  avatarAlt?: string;\n  /** The avatar image source value. */\n  avatarSrc?: string;\n  /** The email address of the user. */\n  email: string;\n  /** Text override for the Access MyTrimble button, allows for translation. */\n  myTrimbleButton?: string;\n  /** The name of the user */\n  name: string;\n  /** Text override for the Sign out button, allows for translation. */\n  signOutButton?: string;\n}\n\n/**\n * A customizable navbar component used for top level navigation of all Trimble applications.\n *\n * The component supports a 'main-menu', 'notifications', and 'apps' `<slot>` for injecting custom HTML menus.\n * It also supports a 'start', 'center', and 'end' `<slot>` for injecting additional custom HTML\n */\n@Component({\n  tag: 'modus-wc-navbar',\n  styleUrl: 'modus-wc-navbar.scss',\n  shadow: false,\n})\nexport class ModusWcNavbar {\n  private appsRef?: HTMLDivElement;\n  private condensedMenuRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLDivElement;\n  private notificationsRef?: HTMLDivElement;\n  private searchDebounceTimer: number | null = null;\n  private userRef?: HTMLDivElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The open state of the apps menu. */\n  @Prop({ mutable: true }) appsMenuOpen?: boolean = false;\n\n  /** Applies condensed layout and styling. */\n  @Prop() condensed?: boolean = false;\n\n  /** The open state of the condensed menu. */\n  @Prop({ mutable: true }) condensedMenuOpen?: boolean = false;\n\n  /** Custom CSS class to apply to the host element. */\n  @Prop() customClass?: string = '';\n\n  /** The open state of the main menu. */\n  @Prop({ mutable: true }) mainMenuOpen?: boolean = false;\n\n  /** The open state of the notifications menu. */\n  @Prop({ mutable: true }) notificationsMenuOpen?: boolean = false;\n\n  /** Debounce time in milliseconds for search input changes. Default is 300ms. */\n  @Prop() searchDebounceMs?: number = 300;\n\n  /** The open state of the search input. */\n  @Prop({ mutable: true }) searchInputOpen?: boolean = false;\n\n  /** Text replacements for the navbar. */\n  @Prop() textOverrides?: INavbarTextOverrides;\n\n  /** User information used to render the user card. */\n  @Prop() userCard!: INavbarUserCard;\n\n  /** The open state of the user menu. */\n  @Prop({ mutable: true }) userMenuOpen?: boolean = false;\n\n  /** The visibility of individual navbar buttons. Default is user profile visible, others hidden. */\n  @Prop() visibility?: INavbarVisibility = {\n    ai: false,\n    apps: false,\n    help: false,\n    mainMenu: false,\n    notifications: false,\n    search: false,\n    searchInput: false,\n    user: true,\n  };\n\n  /** Event emitted when the AI button is clicked or activated via keyboard. */"
      },
      {
        "name": "searchClick",
        "description": "/** Replaces the text for \"Apps\" in the condensed menu. */\n  apps?: string;\n  /** Replaces the text for \"Help\" in the condensed menu. */\n  help?: string;\n  /** Replaces the text for \"Notifications\" in the condensed menu. */\n  notifications?: string;\n  /** Replaces the text for \"Search\" in the condensed menu. */\n  search?: string;\n}\n\nexport interface INavbarVisibility {\n  /** Controls the visibility of the AI button. */\n  ai?: boolean;\n  /** Controls visibility of the apps button. */\n  apps?: boolean;\n  /** Controls visibility of the help button. */\n  help?: boolean;\n  /** Controls visibility of the main menu button. */\n  mainMenu?: boolean;\n  /** Controls visibility of the notifications button. */\n  notifications?: boolean;\n  /** Controls visibility of the search button. */\n  search?: boolean;\n  /** Controls visibility of the search input. */\n  searchInput?: boolean;\n  /** Controls visibility of the user button. */\n  user?: boolean;\n}\n\nexport interface INavbarUserCard {\n  /** The alt value to set on the avatar. */\n  avatarAlt?: string;\n  /** The avatar image source value. */\n  avatarSrc?: string;\n  /** The email address of the user. */\n  email: string;\n  /** Text override for the Access MyTrimble button, allows for translation. */\n  myTrimbleButton?: string;\n  /** The name of the user */\n  name: string;\n  /** Text override for the Sign out button, allows for translation. */\n  signOutButton?: string;\n}\n\n/**\n * A customizable navbar component used for top level navigation of all Trimble applications.\n *\n * The component supports a 'main-menu', 'notifications', and 'apps' `<slot>` for injecting custom HTML menus.\n * It also supports a 'start', 'center', and 'end' `<slot>` for injecting additional custom HTML\n */\n@Component({\n  tag: 'modus-wc-navbar',\n  styleUrl: 'modus-wc-navbar.scss',\n  shadow: false,\n})\nexport class ModusWcNavbar {\n  private appsRef?: HTMLDivElement;\n  private condensedMenuRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLDivElement;\n  private notificationsRef?: HTMLDivElement;\n  private searchDebounceTimer: number | null = null;\n  private userRef?: HTMLDivElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The open state of the apps menu. */\n  @Prop({ mutable: true }) appsMenuOpen?: boolean = false;\n\n  /** Applies condensed layout and styling. */\n  @Prop() condensed?: boolean = false;\n\n  /** The open state of the condensed menu. */\n  @Prop({ mutable: true }) condensedMenuOpen?: boolean = false;\n\n  /** Custom CSS class to apply to the host element. */\n  @Prop() customClass?: string = '';\n\n  /** The open state of the main menu. */\n  @Prop({ mutable: true }) mainMenuOpen?: boolean = false;\n\n  /** The open state of the notifications menu. */\n  @Prop({ mutable: true }) notificationsMenuOpen?: boolean = false;\n\n  /** Debounce time in milliseconds for search input changes. Default is 300ms. */\n  @Prop() searchDebounceMs?: number = 300;\n\n  /** The open state of the search input. */\n  @Prop({ mutable: true }) searchInputOpen?: boolean = false;\n\n  /** Text replacements for the navbar. */\n  @Prop() textOverrides?: INavbarTextOverrides;\n\n  /** User information used to render the user card. */\n  @Prop() userCard!: INavbarUserCard;\n\n  /** The open state of the user menu. */\n  @Prop({ mutable: true }) userMenuOpen?: boolean = false;\n\n  /** The visibility of individual navbar buttons. Default is user profile visible, others hidden. */\n  @Prop() visibility?: INavbarVisibility = {\n    ai: false,\n    apps: false,\n    help: false,\n    mainMenu: false,\n    notifications: false,\n    search: false,\n    searchInput: false,\n    user: true,\n  };\n\n  /** Event emitted when the AI button is clicked or activated via keyboard. */"
      },
      {
        "name": "searchInputOpenChange",
        "description": "/** Replaces the text for \"Apps\" in the condensed menu. */\n  apps?: string;\n  /** Replaces the text for \"Help\" in the condensed menu. */\n  help?: string;\n  /** Replaces the text for \"Notifications\" in the condensed menu. */\n  notifications?: string;\n  /** Replaces the text for \"Search\" in the condensed menu. */\n  search?: string;\n}\n\nexport interface INavbarVisibility {\n  /** Controls the visibility of the AI button. */\n  ai?: boolean;\n  /** Controls visibility of the apps button. */\n  apps?: boolean;\n  /** Controls visibility of the help button. */\n  help?: boolean;\n  /** Controls visibility of the main menu button. */\n  mainMenu?: boolean;\n  /** Controls visibility of the notifications button. */\n  notifications?: boolean;\n  /** Controls visibility of the search button. */\n  search?: boolean;\n  /** Controls visibility of the search input. */\n  searchInput?: boolean;\n  /** Controls visibility of the user button. */\n  user?: boolean;\n}\n\nexport interface INavbarUserCard {\n  /** The alt value to set on the avatar. */\n  avatarAlt?: string;\n  /** The avatar image source value. */\n  avatarSrc?: string;\n  /** The email address of the user. */\n  email: string;\n  /** Text override for the Access MyTrimble button, allows for translation. */\n  myTrimbleButton?: string;\n  /** The name of the user */\n  name: string;\n  /** Text override for the Sign out button, allows for translation. */\n  signOutButton?: string;\n}\n\n/**\n * A customizable navbar component used for top level navigation of all Trimble applications.\n *\n * The component supports a 'main-menu', 'notifications', and 'apps' `<slot>` for injecting custom HTML menus.\n * It also supports a 'start', 'center', and 'end' `<slot>` for injecting additional custom HTML\n */\n@Component({\n  tag: 'modus-wc-navbar',\n  styleUrl: 'modus-wc-navbar.scss',\n  shadow: false,\n})\nexport class ModusWcNavbar {\n  private appsRef?: HTMLDivElement;\n  private condensedMenuRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLDivElement;\n  private notificationsRef?: HTMLDivElement;\n  private searchDebounceTimer: number | null = null;\n  private userRef?: HTMLDivElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The open state of the apps menu. */\n  @Prop({ mutable: true }) appsMenuOpen?: boolean = false;\n\n  /** Applies condensed layout and styling. */\n  @Prop() condensed?: boolean = false;\n\n  /** The open state of the condensed menu. */\n  @Prop({ mutable: true }) condensedMenuOpen?: boolean = false;\n\n  /** Custom CSS class to apply to the host element. */\n  @Prop() customClass?: string = '';\n\n  /** The open state of the main menu. */\n  @Prop({ mutable: true }) mainMenuOpen?: boolean = false;\n\n  /** The open state of the notifications menu. */\n  @Prop({ mutable: true }) notificationsMenuOpen?: boolean = false;\n\n  /** Debounce time in milliseconds for search input changes. Default is 300ms. */\n  @Prop() searchDebounceMs?: number = 300;\n\n  /** The open state of the search input. */\n  @Prop({ mutable: true }) searchInputOpen?: boolean = false;\n\n  /** Text replacements for the navbar. */\n  @Prop() textOverrides?: INavbarTextOverrides;\n\n  /** User information used to render the user card. */\n  @Prop() userCard!: INavbarUserCard;\n\n  /** The open state of the user menu. */\n  @Prop({ mutable: true }) userMenuOpen?: boolean = false;\n\n  /** The visibility of individual navbar buttons. Default is user profile visible, others hidden. */\n  @Prop() visibility?: INavbarVisibility = {\n    ai: false,\n    apps: false,\n    help: false,\n    mainMenu: false,\n    notifications: false,\n    search: false,\n    searchInput: false,\n    user: true,\n  };\n\n  /** Event emitted when the AI button is clicked or activated via keyboard. */"
      },
      {
        "name": "signOutClick",
        "description": "/** Replaces the text for \"Apps\" in the condensed menu. */\n  apps?: string;\n  /** Replaces the text for \"Help\" in the condensed menu. */\n  help?: string;\n  /** Replaces the text for \"Notifications\" in the condensed menu. */\n  notifications?: string;\n  /** Replaces the text for \"Search\" in the condensed menu. */\n  search?: string;\n}\n\nexport interface INavbarVisibility {\n  /** Controls the visibility of the AI button. */\n  ai?: boolean;\n  /** Controls visibility of the apps button. */\n  apps?: boolean;\n  /** Controls visibility of the help button. */\n  help?: boolean;\n  /** Controls visibility of the main menu button. */\n  mainMenu?: boolean;\n  /** Controls visibility of the notifications button. */\n  notifications?: boolean;\n  /** Controls visibility of the search button. */\n  search?: boolean;\n  /** Controls visibility of the search input. */\n  searchInput?: boolean;\n  /** Controls visibility of the user button. */\n  user?: boolean;\n}\n\nexport interface INavbarUserCard {\n  /** The alt value to set on the avatar. */\n  avatarAlt?: string;\n  /** The avatar image source value. */\n  avatarSrc?: string;\n  /** The email address of the user. */\n  email: string;\n  /** Text override for the Access MyTrimble button, allows for translation. */\n  myTrimbleButton?: string;\n  /** The name of the user */\n  name: string;\n  /** Text override for the Sign out button, allows for translation. */\n  signOutButton?: string;\n}\n\n/**\n * A customizable navbar component used for top level navigation of all Trimble applications.\n *\n * The component supports a 'main-menu', 'notifications', and 'apps' `<slot>` for injecting custom HTML menus.\n * It also supports a 'start', 'center', and 'end' `<slot>` for injecting additional custom HTML\n */\n@Component({\n  tag: 'modus-wc-navbar',\n  styleUrl: 'modus-wc-navbar.scss',\n  shadow: false,\n})\nexport class ModusWcNavbar {\n  private appsRef?: HTMLDivElement;\n  private condensedMenuRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLDivElement;\n  private notificationsRef?: HTMLDivElement;\n  private searchDebounceTimer: number | null = null;\n  private userRef?: HTMLDivElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The open state of the apps menu. */\n  @Prop({ mutable: true }) appsMenuOpen?: boolean = false;\n\n  /** Applies condensed layout and styling. */\n  @Prop() condensed?: boolean = false;\n\n  /** The open state of the condensed menu. */\n  @Prop({ mutable: true }) condensedMenuOpen?: boolean = false;\n\n  /** Custom CSS class to apply to the host element. */\n  @Prop() customClass?: string = '';\n\n  /** The open state of the main menu. */\n  @Prop({ mutable: true }) mainMenuOpen?: boolean = false;\n\n  /** The open state of the notifications menu. */\n  @Prop({ mutable: true }) notificationsMenuOpen?: boolean = false;\n\n  /** Debounce time in milliseconds for search input changes. Default is 300ms. */\n  @Prop() searchDebounceMs?: number = 300;\n\n  /** The open state of the search input. */\n  @Prop({ mutable: true }) searchInputOpen?: boolean = false;\n\n  /** Text replacements for the navbar. */\n  @Prop() textOverrides?: INavbarTextOverrides;\n\n  /** User information used to render the user card. */\n  @Prop() userCard!: INavbarUserCard;\n\n  /** The open state of the user menu. */\n  @Prop({ mutable: true }) userMenuOpen?: boolean = false;\n\n  /** The visibility of individual navbar buttons. Default is user profile visible, others hidden. */\n  @Prop() visibility?: INavbarVisibility = {\n    ai: false,\n    apps: false,\n    help: false,\n    mainMenu: false,\n    notifications: false,\n    search: false,\n    searchInput: false,\n    user: true,\n  };\n\n  /** Event emitted when the AI button is clicked or activated via keyboard. */"
      },
      {
        "name": "trimbleLogoClick",
        "description": "/** Replaces the text for \"Apps\" in the condensed menu. */\n  apps?: string;\n  /** Replaces the text for \"Help\" in the condensed menu. */\n  help?: string;\n  /** Replaces the text for \"Notifications\" in the condensed menu. */\n  notifications?: string;\n  /** Replaces the text for \"Search\" in the condensed menu. */\n  search?: string;\n}\n\nexport interface INavbarVisibility {\n  /** Controls the visibility of the AI button. */\n  ai?: boolean;\n  /** Controls visibility of the apps button. */\n  apps?: boolean;\n  /** Controls visibility of the help button. */\n  help?: boolean;\n  /** Controls visibility of the main menu button. */\n  mainMenu?: boolean;\n  /** Controls visibility of the notifications button. */\n  notifications?: boolean;\n  /** Controls visibility of the search button. */\n  search?: boolean;\n  /** Controls visibility of the search input. */\n  searchInput?: boolean;\n  /** Controls visibility of the user button. */\n  user?: boolean;\n}\n\nexport interface INavbarUserCard {\n  /** The alt value to set on the avatar. */\n  avatarAlt?: string;\n  /** The avatar image source value. */\n  avatarSrc?: string;\n  /** The email address of the user. */\n  email: string;\n  /** Text override for the Access MyTrimble button, allows for translation. */\n  myTrimbleButton?: string;\n  /** The name of the user */\n  name: string;\n  /** Text override for the Sign out button, allows for translation. */\n  signOutButton?: string;\n}\n\n/**\n * A customizable navbar component used for top level navigation of all Trimble applications.\n *\n * The component supports a 'main-menu', 'notifications', and 'apps' `<slot>` for injecting custom HTML menus.\n * It also supports a 'start', 'center', and 'end' `<slot>` for injecting additional custom HTML\n */\n@Component({\n  tag: 'modus-wc-navbar',\n  styleUrl: 'modus-wc-navbar.scss',\n  shadow: false,\n})\nexport class ModusWcNavbar {\n  private appsRef?: HTMLDivElement;\n  private condensedMenuRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLDivElement;\n  private notificationsRef?: HTMLDivElement;\n  private searchDebounceTimer: number | null = null;\n  private userRef?: HTMLDivElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The open state of the apps menu. */\n  @Prop({ mutable: true }) appsMenuOpen?: boolean = false;\n\n  /** Applies condensed layout and styling. */\n  @Prop() condensed?: boolean = false;\n\n  /** The open state of the condensed menu. */\n  @Prop({ mutable: true }) condensedMenuOpen?: boolean = false;\n\n  /** Custom CSS class to apply to the host element. */\n  @Prop() customClass?: string = '';\n\n  /** The open state of the main menu. */\n  @Prop({ mutable: true }) mainMenuOpen?: boolean = false;\n\n  /** The open state of the notifications menu. */\n  @Prop({ mutable: true }) notificationsMenuOpen?: boolean = false;\n\n  /** Debounce time in milliseconds for search input changes. Default is 300ms. */\n  @Prop() searchDebounceMs?: number = 300;\n\n  /** The open state of the search input. */\n  @Prop({ mutable: true }) searchInputOpen?: boolean = false;\n\n  /** Text replacements for the navbar. */\n  @Prop() textOverrides?: INavbarTextOverrides;\n\n  /** User information used to render the user card. */\n  @Prop() userCard!: INavbarUserCard;\n\n  /** The open state of the user menu. */\n  @Prop({ mutable: true }) userMenuOpen?: boolean = false;\n\n  /** The visibility of individual navbar buttons. Default is user profile visible, others hidden. */\n  @Prop() visibility?: INavbarVisibility = {\n    ai: false,\n    apps: false,\n    help: false,\n    mainMenu: false,\n    notifications: false,\n    search: false,\n    searchInput: false,\n    user: true,\n  };\n\n  /** Event emitted when the AI button is clicked or activated via keyboard. */"
      },
      {
        "name": "userMenuOpenChange",
        "description": "/** Replaces the text for \"Apps\" in the condensed menu. */\n  apps?: string;\n  /** Replaces the text for \"Help\" in the condensed menu. */\n  help?: string;\n  /** Replaces the text for \"Notifications\" in the condensed menu. */\n  notifications?: string;\n  /** Replaces the text for \"Search\" in the condensed menu. */\n  search?: string;\n}\n\nexport interface INavbarVisibility {\n  /** Controls the visibility of the AI button. */\n  ai?: boolean;\n  /** Controls visibility of the apps button. */\n  apps?: boolean;\n  /** Controls visibility of the help button. */\n  help?: boolean;\n  /** Controls visibility of the main menu button. */\n  mainMenu?: boolean;\n  /** Controls visibility of the notifications button. */\n  notifications?: boolean;\n  /** Controls visibility of the search button. */\n  search?: boolean;\n  /** Controls visibility of the search input. */\n  searchInput?: boolean;\n  /** Controls visibility of the user button. */\n  user?: boolean;\n}\n\nexport interface INavbarUserCard {\n  /** The alt value to set on the avatar. */\n  avatarAlt?: string;\n  /** The avatar image source value. */\n  avatarSrc?: string;\n  /** The email address of the user. */\n  email: string;\n  /** Text override for the Access MyTrimble button, allows for translation. */\n  myTrimbleButton?: string;\n  /** The name of the user */\n  name: string;\n  /** Text override for the Sign out button, allows for translation. */\n  signOutButton?: string;\n}\n\n/**\n * A customizable navbar component used for top level navigation of all Trimble applications.\n *\n * The component supports a 'main-menu', 'notifications', and 'apps' `<slot>` for injecting custom HTML menus.\n * It also supports a 'start', 'center', and 'end' `<slot>` for injecting additional custom HTML\n */\n@Component({\n  tag: 'modus-wc-navbar',\n  styleUrl: 'modus-wc-navbar.scss',\n  shadow: false,\n})\nexport class ModusWcNavbar {\n  private appsRef?: HTMLDivElement;\n  private condensedMenuRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLDivElement;\n  private notificationsRef?: HTMLDivElement;\n  private searchDebounceTimer: number | null = null;\n  private userRef?: HTMLDivElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The open state of the apps menu. */\n  @Prop({ mutable: true }) appsMenuOpen?: boolean = false;\n\n  /** Applies condensed layout and styling. */\n  @Prop() condensed?: boolean = false;\n\n  /** The open state of the condensed menu. */\n  @Prop({ mutable: true }) condensedMenuOpen?: boolean = false;\n\n  /** Custom CSS class to apply to the host element. */\n  @Prop() customClass?: string = '';\n\n  /** The open state of the main menu. */\n  @Prop({ mutable: true }) mainMenuOpen?: boolean = false;\n\n  /** The open state of the notifications menu. */\n  @Prop({ mutable: true }) notificationsMenuOpen?: boolean = false;\n\n  /** Debounce time in milliseconds for search input changes. Default is 300ms. */\n  @Prop() searchDebounceMs?: number = 300;\n\n  /** The open state of the search input. */\n  @Prop({ mutable: true }) searchInputOpen?: boolean = false;\n\n  /** Text replacements for the navbar. */\n  @Prop() textOverrides?: INavbarTextOverrides;\n\n  /** User information used to render the user card. */\n  @Prop() userCard!: INavbarUserCard;\n\n  /** The open state of the user menu. */\n  @Prop({ mutable: true }) userMenuOpen?: boolean = false;\n\n  /** The visibility of individual navbar buttons. Default is user profile visible, others hidden. */\n  @Prop() visibility?: INavbarVisibility = {\n    ai: false,\n    apps: false,\n    help: false,\n    mainMenu: false,\n    notifications: false,\n    search: false,\n    searchInput: false,\n    user: true,\n  };\n\n  /** Event emitted when the AI button is clicked or activated via keyboard. */"
      }
    ],
    "slots": [
      "start",
      "center",
      "end",
      "notifications",
      "apps"
    ],
    "default_values": {
      "appsMenuOpen": "false",
      "condensed": "false",
      "condensedMenuOpen": "false",
      "customClass": "''",
      "mainMenuOpen": "false",
      "notificationsMenuOpen": "false",
      "searchDebounceMs": "300",
      "searchInputOpen": "false",
      "textOverrides": "{() => this.handleSearchClick()}\n                        value=\"search\"\n                      />\n                    )}\n                    {this.visibility?.notifications && (\n                      <modus-wc-menu-item\n                        label={\n                          this.textOverrides?.notifications || 'Notifications'\n                        }\n                        onItemSelect={() => this.handleNotificationsClick()}\n                        value=\"notifications\"\n                      />\n                    )}\n                    {this.visibility?.help && (\n                      <modus-wc-menu-item\n                        label={this.textOverrides?.help || 'Help'}\n                        onItemSelect={() => this.handleHelpClick()}\n                        value=\"help\"\n                      />\n                    )}\n                    {this.visibility?.apps && (\n                      <modus-wc-menu-item\n                        label={this.textOverrides?.apps || 'Apps'}\n                        onItemSelect={() => this.handleAppsClick()}\n                        value=\"apps\"\n                      />\n                    )}\n                  </modus-wc-menu>\n                )}\n              </Fragment>\n            )}\n\n            {this.visibility?.search && !this.condensed && (\n              <Fragment>\n                {this.visibility?.searchInput && this.searchInputOpen && (\n                  <modus-wc-text-input\n                    includeClear={true}\n                    includeSearch={true}\n                    onInputChange={this.handleSearchChange}\n                    placeholder={this.textOverrides?.search || 'Search'}\n                    size=\"sm\"\n                    value={this.searchValue}\n                  />\n                )}\n                <modus-wc-button\n                  onButtonClick={this.handleSearchClick}\n                  shape=\"square\"\n                  size=\"sm\"\n                  variant=\"borderless\"\n                >\n                  <SearchSolidIcon />\n                </modus-wc-button>\n              </Fragment>\n            )}\n\n            {this.visibility?.notifications && !this.condensed && (\n              <Fragment>\n                <modus-wc-button\n                  onButtonClick={this.handleNotificationsClick}\n                  shape=\"square\"\n                  size=\"sm\"\n                  variant=\"borderless\"\n                >\n                  <NotificationsSolidIcon />\n                </modus-wc-button>\n                <div\n                  class={`notifications ${this.notificationsMenuOpen ? 'visible' : 'hidden'}`}\n                  ref={(el) => (this.notificationsRef = el)}\n                >\n                  <slot name=\"notifications\" />\n                </div>\n              </Fragment>\n            )}\n\n            {this.visibility?.help && !this.condensed && (\n              <modus-wc-button\n                onButtonClick={this.handleHelpClick}\n                shape=\"square\"\n                size=\"sm\"\n                variant=\"borderless\"\n              >\n                <HelpSolidIcon />\n              </modus-wc-button>\n            )}\n\n            {this.visibility?.apps && !this.condensed && (\n              <Fragment>\n                <modus-wc-button\n                  onButtonClick={this.handleAppsClick}\n                  shape=\"square\"\n                  size=\"sm\"\n                  variant=\"borderless\"\n                >\n                  <AppsSolidIcon />\n                </modus-wc-button>\n                <div\n                  class={`apps ${this.appsMenuOpen ? 'visible' : 'hidden'}`}\n                  ref={(el) => (this.appsRef = el)}\n                >\n                  <slot name=\"apps\" />\n                </div>\n              </Fragment>\n            )}\n\n            {this.visibility?.user && (\n              <Fragment>\n                <modus-wc-button\n                  customClass=\"user-button\"\n                  onButtonClick={this.toggleUser}\n                  shape=\"circle\"\n                  size=\"sm\"\n                  variant=\"borderless\"\n                >\n                  <modus-wc-avatar\n                    alt={this.userCard?.avatarAlt || ''}\n                    imgSrc={this.userCard?.avatarSrc}\n                    initials={this.userCard?.name}\n                    size=\"xs\"\n                  />\n                </modus-wc-button>\n                <div\n                  class={`user ${this.userMenuOpen ? 'visible' : 'hidden'}`}\n                  ref={(el) => (this.userRef = el)}\n                >\n                  <modus-wc-card>\n                    <div slot=\"header\">\n                      <modus-wc-avatar\n                        alt={this.userCard?.avatarAlt || ''}\n                        imgSrc={this.userCard?.avatarSrc}\n                        initials={this.userCard?.name}\n                      />\n                    </div>\n                    <div slot=\"title\">{this.userCard?.name}</div>\n                    <div>{this.userCard?.email}</div>\n                    <div slot=\"actions\">\n                      <modus-wc-button\n                        customClass=\"my-trimble\"\n                        onButtonClick={this.handleMyTrimbleClick}\n                      >\n                        {this.userCard?.myTrimbleButton || 'Access MyTrimble'}\n                      </modus-wc-button>\n                    </div>\n                    <div slot=\"footer\">\n                      <modus-wc-button\n                        customClass=\"sign-out\"\n                        onButtonClick={this.handleSignOutClick}\n                        variant=\"borderless\"\n                      >\n                        {this.userCard?.signOutButton || 'Sign out'}\n                      </modus-wc-button>\n                    </div>\n                  </modus-wc-card>\n                </div>\n              </Fragment>\n            )}\n          </div>\n        </modus-wc-toolbar>\n      </Host>\n    )",
      "userCard": "{this.userCard?.avatarSrc}\n                    initials={this.userCard?.name}\n                    size=\"xs\"\n                  />\n                </modus-wc-button>\n                <div\n                  class={`user ${this.userMenuOpen ? 'visible' : 'hidden'}`}\n                  ref={(el) => (this.userRef = el)}\n                >\n                  <modus-wc-card>\n                    <div slot=\"header\">\n                      <modus-wc-avatar\n                        alt={this.userCard?.avatarAlt || ''}\n                        imgSrc={this.userCard?.avatarSrc}\n                        initials={this.userCard?.name}\n                      />\n                    </div>\n                    <div slot=\"title\">{this.userCard?.name}</div>\n                    <div>{this.userCard?.email}</div>\n                    <div slot=\"actions\">\n                      <modus-wc-button\n                        customClass=\"my-trimble\"\n                        onButtonClick={this.handleMyTrimbleClick}\n                      >\n                        {this.userCard?.myTrimbleButton || 'Access MyTrimble'}\n                      </modus-wc-button>\n                    </div>\n                    <div slot=\"footer\">\n                      <modus-wc-button\n                        customClass=\"sign-out\"\n                        onButtonClick={this.handleSignOutClick}\n                        variant=\"borderless\"\n                      >\n                        {this.userCard?.signOutButton || 'Sign out'}\n                      </modus-wc-button>\n                    </div>\n                  </modus-wc-card>\n                </div>\n              </Fragment>\n            )}\n          </div>\n        </modus-wc-toolbar>\n      </Host>\n    )",
      "userMenuOpen": "false",
      "visibility": "{\n    ai: false,\n    apps: false,\n    help: false,\n    mainMenu: false,\n    notifications: false,\n    search: false,\n    searchInput: false,\n    user: true,\n  }"
    },
    "documentation": "\n\n--- modus-wc-navbar.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport {\n  INavbarTextOverrides,\n  INavbarUserCard,\n  INavbarVisibility,\n} from './modus-wc-navbar';\n\nconst textOverrides: INavbarTextOverrides = {\n  apps: 'Apps',\n  help: 'Help',\n  notifications: 'Notifications',\n  search: 'Search',\n};\n\nconst userCard: INavbarUserCard = {\n  avatarAlt: 'Sonic',\n  avatarSrc: 'https://i1.sndcdn.com/artworks-000405996468-wmh3uv-t500x500.jpg',\n  email: 'sonic@trimble.com',\n  name: 'Sonic the Hedgehog',\n};\n\nconst visibility: INavbarVisibility = {\n  ai: true,\n  apps: true,\n  help: true,\n  mainMenu: true,\n  notifications: true,\n  search: true,\n  searchInput: true,\n  user: true,\n};\n\ninterface NavbarArgs {\n  'apps-menu-open'?: boolean;\n  condensed?: boolean;\n  'condensed-menu-open'?: boolean;\n  'custom-class'?: string;\n  'main-menu-open'?: boolean;\n  'notifications-menu-open'?: boolean;\n  'search-debounce-ms'?: number;\n  'search-input-open'?: boolean;\n  'text-overrides'?: INavbarTextOverrides;\n  'user-card': INavbarUserCard;\n  'user-menu-open'?: boolean;\n  visibility?: INavbarVisibility;\n}\n\nconst meta: Meta<NavbarArgs> = {\n  title: 'Components/Navbar',\n  component: 'modus-wc-navbar',\n  args: {\n    condensed: false,\n    'search-debounce-ms': 300,\n    'text-overrides': textOverrides,\n    'user-card': userCard,\n    visibility,\n  },\n  argTypes: {\n    'text-overrides': {\n      description: 'Text replacements for navbar menu items',\n      table: {\n        type: {\n          detail: `\n            Interface: INavbarTextOverrides\n            Properties:\n            - apps (string, optional): Replaces the text for \"Apps\" in the condensed menu\n            - help (string, optional): Replaces the text for \"Help\" in the condensed menu\n            - notifications (string, optional): Replaces the text for \"Notifications\" in the condensed menu\n            - search (string, optional): Replaces the text for \"Search\" in the condensed menu\n          `,\n        },\n      },\n      control: {\n        type: 'object',\n      },\n    },\n    'user-card': {\n      description: 'User profile card information',\n      table: {\n        type: {\n          detail: `\n            Interface: IUserCard\n            Properties:\n            - avatarAlt (string, optional): The alt value to set on the avatar\n            - avatarSrc (string, optional): The avatar image source value\n            - email (string): The email address of the user\n            - myTrimbleButton (string, optional): Text override for the Access MyTrimble button, allows for translation\n            - name (string): The name of the user\n            - signOutButton (string, optional): Text override for the Sign out button, allows for translation\n          `,\n        },\n      },\n    },\n    visibility: {\n      description: 'Controls visibility of individual navbar buttons',\n      table: {\n        type: {\n          detail: `\n            Interface: INavbarVisibility\n            Properties:\n            - ai (boolean, optional): Controls visibility of the AI button\n            - apps (boolean, optional): Controls visibility of the apps button\n            - help (boolean, optional): Controls visibility of the help button\n            - mainMenu (boolean, optional): Controls visibility of the main menu button\n            - notifications (boolean, optional): Controls visibility of the notifications button\n            - search (boolean, optional): Controls visibility of the search button\n            - searchInput (boolean, optional): Controls visibility of the search input\n            - user (boolean, optional): Controls visibility of the user button\n          `,\n        },\n      },\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: [\n        'aiClick',\n        'appsClick',\n        'appsMenuOpenChange',\n        'condensedMenuOpenChange',\n        'helpClick',\n        'mainMenuOpenChange',\n        'myTrimbleClick',\n        'notificationsMenuOpenChange',\n        'notificationsClick',\n        'searchChange',\n        'searchClick',\n        'searchInputOpenChange',\n        'signOutClick',\n        'trimbleLogoClick',\n        'userMenuOpenChange',\n      ],\n    },\n    layout: 'padded',\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<NavbarArgs>;\n\nconst Template: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<style>\n  div[id^='story--components-navbar--default'] {\n    border: 1px dashed black;\n    height: 360px;\n    overflow: hidden;\n  }\n  [slot=main-menu] {\n    background-color: #0063a3;\n    color: white;\n    height: 400px;\n  }\n</style>\n<modus-wc-navbar\n  ?apps-menu-open=${args['apps-menu-open']}\n  ?condensed=${args.condensed}\n  ?condensed-menu-open=${args['condensed-menu-open']}\n  custom-class=${ifDefined(args['custom-class'])}\n  ?main-menu-open=${args['main-menu-open']}\n  ?notifications-menu-open=${args['notifications-menu-open']}\n  search-debounce-ms=${ifDefined(args['search-debounce-ms'])}\n  ?search-input-open=${args['search-input-open']}\n  .textOverrides=${ifDefined(args['text-overrides'])}\n  .userCard=${args['user-card']}\n  ?user-menu-open=${args['user-menu-open']}\n  .visibility=${args.visibility}\n>\n  <div slot=\"main-menu\">Main menu contents</div>\n  <div slot=\"notifications\">Notification contents</div>\n  <div slot=\"apps\">App drawer contents</div>\n</modus-wc-navbar>\n    `;\n  },\n};\n\nexport const Default: Story = { ...Template };\n\nexport const CustomMenuAndSlots: Story = {\n  render: (args) => {\n    function toggleCustomUserMenu(e) {\n      const customIcon = e.currentTarget;\n      const menu = customIcon.parentElement?.querySelector('#custom-user-menu');\n      menu?.classList.toggle('hidden');\n    }\n    return html`\n      <div id=\"custom-menu-and-slots\">\n        <style>\n          #custom-menu-and-slots .modus-wc-navbar {\n            align-items: center;\n            display: flex;\n            gap: 0.2rem;\n            padding: 0 1rem;\n            width: 100%;\n          }\n          .modus-wc-card-body {\n            padding: 1rem;\n          }\n          #custom-menu-and-slots .modus-wc-navbar-center,\n          #custom-menu-and-slots .modus-wc-navbar-end,\n          #custom-menu-and-slots .modus-wc-navbar-start {\n            align-items: center;\n            display: flex;\n            flex: 1;\n          }\n          #custom-menu-and-slots .modus-wc-navbar-center {\n            background: #d9d9d969;\n            justify-content: center;\n          }\n          #custom-menu-and-slots .modus-wc-navbar-end {\n            background: #d9d9d969;\n            justify-content: flex-end;\n          }\n          #custom-menu-and-slots .modus-wc-navbar-start {\n            background: #d9d9d969;\n            justify-content: flex-start;\n          }\n          #custom-user-menu {\n            position: absolute;\n            right: 10px;\n            top: 50px;\n            z-index: 1000;\n          }\n          #custom-user-menu.hidden {\n            display: none;\n          }\n          .custom-user-email {\n            font-size: 0.8rem;\n          }\n          .custom-user-icon {\n            cursor: pointer;\n            margin-inline-start: 8px;\n            margin-inline-end: 8px;\n            position: relative;\n            top: 3px;\n          }\n          .custom-user-menu-header {\n            border-bottom: 1px solid #e0e0e0;\n            margin-bottom: 8px;\n            padding: 8px 16px;\n          }\n          .custom-user-menu-title {\n            font-weight: bold;\n          }\n          div[id^='story--components-navbar--custom-menu-and-slots'] {\n            border: 1px dashed black;\n            height: 365px;\n          }\n          .menu-item {\n            align-items: center;\n            cursor: pointer;\n            display: flex;\n            padding: 8px;\n          }\n          .slot-bg {\n            align-items: center;\n            display: flex;\n            font-weight: 600;\n            height: 40px;\n            justify-content: center;\n            opacity: 0.4;\n          }\n        </style>\n        <script>\n          /** function to toggle custom user menu */\n          function toggleCustomUserMenu(e) {\n            const customIcon = e.currentTarget;\n            const menu =\n              customIcon.parentElement?.querySelector('#custom-user-menu');\n            menu?.classList.toggle('hidden');\n          }\n        </script>\n        <modus-wc-navbar\n          ?apps-menu-open=${args['apps-menu-open']}\n          ?condensed=${args.condensed}\n          ?condensed-menu-open=${args['condensed-menu-open']}\n          custom-class=${ifDefined(args['custom-class'])}\n          ?main-menu-open=${args['main-menu-open']}\n          ?notifications-menu-open=${args['notifications-menu-open']}\n          search-debounce-ms=${ifDefined(args['search-debounce-ms'])}\n          ?search-input-open=${args['search-input-open']}\n          .textOverrides=${ifDefined(args['text-overrides'])}\n          .userCard=${args['user-card']}\n          ?user-menu-open=${args['user-menu-open']}\n          .visibility=${{\n            ai: false,\n            apps: false,\n            help: false,\n            mainMenu: false,\n            notifications: false,\n            search: false,\n            searchInput: false,\n            user: false,\n          }}\n        >\n          <div slot=\"main-menu\">Main menu contents</div>\n          <div slot=\"notifications\">Notification contents</div>\n          <div slot=\"apps\">App drawer contents</div>\n\n          <!-- Slots demonstration -->\n          <div slot=\"start\">\n            <div class=\"slot-bg\">Left slot</div>\n          </div>\n          <div slot=\"center\">\n            <div class=\"slot-bg\">Center slot</div>\n          </div>\n          <div slot=\"end\">\n            <div class=\"slot-bg\">Right slot</div>\n            <div class=\"custom-user-icon\" @click=${toggleCustomUserMenu}>\n              <modus-wc-avatar\n                alt=\"Sonic the Hedgehog\"\n                img-src=\"https://i1.sndcdn.com/artworks-000405996468-wmh3uv-t500x500.jpg\"\n                size=\"xs\"\n                shape=\"circle\"\n              ></modus-wc-avatar>\n            </div>\n\n            <!-- Custom user menu -->\n            <modus-wc-card id=\"custom-user-menu\" bordered=\"true\">\n              <div class=\"custom-user-menu-header\">\n                <div class=\"custom-user-menu-title\">Custom Menu</div>\n                <div class=\"custom-user-email\">custom.user@example.com</div>\n              </div>\n              <div class=\"menu-item\">\n                <span class=\"menu-item-icon\"\n                  ><modus-wc-icon\n                    name=\"settings_solid\"\n                    size=\"16px\"\n                  ></modus-wc-icon\n                ></span>\n                <span class=\"custom-user-icon\">Account Settings</span>\n              </div>\n              <div class=\"menu-item\">\n                <span class=\"menu-item-icon\"\n                  ><modus-wc-icon\n                    name=\"person_solid\"\n                    size=\"16px\"\n                  ></modus-wc-icon\n                ></span>\n                <span class=\"custom-user-icon\">Profile</span>\n              </div>\n              <div class=\"menu-item\">\n                <span class=\"menu-item-icon\"\n                  ><modus-wc-icon name=\"sign_out\" size=\"16px\"></modus-wc-icon\n                ></span>\n                <span class=\"custom-user-icon\">Logout</span>\n              </div>\n            </modus-wc-card>\n          </div>\n        </modus-wc-navbar>\n      </div>\n    `;\n  },\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-avatar\n                alt=\"Sonic the Hedgehog\"\n                img-src=\"https://i1.sndcdn.com/artworks-000405996468-wmh3uv-t500x500.jpg\"\n                size=\"xs\"\n                shape=\"circle\"\n              ></modus-wc-avatar>",
        "<modus-wc-icon\n                    name=\"settings_solid\"\n                    size=\"16px\"\n                  ></modus-wc-icon\n                >",
        "<modus-wc-icon\n                    name=\"person_solid\"\n                    size=\"16px\"\n                  ></modus-wc-icon\n                >",
        "<modus-wc-icon name=\"sign_out\" size=\"16px\"></modus-wc-icon\n                >",
        "\n<style>\n  div[id^='story--components-navbar--default'] {\n    border: 1px dashed black;\n    height: 360px;\n    overflow: hidden;\n  }\n  [slot=main-menu] {\n    background-color: #0063a3;\n    color: white;\n    height: 400px;\n  }\n</style>\n<modus-wc-navbar\n  ?apps-menu-open=${args['apps-menu-open']}\n  ?condensed=${args.condensed}\n  ?condensed-menu-open=${args['condensed-menu-open']}\n  custom-class=${ifDefined(args['custom-class'])}\n  ?main-menu-open=${args['main-menu-open']}\n  ?notifications-menu-open=${args['notifications-menu-open']}\n  search-debounce-ms=${ifDefined(args['search-debounce-ms'])}\n  ?search-input-open=${args['search-input-open']}\n  .textOverrides=${ifDefined(args['text-overrides'])}\n  .userCard=${args['user-card']}\n  ?user-menu-open=${args['user-menu-open']}\n  .visibility=${args.visibility}\n>\n  <div slot=\"main-menu\">Main menu contents</div>\n  <div slot=\"notifications\">Notification contents</div>\n  <div slot=\"apps\">App drawer contents</div>\n</modus-wc-navbar>\n    "
      ],
      "variants": [],
      "prop_usage": {
        "slot": [
          "main-menu",
          "notifications",
          "apps",
          "start",
          "center",
          "end"
        ],
        "id": [
          "custom-menu-and-slots",
          "custom-user-menu"
        ],
        "class": [
          "slot-bg",
          "custom-user-icon",
          "custom-user-menu-header",
          "custom-user-menu-title",
          "custom-user-email",
          "menu-item",
          "menu-item-icon"
        ],
        "alt": [
          "Sonic the Hedgehog"
        ],
        "src": [
          "https://i1.sndcdn.com/artworks-000405996468-wmh3uv-t500x500.jpg"
        ],
        "size": [
          "xs",
          "16px"
        ],
        "shape": [
          "circle"
        ],
        "bordered": [
          "true"
        ],
        "name": [
          "settings_solid",
          "person_solid",
          "sign_out"
        ]
      }
    },
    "tag_name": "modus-wc-navbar"
  },
  "modus-wc-radio": {
    "props": [
      {
        "name": "customClass",
        "description": "/**\n * A customizable radio button component.\n */\n@Component({\n  tag: 'modus-wc-radio',\n  styleUrl: 'modus-wc-radio.scss',\n  shadow: false,\n})\nexport class ModusWcRadio {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */",
        "type": ": string"
      },
      {
        "name": "disabled",
        "description": "/**\n * A customizable radio button component.\n */\n@Component({\n  tag: 'modus-wc-radio',\n  styleUrl: 'modus-wc-radio.scss',\n  shadow: false,\n})\nexport class ModusWcRadio {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */",
        "type": ": boolean"
      },
      {
        "name": "inputId",
        "description": "/**\n * A customizable radio button component.\n */\n@Component({\n  tag: 'modus-wc-radio',\n  styleUrl: 'modus-wc-radio.scss',\n  shadow: false,\n})\nexport class ModusWcRadio {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */",
        "type": ": string"
      },
      {
        "name": "inputTabIndex",
        "description": "/**\n * A customizable radio button component.\n */\n@Component({\n  tag: 'modus-wc-radio',\n  styleUrl: 'modus-wc-radio.scss',\n  shadow: false,\n})\nexport class ModusWcRadio {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */",
        "type": ": number"
      },
      {
        "name": "label",
        "description": "/**\n * A customizable radio button component.\n */\n@Component({\n  tag: 'modus-wc-radio',\n  styleUrl: 'modus-wc-radio.scss',\n  shadow: false,\n})\nexport class ModusWcRadio {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */",
        "type": ": string"
      },
      {
        "name": "name",
        "description": "/**\n * A customizable radio button component.\n */\n@Component({\n  tag: 'modus-wc-radio',\n  styleUrl: 'modus-wc-radio.scss',\n  shadow: false,\n})\nexport class ModusWcRadio {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */",
        "type": ": string"
      },
      {
        "name": "required",
        "description": "/**\n * A customizable radio button component.\n */\n@Component({\n  tag: 'modus-wc-radio',\n  styleUrl: 'modus-wc-radio.scss',\n  shadow: false,\n})\nexport class ModusWcRadio {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */",
        "type": ": boolean"
      },
      {
        "name": "size",
        "description": "/**\n * A customizable radio button component.\n */\n@Component({\n  tag: 'modus-wc-radio',\n  styleUrl: 'modus-wc-radio.scss',\n  shadow: false,\n})\nexport class ModusWcRadio {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */",
        "type": ": ModusSize"
      },
      {
        "name": "value",
        "description": "/**\n * A customizable radio button component.\n */\n@Component({\n  tag: 'modus-wc-radio',\n  styleUrl: 'modus-wc-radio.scss',\n  shadow: false,\n})\nexport class ModusWcRadio {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */",
        "type": "boolean"
      }
    ],
    "events": [
      {
        "name": "inputBlur",
        "description": "/**\n * A customizable radio button component.\n */\n@Component({\n  tag: 'modus-wc-radio',\n  styleUrl: 'modus-wc-radio.scss',\n  shadow: false,\n})\nexport class ModusWcRadio {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */\n  @Prop() customClass?: string = '';\n\n  /** The disabled state of the radio. */\n  @Prop() disabled?: boolean = false;\n\n  /** The ID of the input element. */\n  @Prop() inputId?: string;\n\n  /** The tabindex of the input. */\n  @Prop() inputTabIndex?: number;\n\n  /** The text to display within the label. */\n  @Prop() label?: string;\n\n  /** Name of the form control. Submitted with the form as part of a name/value pair. */\n  @Prop() name?: string = '';\n\n  /** A value is required for the form to be submittable. */\n  @Prop() required?: boolean = false;\n\n  /** The size of the input. */\n  @Prop() size?: ModusSize = 'md';\n\n  /** The value of the radio. */\n  @Prop({ mutable: true, reflect: true }) value: boolean = false;\n\n  /** Emitted when the input loses focus. */"
      },
      {
        "name": "inputChange",
        "description": "/**\n * A customizable radio button component.\n */\n@Component({\n  tag: 'modus-wc-radio',\n  styleUrl: 'modus-wc-radio.scss',\n  shadow: false,\n})\nexport class ModusWcRadio {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */\n  @Prop() customClass?: string = '';\n\n  /** The disabled state of the radio. */\n  @Prop() disabled?: boolean = false;\n\n  /** The ID of the input element. */\n  @Prop() inputId?: string;\n\n  /** The tabindex of the input. */\n  @Prop() inputTabIndex?: number;\n\n  /** The text to display within the label. */\n  @Prop() label?: string;\n\n  /** Name of the form control. Submitted with the form as part of a name/value pair. */\n  @Prop() name?: string = '';\n\n  /** A value is required for the form to be submittable. */\n  @Prop() required?: boolean = false;\n\n  /** The size of the input. */\n  @Prop() size?: ModusSize = 'md';\n\n  /** The value of the radio. */\n  @Prop({ mutable: true, reflect: true }) value: boolean = false;\n\n  /** Emitted when the input loses focus. */"
      },
      {
        "name": "inputFocus",
        "description": "/**\n * A customizable radio button component.\n */\n@Component({\n  tag: 'modus-wc-radio',\n  styleUrl: 'modus-wc-radio.scss',\n  shadow: false,\n})\nexport class ModusWcRadio {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */\n  @Prop() customClass?: string = '';\n\n  /** The disabled state of the radio. */\n  @Prop() disabled?: boolean = false;\n\n  /** The ID of the input element. */\n  @Prop() inputId?: string;\n\n  /** The tabindex of the input. */\n  @Prop() inputTabIndex?: number;\n\n  /** The text to display within the label. */\n  @Prop() label?: string;\n\n  /** Name of the form control. Submitted with the form as part of a name/value pair. */\n  @Prop() name?: string = '';\n\n  /** A value is required for the form to be submittable. */\n  @Prop() required?: boolean = false;\n\n  /** The size of the input. */\n  @Prop() size?: ModusSize = 'md';\n\n  /** The value of the radio. */\n  @Prop({ mutable: true, reflect: true }) value: boolean = false;\n\n  /** Emitted when the input loses focus. */"
      }
    ],
    "slots": [],
    "default_values": {
      "customClass": "''",
      "disabled": "false",
      "name": "''",
      "required": "false",
      "size": "'md'",
      "value": "false"
    },
    "documentation": "\n\n--- modus-wc-radio.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { ModusSize } from '../types';\n\ninterface RadioArgs {\n  'custom-class'?: string;\n  disabled?: boolean;\n  'input-id'?: string;\n  'input-tab-index'?: number;\n  label?: string;\n  name?: string;\n  required?: boolean;\n  size?: ModusSize;\n  value: boolean;\n}\n\nconst meta: Meta<RadioArgs> = {\n  title: 'Components/Forms/Radio',\n  component: 'modus-wc-radio',\n  args: {\n    'custom-class': '',\n    disabled: false,\n    label: 'Label',\n    name: '',\n    required: false,\n    size: 'md',\n    value: true,\n  },\n  argTypes: {\n    size: {\n      control: { type: 'select' },\n      options: ['xs', 'sm', 'md', 'lg'],\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['inputBlur', 'inputChange', 'inputFocus'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<RadioArgs>;\n\nexport const Default: Story = {\n  render: (args) => {\n    return html`\n      <modus-wc-radio\n        aria-label=\"Radio\"\n        custom-class=${ifDefined(args['custom-class'])}\n        ?disabled=${args.disabled}\n        input-id=${ifDefined(args['input-id'])}\n        input-tab-index=${ifDefined(args['input-tab-index'])}\n        label=${ifDefined(args.label)}\n        name=${ifDefined(args.name)}\n        ?required=${args.required}\n        size=${ifDefined(args.size)}\n        .value=${args.value}\n      ></modus-wc-radio>\n    `;\n  },\n};\n\nexport const RadioGroup: Story = {\n  // prettier-ignore\n  render: (args) => {\n    return html`\n<style>\n  .radio-group {\n    display: flex;\n    flex-direction: column;\n    gap: 0.5rem;\n  }\n  .radio-group legend {\n    margin-bottom: 0.5rem;\n  }\n</style>\n\n<main role=\"main\">\n  <fieldset class=\"radio-group\">\n    <legend>Select an option:</legend>\n\n    <modus-wc-radio\n      label=\"Option 1\"\n      name=\"radio-group-demo\"\n      input-id=\"option1\"\n      ?disabled=${args.disabled}\n      size=${ifDefined(args.size)}\n      .value=${true}\n      @inputChange=${(e: CustomEvent) => {\n        // In a real app, you would update your state management here\n        console.log('Selected:', e.target);\n      }}\n    ></modus-wc-radio>\n\n    <modus-wc-radio\n      label=\"Option 2\"\n      name=\"radio-group-demo\"\n      input-id=\"option2\"\n      ?disabled=${args.disabled}\n      size=${ifDefined(args.size)}\n      .value=${false}\n      @inputChange=${(e: CustomEvent) => {\n        console.log('Selected:', e.target);\n      }}\n    ></modus-wc-radio>\n\n    <modus-wc-radio\n      label=\"Option 3\"\n      name=\"radio-group-demo\"\n      input-id=\"option3\"\n      ?disabled=${args.disabled}\n      size=${ifDefined(args.size)}\n      .value=${false}\n      @inputChange=${(e: CustomEvent) => {\n        console.log('Selected:', e.target);\n      }}\n    ></modus-wc-radio>\n  </fieldset>\n</main>\n    `;\n  },\n};\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - In 1.0 input state was maintained by the component. 2.0 components encourage users to follow a controlled\n  input model. See the Form Inputs [documentation](/docs/documentation-form-inputs--docs) for\n  additional info and examples.\n  - Size values have changed from verbose names (\\`small\\`, \\`medium\\`) to abbreviations (\\`xs\\`, \\`sm\\`, \\`md\\`, \\`lg\\`).\n\n#### Prop Mapping\n\n| 1.0 Prop            | 2.0 Prop    | Notes                                                |\n|---------------------|-------------|----------------------------------------------------- |\n| checked             | value       |                                                      |\n| disabled            | disabled    |                                                      |\n| handle-button-click |             | Not carried over                                     |\n| handle-keydown      |             | Not carried over                                     |\n| id                  | input-id    |                                                      |\n| label               | label       |                                                      |\n| name                | name        |                                                      |\n| ref                 |             | Not carried over                                     |\n| size                | size        | \\`small\\` \u2192 \\`sm\\`, \\`medium\\` \u2192 \\`md\\`              |\n\n#### Event Mapping\n\n| 1.0 Event   | 2.0 Event   | Notes                                               |\n|-------------|-------------|-----------------------------------------------------|\n| buttonClick | inputChange | Now emits an \\`InputEvent\\` instead of a \\`string\\` |\n        `,\n      },\n    },\n    // To hide the actual story rendering and only show docs:\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  // Simple render function or leave it empty\n  render: () => html`<div></div>`,\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-radio\n        aria-label=\"Radio\"\n        custom-class=${ifDefined(args['custom-class'])}\n        ?disabled=${args.disabled}\n        input-id=${ifDefined(args['input-id'])}\n        input-tab-index=${ifDefined(args['input-tab-index'])}\n        label=${ifDefined(args.label)}\n        name=${ifDefined(args.name)}\n        ?required=${args.required}\n        size=${ifDefined(args.size)}\n        .value=${args.value}\n      ></modus-wc-radio>",
        "<modus-wc-radio\n      label=\"Option 1\"\n      name=\"radio-group-demo\"\n      input-id=\"option1\"\n      ?disabled=${args.disabled}\n      size=${ifDefined(args.size)}\n      .value=${true}\n      @inputChange=${(e: CustomEvent) => {\n        // In a real app, you would update your state management here\n        console.log('Selected:', e.target);\n      }}\n    ></modus-wc-radio>",
        "<modus-wc-radio\n      label=\"Option 2\"\n      name=\"radio-group-demo\"\n      input-id=\"option2\"\n      ?disabled=${args.disabled}\n      size=${ifDefined(args.size)}\n      .value=${false}\n      @inputChange=${(e: CustomEvent) => {\n        console.log('Selected:', e.target);\n      }}\n    ></modus-wc-radio>",
        "<modus-wc-radio\n      label=\"Option 3\"\n      name=\"radio-group-demo\"\n      input-id=\"option3\"\n      ?disabled=${args.disabled}\n      size=${ifDefined(args.size)}\n      .value=${false}\n      @inputChange=${(e: CustomEvent) => {\n        console.log('Selected:', e.target);\n      }}\n    ></modus-wc-radio>",
        "\n      <modus-wc-radio\n        aria-label=\"Radio\"\n        custom-class=${ifDefined(args['custom-class'])}\n        ?disabled=${args.disabled}\n        input-id=${ifDefined(args['input-id'])}\n        input-tab-index=${ifDefined(args['input-tab-index'])}\n        label=${ifDefined(args.label)}\n        name=${ifDefined(args.name)}\n        ?required=${args.required}\n        size=${ifDefined(args.size)}\n        .value=${args.value}\n      ></modus-wc-radio>\n    "
      ],
      "variants": [],
      "prop_usage": {
        "label": [
          "Radio",
          "Option 1",
          "Option 2",
          "Option 3"
        ],
        "role": [
          "main"
        ],
        "class": [
          "radio-group"
        ],
        "name": [
          "radio-group-demo"
        ],
        "id": [
          "option1",
          "option2",
          "option3"
        ]
      }
    },
    "tag_name": "modus-wc-radio"
  },
  "modus-wc-textarea": {
    "props": [
      {
        "name": "autoCorrect",
        "description": "/**\n * A customizable textarea component.\n */\n@Component({\n  tag: 'modus-wc-textarea',\n  styleUrl: 'modus-wc-textarea.scss',\n  shadow: false,\n})\nexport class ModusWcTextarea {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic correction in inputted text. Support by browser varies. */",
        "type": ": 'on' | 'off'"
      },
      {
        "name": "bordered",
        "description": "/**\n * A customizable textarea component.\n */\n@Component({\n  tag: 'modus-wc-textarea',\n  styleUrl: 'modus-wc-textarea.scss',\n  shadow: false,\n})\nexport class ModusWcTextarea {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic correction in inputted text. Support by browser varies. */",
        "type": ": boolean"
      },
      {
        "name": "customClass",
        "description": "/**\n * A customizable textarea component.\n */\n@Component({\n  tag: 'modus-wc-textarea',\n  styleUrl: 'modus-wc-textarea.scss',\n  shadow: false,\n})\nexport class ModusWcTextarea {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic correction in inputted text. Support by browser varies. */",
        "type": ": string"
      },
      {
        "name": "disabled",
        "description": "/**\n * A customizable textarea component.\n */\n@Component({\n  tag: 'modus-wc-textarea',\n  styleUrl: 'modus-wc-textarea.scss',\n  shadow: false,\n})\nexport class ModusWcTextarea {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic correction in inputted text. Support by browser varies. */",
        "type": ": boolean"
      },
      {
        "name": "enterkeyhint",
        "description": "/**\n * A customizable textarea component.\n */\n@Component({\n  tag: 'modus-wc-textarea',\n  styleUrl: 'modus-wc-textarea.scss',\n  shadow: false,\n})\nexport class ModusWcTextarea {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic correction in inputted text. Support by browser varies. */",
        "type": ":\n    | 'enter'\n    | 'done'\n    | 'go'\n    | 'next'\n    | 'previous'\n    | 'search'\n    | 'send'"
      },
      {
        "name": "feedback",
        "description": "/**\n * A customizable textarea component.\n */\n@Component({\n  tag: 'modus-wc-textarea',\n  styleUrl: 'modus-wc-textarea.scss',\n  shadow: false,\n})\nexport class ModusWcTextarea {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic correction in inputted text. Support by browser varies. */",
        "type": ": IInputFeedbackProp"
      },
      {
        "name": "inputId",
        "description": "/**\n * A customizable textarea component.\n */\n@Component({\n  tag: 'modus-wc-textarea',\n  styleUrl: 'modus-wc-textarea.scss',\n  shadow: false,\n})\nexport class ModusWcTextarea {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic correction in inputted text. Support by browser varies. */",
        "type": ": string"
      },
      {
        "name": "inputTabIndex",
        "description": "/**\n * A customizable textarea component.\n */\n@Component({\n  tag: 'modus-wc-textarea',\n  styleUrl: 'modus-wc-textarea.scss',\n  shadow: false,\n})\nexport class ModusWcTextarea {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic correction in inputted text. Support by browser varies. */",
        "type": ": number"
      },
      {
        "name": "label",
        "description": "/**\n * A customizable textarea component.\n */\n@Component({\n  tag: 'modus-wc-textarea',\n  styleUrl: 'modus-wc-textarea.scss',\n  shadow: false,\n})\nexport class ModusWcTextarea {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic correction in inputted text. Support by browser varies. */",
        "type": ": string"
      },
      {
        "name": "maxLength",
        "description": "/**\n * A customizable textarea component.\n */\n@Component({\n  tag: 'modus-wc-textarea',\n  styleUrl: 'modus-wc-textarea.scss',\n  shadow: false,\n})\nexport class ModusWcTextarea {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic correction in inputted text. Support by browser varies. */",
        "type": ": number"
      },
      {
        "name": "minLength",
        "description": "/**\n * A customizable textarea component.\n */\n@Component({\n  tag: 'modus-wc-textarea',\n  styleUrl: 'modus-wc-textarea.scss',\n  shadow: false,\n})\nexport class ModusWcTextarea {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic correction in inputted text. Support by browser varies. */",
        "type": ": number"
      },
      {
        "name": "name",
        "description": "/**\n * A customizable textarea component.\n */\n@Component({\n  tag: 'modus-wc-textarea',\n  styleUrl: 'modus-wc-textarea.scss',\n  shadow: false,\n})\nexport class ModusWcTextarea {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic correction in inputted text. Support by browser varies. */",
        "type": ": string"
      },
      {
        "name": "placeholder",
        "description": "/**\n * A customizable textarea component.\n */\n@Component({\n  tag: 'modus-wc-textarea',\n  styleUrl: 'modus-wc-textarea.scss',\n  shadow: false,\n})\nexport class ModusWcTextarea {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic correction in inputted text. Support by browser varies. */",
        "type": ": string"
      },
      {
        "name": "readonly",
        "description": "/**\n * A customizable textarea component.\n */\n@Component({\n  tag: 'modus-wc-textarea',\n  styleUrl: 'modus-wc-textarea.scss',\n  shadow: false,\n})\nexport class ModusWcTextarea {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic correction in inputted text. Support by browser varies. */",
        "type": ": boolean"
      },
      {
        "name": "required",
        "description": "/**\n * A customizable textarea component.\n */\n@Component({\n  tag: 'modus-wc-textarea',\n  styleUrl: 'modus-wc-textarea.scss',\n  shadow: false,\n})\nexport class ModusWcTextarea {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic correction in inputted text. Support by browser varies. */",
        "type": ": boolean"
      },
      {
        "name": "rows",
        "description": "/**\n * A customizable textarea component.\n */\n@Component({\n  tag: 'modus-wc-textarea',\n  styleUrl: 'modus-wc-textarea.scss',\n  shadow: false,\n})\nexport class ModusWcTextarea {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic correction in inputted text. Support by browser varies. */",
        "type": ": number"
      },
      {
        "name": "size",
        "description": "/**\n * A customizable textarea component.\n */\n@Component({\n  tag: 'modus-wc-textarea',\n  styleUrl: 'modus-wc-textarea.scss',\n  shadow: false,\n})\nexport class ModusWcTextarea {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic correction in inputted text. Support by browser varies. */",
        "type": ": ModusSize"
      },
      {
        "name": "value",
        "description": "/**\n * A customizable textarea component.\n */\n@Component({\n  tag: 'modus-wc-textarea',\n  styleUrl: 'modus-wc-textarea.scss',\n  shadow: false,\n})\nexport class ModusWcTextarea {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic correction in inputted text. Support by browser varies. */",
        "type": "string"
      }
    ],
    "events": [
      {
        "name": "inputBlur",
        "description": "/**\n * A customizable textarea component.\n */\n@Component({\n  tag: 'modus-wc-textarea',\n  styleUrl: 'modus-wc-textarea.scss',\n  shadow: false,\n})\nexport class ModusWcTextarea {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic correction in inputted text. Support by browser varies. */\n  @Prop() autoCorrect?: 'on' | 'off';\n\n  /** Indicates that the input should have a border. */\n  @Prop() bordered?: boolean = true;\n\n  /** Custom CSS class to apply to the textarea (supports DaisyUI). */\n  @Prop() customClass?: string = '';\n\n  /** The disabled state of the textarea. */\n  @Prop() disabled?: boolean = false;\n\n  /** A hint to the browser for which enter key to display. */\n  @Prop() enterkeyhint?:\n    | 'enter'\n    | 'done'\n    | 'go'\n    | 'next'\n    | 'previous'\n    | 'search'\n    | 'send';\n\n  /** Feedback to render below the input. */\n  @Prop() feedback?: IInputFeedbackProp;\n\n  /** The ID of the input element. */\n  @Prop() inputId?: string;\n\n  /** The tabindex of the input. */\n  @Prop() inputTabIndex?: number;\n\n  /** The text to display within the label. */\n  @Prop() label?: string;\n\n  /** The maximum number of characters allowed in the textarea. */\n  @Prop() maxLength?: number;\n\n  /** The minimum number of characters required in the textarea. */\n  @Prop() minLength?: number;\n\n  /** Name of the form control. Submitted with the form as part of a name/value pair. */\n  @Prop() name?: string;\n\n  /** The placeholder text for the textarea. */\n  @Prop() placeholder?: string = '';\n\n  /** The readonly state of the textarea. */\n  @Prop() readonly?: boolean = false;\n\n  /** A value is required for the form to be submittable. */\n  @Prop() required?: boolean = false;\n\n  /** The number of visible text lines for the textarea. */\n  @Prop() rows?: number;\n\n  /** The size of the input. */\n  @Prop() size?: ModusSize = 'md';\n\n  /** The value of the textarea. */\n  @Prop({ mutable: true, reflect: true }) value: string = '';\n\n  /** Emitted when the input loses focus. */"
      },
      {
        "name": "inputChange",
        "description": "/**\n * A customizable textarea component.\n */\n@Component({\n  tag: 'modus-wc-textarea',\n  styleUrl: 'modus-wc-textarea.scss',\n  shadow: false,\n})\nexport class ModusWcTextarea {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic correction in inputted text. Support by browser varies. */\n  @Prop() autoCorrect?: 'on' | 'off';\n\n  /** Indicates that the input should have a border. */\n  @Prop() bordered?: boolean = true;\n\n  /** Custom CSS class to apply to the textarea (supports DaisyUI). */\n  @Prop() customClass?: string = '';\n\n  /** The disabled state of the textarea. */\n  @Prop() disabled?: boolean = false;\n\n  /** A hint to the browser for which enter key to display. */\n  @Prop() enterkeyhint?:\n    | 'enter'\n    | 'done'\n    | 'go'\n    | 'next'\n    | 'previous'\n    | 'search'\n    | 'send';\n\n  /** Feedback to render below the input. */\n  @Prop() feedback?: IInputFeedbackProp;\n\n  /** The ID of the input element. */\n  @Prop() inputId?: string;\n\n  /** The tabindex of the input. */\n  @Prop() inputTabIndex?: number;\n\n  /** The text to display within the label. */\n  @Prop() label?: string;\n\n  /** The maximum number of characters allowed in the textarea. */\n  @Prop() maxLength?: number;\n\n  /** The minimum number of characters required in the textarea. */\n  @Prop() minLength?: number;\n\n  /** Name of the form control. Submitted with the form as part of a name/value pair. */\n  @Prop() name?: string;\n\n  /** The placeholder text for the textarea. */\n  @Prop() placeholder?: string = '';\n\n  /** The readonly state of the textarea. */\n  @Prop() readonly?: boolean = false;\n\n  /** A value is required for the form to be submittable. */\n  @Prop() required?: boolean = false;\n\n  /** The number of visible text lines for the textarea. */\n  @Prop() rows?: number;\n\n  /** The size of the input. */\n  @Prop() size?: ModusSize = 'md';\n\n  /** The value of the textarea. */\n  @Prop({ mutable: true, reflect: true }) value: string = '';\n\n  /** Emitted when the input loses focus. */"
      },
      {
        "name": "inputFocus",
        "description": "/**\n * A customizable textarea component.\n */\n@Component({\n  tag: 'modus-wc-textarea',\n  styleUrl: 'modus-wc-textarea.scss',\n  shadow: false,\n})\nexport class ModusWcTextarea {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic correction in inputted text. Support by browser varies. */\n  @Prop() autoCorrect?: 'on' | 'off';\n\n  /** Indicates that the input should have a border. */\n  @Prop() bordered?: boolean = true;\n\n  /** Custom CSS class to apply to the textarea (supports DaisyUI). */\n  @Prop() customClass?: string = '';\n\n  /** The disabled state of the textarea. */\n  @Prop() disabled?: boolean = false;\n\n  /** A hint to the browser for which enter key to display. */\n  @Prop() enterkeyhint?:\n    | 'enter'\n    | 'done'\n    | 'go'\n    | 'next'\n    | 'previous'\n    | 'search'\n    | 'send';\n\n  /** Feedback to render below the input. */\n  @Prop() feedback?: IInputFeedbackProp;\n\n  /** The ID of the input element. */\n  @Prop() inputId?: string;\n\n  /** The tabindex of the input. */\n  @Prop() inputTabIndex?: number;\n\n  /** The text to display within the label. */\n  @Prop() label?: string;\n\n  /** The maximum number of characters allowed in the textarea. */\n  @Prop() maxLength?: number;\n\n  /** The minimum number of characters required in the textarea. */\n  @Prop() minLength?: number;\n\n  /** Name of the form control. Submitted with the form as part of a name/value pair. */\n  @Prop() name?: string;\n\n  /** The placeholder text for the textarea. */\n  @Prop() placeholder?: string = '';\n\n  /** The readonly state of the textarea. */\n  @Prop() readonly?: boolean = false;\n\n  /** A value is required for the form to be submittable. */\n  @Prop() required?: boolean = false;\n\n  /** The number of visible text lines for the textarea. */\n  @Prop() rows?: number;\n\n  /** The size of the input. */\n  @Prop() size?: ModusSize = 'md';\n\n  /** The value of the textarea. */\n  @Prop({ mutable: true, reflect: true }) value: string = '';\n\n  /** Emitted when the input loses focus. */"
      }
    ],
    "slots": [],
    "default_values": {
      "bordered": "true",
      "customClass": "''",
      "disabled": "false",
      "enterkeyhint": "{this.enterkeyhint}\n          id={this.inputId}\n          maxLength={this.maxLength}\n          minlength={this.minLength}\n          name={this.name}\n          onBlur={this.handleBlur}\n          onFocus={this.handleFocus}\n          onInput={this.handleInput}\n          placeholder={this.placeholder}\n          readonly={this.readonly}\n          required={this.required}\n          rows={this.rows}\n          tabIndex={this.inputTabIndex}\n          value={this.value}\n          {...this.inheritedAttributes}\n        />\n        {this.feedback && (\n          <modus-wc-input-feedback\n            level={this.feedback.level}\n            message={this.feedback.message}\n            size={this.size}\n          />\n        )}\n      </Host>\n    )",
      "maxLength": "{this.maxLength}\n          minlength={this.minLength}\n          name={this.name}\n          onBlur={this.handleBlur}\n          onFocus={this.handleFocus}\n          onInput={this.handleInput}\n          placeholder={this.placeholder}\n          readonly={this.readonly}\n          required={this.required}\n          rows={this.rows}\n          tabIndex={this.inputTabIndex}\n          value={this.value}\n          {...this.inheritedAttributes}\n        />\n        {this.feedback && (\n          <modus-wc-input-feedback\n            level={this.feedback.level}\n            message={this.feedback.message}\n            size={this.size}\n          />\n        )}\n      </Host>\n    )",
      "name": "{this.name}\n          onBlur={this.handleBlur}\n          onFocus={this.handleFocus}\n          onInput={this.handleInput}\n          placeholder={this.placeholder}\n          readonly={this.readonly}\n          required={this.required}\n          rows={this.rows}\n          tabIndex={this.inputTabIndex}\n          value={this.value}\n          {...this.inheritedAttributes}\n        />\n        {this.feedback && (\n          <modus-wc-input-feedback\n            level={this.feedback.level}\n            message={this.feedback.message}\n            size={this.size}\n          />\n        )}\n      </Host>\n    )",
      "placeholder": "''",
      "readonly": "false",
      "required": "false",
      "rows": "{this.rows}\n          tabIndex={this.inputTabIndex}\n          value={this.value}\n          {...this.inheritedAttributes}\n        />\n        {this.feedback && (\n          <modus-wc-input-feedback\n            level={this.feedback.level}\n            message={this.feedback.message}\n            size={this.size}\n          />\n        )}\n      </Host>\n    )",
      "size": "'md'",
      "value": "''"
    },
    "documentation": "\n\n--- modus-wc-textarea.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { IInputFeedbackProp, ModusSize } from '../types';\n\ninterface TextAreaArgs {\n  'auto-correct': 'on' | 'off';\n  bordered?: boolean;\n  'custom-class'?: string;\n  disabled?: boolean;\n  enterkeyhint?:\n    | 'enter'\n    | 'done'\n    | 'go'\n    | 'next'\n    | 'previous'\n    | 'search'\n    | 'send';\n  feedback?: IInputFeedbackProp;\n  'input-aria-invalid'?: 'grammar' | 'spelling' | 'true' | 'false';\n  'input-id'?: string;\n  'input-tab-index'?: number;\n  label?: string;\n  'max-length'?: number;\n  'min-length'?: number;\n  name?: string;\n  placeholder?: string;\n  readonly?: boolean;\n  required?: boolean;\n  rows?: number;\n  size?: ModusSize;\n  spellcheck?: boolean;\n  value: string;\n}\n\nconst meta: Meta<TextAreaArgs> = {\n  title: 'Components/Forms/Textarea',\n  component: 'modus-wc-textarea',\n  args: {\n    bordered: true,\n    'custom-class': '',\n    disabled: false,\n    label: 'Label',\n    readonly: false,\n    required: false,\n    size: 'md',\n    spellcheck: false,\n    value: '',\n  },\n  argTypes: {\n    'auto-correct': {\n      options: ['on', 'off'],\n    },\n    enterkeyhint: {\n      options: ['enter', 'done', 'go', 'next', 'previous', 'search', 'send'],\n    },\n    feedback: {\n      description: 'Feedback prop for input components',\n      table: {\n        type: {\n          detail: `\n            Interface: IInputFeedbackProp\n            Properties:\n            - level ('error' | 'info' | 'success' | 'warning'): The feedback level\n            - message (string, optional): The feedback message\n          `,\n        },\n      },\n    },\n    'input-aria-invalid': {\n      control: {\n        type: 'select',\n      },\n      options: ['grammar', 'spelling', 'true', 'false'],\n    },\n    size: {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg'],\n    },\n    spellcheck: {\n      description:\n        'Whether the element may be checked for spelling errors. A hint for the browser, not a guarantee.',\n      table: {\n        category: 'attributes',\n        defaultValue: { summary: 'false' },\n      },\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['inputBlur', 'inputChange', 'inputFocus'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<TextAreaArgs>;\n\nexport const Default: Story = {\n  render: (args) => {\n    return html`\n      <modus-wc-textarea\n        aria-label=\"Textarea input\"\n        auto-correct=${ifDefined(args['auto-correct'])}\n        ?bordered=${args.bordered}\n        custom-class=${ifDefined(args['custom-class'])}\n        enterkeyhint=${ifDefined(args.enterkeyhint)}\n        ?disabled=${args.disabled}\n        .feedback=${args.feedback}\n        input-aria-invalid=${ifDefined(args['input-aria-invalid'])}\n        input-id=${ifDefined(args['input-id'])}\n        input-tab-index=${ifDefined(args['input-tab-index'])}\n        label=${ifDefined(args.label)}\n        max-length=${ifDefined(args['max-length'])}\n        min-length=${ifDefined(args['min-length'])}\n        name=${ifDefined(args.name)}\n        placeholder=${ifDefined(args.placeholder)}\n        ?readonly=${args.readonly}\n        ?required=${args.required}\n        rows=${ifDefined(args.rows)}\n        size=${ifDefined(args.size)}\n        spellcheck=${ifDefined(args.spellcheck)}\n        .value=${args.value}\n      ></modus-wc-textarea>\n    `;\n  },\n};\n\nconst errorFeedback: IInputFeedbackProp = {\n  level: 'error',\n  message: 'Value is required.',\n};\n\nexport const WithErrorFeedback: Story = {\n  render: (args) => html`\n    <modus-wc-textarea\n      aria-label=\"Textarea input\"\n      .feedback=${errorFeedback}\n      label=${ifDefined(args.label)}\n      ?required=${true}\n      .value=${args.value}\n    ></modus-wc-textarea>\n  `,\n};\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - In 1.0 input state was maintained by the component. 2.0 components encourage users to follow a controlled\n  input model. See the Form Inputs [documentation](/docs/documentation-form-inputs--docs) for\n  additional info and examples.\n  - Size values have changed from verbose names (\\`medium\\`, \\`large\\`) to abbreviations (\\`sm\\`, \\`md\\`, \\`lg\\`).\n\n#### Prop Mapping\n\n| 1.0 Prop                     | 2.0 Prop            | Notes                                                       |\n|------------------------------|---------------------|-------------------------------------------------------------|\n| aria-label                   | aria-label          |                                                             |\n| autocorrect                  | auto-correct        |                                                             |\n| auto-focus-input             |                     | Not carried over                                            |\n| clearable                    |                     | Not carried over                                            |\n| disabled                     | disabled            |                                                             |\n| enterkeyhint                 | enterkeyhint        |                                                             |\n| error-text                   | feedback.message    | Use \\`feedback\\` level                                      |\n| helper-text                  |                     | Not carried over                                            |\n| label                        | label               |                                                             |\n| max-length                   | max-length          |                                                             |\n| min-length                   | min-length          |                                                             |\n| placeholder                  | placeholder         |                                                             |\n| read-only                    | readonly            |                                                             |\n| rows                         | rows                |                                                             |\n| required                     | required            |                                                             |\n| size                         | size                | \\`medium\\` \u2192 \\`md\\`, \\`large\\` \u2192 \\`lg\\`                     |\n| spellcheck                   | spellcheck          |                                                             |\n| text-align                   |                     | Not carried over, use CSS instead                           |\n| valid-text                   | feedback.message    | Use \\`feedback\\` level                                      |\n| value                        | value               |                                                             |\n\n#### Event Mapping\n\n| 1.0 Event   | 2.0 Event   | Notes            |\n|-------------|-------------|------------------|\n| valueChange | inputChange |                  |\n        `,\n      },\n    },\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  render: () => html`<div></div>`,\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-textarea\n        aria-label=\"Textarea input\"\n        auto-correct=${ifDefined(args['auto-correct'])}\n        ?bordered=${args.bordered}\n        custom-class=${ifDefined(args['custom-class'])}\n        enterkeyhint=${ifDefined(args.enterkeyhint)}\n        ?disabled=${args.disabled}\n        .feedback=${args.feedback}\n        input-aria-invalid=${ifDefined(args['input-aria-invalid'])}\n        input-id=${ifDefined(args['input-id'])}\n        input-tab-index=${ifDefined(args['input-tab-index'])}\n        label=${ifDefined(args.label)}\n        max-length=${ifDefined(args['max-length'])}\n        min-length=${ifDefined(args['min-length'])}\n        name=${ifDefined(args.name)}\n        placeholder=${ifDefined(args.placeholder)}\n        ?readonly=${args.readonly}\n        ?required=${args.required}\n        rows=${ifDefined(args.rows)}\n        size=${ifDefined(args.size)}\n        spellcheck=${ifDefined(args.spellcheck)}\n        .value=${args.value}\n      ></modus-wc-textarea>",
        "<modus-wc-textarea\n      aria-label=\"Textarea input\"\n      .feedback=${errorFeedback}\n      label=${ifDefined(args.label)}\n      ?required=${true}\n      .value=${args.value}\n    ></modus-wc-textarea>",
        "\n      <modus-wc-textarea\n        aria-label=\"Textarea input\"\n        auto-correct=${ifDefined(args['auto-correct'])}\n        ?bordered=${args.bordered}\n        custom-class=${ifDefined(args['custom-class'])}\n        enterkeyhint=${ifDefined(args.enterkeyhint)}\n        ?disabled=${args.disabled}\n        .feedback=${args.feedback}\n        input-aria-invalid=${ifDefined(args['input-aria-invalid'])}\n        input-id=${ifDefined(args['input-id'])}\n        input-tab-index=${ifDefined(args['input-tab-index'])}\n        label=${ifDefined(args.label)}\n        max-length=${ifDefined(args['max-length'])}\n        min-length=${ifDefined(args['min-length'])}\n        name=${ifDefined(args.name)}\n        placeholder=${ifDefined(args.placeholder)}\n        ?readonly=${args.readonly}\n        ?required=${args.required}\n        rows=${ifDefined(args.rows)}\n        size=${ifDefined(args.size)}\n        spellcheck=${ifDefined(args.spellcheck)}\n        .value=${args.value}\n      ></modus-wc-textarea>\n    ",
        "\n    <modus-wc-textarea\n      aria-label=\"Textarea input\"\n      .feedback=${errorFeedback}\n      label=${ifDefined(args.label)}\n      ?required=${true}\n      .value=${args.value}\n    ></modus-wc-textarea>\n  "
      ],
      "variants": [],
      "prop_usage": {
        "label": [
          "Textarea input"
        ]
      }
    },
    "tag_name": "modus-wc-textarea"
  },
  "modus-wc-breadcrumbs": {
    "props": [
      {
        "name": "items",
        "description": "/** The text to render in the breadcrumb. */\n  label: string;\n  /** The URL emitted when the breadcrumb is clicked. */\n  url?: string;\n}\n\n/**\n * A customizable breadcrumbs component used to help users navigate through a website.\n */\n@Component({\n  tag: 'modus-wc-breadcrumbs',\n  styleUrl: 'modus-wc-breadcrumbs.scss',\n  shadow: false,\n})\nexport class ModusWcBreadcrumbs {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The breadcrumbs to render. */",
        "type": "IBreadcrumb[]"
      },
      {
        "name": "customClass",
        "description": "/** The text to render in the breadcrumb. */\n  label: string;\n  /** The URL emitted when the breadcrumb is clicked. */\n  url?: string;\n}\n\n/**\n * A customizable breadcrumbs component used to help users navigate through a website.\n */\n@Component({\n  tag: 'modus-wc-breadcrumbs',\n  styleUrl: 'modus-wc-breadcrumbs.scss',\n  shadow: false,\n})\nexport class ModusWcBreadcrumbs {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The breadcrumbs to render. */",
        "type": ": string"
      },
      {
        "name": "size",
        "description": "/** The text to render in the breadcrumb. */\n  label: string;\n  /** The URL emitted when the breadcrumb is clicked. */\n  url?: string;\n}\n\n/**\n * A customizable breadcrumbs component used to help users navigate through a website.\n */\n@Component({\n  tag: 'modus-wc-breadcrumbs',\n  styleUrl: 'modus-wc-breadcrumbs.scss',\n  shadow: false,\n})\nexport class ModusWcBreadcrumbs {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The breadcrumbs to render. */",
        "type": ": ModusSize"
      }
    ],
    "events": [],
    "slots": [],
    "default_values": {
      "items": "[]",
      "customClass": "''",
      "size": "'md'"
    },
    "documentation": "\n\n--- modus-wc-breadcrumbs.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { IBreadcrumb } from './modus-wc-breadcrumbs';\nimport { DaisySize } from '../types';\n\nconst items: IBreadcrumb[] = [\n  {\n    label: 'Root',\n    url: '#',\n  },\n  {\n    label: 'Subpage',\n    url: '#',\n  },\n  {\n    label: 'Current Page',\n    url: '#',\n  },\n];\n\ninterface BreadcrumbArgs {\n  'custom-class'?: string;\n  items: IBreadcrumb[];\n  size?: DaisySize;\n}\n\nconst meta: Meta<BreadcrumbArgs> = {\n  title: 'Components/Breadcrumbs',\n  component: 'modus-wc-breadcrumbs',\n  args: {\n    items,\n    size: 'md',\n  },\n  argTypes: {\n    items: {\n      description: 'Array of items for the breadcrumbs component',\n      table: {\n        type: {\n          detail: `\n            Interface: IBreadcrumb\n            Properties:\n            - label (string): The text to render in the breadcrumb\n            - url (string, optional): The URL emitted when the breadcrumb is clicked\n          `,\n        },\n      },\n    },\n    size: {\n      control: {\n        type: 'select',\n      },\n      options: ['xs', 'sm', 'md', 'lg'],\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['breadcrumbClick'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<BreadcrumbArgs>;\n\nconst Template: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<modus-wc-breadcrumbs\n  aria-label=\"Breadcrumbs\"\n  custom-class=${ifDefined(args['custom-class'])}\n  .items=${args.items}\n  size=${ifDefined(args.size)}\n></modus-wc-breadcrumbs>\n    `;\n  },\n};\n\nexport const Default: Story = { ...Template };\n\nexport const UnderlineLinks: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<style>\n  .underline-links a {\n    text-decoration: underline;\n  }\n</style>\n<modus-wc-breadcrumbs\n  custom-class=\"underline-links\"\n  .items=${args.items}\n  size=${ifDefined(args.size)}\n></modus-wc-breadcrumbs>\n    `;\n  },\n};\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - The structure of the breadcrumb \\`items\\` has changed from \\`Crumb\\` interface to \\`IBreadcrumb\\` interface.\n  - Underlined links are now applied using a custom class rather than a dedicated prop.\n\n#### Prop Mapping\n\n| 1.0 Prop        | 2.0 Prop      | Notes                                               |\n|-----------------|---------------|-----------------------------------------------------|\n| aria-label      | aria-label    |                                                     |\n| crumbs          | items         | Interface changed from \\`Crumb\\` to \\`IBreadcrumb\\` |\n| underline-links |               | Not carried over, use CSS instead                   |\n\n#### Event Mapping\n\n| 1.0 Event  | 2.0 Event       | Notes                                             |\n|------------|-----------------|---------------------------------------------------|\n| crumbClick | breadcrumbClick | Payload changed from \\`Crumb\\` to \\`IBreadcrumb\\` |\n\n#### Interfaces\n\n##### 1.0:\n\\`\\`\\`typescript\ninterface Crumb {\n  display: string;\n  id: string;\n}\n\\`\\`\\`\n\n##### 2.0:\n\\`\\`\\`typescript\ninterface IBreadcrumb {\n  label: string;\n  url?: string;\n}\n\\`\\`\\`\n        `,\n      },\n    },\n    // To hide the actual story rendering and only show docs:\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  // Simple render function or leave it empty\n  render: () => html`<div></div>`,\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-breadcrumbs\n  aria-label=\"Breadcrumbs\"\n  custom-class=${ifDefined(args['custom-class'])}\n  .items=${args.items}\n  size=${ifDefined(args.size)}\n></modus-wc-breadcrumbs>",
        "<modus-wc-breadcrumbs\n  custom-class=\"underline-links\"\n  .items=${args.items}\n  size=${ifDefined(args.size)}\n></modus-wc-breadcrumbs>",
        "\n<modus-wc-breadcrumbs\n  aria-label=\"Breadcrumbs\"\n  custom-class=${ifDefined(args['custom-class'])}\n  .items=${args.items}\n  size=${ifDefined(args.size)}\n></modus-wc-breadcrumbs>\n    ",
        "\n<style>\n  .underline-links a {\n    text-decoration: underline;\n  }\n</style>\n<modus-wc-breadcrumbs\n  custom-class=\"underline-links\"\n  .items=${args.items}\n  size=${ifDefined(args.size)}\n></modus-wc-breadcrumbs>\n    "
      ],
      "variants": [],
      "prop_usage": {
        "label": [
          "Breadcrumbs"
        ],
        "class": [
          "underline-links"
        ]
      }
    },
    "tag_name": "modus-wc-breadcrumbs"
  },
  "modus-wc-rating": {
    "props": [
      {
        "name": "allowHalf",
        "description": "/**\n * A rating component that allows users to choose a rating from predefined options\n */\n@Component({\n  tag: 'modus-wc-rating',\n  styleUrl: 'modus-wc-rating.scss',\n  shadow: false,\n})\nexport class ModusWcRating {\n  private inheritedAttributes: Attributes = {};\n  private uniqueRatingGroupName: string;\n  private readonly VARIANTS_WITHOUT_HALF_SUPPORT: ModusWcRatingVariant[] = [\n    'smiley',\n    'thumb',\n  ];\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Whether to allow half-ratings. Only applies to star and heart variants. */",
        "type": ": boolean"
      },
      {
        "name": "count",
        "description": "/**\n * A rating component that allows users to choose a rating from predefined options\n */\n@Component({\n  tag: 'modus-wc-rating',\n  styleUrl: 'modus-wc-rating.scss',\n  shadow: false,\n})\nexport class ModusWcRating {\n  private inheritedAttributes: Attributes = {};\n  private uniqueRatingGroupName: string;\n  private readonly VARIANTS_WITHOUT_HALF_SUPPORT: ModusWcRatingVariant[] = [\n    'smiley',\n    'thumb',\n  ];\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Whether to allow half-ratings. Only applies to star and heart variants. */",
        "type": "number"
      },
      {
        "name": "customClass",
        "description": "/**\n * A rating component that allows users to choose a rating from predefined options\n */\n@Component({\n  tag: 'modus-wc-rating',\n  styleUrl: 'modus-wc-rating.scss',\n  shadow: false,\n})\nexport class ModusWcRating {\n  private inheritedAttributes: Attributes = {};\n  private uniqueRatingGroupName: string;\n  private readonly VARIANTS_WITHOUT_HALF_SUPPORT: ModusWcRatingVariant[] = [\n    'smiley',\n    'thumb',\n  ];\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Whether to allow half-ratings. Only applies to star and heart variants. */",
        "type": ": string"
      },
      {
        "name": "disabled",
        "description": "/**\n * A rating component that allows users to choose a rating from predefined options\n */\n@Component({\n  tag: 'modus-wc-rating',\n  styleUrl: 'modus-wc-rating.scss',\n  shadow: false,\n})\nexport class ModusWcRating {\n  private inheritedAttributes: Attributes = {};\n  private uniqueRatingGroupName: string;\n  private readonly VARIANTS_WITHOUT_HALF_SUPPORT: ModusWcRatingVariant[] = [\n    'smiley',\n    'thumb',\n  ];\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Whether to allow half-ratings. Only applies to star and heart variants. */",
        "type": ": boolean"
      },
      {
        "name": "getAriaLabelText",
        "description": "/**\n * A rating component that allows users to choose a rating from predefined options\n */\n@Component({\n  tag: 'modus-wc-rating',\n  styleUrl: 'modus-wc-rating.scss',\n  shadow: false,\n})\nexport class ModusWcRating {\n  private inheritedAttributes: Attributes = {};\n  private uniqueRatingGroupName: string;\n  private readonly VARIANTS_WITHOUT_HALF_SUPPORT: ModusWcRatingVariant[] = [\n    'smiley',\n    'thumb',\n  ];\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Whether to allow half-ratings. Only applies to star and heart variants. */",
        "type": ": (ratingValue: number)"
      },
      {
        "name": "size",
        "description": "/**\n * A rating component that allows users to choose a rating from predefined options\n */\n@Component({\n  tag: 'modus-wc-rating',\n  styleUrl: 'modus-wc-rating.scss',\n  shadow: false,\n})\nexport class ModusWcRating {\n  private inheritedAttributes: Attributes = {};\n  private uniqueRatingGroupName: string;\n  private readonly VARIANTS_WITHOUT_HALF_SUPPORT: ModusWcRatingVariant[] = [\n    'smiley',\n    'thumb',\n  ];\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Whether to allow half-ratings. Only applies to star and heart variants. */",
        "type": ": ModusSize"
      },
      {
        "name": "variant",
        "description": "/**\n * A rating component that allows users to choose a rating from predefined options\n */\n@Component({\n  tag: 'modus-wc-rating',\n  styleUrl: 'modus-wc-rating.scss',\n  shadow: false,\n})\nexport class ModusWcRating {\n  private inheritedAttributes: Attributes = {};\n  private uniqueRatingGroupName: string;\n  private readonly VARIANTS_WITHOUT_HALF_SUPPORT: ModusWcRatingVariant[] = [\n    'smiley',\n    'thumb',\n  ];\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Whether to allow half-ratings. Only applies to star and heart variants. */",
        "type": "ModusWcRatingVariant"
      },
      {
        "name": "value",
        "description": "/**\n * A rating component that allows users to choose a rating from predefined options\n */\n@Component({\n  tag: 'modus-wc-rating',\n  styleUrl: 'modus-wc-rating.scss',\n  shadow: false,\n})\nexport class ModusWcRating {\n  private inheritedAttributes: Attributes = {};\n  private uniqueRatingGroupName: string;\n  private readonly VARIANTS_WITHOUT_HALF_SUPPORT: ModusWcRatingVariant[] = [\n    'smiley',\n    'thumb',\n  ];\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Whether to allow half-ratings. Only applies to star and heart variants. */",
        "type": "number"
      }
    ],
    "events": [],
    "slots": [],
    "default_values": {
      "allowHalf": "false",
      "count": "5",
      "customClass": "''",
      "disabled": "false",
      "getAriaLabelText": "> string = (ratingValue) =>\n    `Rating item ${ratingValue}`",
      "size": "'md'",
      "variant": "'smiley'",
      "value": "0"
    },
    "documentation": "\n\n--- modus-wc-rating.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { ModusWcRatingVariant } from './modus-wc-rating';\n\ninterface RatingArgs {\n  'allow-half'?: boolean;\n  count: number;\n  'custom-class'?: string;\n  disabled?: boolean;\n  getAriaLabelText?: (index: number) => string;\n  size?: 'sm' | 'md' | 'lg';\n  value?: number;\n  variant: ModusWcRatingVariant;\n}\n\nconst meta: Meta<RatingArgs> = {\n  title: 'Components/Forms/Rating',\n  component: 'modus-wc-rating',\n  args: {\n    'allow-half': false,\n    count: 5,\n    'custom-class': '',\n    disabled: false,\n    getAriaLabelText: (index: number) => `${index} rating`,\n    size: 'md',\n    value: 0,\n    variant: 'smiley',\n  },\n  argTypes: {\n    size: {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg'],\n    },\n    variant: {\n      control: { type: 'select' },\n      options: ['heart', 'smiley', 'star', 'thumb'],\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['ratingChange'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<RatingArgs>;\n\nexport const Default: Story = {\n  render: (args) => html`\n    <modus-wc-rating\n      aria-label=\"Rating scale component\"\n      allow-half=${ifDefined(args['allow-half'])}\n      count=${args.count}\n      custom-class=${ifDefined(args['custom-class'])}\n      disabled=${ifDefined(args.disabled)}\n      size=${ifDefined(args.size)}\n      value=${ifDefined(args.value)}\n      variant=${args.variant}\n      .getAriaLabelText=${args.getAriaLabelText}\n    ></modus-wc-rating>\n  `,\n};\n\nexport const CustomAriaLabels: Story = {\n  render: (args) => {\n    const ariaLabelText = (index: number) =>\n      `Custom label for rating item ${index}`;\n\n    // prettier-ignore\n    return html`\n<script>\n  const myAriaLabelText = (index) => {\n    return 'Custom label for rating item ' + index.toString();\n  };\n</script>\n<modus-wc-rating\n  aria-label=\"Rating scale component\"\n  allow-half=${ifDefined(args['allow-half'])}\n  count=${args.count}\n  custom-class=\"custom-rating-component\"\n  disabled=${ifDefined(args.disabled)}\n  size=${ifDefined(args.size)}\n  value=${ifDefined(args.value)}\n  variant=${args.variant}\n  .getAriaLabelText=${ariaLabelText}\n></modus-wc-rating>\n    `;\n  },\n};\n\nexport const CustomColors: Story = {\n  // prettier-ignore\n  render: (args) => html`\n<style>\n  .custom-color-rating-component {\n    --modus-wc-rating-item-color: var(--modus-wc-color-yellow-dark);\n  }\n</style>\n<modus-wc-rating\n  aria-label=\"Rating scale component\"\n  allow-half=${ifDefined(args['allow-half'])}\n  count=${args.count}\n  custom-class=\"custom-color-rating-component\"\n  disabled=${ifDefined(args.disabled)}\n  size=${ifDefined(args.size)}\n  value=\"3\"\n  variant=\"star\"\n></modus-wc-rating>\n  `,\n};\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - In 1.0 input state was maintained by the component. 2.0 components encourage users to follow a controlled\n  input model. See the Form Inputs [documentation](/docs/documentation-form-inputs--docs) for\n  additional info and examples.\n  - Type/variant values have changed from \\`smileys\\` to \\`smiley\\` and \\`thumbs\\` to \\`thumb\\`.\n\n#### Prop Mapping\n\n| 1.0 Prop    | 2.0 Prop    | Notes                                                |\n|-------------|-------------|------------------------------------------------------|\n| aria-label  | aria-label  |                                                      |\n| disabled    | disabled    |                                                      |\n| type        | variant     | \\`smileys\\` \u2192 \\`smiley\\`, \\`thumbs\\` \u2192 \\`thumb\\`     |\n\n#### Event Mapping\n\n| 1.0 Event          | 2.0 Event    | Notes                                         |\n|--------------------|--------------|-----------------------------------------------|\n| sentimentSelection | ratingChange |                                               |\n        `,\n      },\n    },\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  render: () => html`<div></div>`,\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-rating\n      aria-label=\"Rating scale component\"\n      allow-half=${ifDefined(args['allow-half'])}\n      count=${args.count}\n      custom-class=${ifDefined(args['custom-class'])}\n      disabled=${ifDefined(args.disabled)}\n      size=${ifDefined(args.size)}\n      value=${ifDefined(args.value)}\n      variant=${args.variant}\n      .getAriaLabelText=${args.getAriaLabelText}\n    ></modus-wc-rating>",
        "<modus-wc-rating\n  aria-label=\"Rating scale component\"\n  allow-half=${ifDefined(args['allow-half'])}\n  count=${args.count}\n  custom-class=\"custom-rating-component\"\n  disabled=${ifDefined(args.disabled)}\n  size=${ifDefined(args.size)}\n  value=${ifDefined(args.value)}\n  variant=${args.variant}\n  .getAriaLabelText=${ariaLabelText}\n></modus-wc-rating>",
        "<modus-wc-rating\n  aria-label=\"Rating scale component\"\n  allow-half=${ifDefined(args['allow-half'])}\n  count=${args.count}\n  custom-class=\"custom-color-rating-component\"\n  disabled=${ifDefined(args.disabled)}\n  size=${ifDefined(args.size)}\n  value=\"3\"\n  variant=\"star\"\n></modus-wc-rating>",
        "\n    <modus-wc-rating\n      aria-label=\"Rating scale component\"\n      allow-half=${ifDefined(args['allow-half'])}\n      count=${args.count}\n      custom-class=${ifDefined(args['custom-class'])}\n      disabled=${ifDefined(args.disabled)}\n      size=${ifDefined(args.size)}\n      value=${ifDefined(args.value)}\n      variant=${args.variant}\n      .getAriaLabelText=${args.getAriaLabelText}\n    ></modus-wc-rating>\n  ",
        "\n<script>\n  const myAriaLabelText = (index) => {\n    return 'Custom label for rating item ' + index.toString();\n  };\n</script>\n<modus-wc-rating\n  aria-label=\"Rating scale component\"\n  allow-half=${ifDefined(args['allow-half'])}\n  count=${args.count}\n  custom-class=\"custom-rating-component\"\n  disabled=${ifDefined(args.disabled)}\n  size=${ifDefined(args.size)}\n  value=${ifDefined(args.value)}\n  variant=${args.variant}\n  .getAriaLabelText=${ariaLabelText}\n></modus-wc-rating>\n    "
      ],
      "variants": [
        "star"
      ],
      "prop_usage": {
        "label": [
          "Rating scale component"
        ],
        "class": [
          "custom-rating-component",
          "custom-color-rating-component"
        ],
        "value": [
          "3"
        ],
        "variant": [
          "star"
        ]
      }
    },
    "tag_name": "modus-wc-rating"
  },
  "modus-wc-date": {
    "props": [
      {
        "name": "bordered",
        "description": "/**\n * A customizable date picker component used to create date inputs.\n *\n * Adheres to WCAG 2.2 standards.\n */\n@Component({\n  tag: 'modus-wc-date',\n  styleUrl: 'modus-wc-date.scss',\n  shadow: false,\n})\nexport class ModusWcDate {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */",
        "type": ": boolean"
      },
      {
        "name": "customClass",
        "description": "/**\n * A customizable date picker component used to create date inputs.\n *\n * Adheres to WCAG 2.2 standards.\n */\n@Component({\n  tag: 'modus-wc-date',\n  styleUrl: 'modus-wc-date.scss',\n  shadow: false,\n})\nexport class ModusWcDate {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */",
        "type": ": string"
      },
      {
        "name": "disabled",
        "description": "/**\n * A customizable date picker component used to create date inputs.\n *\n * Adheres to WCAG 2.2 standards.\n */\n@Component({\n  tag: 'modus-wc-date',\n  styleUrl: 'modus-wc-date.scss',\n  shadow: false,\n})\nexport class ModusWcDate {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */",
        "type": ": boolean"
      },
      {
        "name": "feedback",
        "description": "/**\n * A customizable date picker component used to create date inputs.\n *\n * Adheres to WCAG 2.2 standards.\n */\n@Component({\n  tag: 'modus-wc-date',\n  styleUrl: 'modus-wc-date.scss',\n  shadow: false,\n})\nexport class ModusWcDate {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */",
        "type": ": IInputFeedbackProp"
      },
      {
        "name": "inputId",
        "description": "/**\n * A customizable date picker component used to create date inputs.\n *\n * Adheres to WCAG 2.2 standards.\n */\n@Component({\n  tag: 'modus-wc-date',\n  styleUrl: 'modus-wc-date.scss',\n  shadow: false,\n})\nexport class ModusWcDate {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */",
        "type": ": string"
      },
      {
        "name": "inputTabIndex",
        "description": "/**\n * A customizable date picker component used to create date inputs.\n *\n * Adheres to WCAG 2.2 standards.\n */\n@Component({\n  tag: 'modus-wc-date',\n  styleUrl: 'modus-wc-date.scss',\n  shadow: false,\n})\nexport class ModusWcDate {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */",
        "type": ": number"
      },
      {
        "name": "label",
        "description": "/**\n * A customizable date picker component used to create date inputs.\n *\n * Adheres to WCAG 2.2 standards.\n */\n@Component({\n  tag: 'modus-wc-date',\n  styleUrl: 'modus-wc-date.scss',\n  shadow: false,\n})\nexport class ModusWcDate {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */",
        "type": ": string"
      },
      {
        "name": "max",
        "description": "/**\n * A customizable date picker component used to create date inputs.\n *\n * Adheres to WCAG 2.2 standards.\n */\n@Component({\n  tag: 'modus-wc-date',\n  styleUrl: 'modus-wc-date.scss',\n  shadow: false,\n})\nexport class ModusWcDate {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */",
        "type": ": string"
      },
      {
        "name": "min",
        "description": "/**\n * A customizable date picker component used to create date inputs.\n *\n * Adheres to WCAG 2.2 standards.\n */\n@Component({\n  tag: 'modus-wc-date',\n  styleUrl: 'modus-wc-date.scss',\n  shadow: false,\n})\nexport class ModusWcDate {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */",
        "type": ": string"
      },
      {
        "name": "name",
        "description": "/**\n * A customizable date picker component used to create date inputs.\n *\n * Adheres to WCAG 2.2 standards.\n */\n@Component({\n  tag: 'modus-wc-date',\n  styleUrl: 'modus-wc-date.scss',\n  shadow: false,\n})\nexport class ModusWcDate {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */",
        "type": ": string"
      },
      {
        "name": "readOnly",
        "description": "/**\n * A customizable date picker component used to create date inputs.\n *\n * Adheres to WCAG 2.2 standards.\n */\n@Component({\n  tag: 'modus-wc-date',\n  styleUrl: 'modus-wc-date.scss',\n  shadow: false,\n})\nexport class ModusWcDate {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */",
        "type": ": boolean"
      },
      {
        "name": "required",
        "description": "/**\n * A customizable date picker component used to create date inputs.\n *\n * Adheres to WCAG 2.2 standards.\n */\n@Component({\n  tag: 'modus-wc-date',\n  styleUrl: 'modus-wc-date.scss',\n  shadow: false,\n})\nexport class ModusWcDate {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */",
        "type": ": boolean"
      },
      {
        "name": "size",
        "description": "/**\n * A customizable date picker component used to create date inputs.\n *\n * Adheres to WCAG 2.2 standards.\n */\n@Component({\n  tag: 'modus-wc-date',\n  styleUrl: 'modus-wc-date.scss',\n  shadow: false,\n})\nexport class ModusWcDate {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */",
        "type": ": ModusSize"
      },
      {
        "name": "value",
        "description": "/**\n * A customizable date picker component used to create date inputs.\n *\n * Adheres to WCAG 2.2 standards.\n */\n@Component({\n  tag: 'modus-wc-date',\n  styleUrl: 'modus-wc-date.scss',\n  shadow: false,\n})\nexport class ModusWcDate {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */",
        "type": "string"
      }
    ],
    "events": [
      {
        "name": "inputBlur",
        "description": "/**\n * A customizable date picker component used to create date inputs.\n *\n * Adheres to WCAG 2.2 standards.\n */\n@Component({\n  tag: 'modus-wc-date',\n  styleUrl: 'modus-wc-date.scss',\n  shadow: false,\n})\nexport class ModusWcDate {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */\n  @Prop() bordered?: boolean = true;\n\n  /** Custom CSS class to apply to the input. */\n  @Prop() customClass?: string = '';\n\n  /** Whether the form control is disabled. */\n  @Prop() disabled?: boolean = false;\n\n  /** Feedback to render below the input. */\n  @Prop() feedback?: IInputFeedbackProp;\n\n  /** The ID of the input element. */\n  @Prop() inputId?: string;\n\n  /** Determine the control's relative ordering for sequential focus navigation (typically with the Tab key). */\n  @Prop() inputTabIndex?: number;\n\n  /** The text to display within the label. */\n  @Prop() label?: string;\n\n  /** Maximum date value. */\n  @Prop() max?: string;\n\n  /** Minimum date value. */\n  @Prop() min?: string;\n\n  /** Name of the form control. Submitted with the form as part of a name/value pair. */\n  @Prop() name?: string;\n\n  /** Whether the value is editable. */\n  @Prop() readOnly?: boolean = false;\n\n  /** A value is required or must be checked for the form to be submittable. */\n  @Prop() required?: boolean = false;\n\n  /** The size of the input. */\n  @Prop() size?: ModusSize = 'md';\n\n  /** The value of the control (yyyy-mm-dd). */\n  @Prop({ mutable: true, reflect: true }) value: string = '';\n\n  /** Event emitted when the input loses focus. */"
      },
      {
        "name": "inputChange",
        "description": "/**\n * A customizable date picker component used to create date inputs.\n *\n * Adheres to WCAG 2.2 standards.\n */\n@Component({\n  tag: 'modus-wc-date',\n  styleUrl: 'modus-wc-date.scss',\n  shadow: false,\n})\nexport class ModusWcDate {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */\n  @Prop() bordered?: boolean = true;\n\n  /** Custom CSS class to apply to the input. */\n  @Prop() customClass?: string = '';\n\n  /** Whether the form control is disabled. */\n  @Prop() disabled?: boolean = false;\n\n  /** Feedback to render below the input. */\n  @Prop() feedback?: IInputFeedbackProp;\n\n  /** The ID of the input element. */\n  @Prop() inputId?: string;\n\n  /** Determine the control's relative ordering for sequential focus navigation (typically with the Tab key). */\n  @Prop() inputTabIndex?: number;\n\n  /** The text to display within the label. */\n  @Prop() label?: string;\n\n  /** Maximum date value. */\n  @Prop() max?: string;\n\n  /** Minimum date value. */\n  @Prop() min?: string;\n\n  /** Name of the form control. Submitted with the form as part of a name/value pair. */\n  @Prop() name?: string;\n\n  /** Whether the value is editable. */\n  @Prop() readOnly?: boolean = false;\n\n  /** A value is required or must be checked for the form to be submittable. */\n  @Prop() required?: boolean = false;\n\n  /** The size of the input. */\n  @Prop() size?: ModusSize = 'md';\n\n  /** The value of the control (yyyy-mm-dd). */\n  @Prop({ mutable: true, reflect: true }) value: string = '';\n\n  /** Event emitted when the input loses focus. */"
      },
      {
        "name": "inputFocus",
        "description": "/**\n * A customizable date picker component used to create date inputs.\n *\n * Adheres to WCAG 2.2 standards.\n */\n@Component({\n  tag: 'modus-wc-date',\n  styleUrl: 'modus-wc-date.scss',\n  shadow: false,\n})\nexport class ModusWcDate {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */\n  @Prop() bordered?: boolean = true;\n\n  /** Custom CSS class to apply to the input. */\n  @Prop() customClass?: string = '';\n\n  /** Whether the form control is disabled. */\n  @Prop() disabled?: boolean = false;\n\n  /** Feedback to render below the input. */\n  @Prop() feedback?: IInputFeedbackProp;\n\n  /** The ID of the input element. */\n  @Prop() inputId?: string;\n\n  /** Determine the control's relative ordering for sequential focus navigation (typically with the Tab key). */\n  @Prop() inputTabIndex?: number;\n\n  /** The text to display within the label. */\n  @Prop() label?: string;\n\n  /** Maximum date value. */\n  @Prop() max?: string;\n\n  /** Minimum date value. */\n  @Prop() min?: string;\n\n  /** Name of the form control. Submitted with the form as part of a name/value pair. */\n  @Prop() name?: string;\n\n  /** Whether the value is editable. */\n  @Prop() readOnly?: boolean = false;\n\n  /** A value is required or must be checked for the form to be submittable. */\n  @Prop() required?: boolean = false;\n\n  /** The size of the input. */\n  @Prop() size?: ModusSize = 'md';\n\n  /** The value of the control (yyyy-mm-dd). */\n  @Prop({ mutable: true, reflect: true }) value: string = '';\n\n  /** Event emitted when the input loses focus. */"
      }
    ],
    "slots": [],
    "default_values": {
      "bordered": "true",
      "customClass": "''",
      "disabled": "false",
      "max": "{this.max}\n          min={this.min}\n          name={this.name}\n          onBlur={this.handleBlur}\n          onFocus={this.handleFocus}\n          onInput={this.handleInput}\n          readonly={this.readOnly}\n          required={this.required}\n          tabIndex={this.inputTabIndex}\n          type=\"date\"\n          value={this.value}\n          {...this.inheritedAttributes}\n        />\n        {this.feedback && (\n          <modus-wc-input-feedback\n            level={this.feedback.level}\n            message={this.feedback.message}\n            size={this.size}\n          />\n        )}\n      </Host>\n    )",
      "min": "{this.min}\n          name={this.name}\n          onBlur={this.handleBlur}\n          onFocus={this.handleFocus}\n          onInput={this.handleInput}\n          readonly={this.readOnly}\n          required={this.required}\n          tabIndex={this.inputTabIndex}\n          type=\"date\"\n          value={this.value}\n          {...this.inheritedAttributes}\n        />\n        {this.feedback && (\n          <modus-wc-input-feedback\n            level={this.feedback.level}\n            message={this.feedback.message}\n            size={this.size}\n          />\n        )}\n      </Host>\n    )",
      "name": "{this.name}\n          onBlur={this.handleBlur}\n          onFocus={this.handleFocus}\n          onInput={this.handleInput}\n          readonly={this.readOnly}\n          required={this.required}\n          tabIndex={this.inputTabIndex}\n          type=\"date\"\n          value={this.value}\n          {...this.inheritedAttributes}\n        />\n        {this.feedback && (\n          <modus-wc-input-feedback\n            level={this.feedback.level}\n            message={this.feedback.message}\n            size={this.size}\n          />\n        )}\n      </Host>\n    )",
      "readOnly": "false",
      "required": "false",
      "size": "'md'",
      "value": "''"
    },
    "documentation": "\n\n--- modus-wc-date.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { IInputFeedbackProp, ModusSize } from '../types';\n\ninterface DateArgs {\n  bordered?: boolean;\n  'custom-class'?: string;\n  disabled?: boolean;\n  feedback?: IInputFeedbackProp;\n  'input-id'?: string;\n  'input-tab-index'?: number;\n  label?: string;\n  max?: string;\n  min?: string;\n  name?: string;\n  placeholder?: string;\n  'read-only'?: boolean;\n  required?: boolean;\n  size?: ModusSize;\n  value: string;\n}\n\nconst meta: Meta<DateArgs> = {\n  title: 'Components/Forms/Date',\n  component: 'modus-wc-date',\n  args: {\n    bordered: true,\n    'custom-class': '',\n    disabled: false,\n    label: 'Label',\n    'read-only': false,\n    required: false,\n    size: 'md',\n    value: '',\n  },\n  argTypes: {\n    feedback: {\n      description: 'Feedback prop for input components',\n      table: {\n        type: {\n          detail: `\n            Interface: IInputFeedbackProp\n            Properties:\n            - level ('error' | 'info' | 'success' | 'warning'): The feedback level\n            - message (string, optional): The feedback message\n          `,\n        },\n      },\n    },\n    size: {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg'],\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['inputBlur', 'inputChange', 'inputFocus'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<DateArgs>;\n\nexport const Default: Story = {\n  render: (args) => {\n    return html`\n      <modus-wc-date\n        aria-label=\"Date input\"\n        ?bordered=${args.bordered}\n        custom-class=${ifDefined(args['custom-class'])}\n        ?disabled=${args.disabled}\n        .feedback=${args.feedback}\n        input-id=${ifDefined(args['input-id'])}\n        input-tab-index=${ifDefined(args['input-tab-index'])}\n        label=${ifDefined(args.label)}\n        max=${ifDefined(args.max)}\n        min=${ifDefined(args.min)}\n        name=${ifDefined(args.name)}\n        placeholder=${ifDefined(args.placeholder)}\n        ?read-only=${args['read-only']}\n        ?required=${args.required}\n        size=${ifDefined(args.size)}\n        .value=${args.value}\n      ></modus-wc-date>\n    `;\n  },\n};\n\nconst errorFeedback: IInputFeedbackProp = {\n  level: 'error',\n  message: 'Value is required.',\n};\n\nexport const WithErrorFeedback: Story = {\n  render: (args) => html`\n    <modus-wc-date\n      aria-label=\"Date input\"\n      .feedback=${errorFeedback}\n      label=${ifDefined(args.label)}\n      ?required=${true}\n      .value=${args.value}\n    ></modus-wc-date>\n  `,\n};\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - In 1.0 input state was maintained by the component. 2.0 components encourage users to follow a controlled\n  input model. See the Form Inputs [documentation]([Angular](?path=/docs/documentation-form-inputs--docs) for\n  additional info and examples.\n  - Format handling is no longer supported. The component now uses the standard HTML date input format (ISO 8601 \\`yyyy-mm-dd\\`).\n  - Size values have changed from verbose names (\\`medium\\`, \\`large\\`) to abbreviations (\\`sm\\`, \\`md\\`, \\`lg\\`).\n\n#### Prop Mapping\n\n| 1.0 Prop           | 2.0 Prop         | Notes                                   |\n|--------------------|------------------|-----------------------------------------|\n| allow-chars-regex  |                  | Not carried over                        |\n| alt-formats        |                  | Not carried over                        |\n| aria-label         | aria-label       |                                         |\n| auto-focus-input   |                  | Not carried over                        |\n| disabled           | disabled         |                                         |\n| disable-validation |                  | Not carried over                        |\n| error-text         | feedback.message | Use \\`feedback\\` level                  |\n| filler-date        |                  | Not carried over                        |\n| format             |                  | Not carried over                        |\n| helper-text        |                  | Not carried over                        |\n| label              | label            |                                         |\n| max                | max              |                                         |\n| min                | min              |                                         |\n| placeholder        |                  | Not carried over                        |\n| read-only          | read-only        |                                         |\n| required           | required         |                                         |\n| show-calendar-icon |                  | Not carried over                        |\n| size               | size             | \\`medium\\` \u2192 \\`md\\`, \\`large\\` \u2192 \\`lg\\` |\n| type               |                  | Not carried over                        |\n| valid-text         | feedback.message | Use \\`feedback\\` level                  |\n| value              | value            |                                         |\n\n#### Event Mapping\n\n| 1.0 Event           | 2.0 Event   | Notes            |\n|---------------------|-------------|------------------|\n| calendarIconClicked |             | Not carried over |\n| dateInputBlur       | inputBlur   |                  |\n| valueChange         | inputChange |                  |\n| valueError          |             | Not carried over |\n        `,\n      },\n    },\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  render: () => html`<div></div>`,\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-date\n        aria-label=\"Date input\"\n        ?bordered=${args.bordered}\n        custom-class=${ifDefined(args['custom-class'])}\n        ?disabled=${args.disabled}\n        .feedback=${args.feedback}\n        input-id=${ifDefined(args['input-id'])}\n        input-tab-index=${ifDefined(args['input-tab-index'])}\n        label=${ifDefined(args.label)}\n        max=${ifDefined(args.max)}\n        min=${ifDefined(args.min)}\n        name=${ifDefined(args.name)}\n        placeholder=${ifDefined(args.placeholder)}\n        ?read-only=${args['read-only']}\n        ?required=${args.required}\n        size=${ifDefined(args.size)}\n        .value=${args.value}\n      ></modus-wc-date>",
        "<modus-wc-date\n      aria-label=\"Date input\"\n      .feedback=${errorFeedback}\n      label=${ifDefined(args.label)}\n      ?required=${true}\n      .value=${args.value}\n    ></modus-wc-date>",
        "\n      <modus-wc-date\n        aria-label=\"Date input\"\n        ?bordered=${args.bordered}\n        custom-class=${ifDefined(args['custom-class'])}\n        ?disabled=${args.disabled}\n        .feedback=${args.feedback}\n        input-id=${ifDefined(args['input-id'])}\n        input-tab-index=${ifDefined(args['input-tab-index'])}\n        label=${ifDefined(args.label)}\n        max=${ifDefined(args.max)}\n        min=${ifDefined(args.min)}\n        name=${ifDefined(args.name)}\n        placeholder=${ifDefined(args.placeholder)}\n        ?read-only=${args['read-only']}\n        ?required=${args.required}\n        size=${ifDefined(args.size)}\n        .value=${args.value}\n      ></modus-wc-date>\n    ",
        "\n    <modus-wc-date\n      aria-label=\"Date input\"\n      .feedback=${errorFeedback}\n      label=${ifDefined(args.label)}\n      ?required=${true}\n      .value=${args.value}\n    ></modus-wc-date>\n  "
      ],
      "variants": [],
      "prop_usage": {
        "label": [
          "Date input"
        ]
      }
    },
    "tag_name": "modus-wc-date"
  },
  "modus-wc-chip": {
    "props": [
      {
        "name": "active",
        "description": "/**\n * A customizable chip component used to display information in a compact area\n */\n@Component({\n  tag: 'modus-wc-chip',\n  styleUrl: 'modus-wc-chip.scss',\n  shadow: false,\n})\nexport class ModusWcChip {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element. */\n  @Element() el!: HTMLElement;\n\n  /** Active state of chip. */",
        "type": ": boolean"
      },
      {
        "name": "customClass",
        "description": "/**\n * A customizable chip component used to display information in a compact area\n */\n@Component({\n  tag: 'modus-wc-chip',\n  styleUrl: 'modus-wc-chip.scss',\n  shadow: false,\n})\nexport class ModusWcChip {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element. */\n  @Element() el!: HTMLElement;\n\n  /** Active state of chip. */",
        "type": ": string"
      },
      {
        "name": "disabled",
        "description": "/**\n * A customizable chip component used to display information in a compact area\n */\n@Component({\n  tag: 'modus-wc-chip',\n  styleUrl: 'modus-wc-chip.scss',\n  shadow: false,\n})\nexport class ModusWcChip {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element. */\n  @Element() el!: HTMLElement;\n\n  /** Active state of chip. */",
        "type": ": boolean"
      },
      {
        "name": "hasError",
        "description": "/**\n * A customizable chip component used to display information in a compact area\n */\n@Component({\n  tag: 'modus-wc-chip',\n  styleUrl: 'modus-wc-chip.scss',\n  shadow: false,\n})\nexport class ModusWcChip {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element. */\n  @Element() el!: HTMLElement;\n\n  /** Active state of chip. */",
        "type": ": boolean"
      },
      {
        "name": "label",
        "description": "/**\n * A customizable chip component used to display information in a compact area\n */\n@Component({\n  tag: 'modus-wc-chip',\n  styleUrl: 'modus-wc-chip.scss',\n  shadow: false,\n})\nexport class ModusWcChip {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element. */\n  @Element() el!: HTMLElement;\n\n  /** Active state of chip. */",
        "type": ": string"
      },
      {
        "name": "showRemove",
        "description": "/**\n * A customizable chip component used to display information in a compact area\n */\n@Component({\n  tag: 'modus-wc-chip',\n  styleUrl: 'modus-wc-chip.scss',\n  shadow: false,\n})\nexport class ModusWcChip {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element. */\n  @Element() el!: HTMLElement;\n\n  /** Active state of chip. */",
        "type": ": boolean"
      },
      {
        "name": "shape",
        "description": "/**\n * A customizable chip component used to display information in a compact area\n */\n@Component({\n  tag: 'modus-wc-chip',\n  styleUrl: 'modus-wc-chip.scss',\n  shadow: false,\n})\nexport class ModusWcChip {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element. */\n  @Element() el!: HTMLElement;\n\n  /** Active state of chip. */",
        "type": ": 'rectangle' | 'circle'"
      },
      {
        "name": "size",
        "description": "/**\n * A customizable chip component used to display information in a compact area\n */\n@Component({\n  tag: 'modus-wc-chip',\n  styleUrl: 'modus-wc-chip.scss',\n  shadow: false,\n})\nexport class ModusWcChip {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element. */\n  @Element() el!: HTMLElement;\n\n  /** Active state of chip. */",
        "type": ": ModusSize"
      },
      {
        "name": "variant",
        "description": "/**\n * A customizable chip component used to display information in a compact area\n */\n@Component({\n  tag: 'modus-wc-chip',\n  styleUrl: 'modus-wc-chip.scss',\n  shadow: false,\n})\nexport class ModusWcChip {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element. */\n  @Element() el!: HTMLElement;\n\n  /** Active state of chip. */",
        "type": ": 'filled' | 'outline'"
      }
    ],
    "events": [],
    "slots": [],
    "default_values": {
      "active": "false",
      "customClass": "''",
      "disabled": "false",
      "hasError": "false",
      "label": "''",
      "showRemove": "false",
      "shape": "'rectangle'",
      "size": "'md'",
      "variant": "'filled'"
    },
    "documentation": "\n\n--- modus-wc-chip.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { ModusSize } from '../types';\n\ninterface ChipArgs {\n  active?: boolean;\n  'custom-class'?: string;\n  disabled?: boolean;\n  'has-error'?: boolean;\n  label: string;\n  shape?: 'rectangle' | 'circle';\n  'show-remove'?: boolean;\n  size: ModusSize;\n  variant: 'filled' | 'outline';\n}\n\nconst meta: Meta<ChipArgs> = {\n  title: 'Components/Chip',\n  component: 'modus-wc-chip',\n  args: {\n    label: 'Chip',\n    'show-remove': true,\n    shape: 'rectangle',\n    size: 'md',\n    variant: 'filled',\n  },\n  argTypes: {\n    shape: {\n      control: { type: 'select' },\n      options: ['rectangle', 'circle'],\n    },\n    size: {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg'],\n    },\n    variant: {\n      control: { type: 'select' },\n      options: ['filled', 'outline'],\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['chipClick', 'chipRemove'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<ChipArgs>;\n\nconst Template: Story = {\n  render: (args) => {\n    return html` <modus-wc-chip\n      aria-label=\"Chip example\"\n      active=${ifDefined(args.active)}\n      disabled=${ifDefined(args.disabled)}\n      has-error=${ifDefined(args['has-error'])}\n      label=${args.label}\n      shape=${args.shape}\n      show-remove=${ifDefined(args['show-remove'])}\n      size=${args.size}\n      variant=${args.variant}\n    />`;\n  },\n};\n\nexport const Default: Story = { ...Template };\n\nexport const AvatarChip: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<modus-wc-chip\n  aria-label=\"Chip example\"\n  active=${ifDefined(args.active)}\n  disabled=${ifDefined(args.disabled)}\n  has-error=${ifDefined(args['has-error'])}\n  label=${args.label}\n  shape=${args.shape}\n  show-remove=${ifDefined(args['show-remove'])}\n  size=${args.size}\n  variant=${args.variant}\n>\n  <modus-wc-avatar\n    img-src=\"https://i.pinimg.com/474x/73/54/79/7354794bf3873c3ef2666f778da4bcac.jpg\"\n    alt=\"sonic the hedgehog\"\n  ></modus-wc-avatar>\n</modus-wc-chip>\n    `;\n  },\n};\n\nexport const CheckIconChip: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<modus-wc-chip\n  aria-label=\"Chip example\"\n  active=${ifDefined(args.active)}\n  disabled=${ifDefined(args.disabled)}\n  has-error=${ifDefined(args['has-error'])}\n  label=${args.label}\n  shape=${args.shape}\n  show-remove=${ifDefined(args['show-remove'])}\n  size=${args.size}\n  variant=${args.variant}\n>\n  <modus-wc-icon name=\"check\" size=\"xs\"></modus-wc-icon>\n</modus-wc-chip>\n    `;\n  },\n};\n\n// prettier-ignore\nexport const Composable: Story = {\n  render: (args) => {\n    return html`\n<modus-wc-chip\n  aria-label=\"Chip example\"\n  active=${ifDefined(args.active)}\n  disabled=${ifDefined(args.disabled)}\n  has-error=${ifDefined(args['has-error'])}\n  shape=${args.shape}\n  size=${args.size}\n  variant=${args.variant}\n>\n  <modus-wc-icon name=\"heart\" size=\"xs\"></modus-wc-icon>\n  Chip\n</modus-wc-chip>\n\n<modus-wc-chip\n  aria-label=\"Chip example\"\n  active=${ifDefined(args.active)}\n  disabled=${ifDefined(args.disabled)}\n  has-error=${ifDefined(args['has-error'])}\n  shape=${args.shape}\n  show-remove=\"true\"\n  size=${args.size}\n  variant=${args.variant}\n>\n  <modus-wc-icon name=\"heart\" size=\"xs\"></modus-wc-icon>\n  Chip\n</modus-wc-chip>\n\n<modus-wc-chip\n  aria-label=\"Chip example\"\n  active=${ifDefined(args.active)}\n  disabled=${ifDefined(args.disabled)}\n  has-error=${ifDefined(args['has-error'])}\n  shape=${args.shape}\n  size=${args.size}\n  variant=${args.variant}\n>\n  <modus-wc-icon name=\"heart\" size=\"xs\"></modus-wc-icon>\n  Chip\n  <modus-wc-icon name=\"heart\" size=\"xs\"></modus-wc-icon>\n</modus-wc-chip>\n    `;\n  },\n};\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - \\`chip-style\\` prop has been renamed to \\`variant\\` and values changed from \\`solid\\` to \\`filled\\`.\n  - \\`closeClick\\` event has been renamed to \\`chipRemove\\`.\n  - \\`show-close\\` prop has been renamed to \\`show-remove\\`.\n  - Size values have changed from verbose names (\\`medium\\`, \\`small\\`) to abbreviations (\\`md\\`, \\`sm\\`).\n\n#### Prop Mapping\n\n| 1.0 Prop       | 2.0 Prop    | Notes                                             |\n|----------------|-------------|---------------------------------------------------|\n| active         | active      |                                                   |\n| advanced-chip  |             | Not carried over                                  |\n| aria-label     | aria-label  |                                                   |\n| chip-id        |             | Not carried over                                  |\n| chip-style     | variant     | \\`solid\\` \u2192 \\`filled\\`, \\`outline\\` \u2192 \\`outline\\` |\n| disabled       | disabled    |                                                   |\n| has-error      | has-error   |                                                   |\n| image-url      |             | Not carried over, use slot instead                |\n| max-width      |             | Not carried over, use CSS instead                 |\n| show-checkmark |             | Not carried over, use slot instead                |\n| show-close     | show-remove |                                                   |\n| size           | size        | \\`medium\\` \u2192 \\`md\\`, \\`small\\` \u2192 \\`sm\\`           |\n| value          | label       |                                                   |\n|                | shape       | New in 2.0: \\`rectangle\\` (default), \\`circle\\` |\n\n#### Event Mapping\n\n| 1.0 Event   | 2.0 Event   | Notes |\n|-------------|-------------|-------|\n| chipClick  | chipClick  |       |\n| closeClick | chipRemove |       |\n        `,\n      },\n    },\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  render: () => html`<div></div>`,\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-avatar\n    img-src=\"https://i.pinimg.com/474x/73/54/79/7354794bf3873c3ef2666f778da4bcac.jpg\"\n    alt=\"sonic the hedgehog\"\n  ></modus-wc-avatar>",
        "<modus-wc-icon name=\"check\" size=\"xs\"></modus-wc-icon>",
        "<modus-wc-icon name=\"heart\" size=\"xs\"></modus-wc-icon>",
        "<modus-wc-icon name=\"heart\" size=\"xs\"></modus-wc-icon>",
        "<modus-wc-icon name=\"heart\" size=\"xs\"></modus-wc-icon>"
      ],
      "variants": [],
      "prop_usage": {
        "label": [
          "Chip example"
        ],
        "src": [
          "https://i.pinimg.com/474x/73/54/79/7354794bf3873c3ef2666f778da4bcac.jpg"
        ],
        "alt": [
          "sonic the hedgehog"
        ],
        "name": [
          "check",
          "heart"
        ],
        "size": [
          "xs"
        ],
        "remove": [
          "true"
        ]
      }
    },
    "tag_name": "modus-wc-chip"
  },
  "modus-wc-pagination": {
    "props": [
      {
        "name": "ariaLabelValues",
        "description": "/** Aria label values for pagination buttons */\nexport interface IAriaLabelValues {\n  /** Aria label for the first page button */\n  firstPage?: string;\n  /** Aria label for the last page button */\n  lastPage?: string;\n  /** Aria label for the next page button */\n  nextPage?: string;\n  /** Aria label for the page number button. Use {0} as placeholder for the page number */\n  page?: string;\n  /** Aria label for the previous page button */\n  previousPage?: string;\n}\n\nexport interface IPageChange {\n  /** The number of the newly selected page */\n  newPage: number;\n  /** The number of the previously selected page */\n  prevPage: number;\n}\n\n/**\n * Pagination component to navigate through pages of content\n */\n@Component({\n  tag: 'modus-wc-pagination',\n  styleUrl: 'modus-wc-pagination.scss',\n  shadow: false,\n})\nexport class ModusWcPagination {\n  private inheritedAttributes: Attributes = {};\n  private readonly maxVisibleButtons: number = 5;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Aria label values for pagination buttons */",
        "type": ": IAriaLabelValues"
      },
      {
        "name": "count",
        "description": "/** Aria label values for pagination buttons */\nexport interface IAriaLabelValues {\n  /** Aria label for the first page button */\n  firstPage?: string;\n  /** Aria label for the last page button */\n  lastPage?: string;\n  /** Aria label for the next page button */\n  nextPage?: string;\n  /** Aria label for the page number button. Use {0} as placeholder for the page number */\n  page?: string;\n  /** Aria label for the previous page button */\n  previousPage?: string;\n}\n\nexport interface IPageChange {\n  /** The number of the newly selected page */\n  newPage: number;\n  /** The number of the previously selected page */\n  prevPage: number;\n}\n\n/**\n * Pagination component to navigate through pages of content\n */\n@Component({\n  tag: 'modus-wc-pagination',\n  styleUrl: 'modus-wc-pagination.scss',\n  shadow: false,\n})\nexport class ModusWcPagination {\n  private inheritedAttributes: Attributes = {};\n  private readonly maxVisibleButtons: number = 5;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Aria label values for pagination buttons */",
        "type": "number"
      },
      {
        "name": "customClass",
        "description": "/** Aria label values for pagination buttons */\nexport interface IAriaLabelValues {\n  /** Aria label for the first page button */\n  firstPage?: string;\n  /** Aria label for the last page button */\n  lastPage?: string;\n  /** Aria label for the next page button */\n  nextPage?: string;\n  /** Aria label for the page number button. Use {0} as placeholder for the page number */\n  page?: string;\n  /** Aria label for the previous page button */\n  previousPage?: string;\n}\n\nexport interface IPageChange {\n  /** The number of the newly selected page */\n  newPage: number;\n  /** The number of the previously selected page */\n  prevPage: number;\n}\n\n/**\n * Pagination component to navigate through pages of content\n */\n@Component({\n  tag: 'modus-wc-pagination',\n  styleUrl: 'modus-wc-pagination.scss',\n  shadow: false,\n})\nexport class ModusWcPagination {\n  private inheritedAttributes: Attributes = {};\n  private readonly maxVisibleButtons: number = 5;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Aria label values for pagination buttons */",
        "type": ": string"
      },
      {
        "name": "nextButtonText",
        "description": "/** Aria label values for pagination buttons */\nexport interface IAriaLabelValues {\n  /** Aria label for the first page button */\n  firstPage?: string;\n  /** Aria label for the last page button */\n  lastPage?: string;\n  /** Aria label for the next page button */\n  nextPage?: string;\n  /** Aria label for the page number button. Use {0} as placeholder for the page number */\n  page?: string;\n  /** Aria label for the previous page button */\n  previousPage?: string;\n}\n\nexport interface IPageChange {\n  /** The number of the newly selected page */\n  newPage: number;\n  /** The number of the previously selected page */\n  prevPage: number;\n}\n\n/**\n * Pagination component to navigate through pages of content\n */\n@Component({\n  tag: 'modus-wc-pagination',\n  styleUrl: 'modus-wc-pagination.scss',\n  shadow: false,\n})\nexport class ModusWcPagination {\n  private inheritedAttributes: Attributes = {};\n  private readonly maxVisibleButtons: number = 5;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Aria label values for pagination buttons */",
        "type": ": string"
      },
      {
        "name": "page",
        "description": "/** Aria label values for pagination buttons */\nexport interface IAriaLabelValues {\n  /** Aria label for the first page button */\n  firstPage?: string;\n  /** Aria label for the last page button */\n  lastPage?: string;\n  /** Aria label for the next page button */\n  nextPage?: string;\n  /** Aria label for the page number button. Use {0} as placeholder for the page number */\n  page?: string;\n  /** Aria label for the previous page button */\n  previousPage?: string;\n}\n\nexport interface IPageChange {\n  /** The number of the newly selected page */\n  newPage: number;\n  /** The number of the previously selected page */\n  prevPage: number;\n}\n\n/**\n * Pagination component to navigate through pages of content\n */\n@Component({\n  tag: 'modus-wc-pagination',\n  styleUrl: 'modus-wc-pagination.scss',\n  shadow: false,\n})\nexport class ModusWcPagination {\n  private inheritedAttributes: Attributes = {};\n  private readonly maxVisibleButtons: number = 5;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Aria label values for pagination buttons */",
        "type": ": string"
      },
      {
        "name": "prevButtonText",
        "description": "/** Aria label values for pagination buttons */\nexport interface IAriaLabelValues {\n  /** Aria label for the first page button */\n  firstPage?: string;\n  /** Aria label for the last page button */\n  lastPage?: string;\n  /** Aria label for the next page button */\n  nextPage?: string;\n  /** Aria label for the page number button. Use {0} as placeholder for the page number */\n  page?: string;\n  /** Aria label for the previous page button */\n  previousPage?: string;\n}\n\nexport interface IPageChange {\n  /** The number of the newly selected page */\n  newPage: number;\n  /** The number of the previously selected page */\n  prevPage: number;\n}\n\n/**\n * Pagination component to navigate through pages of content\n */\n@Component({\n  tag: 'modus-wc-pagination',\n  styleUrl: 'modus-wc-pagination.scss',\n  shadow: false,\n})\nexport class ModusWcPagination {\n  private inheritedAttributes: Attributes = {};\n  private readonly maxVisibleButtons: number = 5;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Aria label values for pagination buttons */",
        "type": ": string"
      },
      {
        "name": "size",
        "description": "/** Aria label values for pagination buttons */\nexport interface IAriaLabelValues {\n  /** Aria label for the first page button */\n  firstPage?: string;\n  /** Aria label for the last page button */\n  lastPage?: string;\n  /** Aria label for the next page button */\n  nextPage?: string;\n  /** Aria label for the page number button. Use {0} as placeholder for the page number */\n  page?: string;\n  /** Aria label for the previous page button */\n  previousPage?: string;\n}\n\nexport interface IPageChange {\n  /** The number of the newly selected page */\n  newPage: number;\n  /** The number of the previously selected page */\n  prevPage: number;\n}\n\n/**\n * Pagination component to navigate through pages of content\n */\n@Component({\n  tag: 'modus-wc-pagination',\n  styleUrl: 'modus-wc-pagination.scss',\n  shadow: false,\n})\nexport class ModusWcPagination {\n  private inheritedAttributes: Attributes = {};\n  private readonly maxVisibleButtons: number = 5;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Aria label values for pagination buttons */",
        "type": "ModusSize"
      }
    ],
    "events": [],
    "slots": [],
    "default_values": {
      "count": "1",
      "customClass": "''",
      "nextButtonText": "{`${buttonClasses} ${this.nextButtonText ? 'modus-wc-pagination-button-text' : ''}`}\n          disabled={isLastPage}\n          onClick={() => this.handlePageClick(this.page + 1)}\n        >\n          {this.nextButtonText ? (\n            <span>{this.nextButtonText}</span>\n          ) : (\n            <ChevronRightSolidIcon className=\"modus-wc-pagination-icon\" />\n          )}\n        </button>\n\n        {shouldShowFirstLastButtons && (\n          <button\n            aria-label={ariaLabels.lastPage}\n            class={buttonClasses}\n            disabled={isLastPage}\n            onClick={() => this.handlePageClick(this.count)}\n          >\n            <ChevronDoubleRightSolidIcon className=\"modus-wc-pagination-icon\" />\n          </button>\n        )}\n      </div>\n    )",
      "page": "1",
      "prevButtonText": "{`${buttonClasses} ${this.prevButtonText ? 'modus-wc-pagination-button-text' : ''}`}\n          disabled={isFirstPage}\n          onClick={() => this.handlePageClick(this.page - 1)}\n        >\n          {this.prevButtonText ? (\n            <span>{this.prevButtonText}</span>\n          ) : (\n            <ChevronLeftSolidIcon className=\"modus-wc-pagination-icon\" />\n          )}\n        </button>\n\n        {this.visiblePages.map((page) => (\n          <button\n            aria-current={this.page === page ? 'page' : undefined}\n            aria-label={ariaLabels.page.replace('{0}', page.toString())}\n            class={`${buttonClasses} ${this.page === page ? 'modus-wc-btn-active' : ''}`}\n            onClick={() => this.handlePageClick(page)}\n          >\n            {page}\n          </button>\n        ))}\n\n        <button\n          aria-label={this.nextButtonText ? undefined : ariaLabels.nextPage}\n          class={`${buttonClasses} ${this.nextButtonText ? 'modus-wc-pagination-button-text' : ''}`}\n          disabled={isLastPage}\n          onClick={() => this.handlePageClick(this.page + 1)}\n        >\n          {this.nextButtonText ? (\n            <span>{this.nextButtonText}</span>\n          ) : (\n            <ChevronRightSolidIcon className=\"modus-wc-pagination-icon\" />\n          )}\n        </button>\n\n        {shouldShowFirstLastButtons && (\n          <button\n            aria-label={ariaLabels.lastPage}\n            class={buttonClasses}\n            disabled={isLastPage}\n            onClick={() => this.handlePageClick(this.count)}\n          >\n            <ChevronDoubleRightSolidIcon className=\"modus-wc-pagination-icon\" />\n          </button>\n        )}\n      </div>\n    )",
      "size": "'md'"
    },
    "documentation": "\n\n--- modus-wc-pagination.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { IAriaLabelValues } from './modus-wc-pagination';\n\nconst defaultLabelValues: IAriaLabelValues = {\n  firstPage: 'First page',\n  lastPage: 'Last page',\n  nextPage: 'Next page',\n  page: 'Page {0}',\n  previousPage: 'Previous page',\n};\n\ninterface PaginationArgs {\n  'aria-label-values'?: IAriaLabelValues;\n  count: number;\n  'custom-class'?: string;\n  'next-button-text'?: string;\n  page: number;\n  'prev-button-text'?: string;\n  size?: 'sm' | 'md' | 'lg';\n}\n\nconst meta: Meta<PaginationArgs> = {\n  title: 'Components/Pagination',\n  component: 'modus-wc-pagination',\n  args: {\n    'aria-label-values': defaultLabelValues,\n    count: 5,\n    'custom-class': '',\n    page: 1,\n    size: 'md',\n  },\n  argTypes: {\n    'aria-label-values': {\n      description: 'Custom aria label values for pagination buttons',\n      table: {\n        type: {\n          detail: `\n            Interface: IAriaLabelValues\n            Properties:\n            - firstPage (string, optional): Aria label for the first page button\n            - lastPage (string, optional): Aria label for the last page button\n            - nextPage (string, optional): Aria label for the next page button\n            - page (string, optional): Aria label for the page number button. Use {0} as placeholder for the page number\n            - previousPage (string, optional): Aria label for the previous page button\n          `,\n        },\n      },\n    },\n    size: {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg'],\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['pageChange'],\n    },\n    docs: {\n      description: {\n        component: `\n## Event Interface Documentation\n\nThe pageChange event emits an object with the following interface:\n\n\\`\\`\\`typescript\ninterface IPageChange {\n  /** The number of the newly selected page */\n  newPage: number;\n  /** The number of the previously selected page */\n  prevPage: number;\n}\n\\`\\`\\`\n        `,\n      },\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<PaginationArgs>;\n\nexport const Default: Story = {\n  render: (args) => html`\n    <modus-wc-pagination\n      .ariaLabelValues=${args['aria-label-values']}\n      count=${args.count}\n      custom-class=${ifDefined(args['custom-class'])}\n      next-button-text=\"${ifDefined(args['next-button-text'])}\"\n      page=${args.page}\n      prev-button-text=\"${ifDefined(args['prev-button-text'])}\"\n      size=${ifDefined(args.size)}\n    ></modus-wc-pagination>\n  `,\n};\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - In 1.0 the pagination component incorporated ellipses to indicate page skips. In 2.0, the component\n  has been simplified to only show at most 5 page buttons relative to current page with previous/next\n  and first/last navigation buttons.\n  - In 1.0 the \\`active-page\\` prop was used, while 2.0 uses \\`page\\` instead.\n  - The \\`pageChange\\` event in 1.0 emitted just the page number value. In 2.0, it emits an object\n  with \\`newPage\\` and \\`prevPage\\` properties.\n  - Size values have changed from verbose names (\\`small\\`, \\`medium\\`, \\`large\\`) to abbreviations (\\`sm\\`, \\`md\\`, \\`lg\\`).\n\n#### Prop Mapping\n\n| 1.0 Prop              | 2.0 Prop           | Notes                                                       |\n|-----------------------|--------------------|-------------------------------------------------------------|\n| active-page           | page               |                                                             |\n| aria-label            | aria-label         |                                                             |\n| max-page              | count              |                                                             |\n| min-page              |                    | Not carried over, minimum page is always 1                  |\n| next-page-button-text | next-button-text   |                                                             |\n| prev-page-button-text | prev-button-text   |                                                             |\n| size                  | size               | \\`small\\` \u2192 \\`sm\\`, \\`medium\\` \u2192 \\`md\\`, \\`large\\` \u2192 \\`lg\\` |\n\n#### Event Mapping\n\n| 1.0 Event   | 2.0 Event   | Notes                                                   |\n|-------------|-------------|---------------------------------------------------------|\n| pageChange  | pageChange  | Now emits an object with \\`newPage\\` and \\`prevPage\\`   |\n        `,\n      },\n    },\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  render: () => html`<div></div>`,\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-pagination\n      .ariaLabelValues=${args['aria-label-values']}\n      count=${args.count}\n      custom-class=${ifDefined(args['custom-class'])}\n      next-button-text=\"${ifDefined(args['next-button-text'])}\"\n      page=${args.page}\n      prev-button-text=\"${ifDefined(args['prev-button-text'])}\"\n      size=${ifDefined(args.size)}\n    ></modus-wc-pagination>",
        "\n    <modus-wc-pagination\n      .ariaLabelValues=${args['aria-label-values']}\n      count=${args.count}\n      custom-class=${ifDefined(args['custom-class'])}\n      next-button-text=\"${ifDefined(args['next-button-text'])}\"\n      page=${args.page}\n      prev-button-text=\"${ifDefined(args['prev-button-text'])}\"\n      size=${ifDefined(args.size)}\n    ></modus-wc-pagination>\n  "
      ],
      "variants": [],
      "prop_usage": {
        "text": [
          "${ifDefined(args["
        ]
      }
    },
    "tag_name": "modus-wc-pagination"
  },
  "modus-wc-card": {
    "props": [
      {
        "name": "backgroundFigure",
        "description": "/**\n * A customizable card component used to group and display content in a way that is easily readable\n */\n@Component({\n  tag: 'modus-wc-card',\n  styleUrl: 'modus-wc-card.scss',\n  shadow: false,\n})\nexport class ModusWcCard {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Makes any \\<figure> in the 'header' slot cover the background */",
        "type": ": boolean"
      },
      {
        "name": "bordered",
        "description": "/**\n * A customizable card component used to group and display content in a way that is easily readable\n */\n@Component({\n  tag: 'modus-wc-card',\n  styleUrl: 'modus-wc-card.scss',\n  shadow: false,\n})\nexport class ModusWcCard {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Makes any \\<figure> in the 'header' slot cover the background */",
        "type": ": boolean"
      },
      {
        "name": "customClass",
        "description": "/**\n * A customizable card component used to group and display content in a way that is easily readable\n */\n@Component({\n  tag: 'modus-wc-card',\n  styleUrl: 'modus-wc-card.scss',\n  shadow: false,\n})\nexport class ModusWcCard {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Makes any \\<figure> in the 'header' slot cover the background */",
        "type": ": string"
      },
      {
        "name": "layout",
        "description": "/**\n * A customizable card component used to group and display content in a way that is easily readable\n */\n@Component({\n  tag: 'modus-wc-card',\n  styleUrl: 'modus-wc-card.scss',\n  shadow: false,\n})\nexport class ModusWcCard {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Makes any \\<figure> in the 'header' slot cover the background */",
        "type": ": 'vertical' | 'horizontal'"
      },
      {
        "name": "padding",
        "description": "/**\n * A customizable card component used to group and display content in a way that is easily readable\n */\n@Component({\n  tag: 'modus-wc-card',\n  styleUrl: 'modus-wc-card.scss',\n  shadow: false,\n})\nexport class ModusWcCard {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Makes any \\<figure> in the 'header' slot cover the background */",
        "type": ": 'normal' | 'compact'"
      }
    ],
    "events": [],
    "slots": [
      "header",
      "title",
      "subtitle",
      "actions",
      "footer"
    ],
    "default_values": {
      "backgroundFigure": "false",
      "bordered": "false",
      "customClass": "''",
      "layout": "'vertical'",
      "padding": "'normal'"
    },
    "documentation": "\n\n--- modus-wc-card.stories.ts ---\n\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\n\ninterface CardArgs {\n  'background-figure'?: boolean;\n  bordered?: boolean;\n  'custom-class'?: string;\n  layout?: 'vertical' | 'horizontal';\n  padding?: 'normal' | 'compact';\n}\n\nconst meta: Meta<CardArgs> = {\n  title: 'Components/Card',\n  component: 'modus-wc-card',\n  args: {\n    'background-figure': false,\n    bordered: false,\n    layout: 'vertical',\n    padding: 'normal',\n  },\n  argTypes: {\n    layout: {\n      control: { type: 'select' },\n      options: ['vertical', 'horizontal'],\n    },\n    padding: {\n      control: { type: 'select' },\n      options: ['normal', 'compact'],\n    },\n  },\n  parameters: {\n    layout: 'padded',\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<CardArgs>;\n\nconst Template: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<style>\n  .modus-wc-card {\n    width: 400px;\n  }\n</style>\n<modus-wc-card\n  ?background-figure=${args['background-figure']}\n  ?bordered=${args.bordered}\n  custom-class=${ifDefined(args['custom-class'])}\n  layout=${ifDefined(args.layout)}\n  padding=${ifDefined(args.padding)}\n>\n  <span slot=\"title\">Card Title</span>\n  <span slot=\"subtitle\">Card Subtitle</span>\n  <p>This is a sample card content. You can place any content here.</p>\n  <div slot=\"actions\" class=\"modus-wc-justify-end\">\n    <modus-wc-button aria-label=\"Click me\">Click me</modus-wc-button>\n  </div>\n</modus-wc-card>\n    `;\n  },\n};\n\nexport const Default: Story = {\n  ...Template,\n};\n\nexport const SimpleCard: Story = {\n  ...Template,\n  // prettier-ignore\n  render: () => html`\n<modus-wc-card>\n  Raw card content.\n</modus-wc-card>\n  `,\n};\n\nexport const SlotsLayout: Story = {\n  ...Template,\n  // prettier-ignore\n  render: (args) => html`\n<style>\n  .slot-box {\n    background: #ccccff;\n    border: 2px solid purple;\n    color: purple;\n    display: flex;\n    justify-content: center;\n  }\n</style>\n<modus-wc-card\n  ?background-figure=${args['background-figure']}\n  layout=${ifDefined(args.layout)}\n  padding=${ifDefined(args.padding)}\n>\n  <div slot=\"header\" class=\"slot-box\">Header Slot</div>\n  <div slot=\"title\" class=\"slot-box\">Title Slot</div>\n  <div slot=\"subtitle\" class=\"slot-box\">Subtitle Slot</div>\n  <div class=\"slot-box\">Default (Body) Slot</div>\n  <div slot=\"actions\" class=\"slot-box\">Actions Slot</div>\n  <div slot=\"footer\" class=\"slot-box\">Footer Slot</div>\n</modus-wc-card>\n  `,\n};\n\nexport const ComplexCard: Story = {\n  ...Template,\n  // prettier-ignore\n  render: (args) => html`\n<style>\n  #complex-card > .modus-wc-card:hover {\n    box-shadow:\n      0 20px 25px -5px rgba(0, 0, 0, 0.1),\n      0 8px 10px -6px rgba(0, 0, 0, 0.1);\n  }\n</style>\n<modus-wc-card\n  id=\"complex-card\"\n  ?background-figure=${args['background-figure']}\n  ?bordered=${args.bordered}\n  custom-class=${ifDefined(args['custom-class'])}\n  layout=${ifDefined(args.layout)}\n  padding=${ifDefined(args.padding)}\n>\n  <figure slot=\"header\">\n    <img\n      src=\"https://picsum.photos/id/643/750/300\"\n      alt=\"Header Image with Shadow\"\n    />\n  </figure>\n  <span slot=\"title\">Complex Card</span>\n  <span slot=\"subtitle\">With Shadow</span>\n  <p>\n    This is a more of a traditional Card, featuring a header image, content,\n    multiple buttons, and a larger shadow that appears on hover.\n  </p>\n  <div slot=\"actions\" class=\"modus-wc-justify-end\">\n    <modus-wc-button aria-label=\"Action 1\">Action 1</modus-wc-button>\n    <modus-wc-button aria-label=\"Action 2\">Action 2</modus-wc-button>\n  </div>\n</modus-wc-card>\n  `,\n};\n\nexport const HorizontalImage: Story = {\n  ...Template,\n  // prettier-ignore\n  render: (args) => html`\n<modus-wc-card\n  ?background-figure=${args['background-figure']}\n  ?bordered=${args.bordered}\n  custom-class=${ifDefined(args['custom-class'])}\n  layout=\"horizontal\"\n  padding=${ifDefined(args.padding)}\n>\n  <figure slot=\"header\">\n    <img src=\"https://picsum.photos/id/1025/200/300\" alt=\"Horizontal Image\" />\n  </figure>\n  <p>This card uses a horizontal layout.</p>\n</modus-wc-card>\n  `,\n};\n\nexport const BackgroundFigureImage: Story = {\n  ...Template,\n  // prettier-ignore\n  render: (args) => html`\n<modus-wc-card\n  background-figure\n  ?bordered=${args.bordered}\n  custom-class=${ifDefined(args['custom-class'])}\n  layout=${ifDefined(args.layout)}\n  padding=${ifDefined(args.padding)}\n>\n  <figure slot=\"header\">\n    <img src=\"https://picsum.photos/id/1045/600/400\" alt=\"Full Image\" />\n  </figure>\n  <span slot=\"title\">Full Image Card</span>\n  <p>This card has a figure image in the background.</p>\n</modus-wc-card>\n  `,\n};\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - In 1.0, card dimensions were controlled via direct props. In 2.0, styling should be handled through CSS.\n  - Shadow effects on hover are now controlled via CSS rather than props.\n  - The card component in 2.0 focuses on layout and structure rather than specific styling.\n\n#### Prop Mapping\n\n| 1.0 Prop             | 2.0 Prop            | Notes                                |\n|----------------------|---------------------|--------------------------------------|\n| border-radius        |                     | Not carried over, use CSS instead    |\n| height               |                     | Not carried over, use CSS instead    |\n| show-card-border     | bordered            |                                      |\n| show-shadow-on-hover |                     | Not carried over, use CSS instead    |\n| width                |                     | Not carried over, use CSS instead    |\n        `,\n      },\n    },\n    // To hide the actual story rendering and only show docs:\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  // Simple render function or leave it empty\n  render: () => html`<div></div>`,\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-button aria-label=\"Click me\">Click me</modus-wc-button>",
        "<modus-wc-card>\n  Raw card content.\n</modus-wc-card>",
        "<modus-wc-button aria-label=\"Action 1\">Action 1</modus-wc-button>",
        "<modus-wc-button aria-label=\"Action 2\">Action 2</modus-wc-button>",
        "\n<style>\n  .modus-wc-card {\n    width: 400px;\n  }\n</style>\n<modus-wc-card\n  ?background-figure=${args['background-figure']}\n  ?bordered=${args.bordered}\n  custom-class=${ifDefined(args['custom-class'])}\n  layout=${ifDefined(args.layout)}\n  padding=${ifDefined(args.padding)}\n>\n  <span slot=\"title\">Card Title</span>\n  <span slot=\"subtitle\">Card Subtitle</span>\n  <p>This is a sample card content. You can place any content here.</p>\n  <div slot=\"actions\" class=\"modus-wc-justify-end\">\n    <modus-wc-button aria-label=\"Click me\">Click me</modus-wc-button>\n  </div>\n</modus-wc-card>\n    "
      ],
      "variants": [],
      "prop_usage": {
        "slot": [
          "title",
          "subtitle",
          "actions",
          "header",
          "footer"
        ],
        "class": [
          "modus-wc-justify-end",
          "slot-box"
        ],
        "label": [
          "Click me",
          "Action 1",
          "Action 2"
        ],
        "id": [
          "complex-card"
        ],
        "src": [
          "https://picsum.photos/id/643/750/300",
          "https://picsum.photos/id/1025/200/300",
          "https://picsum.photos/id/1045/600/400"
        ],
        "alt": [
          "Header Image with Shadow",
          "Horizontal Image",
          "Full Image"
        ],
        "layout": [
          "horizontal"
        ]
      }
    },
    "tag_name": "modus-wc-card"
  },
  "modus-wc-divider": {
    "props": [
      {
        "name": "color",
        "description": "/**\n * A customizable divider component used to separate content horizontally or vertically\n */\n@Component({\n  tag: 'modus-wc-divider',\n  styleUrl: 'modus-wc-divider.scss',\n  shadow: false,\n})\nexport class ModusWcDivider {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The color of the divider line. */",
        "type": ":\n    | 'primary'\n    | 'secondary'\n    | 'tertiary'\n    | 'high-contrast'\n    | 'success'\n    | 'warning'\n    | 'danger'"
      },
      {
        "name": "content",
        "description": "/**\n * A customizable divider component used to separate content horizontally or vertically\n */\n@Component({\n  tag: 'modus-wc-divider',\n  styleUrl: 'modus-wc-divider.scss',\n  shadow: false,\n})\nexport class ModusWcDivider {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The color of the divider line. */",
        "type": ": string"
      },
      {
        "name": "customClass",
        "description": "/**\n * A customizable divider component used to separate content horizontally or vertically\n */\n@Component({\n  tag: 'modus-wc-divider',\n  styleUrl: 'modus-wc-divider.scss',\n  shadow: false,\n})\nexport class ModusWcDivider {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The color of the divider line. */",
        "type": ": string"
      },
      {
        "name": "orientation",
        "description": "/**\n * A customizable divider component used to separate content horizontally or vertically\n */\n@Component({\n  tag: 'modus-wc-divider',\n  styleUrl: 'modus-wc-divider.scss',\n  shadow: false,\n})\nexport class ModusWcDivider {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The color of the divider line. */",
        "type": ": Orientation"
      },
      {
        "name": "position",
        "description": "/**\n * A customizable divider component used to separate content horizontally or vertically\n */\n@Component({\n  tag: 'modus-wc-divider',\n  styleUrl: 'modus-wc-divider.scss',\n  shadow: false,\n})\nexport class ModusWcDivider {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The color of the divider line. */",
        "type": ": 'center' | 'end' | 'start'"
      },
      {
        "name": "responsive",
        "description": "/**\n * A customizable divider component used to separate content horizontally or vertically\n */\n@Component({\n  tag: 'modus-wc-divider',\n  styleUrl: 'modus-wc-divider.scss',\n  shadow: false,\n})\nexport class ModusWcDivider {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The color of the divider line. */",
        "type": ": boolean"
      }
    ],
    "events": [],
    "slots": [],
    "default_values": {
      "color": "'tertiary'",
      "content": "''",
      "customClass": "''",
      "orientation": "'vertical'",
      "position": "'center'",
      "responsive": "true"
    },
    "documentation": "\n\n--- modus-wc-divider.stories.ts ---\n\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { Orientation } from '../types';\n\ninterface DividerArgs {\n  color:\n    | 'primary'\n    | 'secondary'\n    | 'tertiary'\n    | 'high-contrast'\n    | 'success'\n    | 'warning'\n    | 'danger';\n  content: string;\n  'custom-class'?: string;\n  orientation: Orientation;\n  position: 'center' | 'end' | 'start';\n  responsive: boolean;\n}\n\nconst meta: Meta<DividerArgs> = {\n  title: 'Components/Divider',\n  component: 'modus-wc-divider',\n  args: {\n    color: 'tertiary',\n    content: '',\n    'custom-class': '',\n    orientation: 'vertical',\n    position: 'center',\n    responsive: true,\n  },\n  argTypes: {\n    color: {\n      control: { type: 'select' },\n      options: [\n        'primary',\n        'secondary',\n        'tertiary',\n        'high-contrast',\n        'success',\n        'warning',\n        'danger',\n      ],\n    },\n    content: {\n      control: 'text',\n    },\n    'custom-class': {\n      control: 'text',\n    },\n    orientation: {\n      control: { type: 'select' },\n      options: ['horizontal', 'vertical'],\n    },\n    position: {\n      control: { type: 'select' },\n      options: ['start', 'center', 'end'],\n    },\n    responsive: {\n      control: { type: 'boolean' },\n    },\n  },\n  parameters: {\n    layout: 'padded',\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<DividerArgs>;\n\nconst Template: Story = {\n  render: (args) => html`\n    <modus-wc-divider\n      color=\"${args.color}\"\n      content=\"${args.content}\"\n      custom-class=\"${ifDefined(args['custom-class'])}\"\n      orientation=\"${args.orientation}\"\n      position=\"${args.position}\"\n      responsive=\"${args.responsive}\"\n      style=\"${args.orientation === 'horizontal'\n        ? 'display: flex; height: 100px'\n        : ''}\"\n    ></modus-wc-divider>\n  `,\n};\n\nexport const Default: Story = { ...Template };\n",
    "storybook": {
      "examples": [
        "<modus-wc-divider\n      color=\"${args.color}\"\n      content=\"${args.content}\"\n      custom-class=\"${ifDefined(args['custom-class'])}\"\n      orientation=\"${args.orientation}\"\n      position=\"${args.position}\"\n      responsive=\"${args.responsive}\"\n      style=\"${args.orientation === 'horizontal'\n        ? 'display: flex; height: 100px'\n        : ''}\"\n    ></modus-wc-divider>",
        "\n    <modus-wc-divider\n      color=\"${args.color}\"\n      content=\"${args.content}\"\n      custom-class=\"${ifDefined(args['custom-class'])}\"\n      orientation=\"${args.orientation}\"\n      position=\"${args.position}\"\n      responsive=\"${args.responsive}\"\n      style=\"${args.orientation === 'horizontal'\n        ? 'display: flex; height: 100px'\n        : ''}\"\n    ></modus-wc-divider>\n  "
      ],
      "variants": [],
      "prop_usage": {
        "color": [
          "${args.color}"
        ],
        "content": [
          "${args.content}"
        ],
        "class": [
          "${ifDefined(args["
        ],
        "orientation": [
          "${args.orientation}"
        ],
        "position": [
          "${args.position}"
        ],
        "responsive": [
          "${args.responsive}"
        ],
        "style": [
          "${args.orientation === "
        ]
      }
    },
    "tag_name": "modus-wc-divider"
  },
  "modus-wc-slider": {
    "props": [
      {
        "name": "customClass",
        "description": "/**\n * A customizable slider component\n */\n@Component({\n  tag: 'modus-wc-slider',\n  styleUrl: 'modus-wc-slider.scss',\n  shadow: false,\n})\nexport class ModusWcSlider {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */",
        "type": ": string"
      },
      {
        "name": "disabled",
        "description": "/**\n * A customizable slider component\n */\n@Component({\n  tag: 'modus-wc-slider',\n  styleUrl: 'modus-wc-slider.scss',\n  shadow: false,\n})\nexport class ModusWcSlider {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */",
        "type": ": boolean"
      },
      {
        "name": "inputId",
        "description": "/**\n * A customizable slider component\n */\n@Component({\n  tag: 'modus-wc-slider',\n  styleUrl: 'modus-wc-slider.scss',\n  shadow: false,\n})\nexport class ModusWcSlider {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */",
        "type": ": string"
      },
      {
        "name": "inputTabIndex",
        "description": "/**\n * A customizable slider component\n */\n@Component({\n  tag: 'modus-wc-slider',\n  styleUrl: 'modus-wc-slider.scss',\n  shadow: false,\n})\nexport class ModusWcSlider {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */",
        "type": ": number"
      },
      {
        "name": "label",
        "description": "/**\n * A customizable slider component\n */\n@Component({\n  tag: 'modus-wc-slider',\n  styleUrl: 'modus-wc-slider.scss',\n  shadow: false,\n})\nexport class ModusWcSlider {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */",
        "type": ": string"
      },
      {
        "name": "max",
        "description": "/**\n * A customizable slider component\n */\n@Component({\n  tag: 'modus-wc-slider',\n  styleUrl: 'modus-wc-slider.scss',\n  shadow: false,\n})\nexport class ModusWcSlider {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */",
        "type": ": number"
      },
      {
        "name": "min",
        "description": "/**\n * A customizable slider component\n */\n@Component({\n  tag: 'modus-wc-slider',\n  styleUrl: 'modus-wc-slider.scss',\n  shadow: false,\n})\nexport class ModusWcSlider {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */",
        "type": ": number"
      },
      {
        "name": "name",
        "description": "/**\n * A customizable slider component\n */\n@Component({\n  tag: 'modus-wc-slider',\n  styleUrl: 'modus-wc-slider.scss',\n  shadow: false,\n})\nexport class ModusWcSlider {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */",
        "type": ": string"
      },
      {
        "name": "required",
        "description": "/**\n * A customizable slider component\n */\n@Component({\n  tag: 'modus-wc-slider',\n  styleUrl: 'modus-wc-slider.scss',\n  shadow: false,\n})\nexport class ModusWcSlider {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */",
        "type": ": boolean"
      },
      {
        "name": "size",
        "description": "/**\n * A customizable slider component\n */\n@Component({\n  tag: 'modus-wc-slider',\n  styleUrl: 'modus-wc-slider.scss',\n  shadow: false,\n})\nexport class ModusWcSlider {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */",
        "type": ": ModusSize"
      },
      {
        "name": "step",
        "description": "/**\n * A customizable slider component\n */\n@Component({\n  tag: 'modus-wc-slider',\n  styleUrl: 'modus-wc-slider.scss',\n  shadow: false,\n})\nexport class ModusWcSlider {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */",
        "type": ": number"
      },
      {
        "name": "value",
        "description": "/**\n * A customizable slider component\n */\n@Component({\n  tag: 'modus-wc-slider',\n  styleUrl: 'modus-wc-slider.scss',\n  shadow: false,\n})\nexport class ModusWcSlider {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */",
        "type": "number"
      }
    ],
    "events": [
      {
        "name": "inputBlur",
        "description": "/**\n * A customizable slider component\n */\n@Component({\n  tag: 'modus-wc-slider',\n  styleUrl: 'modus-wc-slider.scss',\n  shadow: false,\n})\nexport class ModusWcSlider {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */\n  @Prop() customClass?: string = '';\n\n  /** The disabled state of the slider. */\n  @Prop() disabled?: boolean = false;\n\n  /** The ID of the input element. */\n  @Prop() inputId?: string;\n\n  /** The tabindex of the input. */\n  @Prop() inputTabIndex?: number;\n\n  /** The text to display within the label. */\n  @Prop() label?: string;\n\n  /** The maximum slider value. */\n  @Prop() max?: number;\n\n  /** The minimum slider value. */\n  @Prop() min?: number;\n\n  /** Name of the form control. Submitted with the form as part of a name/value pair. */\n  @Prop() name?: string = '';\n\n  /** A value is required for the form to be submittable. */\n  @Prop() required?: boolean = false;\n\n  /** The size of the input. */\n  @Prop() size?: ModusSize = 'md';\n\n  /** The increment of the slider. */\n  @Prop() step?: number;\n\n  /** The value of the slider. */\n  @Prop({ mutable: true, reflect: true }) value: number = 0;\n\n  /** Emitted when the input loses focus. */"
      },
      {
        "name": "inputChange",
        "description": "/**\n * A customizable slider component\n */\n@Component({\n  tag: 'modus-wc-slider',\n  styleUrl: 'modus-wc-slider.scss',\n  shadow: false,\n})\nexport class ModusWcSlider {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */\n  @Prop() customClass?: string = '';\n\n  /** The disabled state of the slider. */\n  @Prop() disabled?: boolean = false;\n\n  /** The ID of the input element. */\n  @Prop() inputId?: string;\n\n  /** The tabindex of the input. */\n  @Prop() inputTabIndex?: number;\n\n  /** The text to display within the label. */\n  @Prop() label?: string;\n\n  /** The maximum slider value. */\n  @Prop() max?: number;\n\n  /** The minimum slider value. */\n  @Prop() min?: number;\n\n  /** Name of the form control. Submitted with the form as part of a name/value pair. */\n  @Prop() name?: string = '';\n\n  /** A value is required for the form to be submittable. */\n  @Prop() required?: boolean = false;\n\n  /** The size of the input. */\n  @Prop() size?: ModusSize = 'md';\n\n  /** The increment of the slider. */\n  @Prop() step?: number;\n\n  /** The value of the slider. */\n  @Prop({ mutable: true, reflect: true }) value: number = 0;\n\n  /** Emitted when the input loses focus. */"
      },
      {
        "name": "inputFocus",
        "description": "/**\n * A customizable slider component\n */\n@Component({\n  tag: 'modus-wc-slider',\n  styleUrl: 'modus-wc-slider.scss',\n  shadow: false,\n})\nexport class ModusWcSlider {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */\n  @Prop() customClass?: string = '';\n\n  /** The disabled state of the slider. */\n  @Prop() disabled?: boolean = false;\n\n  /** The ID of the input element. */\n  @Prop() inputId?: string;\n\n  /** The tabindex of the input. */\n  @Prop() inputTabIndex?: number;\n\n  /** The text to display within the label. */\n  @Prop() label?: string;\n\n  /** The maximum slider value. */\n  @Prop() max?: number;\n\n  /** The minimum slider value. */\n  @Prop() min?: number;\n\n  /** Name of the form control. Submitted with the form as part of a name/value pair. */\n  @Prop() name?: string = '';\n\n  /** A value is required for the form to be submittable. */\n  @Prop() required?: boolean = false;\n\n  /** The size of the input. */\n  @Prop() size?: ModusSize = 'md';\n\n  /** The increment of the slider. */\n  @Prop() step?: number;\n\n  /** The value of the slider. */\n  @Prop({ mutable: true, reflect: true }) value: number = 0;\n\n  /** Emitted when the input loses focus. */"
      }
    ],
    "slots": [],
    "default_values": {
      "customClass": "''",
      "disabled": "false",
      "max": "{this.max}\n          min={this.min}\n          name={this.name}\n          onBlur={this.handleBlur}\n          onFocus={this.handleFocus}\n          onInput={this.handleInput}\n          required={this.required}\n          step={this.step}\n          tabIndex={this.inputTabIndex}\n          type=\"range\"\n          value={this.value}\n          {...this.inheritedAttributes}\n        />\n      </Host>\n    )",
      "min": "{this.min}\n          name={this.name}\n          onBlur={this.handleBlur}\n          onFocus={this.handleFocus}\n          onInput={this.handleInput}\n          required={this.required}\n          step={this.step}\n          tabIndex={this.inputTabIndex}\n          type=\"range\"\n          value={this.value}\n          {...this.inheritedAttributes}\n        />\n      </Host>\n    )",
      "name": "''",
      "required": "false",
      "size": "'md'",
      "step": "{this.step}\n          tabIndex={this.inputTabIndex}\n          type=\"range\"\n          value={this.value}\n          {...this.inheritedAttributes}\n        />\n      </Host>\n    )",
      "value": "0"
    },
    "documentation": "\n\n--- modus-wc-slider.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { ModusSize } from '../types';\n\ninterface SliderArgs {\n  'custom-class'?: string;\n  disabled?: boolean;\n  'input-id'?: string;\n  'input-tab-index'?: number;\n  label?: string;\n  max?: number;\n  min?: number;\n  name?: string;\n  required?: boolean;\n  size?: ModusSize;\n  step?: number;\n  value: boolean;\n}\n\nconst meta: Meta<SliderArgs> = {\n  title: 'Components/Forms/Slider',\n  component: 'modus-wc-slider',\n  args: {\n    'custom-class': '',\n    disabled: false,\n    label: 'Label',\n    name: '',\n    required: false,\n    size: 'md',\n    value: true,\n  },\n  argTypes: {\n    size: {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg'],\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['inputBlur', 'inputChange', 'inputFocus'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<SliderArgs>;\n\nexport const Default: Story = {\n  render: (args) => {\n    return html`\n      <modus-wc-slider\n        aria-label=\"Slider\"\n        custom-class=${ifDefined(args['custom-class'])}\n        ?disabled=${args.disabled}\n        input-id=${ifDefined(args['input-id'])}\n        input-tab-index=${ifDefined(args['input-tab-index'])}\n        label=${ifDefined(args.label)}\n        max=${ifDefined(args.max)}\n        min=${ifDefined(args.min)}\n        name=${ifDefined(args.name)}\n        ?required=${args.required}\n        size=${ifDefined(args.size)}\n        step=${ifDefined(args.step)}\n        .value=${args.value}\n      ></modus-wc-slider>\n    `;\n  },\n};\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - In 1.0 input state was maintained by the component. 2.0 components encourage users to follow a controlled\n  input model. See the Form Inputs [documentation](/docs/documentation-form-inputs--docs) for additional info and examples.\n  - Property names have changed: \\`max-value\\` \u2192 \\`max\\`, \\`min-value\\` \u2192 \\`min\\`.\n\n#### Prop Mapping\n\n| 1.0 Prop    | 2.0 Prop     | Notes |\n|-------------|--------------|-------|\n| aria-label  | aria-label   |       |\n| disabled    | disabled     |       |\n| label       | label        |       |\n| max-value   | max          |       |\n| min-value   | min          |       |\n| value       | value        |       |\n\n#### Event Mapping\n\n| 1.0 Event   | 2.0 Event   | Notes            |\n|-------------|-------------|------------------|\n| valueChange |             | Not carried over |\n| valueInput  | inputChange |                  |\n        `,\n      },\n    },\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  render: () => html`<div></div>`,\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-slider\n        aria-label=\"Slider\"\n        custom-class=${ifDefined(args['custom-class'])}\n        ?disabled=${args.disabled}\n        input-id=${ifDefined(args['input-id'])}\n        input-tab-index=${ifDefined(args['input-tab-index'])}\n        label=${ifDefined(args.label)}\n        max=${ifDefined(args.max)}\n        min=${ifDefined(args.min)}\n        name=${ifDefined(args.name)}\n        ?required=${args.required}\n        size=${ifDefined(args.size)}\n        step=${ifDefined(args.step)}\n        .value=${args.value}\n      ></modus-wc-slider>",
        "\n      <modus-wc-slider\n        aria-label=\"Slider\"\n        custom-class=${ifDefined(args['custom-class'])}\n        ?disabled=${args.disabled}\n        input-id=${ifDefined(args['input-id'])}\n        input-tab-index=${ifDefined(args['input-tab-index'])}\n        label=${ifDefined(args.label)}\n        max=${ifDefined(args.max)}\n        min=${ifDefined(args.min)}\n        name=${ifDefined(args.name)}\n        ?required=${args.required}\n        size=${ifDefined(args.size)}\n        step=${ifDefined(args.step)}\n        .value=${args.value}\n      ></modus-wc-slider>\n    "
      ],
      "variants": [],
      "prop_usage": {
        "label": [
          "Slider"
        ]
      }
    },
    "tag_name": "modus-wc-slider"
  },
  "modus-wc-menu-item": {
    "props": [
      {
        "name": "bordered",
        "description": "/**\n * A customizable menu item component used to display the item portion of a menu\n */\n@Component({\n  tag: 'modus-wc-menu-item',\n  styleUrl: 'modus-wc-menu-item.scss',\n  shadow: false,\n})\nexport class ModusWcMenuItem {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  @Prop() bordered?: boolean;\n\n  /** If true, renders a checkbox at the start of the menu item. */",
        "type": ": boolean"
      },
      {
        "name": "checkbox",
        "description": "/**\n * A customizable menu item component used to display the item portion of a menu\n */\n@Component({\n  tag: 'modus-wc-menu-item',\n  styleUrl: 'modus-wc-menu-item.scss',\n  shadow: false,\n})\nexport class ModusWcMenuItem {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  @Prop() bordered?: boolean;\n\n  /** If true, renders a checkbox at the start of the menu item. */",
        "type": ": boolean"
      },
      {
        "name": "customClass",
        "description": "/**\n * A customizable menu item component used to display the item portion of a menu\n */\n@Component({\n  tag: 'modus-wc-menu-item',\n  styleUrl: 'modus-wc-menu-item.scss',\n  shadow: false,\n})\nexport class ModusWcMenuItem {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  @Prop() bordered?: boolean;\n\n  /** If true, renders a checkbox at the start of the menu item. */",
        "type": ": string"
      },
      {
        "name": "disabled",
        "description": "/**\n * A customizable menu item component used to display the item portion of a menu\n */\n@Component({\n  tag: 'modus-wc-menu-item',\n  styleUrl: 'modus-wc-menu-item.scss',\n  shadow: false,\n})\nexport class ModusWcMenuItem {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  @Prop() bordered?: boolean;\n\n  /** If true, renders a checkbox at the start of the menu item. */",
        "type": ": boolean"
      },
      {
        "name": "label",
        "description": "/**\n * A customizable menu item component used to display the item portion of a menu\n */\n@Component({\n  tag: 'modus-wc-menu-item',\n  styleUrl: 'modus-wc-menu-item.scss',\n  shadow: false,\n})\nexport class ModusWcMenuItem {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  @Prop() bordered?: boolean;\n\n  /** If true, renders a checkbox at the start of the menu item. */",
        "type": "string"
      },
      {
        "name": "startIcon",
        "description": "/**\n * A customizable menu item component used to display the item portion of a menu\n */\n@Component({\n  tag: 'modus-wc-menu-item',\n  styleUrl: 'modus-wc-menu-item.scss',\n  shadow: false,\n})\nexport class ModusWcMenuItem {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  @Prop() bordered?: boolean;\n\n  /** If true, renders a checkbox at the start of the menu item. */",
        "type": ": string"
      },
      {
        "name": "selected",
        "description": "/**\n * A customizable menu item component used to display the item portion of a menu\n */\n@Component({\n  tag: 'modus-wc-menu-item',\n  styleUrl: 'modus-wc-menu-item.scss',\n  shadow: false,\n})\nexport class ModusWcMenuItem {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  @Prop() bordered?: boolean;\n\n  /** If true, renders a checkbox at the start of the menu item. */",
        "type": ": boolean"
      },
      {
        "name": "focused",
        "description": "/**\n * A customizable menu item component used to display the item portion of a menu\n */\n@Component({\n  tag: 'modus-wc-menu-item',\n  styleUrl: 'modus-wc-menu-item.scss',\n  shadow: false,\n})\nexport class ModusWcMenuItem {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  @Prop() bordered?: boolean;\n\n  /** If true, renders a checkbox at the start of the menu item. */",
        "type": ": boolean"
      },
      {
        "name": "size",
        "description": "/**\n * A customizable menu item component used to display the item portion of a menu\n */\n@Component({\n  tag: 'modus-wc-menu-item',\n  styleUrl: 'modus-wc-menu-item.scss',\n  shadow: false,\n})\nexport class ModusWcMenuItem {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  @Prop() bordered?: boolean;\n\n  /** If true, renders a checkbox at the start of the menu item. */",
        "type": ": ModusSize"
      },
      {
        "name": "subLabel",
        "description": "/**\n * A customizable menu item component used to display the item portion of a menu\n */\n@Component({\n  tag: 'modus-wc-menu-item',\n  styleUrl: 'modus-wc-menu-item.scss',\n  shadow: false,\n})\nexport class ModusWcMenuItem {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  @Prop() bordered?: boolean;\n\n  /** If true, renders a checkbox at the start of the menu item. */",
        "type": ": string"
      },
      {
        "name": "tooltipContent",
        "description": "/**\n * A customizable menu item component used to display the item portion of a menu\n */\n@Component({\n  tag: 'modus-wc-menu-item',\n  styleUrl: 'modus-wc-menu-item.scss',\n  shadow: false,\n})\nexport class ModusWcMenuItem {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  @Prop() bordered?: boolean;\n\n  /** If true, renders a checkbox at the start of the menu item. */",
        "type": ": string"
      },
      {
        "name": "tooltipPosition",
        "description": "/**\n * A customizable menu item component used to display the item portion of a menu\n */\n@Component({\n  tag: 'modus-wc-menu-item',\n  styleUrl: 'modus-wc-menu-item.scss',\n  shadow: false,\n})\nexport class ModusWcMenuItem {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  @Prop() bordered?: boolean;\n\n  /** If true, renders a checkbox at the start of the menu item. */",
        "type": ": 'auto' | 'top' | 'right' | 'bottom' | 'left'"
      },
      {
        "name": "value",
        "description": "/**\n * A customizable menu item component used to display the item portion of a menu\n */\n@Component({\n  tag: 'modus-wc-menu-item',\n  styleUrl: 'modus-wc-menu-item.scss',\n  shadow: false,\n})\nexport class ModusWcMenuItem {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  @Prop() bordered?: boolean;\n\n  /** If true, renders a checkbox at the start of the menu item. */",
        "type": "string"
      }
    ],
    "events": [
      {
        "name": "itemSelect",
        "description": "/**\n * A customizable menu item component used to display the item portion of a menu\n */\n@Component({\n  tag: 'modus-wc-menu-item',\n  styleUrl: 'modus-wc-menu-item.scss',\n  shadow: false,\n})\nexport class ModusWcMenuItem {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  @Prop() bordered?: boolean;\n\n  /** If true, renders a checkbox at the start of the menu item. */\n  @Prop() checkbox?: boolean;\n\n  /** Custom CSS class to apply to the li element. */\n  @Prop() customClass?: string = '';\n\n  /** The disabled state of the menu item. */\n  @Prop() disabled?: boolean;\n\n  /** The text rendered in the menu item. */\n  @Prop() label: string = '';\n\n  /** The modus icon name to render on the start of the menu item. */\n  @Prop() startIcon?: string;\n\n  /** The selected state of the menu item. */\n  @Prop() selected?: boolean;\n\n  /** The focused state of the menu item. */\n  @Prop() focused?: boolean;\n\n  /** The size of the menu item. */\n  @Prop() size?: ModusSize = 'md';\n\n  /** The text rendered beneath the label. */\n  @Prop() subLabel?: string;\n\n  /** The tooltip text to display when hovering over the menu item. */\n  @Prop() tooltipContent?: string;\n\n  /** The position of the tooltip relative to the menu item. */\n  @Prop() tooltipPosition?: 'auto' | 'top' | 'right' | 'bottom' | 'left' =\n    'auto';\n\n  /** The unique identifying value of the menu item. */\n  @Prop() value: string = '';\n\n  /** Event emitted when a menu item is selected. */"
      }
    ],
    "slots": [],
    "default_values": {
      "checkbox": "= true && (\n                <div class=\"modus-wc-menu-item-selected-icon\">\n                  <modus-wc-icon\n                    decorative={true}\n                    name=\"check\"\n                    size={this.getIconSize()}\n                  />\n                </div>\n              )}\n            </div>\n          </button>\n        </li>\n      </Host>\n    )",
      "customClass": "''",
      "disabled": "{this.disabled}\n          class={this.getClasses()}\n          role=\"menuitem\"\n          {...this.inheritedAttributes}\n        >\n          <button\n            disabled={this.disabled}\n            onClick={this.handleItemSelect}\n            type=\"button\"\n          >\n            <div class=\"modus-wc-menu-item-content\">\n              {this.checkbox && (\n                <modus-wc-checkbox\n                  aria-label=\"Checkbox\"\n                  disabled={this.disabled}\n                  size={this.size}\n                  value={!!this.selected}\n                />\n              )}\n              <slot name=\"start-icon\"></slot>\n              <div class=\"modus-wc-menu-item-labels\">\n                {this.tooltipContent ? (\n                  <modus-wc-tooltip\n                    content={this.tooltipContent}\n                    position={this.tooltipPosition}\n                    customClass=\"modus-wc-menu-item-tooltip\"\n                  >\n                    <div>{this.label}</div>\n                  </modus-wc-tooltip>\n                ) : (\n                  <div>{this.label}</div>\n                )}\n                {this.subLabel && (\n                  <div class=\"modus-wc-menu-item-sublabel\">{this.subLabel}</div>\n                )}\n              </div>\n              {this.selected && this.checkbox !== true && (\n                <div class=\"modus-wc-menu-item-selected-icon\">\n                  <modus-wc-icon\n                    decorative={true}\n                    name=\"check\"\n                    size={this.getIconSize()}\n                  />\n                </div>\n              )}\n            </div>\n          </button>\n        </li>\n      </Host>\n    )",
      "label": "''",
      "size": "'md'",
      "tooltipContent": "{this.tooltipContent}\n                    position={this.tooltipPosition}\n                    customClass=\"modus-wc-menu-item-tooltip\"\n                  >\n                    <div>{this.label}</div>\n                  </modus-wc-tooltip>\n                ) : (\n                  <div>{this.label}</div>\n                )}\n                {this.subLabel && (\n                  <div class=\"modus-wc-menu-item-sublabel\">{this.subLabel}</div>\n                )}\n              </div>\n              {this.selected && this.checkbox !== true && (\n                <div class=\"modus-wc-menu-item-selected-icon\">\n                  <modus-wc-icon\n                    decorative={true}\n                    name=\"check\"\n                    size={this.getIconSize()}\n                  />\n                </div>\n              )}\n            </div>\n          </button>\n        </li>\n      </Host>\n    )",
      "tooltipPosition": "'auto'",
      "value": "''"
    },
    "documentation": "\n\n--- modus-wc-menu-item.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { ModusSize } from '../types';\n\ninterface MenuItemArgs {\n  bordered?: boolean;\n  checkbox?: boolean;\n  'custom-class'?: string;\n  disabled?: boolean;\n  label: string;\n  selected?: boolean;\n  size?: ModusSize;\n  'sub-label'?: string;\n  'tooltip-content'?: string;\n  'tooltip-position'?: 'auto' | 'top' | 'right' | 'bottom' | 'left';\n  value: string;\n}\n\nconst meta: Meta<MenuItemArgs> = {\n  title: 'Components/Menu Item',\n  component: 'modus-wc-menu-item',\n  args: {\n    label: 'Menu Item',\n    size: 'md',\n    value: 'menuItem',\n  },\n  argTypes: {\n    size: {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg'],\n    },\n    'tooltip-position': {\n      control: { type: 'select' },\n      options: ['auto', 'top', 'right', 'bottom', 'left'],\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['itemSelect'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<MenuItemArgs>;\n\nconst Template: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<modus-wc-menu>\n  <modus-wc-menu-item\n    ?bordered=${args.bordered}\n    ?checkbox=${args.checkbox}\n    custom-class=${ifDefined(args['custom-class'])}\n    ?disabled=${args.disabled}\n    label=${args.label}\n    ?selected=${args.selected}\n    size=${args.size}\n    sub-label=${ifDefined(args['sub-label'])}\n    tooltip-content=${ifDefined(args['tooltip-content'])}\n    tooltip-position=${ifDefined(args['tooltip-position'])}\n    value=${args.value}\n  ></modus-wc-menu-item>\n</modus-wc-menu>\n    `;\n  },\n};\n\nexport const Default: Story = { ...Template };\n\nexport const WithIcon: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<modus-wc-menu>\n  <modus-wc-menu-item\n    ?bordered=${args.bordered}\n    ?checkbox=${args.checkbox}\n    custom-class=${ifDefined(args['custom-class'])}\n    ?disabled=${args.disabled}\n    label=${args.label}\n    ?selected=${args.selected}\n    size=${args.size}\n    sub-label=${ifDefined(args['sub-label'])}\n    tooltip-content=${ifDefined(args['tooltip-content'])}\n    tooltip-position=${ifDefined(args['tooltip-position'])}\n    value=${args.value}\n  >\n    <modus-wc-icon\n      slot=\"start-icon\"\n      name=\"alert\"\n      size=\"sm\"\n    ></modus-wc-icon>\n  </modus-wc-menu-item>\n</modus-wc-menu>\n    `;\n  },\n};\nexport const WithCheckbox: Story = {\n  args: {\n    checkbox: true,\n  },\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<modus-wc-menu>\n  <modus-wc-menu-item\n    ?bordered=${args.bordered}\n    ?checkbox=${args.checkbox}\n    custom-class=${ifDefined(args['custom-class'])}\n    ?disabled=${args.disabled}\n    label=${args.label}\n    ?selected=${args.selected}\n    size=${args.size}\n    sub-label=${ifDefined(args['sub-label'])}\n    value=${args.value}\n ></modus-wc-menu-item>\n</modus-wc-menu>\n    `;\n  },\n};\n\nexport const WithTooltip: Story = {\n  args: {\n    'tooltip-content': 'This is a tooltip for the menu item',\n    'tooltip-position': 'top',\n  },\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<modus-wc-menu>\n  <modus-wc-menu-item\n    ?bordered=${args.bordered}\n    custom-class=${ifDefined(args['custom-class'])}\n    ?disabled=${args.disabled}\n    label=${args.label}\n    ?selected=${args.selected}\n    size=${args.size}\n    sub-label=${ifDefined(args['sub-label'])}\n    tooltip-content=${ifDefined((args['tooltip-content']))}\n    tooltip-position=${ifDefined(args['tooltip-position'])}\n    value=${args.value}\n  ></modus-wc-menu-item>\n</modus-wc-menu>\n    `;\n  },\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-menu-item\n    ?bordered=${args.bordered}\n    ?checkbox=${args.checkbox}\n    custom-class=${ifDefined(args['custom-class'])}\n    ?disabled=${args.disabled}\n    label=${args.label}\n    ?selected=${args.selected}\n    size=${args.size}\n    sub-label=${ifDefined(args['sub-label'])}\n    tooltip-content=${ifDefined(args['tooltip-content'])}\n    tooltip-position=${ifDefined(args['tooltip-position'])}\n    value=${args.value}\n  ></modus-wc-menu-item>",
        "<modus-wc-icon\n      slot=\"start-icon\"\n      name=\"alert\"\n      size=\"sm\"\n    ></modus-wc-icon>",
        "<modus-wc-menu-item\n    ?bordered=${args.bordered}\n    ?checkbox=${args.checkbox}\n    custom-class=${ifDefined(args['custom-class'])}\n    ?disabled=${args.disabled}\n    label=${args.label}\n    ?selected=${args.selected}\n    size=${args.size}\n    sub-label=${ifDefined(args['sub-label'])}\n    value=${args.value}\n ></modus-wc-menu-item>",
        "<modus-wc-menu-item\n    ?bordered=${args.bordered}\n    custom-class=${ifDefined(args['custom-class'])}\n    ?disabled=${args.disabled}\n    label=${args.label}\n    ?selected=${args.selected}\n    size=${args.size}\n    sub-label=${ifDefined(args['sub-label'])}\n    tooltip-content=${ifDefined((args['tooltip-content']))}\n    tooltip-position=${ifDefined(args['tooltip-position'])}\n    value=${args.value}\n  ></modus-wc-menu-item>",
        "\n<modus-wc-menu>\n  <modus-wc-menu-item\n    ?bordered=${args.bordered}\n    ?checkbox=${args.checkbox}\n    custom-class=${ifDefined(args['custom-class'])}\n    ?disabled=${args.disabled}\n    label=${args.label}\n    ?selected=${args.selected}\n    size=${args.size}\n    sub-label=${ifDefined(args['sub-label'])}\n    tooltip-content=${ifDefined(args['tooltip-content'])}\n    tooltip-position=${ifDefined(args['tooltip-position'])}\n    value=${args.value}\n  ></modus-wc-menu-item>\n</modus-wc-menu>\n    "
      ],
      "variants": [],
      "prop_usage": {
        "slot": [
          "start-icon"
        ],
        "name": [
          "alert"
        ],
        "size": [
          "sm"
        ]
      }
    },
    "tag_name": "modus-wc-menu-item"
  },
  "modus-wc-tabs": {
    "props": [
      {
        "name": "activeTabIndex",
        "description": "/** Custom CSS class to apply to the inner button. */\n  customClass?: string;\n\n  /** Whether the tab is disabled. */\n  disabled?: boolean;\n\n  /** A Modus Icon to display in the tab. */\n  icon?: string;\n\n  /** The position of the icon. */\n  iconPosition?: 'left' | 'right';\n\n  /** The content to display in the tab. */\n  label?: string;\n\n  /** The slot name for custom tab content. */\n  slotName?: string;\n}\n\n/**\n * A customizable tabs component used to create groups of tabs.\n */\n@Component({\n  tag: 'modus-wc-tabs',\n  styleUrl: 'modus-wc-tabs.scss',\n  shadow: false,\n})\nexport class ModusWcTabs {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The current active tab */",
        "type": ""
      },
      {
        "name": "customClass",
        "description": "/** Custom CSS class to apply to the inner button. */\n  customClass?: string;\n\n  /** Whether the tab is disabled. */\n  disabled?: boolean;\n\n  /** A Modus Icon to display in the tab. */\n  icon?: string;\n\n  /** The position of the icon. */\n  iconPosition?: 'left' | 'right';\n\n  /** The content to display in the tab. */\n  label?: string;\n\n  /** The slot name for custom tab content. */\n  slotName?: string;\n}\n\n/**\n * A customizable tabs component used to create groups of tabs.\n */\n@Component({\n  tag: 'modus-wc-tabs',\n  styleUrl: 'modus-wc-tabs.scss',\n  shadow: false,\n})\nexport class ModusWcTabs {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The current active tab */",
        "type": ": string"
      },
      {
        "name": "size",
        "description": "/** Custom CSS class to apply to the inner button. */\n  customClass?: string;\n\n  /** Whether the tab is disabled. */\n  disabled?: boolean;\n\n  /** A Modus Icon to display in the tab. */\n  icon?: string;\n\n  /** The position of the icon. */\n  iconPosition?: 'left' | 'right';\n\n  /** The content to display in the tab. */\n  label?: string;\n\n  /** The slot name for custom tab content. */\n  slotName?: string;\n}\n\n/**\n * A customizable tabs component used to create groups of tabs.\n */\n@Component({\n  tag: 'modus-wc-tabs',\n  styleUrl: 'modus-wc-tabs.scss',\n  shadow: false,\n})\nexport class ModusWcTabs {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The current active tab */",
        "type": ": ModusSize"
      },
      {
        "name": "tabs",
        "description": "/** Custom CSS class to apply to the inner button. */\n  customClass?: string;\n\n  /** Whether the tab is disabled. */\n  disabled?: boolean;\n\n  /** A Modus Icon to display in the tab. */\n  icon?: string;\n\n  /** The position of the icon. */\n  iconPosition?: 'left' | 'right';\n\n  /** The content to display in the tab. */\n  label?: string;\n\n  /** The slot name for custom tab content. */\n  slotName?: string;\n}\n\n/**\n * A customizable tabs component used to create groups of tabs.\n */\n@Component({\n  tag: 'modus-wc-tabs',\n  styleUrl: 'modus-wc-tabs.scss',\n  shadow: false,\n})\nexport class ModusWcTabs {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The current active tab */",
        "type": "ITab[]"
      },
      {
        "name": "tabStyle",
        "description": "/** Custom CSS class to apply to the inner button. */\n  customClass?: string;\n\n  /** Whether the tab is disabled. */\n  disabled?: boolean;\n\n  /** A Modus Icon to display in the tab. */\n  icon?: string;\n\n  /** The position of the icon. */\n  iconPosition?: 'left' | 'right';\n\n  /** The content to display in the tab. */\n  label?: string;\n\n  /** The slot name for custom tab content. */\n  slotName?: string;\n}\n\n/**\n * A customizable tabs component used to create groups of tabs.\n */\n@Component({\n  tag: 'modus-wc-tabs',\n  styleUrl: 'modus-wc-tabs.scss',\n  shadow: false,\n})\nexport class ModusWcTabs {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The current active tab */",
        "type": ": 'boxed' | 'bordered' | 'lifted' | 'none'"
      }
    ],
    "events": [
      {
        "name": "tabChange",
        "description": "/** Custom CSS class to apply to the inner button. */\n  customClass?: string;\n\n  /** Whether the tab is disabled. */\n  disabled?: boolean;\n\n  /** A Modus Icon to display in the tab. */\n  icon?: string;\n\n  /** The position of the icon. */\n  iconPosition?: 'left' | 'right';\n\n  /** The content to display in the tab. */\n  label?: string;\n\n  /** The slot name for custom tab content. */\n  slotName?: string;\n}\n\n/**\n * A customizable tabs component used to create groups of tabs.\n */\n@Component({\n  tag: 'modus-wc-tabs',\n  styleUrl: 'modus-wc-tabs.scss',\n  shadow: false,\n})\nexport class ModusWcTabs {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The current active tab */\n  @Prop({ mutable: true }) activeTabIndex = 0;\n\n  /** Custom CSS class to apply to the inner div. */\n  @Prop() customClass?: string = '';\n\n  /** The size of the tabs. */\n  @Prop() size?: ModusSize = 'md';\n\n  /** The tabs to display. */\n  @Prop() tabs: ITab[] = [];\n\n  /** Additional styling for the tabs. */\n  @Prop() tabStyle?: 'boxed' | 'bordered' | 'lifted' | 'none' = 'bordered';\n\n  /** When a tab is switched to, this event outputs the relevant indices */"
      }
    ],
    "slots": [],
    "default_values": {
      "activeTabIndex": "0",
      "customClass": "''",
      "size": "'md'",
      "tabs": "[]",
      "tabStyle": "'bordered'"
    },
    "documentation": "\n\n--- modus-wc-tabs.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { ITab } from './modus-wc-tabs';\nimport { DaisySize } from '../types';\n\ninterface TabsArgs {\n  activeTabIndex?: number;\n  'custom-class'?: string;\n  size?: DaisySize;\n  tabs: ITab[];\n  'tab-style': 'boxed' | 'bordered' | 'lifted' | 'none';\n}\n\nconst meta: Meta<TabsArgs> = {\n  title: 'Components/Tabs',\n  component: 'modus-wc-tabs',\n  args: {\n    size: 'md',\n    tabs: [\n      { label: 'Tab 1' },\n      { label: 'Tab 2' },\n      { label: 'Tab 3', disabled: true },\n      { icon: 'home' },\n    ],\n    'tab-style': 'bordered',\n  },\n  argTypes: {\n    tabs: {\n      description: 'Array of tab objects defining the tabs to display',\n      table: {\n        type: {\n          detail: `\n            Interface: ITab\n            Properties:\n            - customClass (string, optional): Custom CSS class for the inner button\n            - disabled (boolean, optional): Whether the tab is disabled\n            - icon (string, optional): A Modus Icon name to display\n            - iconPosition ('left' | 'right', optional): The position of the icon\n            - label (string, optional): The content to display in the tab\n          `,\n        },\n      },\n    },\n    'tab-style': {\n      control: { type: 'select' },\n      options: ['boxed', 'bordered', 'lifted', 'none'],\n    },\n    size: {\n      control: { type: 'select' },\n      options: ['xs', 'sm', 'md', 'lg'],\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['tabChange'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<TabsArgs>;\n\nconst Template: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<modus-wc-tabs\n  active-tab-index=\"${ifDefined(args.activeTabIndex)}\"\n  aria-label=\"Tab group\"\n  tab-style=\"${ifDefined(args['tab-style'])}\"\n  .tabs=\"${args.tabs}\"\n  size=\"${ifDefined(args.size)}\"\n>\n</modus-wc-tabs>\n    `;\n  },\n};\n\nexport const Default: Story = { ...Template };\n\nexport const CustomContent: Story = {\n  args: {\n    tabs: [\n      {\n        icon: 'home',\n        iconPosition: 'left',\n        label: 'Home',\n        slotName: 'home-tab-content',\n      },\n      {\n        icon: 'clipboard',\n        iconPosition: 'right',\n        label: 'Tasks',\n      },\n      {\n        slotName: 'actions-tab-content',\n      },\n      {\n        slotName: 'notifications-tab-content',\n      },\n    ],\n  },\n  parameters: {\n    docs: {\n      description: {\n        story:\n          'Tabs now include slots, offering a flexible approach for users to add relevant components within the tab for more complex use cases.',\n      },\n    },\n  },\n\n  // prettier-ignore\n  render: (args) => html`\n    <style>\n      .red-icon {\n        color: red;\n      }\n      /* Style for disabled badge and icon components */\n      modus-wc-badge[disabled=\"true\"],\n      modus-wc-icon[disabled=\"true\"] {\n        opacity: 0.3;\n        pointer-events: none;\n      }\n    </style>\n    <modus-wc-tabs\n      .tabs=\"${args.tabs}\"\n      size=\"${ifDefined(args.size)}\"\n      tab-style=\"${ifDefined(args['tab-style'])}\"\n      active-tab-index=\"${ifDefined(args.activeTabIndex)}\"\n      aria-label=\"Custom tab group\"\n    >\n      <span\n        slot=\"home-tab-content\"\n        style=\"display: inline-flex; align-items: center;padding-top: 6px\"\n      >\n        <modus-wc-badge\n          color=\"warning\"\n          size=\"${ifDefined(args.size)}\"\n          variant=\"filled\"\n          disabled=\"${args.tabs[0]?.disabled === true}\"\n        >\n          <modus-wc-icon decorative=\"\" name=\"home\" size=\"xs\"></modus-wc-icon>\n          Home\n        </modus-wc-badge>\n      </span>\n      <span\n        slot=\"actions-tab-content\"\n        style=\"display: inline-flex; align-items: center; gap: 8px;\"\n      >\n        Actions\n        <modus-wc-icon\n          name=\"warning\"\n          variant=\"solid\"\n          size=\"${ifDefined(args.size)}\"\n          custom-class=\"red-icon\"\n          disabled=\"${args.tabs[2]?.disabled === true}\"\n        ></modus-wc-icon>\n      </span>\n      <span\n        slot=\"notifications-tab-content\"\n        style=\"display: inline-flex; align-items: center; gap: 8px;\"\n      >\n        Notifications\n        <modus-wc-badge\n          color=\"primary\"\n          size=\"${ifDefined(args.size)}\"\n          variant=\"counter\"\n          disabled=\"${args.tabs[3]?.disabled === true}\"\n          >5</modus-wc-badge\n        >\n      </span>\n    </modus-wc-tabs>\n  `,\n};\n\nexport const ActiveAndDisabled: Story = { ...Template };\nActiveAndDisabled.args = {\n  activeTabIndex: 1,\n  tabs: [\n    { label: 'Normal' },\n    { label: 'Active' },\n    { label: 'Disabled', disabled: true },\n  ],\n};\n\nexport const Icons: Story = {\n  ...Template,\n  args: {\n    tabs: [\n      { icon: 'home' },\n      { icon: 'settings', iconPosition: 'left', label: 'Settings' },\n      {\n        icon: 'alert',\n        iconPosition: 'right',\n        label: 'Alerts',\n      },\n    ],\n  },\n};\n\nexport const TabsWithPanel: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<modus-wc-tabs\n  active-tab-index=\"${ifDefined(args.activeTabIndex)}\"\n  aria-label=\"Tab group\"\n  custom-class=\"${ifDefined(args['custom-class'])}\"\n  ?img-src=\"${args['img-src']}\"\n  tab-style=\"${ifDefined(args['tab-style'])}\"\n  .tabs=\"${args.tabs}\"\n  size=\"${ifDefined(args.size)}\"\n>\n  <p slot=\"tab-0\">\n    Modus (noun) : a mode of procedure : a way of doing something\n  </p>\n  <p slot=\"tab-1\">\n    input (noun) : information fed into a data processing system or computer\n  </p>\n  <p slot=\"tab-2\">\n    secret (noun) : kept from knowledge or view : hidden\n  </p>\n  <p slot=\"tab-3\">\n    snapshot (noun) : an impression or view of something brief or transitory\n  </p>\n</modus-wc-tabs>\n    `;\n  },\n};\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - In 2.0 tabs use the \\`ITab\\` interface, see details of interface changes below.\n  - Size values have changed from verbose names (\\`small\\`, \\`medium\\`) to abbreviations (\\`xs\\`, \\`sm\\`, \\`md\\`, \\`lg\\`).\n  - The \\`tabChange\\` event now emits an object with both previous and new tab indices, rather than just the tab ID.\n\n#### Prop Mapping\n\n| 1.0 Prop     | 2.0 Prop           | Notes                                                          |\n|--------------|--------------------|----------------------------------------------------------------|\n| aria-label   | aria-label         |                                                                |\n| full-width   |                    | Not carried over, use CSS instead                              |\n| size         | size               | \\`small\\` \u2192 \\`sm\\`, \\`medium\\` \u2192 \\`md\\`                        |\n| tabs         | tabs               | Tab object structure has changed. See Interface changes below. |\n\n#### Event Mapping\n\n| 1.0 Event   | 2.0 Event | Notes                                                 |\n|-------------|-----------|-------------------------------------------------------|\n| tabChange   | tabChange | Now emits \\`{ previousTab: number; newTab: number }\\` |\n\n#### Interfaces\n\n##### 1.0\n\n\\`\\`\\`typescript\nexport interface Tab {\n  active?: boolean;\n  iconOnly?: string;\n  id: string;\n  label?: string;\n  leftIcon?: string;\n  rightIcon?: string;\n}\n\\`\\`\\`\n\n##### 2.0\n\n\\`\\`\\`typescript\nexport interface ITab {\n  customClass?: string;\n  disabled?: boolean;\n  icon?: string;\n  iconPosition?: 'left' | 'right';\n  label?: string;\n}\n\\`\\`\\`\n        `,\n      },\n    },\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  render: () => html`<div></div>`,\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-tabs\n  active-tab-index=\"${ifDefined(args.activeTabIndex)}\"\n  aria-label=\"Tab group\"\n  tab-style=\"${ifDefined(args['tab-style'])}\"\n  .tabs=\"${args.tabs}\"\n  size=\"${ifDefined(args.size)}\"\n>\n</modus-wc-tabs>",
        "<modus-wc-icon decorative=\"\" name=\"home\" size=\"xs\"></modus-wc-icon>",
        "<modus-wc-icon\n          name=\"warning\"\n          variant=\"solid\"\n          size=\"${ifDefined(args.size)}\"\n          custom-class=\"red-icon\"\n          disabled=\"${args.tabs[2]?.disabled === true}\"\n        ></modus-wc-icon>",
        "<modus-wc-badge\n          color=\"primary\"\n          size=\"${ifDefined(args.size)}\"\n          variant=\"counter\"\n          disabled=\"${args.tabs[3]?.disabled === true}\"\n          >5</modus-wc-badge\n        >",
        "\n<modus-wc-tabs\n  active-tab-index=\"${ifDefined(args.activeTabIndex)}\"\n  aria-label=\"Tab group\"\n  tab-style=\"${ifDefined(args['tab-style'])}\"\n  .tabs=\"${args.tabs}\"\n  size=\"${ifDefined(args.size)}\"\n>\n</modus-wc-tabs>\n    "
      ],
      "variants": [
        "solid",
        "filled",
        "counter"
      ],
      "prop_usage": {
        "index": [
          "${ifDefined(args.activeTabIndex)}"
        ],
        "label": [
          "Tab group",
          "Custom tab group"
        ],
        "style": [
          "${ifDefined(args[",
          "display: inline-flex; align-items: center;padding-top: 6px",
          "display: inline-flex; align-items: center; gap: 8px;"
        ],
        "tabs": [
          "${args.tabs}"
        ],
        "size": [
          "${ifDefined(args.size)}",
          "xs"
        ],
        "disabled": [
          "true",
          "${args.tabs[0]?.disabled === true}",
          "${args.tabs[2]?.disabled === true}",
          "${args.tabs[3]?.disabled === true}"
        ],
        "slot": [
          "home-tab-content",
          "actions-tab-content",
          "notifications-tab-content",
          "tab-0",
          "tab-1",
          "tab-2",
          "tab-3"
        ],
        "color": [
          "warning",
          "primary"
        ],
        "variant": [
          "filled",
          "solid",
          "counter"
        ],
        "name": [
          "home",
          "warning"
        ],
        "class": [
          "red-icon",
          "${ifDefined(args["
        ],
        "src": [
          "${args["
        ]
      }
    },
    "tag_name": "modus-wc-tabs"
  },
  "modus-wc-toast": {
    "props": [
      {
        "name": "customClass",
        "description": "/**\n * A customizable toast component used to stack elements, positioned on the corner of a page.\n *\n * The component supports a `<slot>` for injecting additional custom content inside the toast.\n */\n@Component({\n  tag: 'modus-wc-toast',\n  styleUrl: 'modus-wc-toast.scss',\n  shadow: false,\n})\nexport class ModusWcToast {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Additional classes for custom styling. */",
        "type": ": string"
      },
      {
        "name": "delay",
        "description": "/**\n * A customizable toast component used to stack elements, positioned on the corner of a page.\n *\n * The component supports a `<slot>` for injecting additional custom content inside the toast.\n */\n@Component({\n  tag: 'modus-wc-toast',\n  styleUrl: 'modus-wc-toast.scss',\n  shadow: false,\n})\nexport class ModusWcToast {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Additional classes for custom styling. */",
        "type": ": number"
      },
      {
        "name": "position",
        "description": "/**\n * A customizable toast component used to stack elements, positioned on the corner of a page.\n *\n * The component supports a `<slot>` for injecting additional custom content inside the toast.\n */\n@Component({\n  tag: 'modus-wc-toast',\n  styleUrl: 'modus-wc-toast.scss',\n  shadow: false,\n})\nexport class ModusWcToast {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Additional classes for custom styling. */",
        "type": ": ToastPosition"
      }
    ],
    "events": [],
    "slots": [],
    "default_values": {
      "customClass": "''",
      "position": "'top-end'"
    },
    "documentation": "\n\n--- modus-wc-toast.stories.ts ---\n\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { ToastPosition } from './modus-wc-toast';\n\ninterface ToastArgs {\n  'custom-class'?: string;\n  delay?: number;\n  position?: ToastPosition;\n}\n\nconst meta: Meta<ToastArgs> = {\n  title: 'Components/Toast',\n  component: 'modus-wc-toast',\n  args: {\n    position: 'top-end',\n  },\n  argTypes: {\n    position: {\n      control: { type: 'select' },\n      options: [\n        'top-start',\n        'top-center',\n        'top-end',\n        'middle-start',\n        'middle-center',\n        'middle-end',\n        'bottom-start',\n        'bottom-center',\n        'bottom-end',\n      ],\n    },\n  },\n  parameters: {\n    layout: 'padded',\n    viewport: 'responsive',\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<ToastArgs>;\n\nconst Template: Story = {\n  // prettier-ignore\n  render: (args) => html`\n<div style=\"height: 200px;\">\n  <modus-wc-toast\n    custom-class=${ifDefined(args['custom-class'])}\n    delay=${ifDefined(args.delay)}\n    position=${ifDefined(args.position)}\n  >\n    <modus-wc-alert alert-title=\"Message sent successfully!\" variant=\"success\"></modus-wc-alert>\n  </modus-wc-toast>\n</div>\n  `,\n};\n\nexport const Default: Story = { ...Template };\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - In 1.0 toast included built-in dismiss functionality with delay timer and dismiss button. 2.0 components focus on positioning only.\n  - In 1.0 toast included built-in icons. 2.0 components rely on slotted content for visual elements.\n  - 2.0 toast components no longer support built-in types/variants, use slotted \\`modus-wc-alert\\` components instead.\n\n#### Prop Mapping\n\n| 1.0 Prop        | 2.0 Prop    | Notes                                      |\n|-----------------|-------------|--------------------------------------------|\n| aria-label      | aria-label  |                                            |\n| delay           |             | Not carried over                           |\n| dismissible     |             | Not carried over                           |\n| retain-element  |             | Not carried over                           |\n| role            |             | Not carried over                           |\n| show-icon       |             | Not carried over                           |\n| type            |             | Not carried over, use slotted content      |\n\n#### Event Mapping\n\n| 1.0 Event     | 2.0 Event | Notes            |\n|---------------|-----------|------------------|\n| dismissClick  |           | Not carried over |\n        `,\n      },\n    },\n    // To hide the actual story rendering and only show docs:\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  // Simple render function or leave it empty\n  render: () => html`<div></div>`,\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-alert alert-title=\"Message sent successfully!\" variant=\"success\"></modus-wc-alert>",
        "\n<div style=\"height: 200px;\">\n  <modus-wc-toast\n    custom-class=${ifDefined(args['custom-class'])}\n    delay=${ifDefined(args.delay)}\n    position=${ifDefined(args.position)}\n  >\n    <modus-wc-alert alert-title=\"Message sent successfully!\" variant=\"success\"></modus-wc-alert>\n  </modus-wc-toast>\n</div>\n  "
      ],
      "variants": [
        "success"
      ],
      "prop_usage": {
        "style": [
          "height: 200px;"
        ],
        "title": [
          "Message sent successfully!"
        ],
        "variant": [
          "success"
        ]
      }
    },
    "tag_name": "modus-wc-toast"
  },
  "modus-wc-input-label": {
    "props": [
      {
        "name": "forId",
        "description": "/**\n * A customizable input label component.\n *\n * The component supports a `<slot>` for injecting additional custom content inside the label, such as icons or formatted text\n */\n@Component({\n  tag: 'modus-wc-input-label',\n  styleUrl: 'modus-wc-input-label.scss',\n  shadow: false,\n})\nexport class ModusWcInputLabel {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The `for` attribute of the label, matching the `id` of the associated input. */",
        "type": ": string"
      },
      {
        "name": "customClass",
        "description": "/**\n * A customizable input label component.\n *\n * The component supports a `<slot>` for injecting additional custom content inside the label, such as icons or formatted text\n */\n@Component({\n  tag: 'modus-wc-input-label',\n  styleUrl: 'modus-wc-input-label.scss',\n  shadow: false,\n})\nexport class ModusWcInputLabel {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The `for` attribute of the label, matching the `id` of the associated input. */",
        "type": ": string"
      },
      {
        "name": "labelText",
        "description": "/**\n * A customizable input label component.\n *\n * The component supports a `<slot>` for injecting additional custom content inside the label, such as icons or formatted text\n */\n@Component({\n  tag: 'modus-wc-input-label',\n  styleUrl: 'modus-wc-input-label.scss',\n  shadow: false,\n})\nexport class ModusWcInputLabel {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The `for` attribute of the label, matching the `id` of the associated input. */",
        "type": ": string"
      },
      {
        "name": "required",
        "description": "/**\n * A customizable input label component.\n *\n * The component supports a `<slot>` for injecting additional custom content inside the label, such as icons or formatted text\n */\n@Component({\n  tag: 'modus-wc-input-label',\n  styleUrl: 'modus-wc-input-label.scss',\n  shadow: false,\n})\nexport class ModusWcInputLabel {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The `for` attribute of the label, matching the `id` of the associated input. */",
        "type": ": boolean"
      },
      {
        "name": "size",
        "description": "/**\n * A customizable input label component.\n *\n * The component supports a `<slot>` for injecting additional custom content inside the label, such as icons or formatted text\n */\n@Component({\n  tag: 'modus-wc-input-label',\n  styleUrl: 'modus-wc-input-label.scss',\n  shadow: false,\n})\nexport class ModusWcInputLabel {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The `for` attribute of the label, matching the `id` of the associated input. */",
        "type": ": ModusSize"
      },
      {
        "name": "subLabelText",
        "description": "/**\n * A customizable input label component.\n *\n * The component supports a `<slot>` for injecting additional custom content inside the label, such as icons or formatted text\n */\n@Component({\n  tag: 'modus-wc-input-label',\n  styleUrl: 'modus-wc-input-label.scss',\n  shadow: false,\n})\nexport class ModusWcInputLabel {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The `for` attribute of the label, matching the `id` of the associated input. */",
        "type": ": string"
      }
    ],
    "events": [],
    "slots": [],
    "default_values": {
      "customClass": "''",
      "required": "false",
      "size": "'md'"
    },
    "documentation": "\n\n--- modus-wc-input-label.stories.ts ---\n\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { ModusSize } from '../types';\n\ninterface InputLabelArgs {\n  'for-id'?: string;\n  'custom-class'?: string;\n  'label-text'?: string;\n  required?: boolean;\n  size?: ModusSize;\n  'sub-label-text'?: string;\n}\n\nconst meta: Meta<InputLabelArgs> = {\n  title: 'Components/Forms/Input Label',\n  component: 'modus-wc-input-label',\n  args: {\n    'label-text': 'Label',\n    required: false,\n    size: 'md',\n  },\n  argTypes: {\n    size: {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<InputLabelArgs>;\n\nconst Template: Story = {\n  render: (args) => html`\n    <modus-wc-input-label\n      for-id=${ifDefined(args['for-id'])}\n      custom-class=${ifDefined(args['custom-class'])}\n      label-text=${ifDefined(args['label-text'])}\n      ?required=${args['required']}\n      size=${args.size}\n      sub-label-text=${ifDefined(args['sub-label-text'])}\n    ></modus-wc-input-label>\n  `,\n};\n\nexport const Default: Story = { ...Template };\n\nexport const Required: Story = { ...Template, args: { required: true } };\n",
    "storybook": {
      "examples": [
        "<modus-wc-input-label\n      for-id=${ifDefined(args['for-id'])}\n      custom-class=${ifDefined(args['custom-class'])}\n      label-text=${ifDefined(args['label-text'])}\n      ?required=${args['required']}\n      size=${args.size}\n      sub-label-text=${ifDefined(args['sub-label-text'])}\n    ></modus-wc-input-label>",
        "\n    <modus-wc-input-label\n      for-id=${ifDefined(args['for-id'])}\n      custom-class=${ifDefined(args['custom-class'])}\n      label-text=${ifDefined(args['label-text'])}\n      ?required=${args['required']}\n      size=${args.size}\n      sub-label-text=${ifDefined(args['sub-label-text'])}\n    ></modus-wc-input-label>\n  "
      ],
      "variants": [],
      "prop_usage": {}
    },
    "tag_name": "modus-wc-input-label"
  },
  "modus-wc-dropdown-menu": {
    "props": [
      {
        "name": "buttonAriaLabel",
        "description": "/**\n * A customizable dropdown menu component used to render a button and toggleable menu.\n *\n * The component supports a 'button' and 'menu' `<slot>` for injecting custom HTML content.\n */\n@Component({\n  tag: 'modus-wc-dropdown-menu',\n  styleUrl: 'modus-wc-dropdown-menu.scss',\n  shadow: false,\n})\nexport class ModusWcDropdownMenu {\n  private buttonRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The aria-label for the dropdown button. */",
        "type": ": string"
      },
      {
        "name": "buttonColor",
        "description": "/**\n * A customizable dropdown menu component used to render a button and toggleable menu.\n *\n * The component supports a 'button' and 'menu' `<slot>` for injecting custom HTML content.\n */\n@Component({\n  tag: 'modus-wc-dropdown-menu',\n  styleUrl: 'modus-wc-dropdown-menu.scss',\n  shadow: false,\n})\nexport class ModusWcDropdownMenu {\n  private buttonRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The aria-label for the dropdown button. */",
        "type": ":\n    | 'primary'\n    | 'secondary'\n    | 'tertiary'\n    | 'warning'\n    | 'danger'"
      },
      {
        "name": "buttonSize",
        "description": "/**\n * A customizable dropdown menu component used to render a button and toggleable menu.\n *\n * The component supports a 'button' and 'menu' `<slot>` for injecting custom HTML content.\n */\n@Component({\n  tag: 'modus-wc-dropdown-menu',\n  styleUrl: 'modus-wc-dropdown-menu.scss',\n  shadow: false,\n})\nexport class ModusWcDropdownMenu {\n  private buttonRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The aria-label for the dropdown button. */",
        "type": ": DaisySize"
      },
      {
        "name": "buttonVariant",
        "description": "/**\n * A customizable dropdown menu component used to render a button and toggleable menu.\n *\n * The component supports a 'button' and 'menu' `<slot>` for injecting custom HTML content.\n */\n@Component({\n  tag: 'modus-wc-dropdown-menu',\n  styleUrl: 'modus-wc-dropdown-menu.scss',\n  shadow: false,\n})\nexport class ModusWcDropdownMenu {\n  private buttonRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The aria-label for the dropdown button. */",
        "type": ": 'borderless' | 'filled' | 'outlined'"
      },
      {
        "name": "customClass",
        "description": "/**\n * A customizable dropdown menu component used to render a button and toggleable menu.\n *\n * The component supports a 'button' and 'menu' `<slot>` for injecting custom HTML content.\n */\n@Component({\n  tag: 'modus-wc-dropdown-menu',\n  styleUrl: 'modus-wc-dropdown-menu.scss',\n  shadow: false,\n})\nexport class ModusWcDropdownMenu {\n  private buttonRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The aria-label for the dropdown button. */",
        "type": ": string"
      },
      {
        "name": "disabled",
        "description": "/**\n * A customizable dropdown menu component used to render a button and toggleable menu.\n *\n * The component supports a 'button' and 'menu' `<slot>` for injecting custom HTML content.\n */\n@Component({\n  tag: 'modus-wc-dropdown-menu',\n  styleUrl: 'modus-wc-dropdown-menu.scss',\n  shadow: false,\n})\nexport class ModusWcDropdownMenu {\n  private buttonRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The aria-label for the dropdown button. */",
        "type": ": boolean"
      },
      {
        "name": "menuBordered",
        "description": "/**\n * A customizable dropdown menu component used to render a button and toggleable menu.\n *\n * The component supports a 'button' and 'menu' `<slot>` for injecting custom HTML content.\n */\n@Component({\n  tag: 'modus-wc-dropdown-menu',\n  styleUrl: 'modus-wc-dropdown-menu.scss',\n  shadow: false,\n})\nexport class ModusWcDropdownMenu {\n  private buttonRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The aria-label for the dropdown button. */",
        "type": ": boolean"
      },
      {
        "name": "menuOffset",
        "description": "/**\n * A customizable dropdown menu component used to render a button and toggleable menu.\n *\n * The component supports a 'button' and 'menu' `<slot>` for injecting custom HTML content.\n */\n@Component({\n  tag: 'modus-wc-dropdown-menu',\n  styleUrl: 'modus-wc-dropdown-menu.scss',\n  shadow: false,\n})\nexport class ModusWcDropdownMenu {\n  private buttonRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The aria-label for the dropdown button. */",
        "type": ": number"
      },
      {
        "name": "menuPlacement",
        "description": "/**\n * A customizable dropdown menu component used to render a button and toggleable menu.\n *\n * The component supports a 'button' and 'menu' `<slot>` for injecting custom HTML content.\n */\n@Component({\n  tag: 'modus-wc-dropdown-menu',\n  styleUrl: 'modus-wc-dropdown-menu.scss',\n  shadow: false,\n})\nexport class ModusWcDropdownMenu {\n  private buttonRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The aria-label for the dropdown button. */",
        "type": ": PopoverPlacement"
      },
      {
        "name": "menuSize",
        "description": "/**\n * A customizable dropdown menu component used to render a button and toggleable menu.\n *\n * The component supports a 'button' and 'menu' `<slot>` for injecting custom HTML content.\n */\n@Component({\n  tag: 'modus-wc-dropdown-menu',\n  styleUrl: 'modus-wc-dropdown-menu.scss',\n  shadow: false,\n})\nexport class ModusWcDropdownMenu {\n  private buttonRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The aria-label for the dropdown button. */",
        "type": ": ModusSize"
      },
      {
        "name": "menuVisible",
        "description": "/**\n * A customizable dropdown menu component used to render a button and toggleable menu.\n *\n * The component supports a 'button' and 'menu' `<slot>` for injecting custom HTML content.\n */\n@Component({\n  tag: 'modus-wc-dropdown-menu',\n  styleUrl: 'modus-wc-dropdown-menu.scss',\n  shadow: false,\n})\nexport class ModusWcDropdownMenu {\n  private buttonRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The aria-label for the dropdown button. */",
        "type": "boolean"
      }
    ],
    "events": [
      {
        "name": "menuVisibilityChange",
        "description": "/**\n * A customizable dropdown menu component used to render a button and toggleable menu.\n *\n * The component supports a 'button' and 'menu' `<slot>` for injecting custom HTML content.\n */\n@Component({\n  tag: 'modus-wc-dropdown-menu',\n  styleUrl: 'modus-wc-dropdown-menu.scss',\n  shadow: false,\n})\nexport class ModusWcDropdownMenu {\n  private buttonRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The aria-label for the dropdown button. */\n  @Prop() buttonAriaLabel?: string;\n\n  /** The color variant of the button. */\n  @Prop() buttonColor?:\n    | 'primary'\n    | 'secondary'\n    | 'tertiary'\n    | 'warning'\n    | 'danger' = 'primary';\n\n  /** The size of the button. */\n  @Prop() buttonSize?: DaisySize = 'md';\n\n  /** The variant of the button. */\n  @Prop() buttonVariant?: 'borderless' | 'filled' | 'outlined' = 'filled';\n\n  /** Custom CSS class to apply to the host element. */\n  @Prop() customClass?: string = '';\n\n  /** If true, the button will be disabled. */\n  @Prop() disabled?: boolean = false;\n\n  /** Indicates that the menu should have a border. */\n  @Prop() menuBordered?: boolean = true;\n\n  /** Distance between the button and menu in pixels. */\n  @Prop() menuOffset?: number = 10;\n\n  /** The placement of the menu relative to the button. */\n  @Prop() menuPlacement?: PopoverPlacement = 'bottom-start';\n\n  /** The size of the menu. */\n  @Prop() menuSize?: ModusSize = 'md';\n\n  /** Indicates that the menu is visible. */\n  @Prop({ mutable: true }) menuVisible: boolean = false;\n\n  /** Event emitted when the menuVisible prop changes. */"
      }
    ],
    "slots": [
      "button",
      "menu"
    ],
    "default_values": {
      "buttonColor": "'primary'",
      "buttonSize": "'md'",
      "buttonVariant": "'filled'",
      "customClass": "''",
      "disabled": "false",
      "menuBordered": "true",
      "menuOffset": "10",
      "menuPlacement": "'bottom-start'",
      "menuSize": "'md'",
      "menuVisible": "false"
    },
    "documentation": "\n\n--- modus-wc-dropdown-menu.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { DaisySize, ModusSize, PopoverPlacement } from '../types';\n\ninterface DropdownMenuArgs {\n  'button-aria-label'?: string;\n  'button-color'?: 'primary' | 'secondary' | 'tertiary' | 'warning' | 'danger';\n  'button-size'?: DaisySize;\n  'button-variant'?: 'borderless' | 'filled' | 'outlined';\n  'custom-class'?: string;\n  disabled?: boolean;\n  'menu-bordered'?: boolean;\n  'menu-offset'?: number;\n  'menu-placement'?: PopoverPlacement;\n  'menu-size'?: ModusSize;\n  'menu-visible': boolean;\n}\n\nconst meta: Meta<DropdownMenuArgs> = {\n  title: 'Components/Dropdown Menu',\n  component: 'modus-wc-dropdown-menu',\n  args: {\n    'button-aria-label': 'Dropdown menu button',\n    'button-color': 'primary',\n    'button-size': 'md',\n    'button-variant': 'filled',\n    disabled: false,\n    'menu-bordered': true,\n    'menu-offset': 14,\n    'menu-placement': 'bottom-start',\n    'menu-size': 'md',\n    'menu-visible': false,\n  },\n  argTypes: {\n    'button-color': {\n      control: { type: 'select' },\n      options: ['primary', 'secondary', 'tertiary', 'warning', 'danger'],\n    },\n    'button-size': {\n      control: { type: 'select' },\n      options: ['xs', 'sm', 'md', 'lg'],\n    },\n    'button-variant': {\n      control: { type: 'select' },\n      options: ['borderless', 'filled', 'outlined'],\n    },\n    'menu-placement': {\n      control: { type: 'select' },\n      options: [\n        'top',\n        'top-start',\n        'top-end',\n        'bottom',\n        'bottom-start',\n        'bottom-end',\n        'left',\n        'left-start',\n        'left-end',\n        'right',\n        'right-start',\n        'right-end',\n      ],\n    },\n    'menu-size': {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg'],\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['menuVisibilityChange'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<DropdownMenuArgs>;\n\nconst Template: Story = {\n  render: (args) => {\n    let selectedValue = '';\n\n    const handleItemSelect = (event: CustomEvent) => {\n      selectedValue = event.detail.value;\n      const displayElement = document.querySelector('#selected-value');\n      if (displayElement) {\n        displayElement.textContent = selectedValue;\n      }\n\n      // Close the dropdown menu when an item is selected\n      const dropdownMenu = event.target as HTMLElement;\n      const dropdownMenuElement = dropdownMenu.closest(\n        'modus-wc-dropdown-menu'\n      );\n      if (dropdownMenuElement) {\n        dropdownMenuElement.menuVisible = false;\n      }\n    };\n\n    // prettier-ignore\n    return html`\n<style>\n  /* Storybook styling */\n  div#story--components-dropdown-menu--default--primary-inner {\n    display: flex;\n    align-items: center;\n    height: 240px;\n  }\n\n  [slot=\"button\"] {\n    display: flex;\n    align-items: center;\n    gap: 4px;\n  }\n\n  .value {\n    font-size: 14px;\n    padding-top: 12px;\n  }\n</style>\n\n<script>\n  let selectedValue = '';\n\n  const handleItemSelect = (event: CustomEvent) => {\n    // Update the \"Selected Value\" label\n    selectedValue = event.detail.value;\n    const displayElement = document.querySelector('#selected-value');\n    if (displayElement) {\n      displayElement.textContent = selectedValue;\n    }\n\n    // Close the dropdown menu when an item is selected\n    const dropdownMenu = event.target as HTMLElement;\n    const dropdownMenuElement = dropdownMenu.closest(\n      'modus-wc-dropdown-menu'\n    );\n    if (dropdownMenuElement) {\n      dropdownMenuElement.menuVisible = false;\n    }\n  };\n</script>\n\n<modus-wc-dropdown-menu\n  button-aria-label=${ifDefined(args['button-aria-label'])}\n  button-color=${ifDefined(args['button-color'])}\n  button-size=${ifDefined(args['button-size'])}\n  button-variant=${ifDefined(args['button-variant'])}\n  custom-class=${ifDefined(args['custom-class'])}\n  ?disabled=${args.disabled}\n  ?menu-bordered=${args['menu-bordered']}\n  menu-offset=${ifDefined(args['menu-offset'])}\n  menu-placement=${ifDefined(args['menu-placement'])}\n  menu-size=${ifDefined(args['menu-size'])}\n  ?menu-visible=${args['menu-visible']}\n>\n  <div slot=\"button\">\n    Button\n    <modus-wc-icon name=\"expand_more\" size=\"sm\" />\n  </div>\n\n  <div slot=\"menu\">\n    <modus-wc-menu-item label=\"Item One\" value=\"1\" @itemSelect=${handleItemSelect}></modus-wc-menu-item>\n    <modus-wc-menu-item label=\"Item Two\" value=\"2\" @itemSelect=${handleItemSelect} /></modus-wc-menu-item>\n    <modus-wc-menu-item label=\"Item Three\" value=\"3\" @itemSelect=${handleItemSelect} /></modus-wc-menu-item>\n  </div>\n</modus-wc-dropdown-menu>\n\n<div class=\"value\">\n  Selected Value:\n  <span id=\"selected-value\"></span>\n</div>\n    `;\n  },\n};\n\nexport const Default: Story = { ...Template };\n",
    "storybook": {
      "examples": [
        "<modus-wc-menu-item label=\"Item One\" value=\"1\" @itemSelect=${handleItemSelect}></modus-wc-menu-item>",
        "<modus-wc-menu-item label=\"Item Two\" value=\"2\" @itemSelect=${handleItemSelect} /></modus-wc-menu-item>",
        "<modus-wc-menu-item label=\"Item Three\" value=\"3\" @itemSelect=${handleItemSelect} /></modus-wc-menu-item>",
        "<modus-wc-icon name=\"expand_more\" size=\"sm\" />",
        "<modus-wc-menu-item label=\"Item Two\" value=\"2\" @itemSelect=${handleItemSelect} />"
      ],
      "variants": [],
      "prop_usage": {
        "slot": [
          "button",
          "menu"
        ],
        "name": [
          "expand_more"
        ],
        "size": [
          "sm"
        ],
        "label": [
          "Item One",
          "Item Two",
          "Item Three"
        ],
        "value": [
          "1",
          "2",
          "3"
        ],
        "class": [
          "value"
        ],
        "id": [
          "selected-value"
        ]
      }
    },
    "tag_name": "modus-wc-dropdown-menu"
  },
  "modus-wc-alert": {
    "props": [
      {
        "name": "alertDescription",
        "description": "/**\n * A customizable alert component used to inform the user about important events\n */\n@Component({\n  tag: 'modus-wc-alert',\n  styleUrl: 'modus-wc-alert.scss',\n  shadow: false,\n})\nexport class ModusWcAlert {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The description of the alert. */",
        "type": ": string"
      },
      {
        "name": "alertTitle",
        "description": "/**\n * A customizable alert component used to inform the user about important events\n */\n@Component({\n  tag: 'modus-wc-alert',\n  styleUrl: 'modus-wc-alert.scss',\n  shadow: false,\n})\nexport class ModusWcAlert {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The description of the alert. */",
        "type": ": string"
      },
      {
        "name": "customClass",
        "description": "/**\n * A customizable alert component used to inform the user about important events\n */\n@Component({\n  tag: 'modus-wc-alert',\n  styleUrl: 'modus-wc-alert.scss',\n  shadow: false,\n})\nexport class ModusWcAlert {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The description of the alert. */",
        "type": ": string"
      },
      {
        "name": "delay",
        "description": "/**\n * A customizable alert component used to inform the user about important events\n */\n@Component({\n  tag: 'modus-wc-alert',\n  styleUrl: 'modus-wc-alert.scss',\n  shadow: false,\n})\nexport class ModusWcAlert {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The description of the alert. */",
        "type": ": number"
      },
      {
        "name": "dismissible",
        "description": "/**\n * A customizable alert component used to inform the user about important events\n */\n@Component({\n  tag: 'modus-wc-alert',\n  styleUrl: 'modus-wc-alert.scss',\n  shadow: false,\n})\nexport class ModusWcAlert {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The description of the alert. */",
        "type": ": boolean"
      },
      {
        "name": "icon",
        "description": "/**\n * A customizable alert component used to inform the user about important events\n */\n@Component({\n  tag: 'modus-wc-alert',\n  styleUrl: 'modus-wc-alert.scss',\n  shadow: false,\n})\nexport class ModusWcAlert {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The description of the alert. */",
        "type": ": string"
      },
      {
        "name": "variant",
        "description": "/**\n * A customizable alert component used to inform the user about important events\n */\n@Component({\n  tag: 'modus-wc-alert',\n  styleUrl: 'modus-wc-alert.scss',\n  shadow: false,\n})\nexport class ModusWcAlert {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The description of the alert. */",
        "type": ": 'error' | 'info' | 'success' | 'warning'"
      }
    ],
    "events": [],
    "slots": [
      "content",
      "button"
    ],
    "default_values": {
      "customClass": "''",
      "dismissible": "false",
      "variant": "'info'"
    },
    "documentation": "\n\n--- modus-wc-alert.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\n\ninterface AlertArgs {\n  'alert-description'?: string;\n  'alert-title': string;\n  'custom-class'?: string;\n  delay?: number;\n  dismissible?: boolean;\n  dismissClick?: () => void;\n  icon?: string;\n  variant: 'error' | 'info' | 'success' | 'warning';\n  role: 'alert' | 'log' | 'marquee' | 'status' | 'timer';\n}\n\nconst meta: Meta<AlertArgs> = {\n  title: 'Components/Alert',\n  component: 'modus-wc-alert',\n  args: {\n    'alert-description': 'You have 3 new messages.',\n    'alert-title': 'New message!',\n    dismissible: false,\n    role: 'status',\n    variant: 'info',\n  },\n  argTypes: {\n    role: {\n      control: { type: 'select' },\n      options: ['', 'alert', 'log', 'marquee', 'status', 'timer'],\n    },\n    variant: {\n      control: { type: 'select' },\n      options: ['', 'error', 'info', 'success', 'warning'],\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    layout: 'padded',\n    actions: {\n      handles: ['dismissClick'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<AlertArgs>;\n\nconst Template: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<modus-wc-alert\n  alert-description=${ifDefined(args['alert-description'])}\n  alert-title=${args['alert-title']}\n  custom-class=${ifDefined(args['custom-class'])}\n  delay=${ifDefined(args.delay)}\n  dismissible=${ifDefined(args.dismissible)}\n  icon=${ifDefined(args.icon)}\n  role=${args.role}\n  variant=${ifDefined(args.variant)}\n>\n</modus-wc-alert>\n    `;\n  },\n};\n\nexport const Default: Story = { ...Template };\n\nexport const CustomButton: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<modus-wc-alert\n  alert-description=${ifDefined(args['alert-description'])}\n  alert-title=${args['alert-title']}\n  custom-class=${ifDefined(args['custom-class'])}\n  delay=${ifDefined(args.delay)}\n  dismissible=${ifDefined(args.dismissible)}\n  icon=${ifDefined(args.icon)}\n  role=${args.role}\n  variant=${ifDefined(args.variant)}\n>\n  <modus-wc-button\n    aria-label=\"View messages\"\n    color=\"secondary\"\n    slot=\"button\"\n    variant=\"outlined\"\n  >View Messages</modus-wc-button>\n</modus-wc-alert>\n    `;\n  },\n};\n\nexport const WithCustomContent: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<modus-wc-alert\n  id=\"alert-123\"\n  custom-class=${ifDefined(args['custom-class'])}\n  delay=${ifDefined(args.delay)}\n  dismissible=${ifDefined(args.dismissible)}\n  icon=${ifDefined(args.icon)}\n  role=${args.role}\n  variant=${ifDefined(args.variant)}\n>\n  <div slot=\"content\">New custom message!</div>\n</modus-wc-alert>\n    `;\n  },\n};\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - The 2.0 component can render a custom HTML title in the \\`content\\` slot.\n  - The 1.0 component rendered a button, while the 2.0 component can render a custom HTML button in the \\`button\\` slot.\n\n#### Prop Mapping\n\n| 1.0 Prop          | 2.0 Prop    | Notes                                 |\n|-------------------|-------------|---------------------------------------|\n| aria-label        | aria-label  |                                       |\n| button-aria-label |             | Not carried over, use \\`button\\` slot |\n| button-text       |             | Not carried over, use \\`button\\` slot |\n| dismissible       | dismissible |                                       |\n| message           | alert-title |                                       |\n| type              | variant     |                                       |\n\n#### Event Mapping\n\n| 1.0 Event    | 2.0 Event    | Notes                                 |\n|--------------|--------------|---------------------------------------|\n| actionClick  |              | Not carried over, use \\`button\\` slot |\n| dismissClick | dismissClick |                                       |\n        `,\n      },\n    },\n    // To hide the actual story rendering and only show docs:\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  // Simple render function or leave it empty\n  render: () => html`<div></div>`,\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-alert\n  alert-description=${ifDefined(args['alert-description'])}\n  alert-title=${args['alert-title']}\n  custom-class=${ifDefined(args['custom-class'])}\n  delay=${ifDefined(args.delay)}\n  dismissible=${ifDefined(args.dismissible)}\n  icon=${ifDefined(args.icon)}\n  role=${args.role}\n  variant=${ifDefined(args.variant)}\n>\n</modus-wc-alert>",
        "<modus-wc-button\n    aria-label=\"View messages\"\n    color=\"secondary\"\n    slot=\"button\"\n    variant=\"outlined\"\n  >View Messages</modus-wc-button>",
        "\n<modus-wc-alert\n  alert-description=${ifDefined(args['alert-description'])}\n  alert-title=${args['alert-title']}\n  custom-class=${ifDefined(args['custom-class'])}\n  delay=${ifDefined(args.delay)}\n  dismissible=${ifDefined(args.dismissible)}\n  icon=${ifDefined(args.icon)}\n  role=${args.role}\n  variant=${ifDefined(args.variant)}\n>\n</modus-wc-alert>\n    ",
        "\n<modus-wc-alert\n  alert-description=${ifDefined(args['alert-description'])}\n  alert-title=${args['alert-title']}\n  custom-class=${ifDefined(args['custom-class'])}\n  delay=${ifDefined(args.delay)}\n  dismissible=${ifDefined(args.dismissible)}\n  icon=${ifDefined(args.icon)}\n  role=${args.role}\n  variant=${ifDefined(args.variant)}\n>\n  <modus-wc-button\n    aria-label=\"View messages\"\n    color=\"secondary\"\n    slot=\"button\"\n    variant=\"outlined\"\n  >View Messages</modus-wc-button>\n</modus-wc-alert>\n    ",
        "\n<modus-wc-alert\n  id=\"alert-123\"\n  custom-class=${ifDefined(args['custom-class'])}\n  delay=${ifDefined(args.delay)}\n  dismissible=${ifDefined(args.dismissible)}\n  icon=${ifDefined(args.icon)}\n  role=${args.role}\n  variant=${ifDefined(args.variant)}\n>\n  <div slot=\"content\">New custom message!</div>\n</modus-wc-alert>\n    "
      ],
      "variants": [
        "outlined"
      ],
      "prop_usage": {
        "label": [
          "View messages"
        ],
        "color": [
          "secondary"
        ],
        "slot": [
          "button",
          "content"
        ],
        "variant": [
          "outlined"
        ],
        "id": [
          "alert-123"
        ]
      }
    },
    "tag_name": "modus-wc-alert"
  }
}
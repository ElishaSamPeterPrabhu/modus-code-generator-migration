{
  "modus-wc-accordion": {
    "props": [],
    "events": [],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-wc-accordion.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { ICollapseOptions } from '../modus-wc-collapse/modus-wc-collapse';\n\ninterface AccordionArgs {\n  'custom-class'?: string;\n}\n\nconst collapseOptions: ICollapseOptions[] = [\n  {\n    description: 'Item one description',\n    icon: 'alert',\n    iconAriaLabel: 'Alert',\n    title: 'Item One',\n  },\n  {\n    description: 'Item two description',\n    icon: 'alert',\n    iconAriaLabel: 'Alert',\n    title: 'Item Two',\n  },\n  {\n    description: 'Item three description',\n    icon: 'alert',\n    iconAriaLabel: 'Alert',\n    title: 'Item Three',\n  },\n];\n\nconst meta: Meta<AccordionArgs> = {\n  title: 'Components/Accordion',\n  component: 'modus-wc-accordion',\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['expandedChange'],\n    },\n    layout: {\n      padded: true,\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<AccordionArgs>;\n\nconst Template: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<script>\n  const collapseOptions = [\n    {\n      description: 'Item one description',\n      icon: 'alert',\n      iconAriaLabel: 'Alert',\n      title: 'Item One',\n    },\n    {\n      description: 'Item two description',\n      icon: 'alert',\n      iconAriaLabel: 'Alert',\n      title: 'Item Two',\n    },\n    {\n      description: 'Item three description',\n      icon: 'alert',\n      iconAriaLabel: 'Alert',\n      title: 'Item Three',\n    },\n  ];\n</script>\n<div style=\"padding: 20px;\">\n  <modus-wc-accordion custom-class=${ifDefined(args['custom-class'])}>\n    <modus-wc-collapse .options=${collapseOptions[0]}>\n      <div slot=\"content\">Collapse content</div>\n    </modus-wc-collapse>\n    <modus-wc-collapse .options=${collapseOptions[1]}>\n      <div slot=\"content\">Collapse content</div>\n    </modus-wc-collapse>\n    <modus-wc-collapse .options=${collapseOptions[2]}>\n      <div slot=\"content\">Collapse content</div>\n    </modus-wc-collapse>\n  </modus-wc-accordion>\n</div>\n    `;\n  },\n};\n\nexport const Default: Story = { ...Template };\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - In 1.0 the accordion was composed of child accordion-item components. In 2.0 accordion children are collapse\n  components.\n  - The new accordion supports \\`header\\` and \\`content\\` slots to provide maximum flexibility.\n  - Size values have changed from (\\`condensed\\`, \\`standard\\`) in 1.0 accordion-item to abbreviations (\\`xs\\`, \\`sm\\`, \\`md\\`, \\`lg\\`) in 2.0 collapse.\n\n#### Prop Mapping\n\n##### accordion\n\n| 1.0 Prop           | 2.0 Prop           | Notes            |\n|--------------------|--------------------|------------------|\n| aria-label         | aria-label         |                  |\n\n##### accordion-item \u2192 collapse\n\n| 1.0 Prop           | 2.0 Prop            | Notes            |\n|--------------------|---------------------|------------------|\n| aria-label         | aria-label          |                  |\n| disabled           |                     | Not carried over |\n| expand-button-type |                     | Not carried over |\n| expanded           | expanded            |                  |\n| header-text        | options.title       |                  |\n| icon               | options.icon        |                  |\n| supporting-label   | options.description |                  |\n| size               | options.size        |                  |\n\n#### Event Mapping\n\n##### accordion-item \u2192 accordion\n\nThe new accordion and collapse have their own events. We recommend using the\naccordion events to migrate.\n\n| 1.0 Event | 2.0 Event      | Notes            |\n|-----------|----------------|------------------|\n| closed    | expandedChange |                  |\n| opened    | expandedChange |                  |\n        `,\n      },\n    },\n    // To hide the actual story rendering and only show docs:\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  // Simple render function or leave it empty\n  render: () => html`<div></div>`,\n};\n",
    "storybook": {
      "examples": [
        "\n<script>\n  const collapseOptions = [\n    {\n      description: 'Item one description',\n      icon: 'alert',\n      iconAriaLabel: 'Alert',\n      title: 'Item One',\n    },\n    {\n      description: 'Item two description',\n      icon: 'alert',\n      iconAriaLabel: 'Alert',\n      title: 'Item Two',\n    },\n    {\n      description: 'Item three description',\n      icon: 'alert',\n      iconAriaLabel: 'Alert',\n      title: 'Item Three',\n    },\n  ];\n</script>\n<div style=\"padding: 20px;\">\n  <modus-wc-accordion custom-class=${ifDefined(args['custom-class'])}>\n    <modus-wc-collapse .options=${collapseOptions[0]}>\n      <div slot=\"content\">Collapse content</div>\n    </modus-wc-collapse>\n    <modus-wc-collapse .options=${collapseOptions[1]}>\n      <div slot=\"content\">Collapse content</div>\n    </modus-wc-collapse>\n    <modus-wc-collapse .options=${collapseOptions[2]}>\n      <div slot=\"content\">Collapse content</div>\n    </modus-wc-collapse>\n  </modus-wc-accordion>\n</div>\n    "
      ],
      "variants": [],
      "prop_usage": {
        "style": [
          "padding: 20px;"
        ],
        "slot": [
          "content"
        ]
      }
    },
    "tag_name": "modus-wc-accordion"
  },
  "modus-wc-alert": {
    "props": [
      {
        "name": "role",
        "description": "/**\n * A customizable alert component used to inform the user about important events\n */\n@Component({\n  tag: 'modus-wc-alert',\n  styleUrl: 'modus-wc-alert.scss',\n  shadow: false,\n})\nexport class ModusWcAlert {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The description of the alert. */",
        "type": "'alert' | 'log' | 'marquee' | 'status' | 'timer'"
      }
    ],
    "events": [],
    "slots": [
      "content",
      "button"
    ],
    "default_values": {},
    "documentation": "\n\n--- modus-wc-alert.stories.ts ---\n\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\n\ninterface AlertArgs {\n  'alert-description'?: string;\n  'alert-title': string;\n  'custom-class'?: string;\n  dismissible?: boolean;\n  dismissClick?: () => void;\n  icon?: string;\n  variant: 'error' | 'info' | 'success' | 'warning';\n  role: 'alert' | 'log' | 'marquee' | 'status' | 'timer';\n}\n\nconst meta: Meta<AlertArgs> = {\n  title: 'Components/Alert',\n  component: 'modus-wc-alert',\n  args: {\n    'alert-description': 'You have 3 new messages.',\n    'alert-title': 'New message!',\n    dismissible: false,\n    role: 'status',\n    variant: 'info',\n  },\n  argTypes: {\n    role: {\n      control: { type: 'select' },\n      options: ['', 'alert', 'log', 'marquee', 'status', 'timer'],\n    },\n    variant: {\n      control: { type: 'select' },\n      options: ['', 'error', 'info', 'success', 'warning'],\n    },\n  },\n  parameters: {\n    layout: 'padded',\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<AlertArgs>;\n\nconst Template: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<modus-wc-alert\n  alert-description=${ifDefined(args['alert-description'])}\n  alert-title=${args['alert-title']}\n  custom-class=${ifDefined(args['custom-class'])}\n  dismissible=${ifDefined(args.dismissible)}\n  icon=${ifDefined(args.icon)}\n  role=${args.role}\n  variant=${ifDefined(args.variant)}\n>\n</modus-wc-alert>\n    `;\n  },\n};\n\nexport const Default: Story = { ...Template };\n\nexport const CustomButton: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<modus-wc-alert\n  alert-description=${ifDefined(args['alert-description'])}\n  alert-title=${args['alert-title']}\n  custom-class=${ifDefined(args['custom-class'])}\n  dismissible=${ifDefined(args.dismissible)}\n  icon=${ifDefined(args.icon)}\n  role=${args.role}\n  variant=${ifDefined(args.variant)}\n>\n  <modus-wc-button\n    aria-label=\"View messages\"\n    color=\"secondary\"\n    slot=\"button\"\n    variant=\"outlined\"\n  >View Messages</modus-wc-button>\n</modus-wc-alert>\n    `;\n  },\n};\n\nexport const WithCustomContent: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<modus-wc-alert\n  id=\"alert-123\"\n  custom-class=${ifDefined(args['custom-class'])}\n  dismissible=${ifDefined(args.dismissible)}\n  icon=${ifDefined(args.icon)}\n  role=${args.role}\n  variant=${ifDefined(args.variant)}\n>\n  <div slot=\"content\">New custom message!</div>\n</modus-wc-alert>\n    `;\n  },\n};\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - The 2.0 component can render a custom HTML title in the \\`content\\` slot.\n  - The 1.0 component rendered a button, while the 2.0 component can render a custom HTML button in the \\`button\\` slot.\n\n#### Prop Mapping\n\n| 1.0 Prop          | 2.0 Prop    | Notes                                 |\n|-------------------|-------------|---------------------------------------|\n| aria-label        | aria-label  |                                       |\n| button-aria-label |             | Not carried over, use \\`button\\` slot |\n| button-text       |             | Not carried over, use \\`button\\` slot |\n| dismissible       | dismissible |                                       |\n| message           | alert-title |                                       |\n| type              | variant     |                                       |\n\n#### Event Mapping\n\n| 1.0 Event    | 2.0 Event    | Notes                                 |\n|--------------|--------------|---------------------------------------|\n| actionClick  |              | Not carried over, use \\`button\\` slot |\n| dismissClick | dismissClick |                                       |\n        `,\n      },\n    },\n    // To hide the actual story rendering and only show docs:\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  // Simple render function or leave it empty\n  render: () => html`<div></div>`,\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-alert\n  alert-description=${ifDefined(args['alert-description'])}\n  alert-title=${args['alert-title']}\n  custom-class=${ifDefined(args['custom-class'])}\n  dismissible=${ifDefined(args.dismissible)}\n  icon=${ifDefined(args.icon)}\n  role=${args.role}\n  variant=${ifDefined(args.variant)}\n>\n</modus-wc-alert>",
        "<modus-wc-button\n    aria-label=\"View messages\"\n    color=\"secondary\"\n    slot=\"button\"\n    variant=\"outlined\"\n  >View Messages</modus-wc-button>",
        "\n<modus-wc-alert\n  alert-description=${ifDefined(args['alert-description'])}\n  alert-title=${args['alert-title']}\n  custom-class=${ifDefined(args['custom-class'])}\n  dismissible=${ifDefined(args.dismissible)}\n  icon=${ifDefined(args.icon)}\n  role=${args.role}\n  variant=${ifDefined(args.variant)}\n>\n</modus-wc-alert>\n    ",
        "\n<modus-wc-alert\n  alert-description=${ifDefined(args['alert-description'])}\n  alert-title=${args['alert-title']}\n  custom-class=${ifDefined(args['custom-class'])}\n  dismissible=${ifDefined(args.dismissible)}\n  icon=${ifDefined(args.icon)}\n  role=${args.role}\n  variant=${ifDefined(args.variant)}\n>\n  <modus-wc-button\n    aria-label=\"View messages\"\n    color=\"secondary\"\n    slot=\"button\"\n    variant=\"outlined\"\n  >View Messages</modus-wc-button>\n</modus-wc-alert>\n    ",
        "\n<modus-wc-alert\n  id=\"alert-123\"\n  custom-class=${ifDefined(args['custom-class'])}\n  dismissible=${ifDefined(args.dismissible)}\n  icon=${ifDefined(args.icon)}\n  role=${args.role}\n  variant=${ifDefined(args.variant)}\n>\n  <div slot=\"content\">New custom message!</div>\n</modus-wc-alert>\n    "
      ],
      "variants": [
        "outlined"
      ],
      "prop_usage": {
        "label": [
          "View messages"
        ],
        "color": [
          "secondary"
        ],
        "slot": [
          "button",
          "content"
        ],
        "variant": [
          "outlined"
        ],
        "id": [
          "alert-123"
        ]
      }
    },
    "tag_name": "modus-wc-alert"
  },
  "modus-wc-autocomplete": {
    "props": [
      {
        "name": "minChars",
        "description": "/** Whether the item is disabled */\n  disabled?: boolean;\n  /** Whether the item is currently focused */\n  focused?: boolean;\n  /** The display text shown for the autocomplete item */\n  label: string;\n  /** Whether the item is currently selected */\n  selected?: boolean;\n  /** The unique value identifier for the item */\n  value: string;\n  /** Whether the item should be shown in the dropdown menu */\n  visibleInMenu: boolean;\n}\n\nexport interface IAutocompleteNoResults {\n  /** The aria-label to provide accessibility information for the no results section. */\n  ariaLabel?: string;\n  /** The main label to display when no results are found. */\n  label: string;\n  /** The sub-label or additional text to display below the main label. */\n  subLabel: string;\n}\n\n/**\n * A customizable autocomplete component used to create searchable text inputs.\n */\n@Component({\n  tag: 'modus-wc-autocomplete',\n  styleUrl: 'modus-wc-autocomplete.scss',\n  shadow: false,\n})\nexport class ModusWcAutocomplete {\n  private debounceTimer?: number;\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  @State() private menuVisible: boolean = false;\n\n  /** Indicates that the autocomplete should have a border. */",
        "type": "number"
      }
    ],
    "events": [],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-wc-autocomplete.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport {\n  IAutocompleteItem,\n  IAutocompleteNoResults,\n} from './modus-wc-autocomplete';\nimport { ModusSize } from '../types';\n\n// Updated items array includes an optional \"focused\" property.\nconst items: IAutocompleteItem[] = [\n  {\n    label: 'Apple',\n    value: 'apple',\n    visibleInMenu: true,\n    focused: false,\n    disabled: true,\n  },\n  {\n    label: 'Banana',\n    value: 'banana',\n    visibleInMenu: true,\n    focused: false,\n    disabled: true,\n  },\n  {\n    label: 'Blueberry',\n    value: 'blueberry',\n    visibleInMenu: true,\n    focused: false,\n  },\n  { label: 'Cherry', value: 'cherry', visibleInMenu: true, focused: false },\n  { label: 'Grape', value: 'grape', visibleInMenu: true, focused: false },\n  { label: 'Lemon', value: 'lemon', visibleInMenu: true, focused: false },\n  {\n    label: 'Orange',\n    value: 'orange',\n    visibleInMenu: true,\n    focused: false,\n    disabled: true,\n  },\n  { label: 'Peach', value: 'peach', visibleInMenu: true, focused: false },\n  { label: 'Pear', value: 'pear', visibleInMenu: true, focused: false },\n  {\n    label: 'Strawberry',\n    value: 'strawberry',\n    visibleInMenu: true,\n    focused: false,\n    disabled: true,\n  },\n];\n\ninterface AutocompleteArgs {\n  visibleItems: IAutocompleteItem[];\n  bordered?: boolean;\n  'custom-class'?: string;\n  'debounce-ms'?: number;\n  disabled?: boolean;\n  'input-id'?: string;\n  'input-tab-index'?: number;\n  items: IAutocompleteItem[];\n  initialNavigation?: boolean;\n  label?: string;\n  'leave-menu-open'?: boolean;\n  'min-chars': number;\n  'multi-select'?: boolean;\n  name?: string;\n  'no-results': IAutocompleteNoResults;\n  placeholder?: string;\n  'read-only'?: boolean;\n  required?: boolean;\n  'show-spinner'?: boolean;\n  size?: ModusSize;\n  value: string;\n}\n\nconst meta: Meta<AutocompleteArgs> = {\n  title: 'Components/Forms/Autocomplete',\n  component: 'modus-wc-autocomplete',\n  args: {\n    bordered: true,\n    'debounce-ms': 300,\n    disabled: false,\n    items: items,\n    label: 'Label',\n    'leave-menu-open': false,\n    'min-chars': 0,\n    'multi-select': false,\n    'show-spinner': false,\n    'no-results': {\n      ariaLabel: 'No results found',\n      label: 'No results found',\n      subLabel: 'Check spelling or try a different keyword',\n    },\n    size: 'md',\n    value: '',\n  },\n  argTypes: {\n    items: {\n      description: 'Array of items for the autocomplete component',\n      table: {\n        type: {\n          detail: `\n            Interface: IAutocompleteItem\n            Properties:\n            - label (string): The display text shown for the autocomplete item\n            - selected (boolean, optional): Whether the item is currently selected\n            - focused (boolean, optional): Whether the item is focused\n            - value (string): The unique value identifier for the item\n            - visibleInMenu (boolean): Whether the item should be shown in the dropdown menu\n          `,\n        },\n      },\n    },\n    size: {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg'],\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: [\n        'chipRemove',\n        'inputBlur',\n        'inputChange',\n        'inputFocus',\n        'itemSelect',\n      ],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<AutocompleteArgs>;\n\nconst Template: Story = {\n  render: (args) => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      const autocomplete = (e.target as HTMLInputElement).closest(\n        'modus-wc-autocomplete'\n      );\n      if (!autocomplete) return;\n\n      // Initialize initialNavigation if undefined\n      if (args.initialNavigation === undefined) {\n        args.initialNavigation = true;\n      }\n\n      // Prevent default for navigation keys\n      if (['ArrowDown', 'ArrowUp', 'Enter', 'Escape'].includes(e.key)) {\n        e.preventDefault();\n      }\n\n      const visibleItems = args.items.filter(\n        (item) => item.visibleInMenu && !item.disabled\n      );\n\n      switch (e.key) {\n        case 'Escape':\n          args.items = args.items.map((item) => ({\n            ...item,\n            focused: false,\n          }));\n          args.initialNavigation = true;\n          autocomplete.items = [...args.items];\n          return;\n\n        case 'ArrowDown':\n          if (args.initialNavigation) {\n            args.initialNavigation = false;\n            return;\n          } else {\n            const currentIndex = visibleItems.findIndex((item) => item.focused);\n            const nextIndex =\n              currentIndex < 0\n                ? 0\n                : Math.min(currentIndex + 1, visibleItems.length - 1);\n            args.items = args.items.map((item) => ({\n              ...item,\n              focused: visibleItems[nextIndex]?.value === item.value,\n            }));\n          }\n          break;\n\n        case 'ArrowUp':\n          if (args.initialNavigation) {\n            args.initialNavigation = false;\n            return;\n          } else {\n            const currentIndex = visibleItems.findIndex((item) => item.focused);\n            const prevIndex =\n              currentIndex < 0\n                ? visibleItems.length - 1\n                : Math.max(currentIndex - 1, 0);\n            args.items = args.items.map((item) => ({\n              ...item,\n              focused: visibleItems[prevIndex]?.value === item.value,\n            }));\n          }\n          break;\n\n        case 'Enter': {\n          const focusedItem = visibleItems.find((item) => item.focused);\n          if (focusedItem) {\n            args.items = args.items.map((item) => ({\n              ...item,\n              selected: item.value === focusedItem.value,\n              focused: false,\n            }));\n            autocomplete.value = focusedItem.label;\n            args.initialNavigation = true;\n          }\n          break;\n        }\n\n        default:\n          return;\n      }\n\n      autocomplete.items = [...args.items];\n    };\n\n    const handleInputChange = (e: CustomEvent<Event>) => {\n      if (!e.detail?.target) return;\n\n      const autocomplete = (e.target as HTMLInputElement).closest(\n        'modus-wc-autocomplete'\n      );\n\n      if (autocomplete) {\n        const input = e.detail.target as HTMLInputElement;\n        const searchText = input.value.toLowerCase();\n\n        args.items = args.items.map((item) => ({\n          ...item,\n          visibleInMenu: item.label.toLowerCase().includes(searchText),\n          focused: false,\n          selected: searchText ? item.selected : false,\n        }));\n\n        autocomplete.items = [...args.items];\n        autocomplete.value = input.value;\n      }\n    };\n\n    const handleBlur = () => {\n      args.initialNavigation = true;\n      args.items = args.items.map((item) => ({\n        ...item,\n        focused: false,\n        visibleInMenu: true,\n      }));\n    };\n\n    const handleItemSelect = (e: CustomEvent<IAutocompleteItem>) => {\n      const autocomplete = (e.target as HTMLInputElement).closest(\n        'modus-wc-autocomplete'\n      );\n\n      if (autocomplete) {\n        const label = e.detail.label;\n        if (label) {\n          autocomplete.value = label;\n        }\n\n        // Clear the previous selection.\n        args.items.forEach((item) => (item.selected = false));\n\n        // Mark the user selected menu item as selected and create a new array to update items.\n        const foundItem = args.items.find(\n          (item) => item.value === e.detail.value\n        );\n\n        if (foundItem) {\n          foundItem.selected = true;\n          autocomplete.items = [...args.items];\n        }\n      }\n    };\n\n    return html`\n      <style>\n        div[id^='story--components-forms-autocomplete--default'] {\n          height: 400px;\n        }\n      </style>\n      <script>\n          const handleKeyDown = (e: KeyboardEvent) => {\n          const autocomplete = (e.target as HTMLInputElement).closest(\n            'modus-wc-autocomplete'\n          );\n          if (!autocomplete) return;\n\n          // Initialize initialNavigation if undefined\n          if (args.initialNavigation === undefined) {\n            args.initialNavigation = true;\n          }\n\n          // Prevent default for navigation keys\n          if (['ArrowDown', 'ArrowUp', 'Enter', 'Escape'].includes(e.key)) {\n            e.preventDefault();\n          }\n\n          const visibleItems = args.items.filter(\n            (item) => item.visibleInMenu && !item.disabled\n          );\n\n          switch (e.key) {\n            case 'Escape':\n              args.items = args.items.map((item) => ({\n                ...item,\n                focused: false,\n              }));\n              args.initialNavigation = true;\n              autocomplete.items = [...args.items];\n              return;\n\n            case 'ArrowDown':\n              if (args.initialNavigation) {\n                args.initialNavigation = false;\n                return;\n              } else {\n                const currentIndex = visibleItems.findIndex((item) => item.focused);\n                const nextIndex =\n                  currentIndex < 0\n                    ? 0\n                    : Math.min(currentIndex + 1, visibleItems.length - 1);\n                args.items = args.items.map((item) => ({\n                  ...item,\n                  focused: visibleItems[nextIndex]?.value === item.value,\n                }));\n              }\n              break;\n\n            case 'ArrowUp':\n              if (args.initialNavigation) {\n                args.initialNavigation = false;\n                return;\n              } else {\n                const currentIndex = visibleItems.findIndex((item) => item.focused);\n                const prevIndex =\n                  currentIndex < 0\n                    ? visibleItems.length - 1\n                    : Math.max(currentIndex - 1, 0);\n                args.items = args.items.map((item) => ({\n                  ...item,\n                  focused: visibleItems[prevIndex]?.value === item.value,\n                }));\n              }\n              break;\n\n            case 'Enter': {\n              const focusedItem = visibleItems.find((item) => item.focused);\n              if (focusedItem) {\n                args.items = args.items.map((item) => ({\n                  ...item,\n                  selected: item.value === focusedItem.value,\n                  focused: false,\n                }));\n                autocomplete.value = focusedItem.label;\n                args.initialNavigation = true;\n              }\n              break;\n            }\n\n            default:\n              return;\n          }\n\n          autocomplete.items = [...args.items];\n        };\n\n        const handleInputChange = (e: CustomEvent<Event>) => {\n          if (!e.detail?.target) return;\n\n          const autocomplete = (e.target as HTMLInputElement).closest(\n            'modus-wc-autocomplete'\n          );\n\n          if (autocomplete) {\n            const input = e.detail.target as HTMLInputElement;\n            const searchText = input.value.toLowerCase();\n\n            args.items = args.items.map((item) => ({\n              ...item,\n              visibleInMenu: item.label.toLowerCase().includes(searchText),\n              focused: false,\n              selected: searchText ? item.selected : false,\n            }));\n\n            autocomplete.items = [...args.items];\n            autocomplete.value = input.value;\n          }\n        };\n\n        const handleBlur = () => {\n          args.initialNavigation = true;\n          args.items = args.items.map((item) => ({\n            ...item,\n            focused: false,\n            visibleInMenu: true,\n          }));\n        };\n\n        const handleItemSelect = (e: CustomEvent<IAutocompleteItem>) => {\n          const autocomplete = (e.target as HTMLInputElement).closest(\n            'modus-wc-autocomplete'\n          );\n\n          if (autocomplete) {\n            const label = e.detail.label;\n            if (label) {\n              autocomplete.value = label;\n            }\n\n            // Clear the previous selection.\n            args.items.forEach((item) => (item.selected = false));\n\n            // Mark the user selected menu item as selected and create a new array to update items.\n            const foundItem = args.items.find((item) => item.value === e.detail.value);\n            if (foundItem) {\n              foundItem.selected = true;\n              autocomplete.items = [...args.items];\n            }\n          }\n        };\n      </script>\n      <modus-wc-autocomplete\n        aria-label=\"Fruit autocomplete\"\n        ?bordered=${args.bordered}\n        custom-class=${ifDefined(args['custom-class'])}\n        debounce-ms=${ifDefined(args['debounce-ms'])}\n        ?disabled=${args.disabled}\n        input-id=${ifDefined(args['input-id'])}\n        input-tab-index=${ifDefined(args['input-tab-index'])}\n        .items=${args.items}\n        label=${ifDefined(args.label)}\n        ?leave-menu-open=${args['leave-menu-open']}\n        min-chars=${args['min-chars']}\n        ?multi-select=${false}\n        name=${ifDefined(args.name)}\n        .noResults=${args['no-results']}\n        placeholder=${ifDefined(args.placeholder)}\n        ?read-only=${args['read-only']}\n        ?required=${args.required}\n        ?show-spinner=${args['show-spinner']}\n        size=${ifDefined(args.size)}\n        value=${args.value}\n        @inputChange=${handleInputChange}\n        @itemSelect=${handleItemSelect}\n        @inputBlur=${handleBlur}\n        @keydown=${handleKeyDown}\n      ></modus-wc-autocomplete>\n    `;\n  },\n};\n\nexport const Default: Story = {\n  ...Template,\n};\n\nexport const MultiSelect: Story = {\n  render: (args) => {\n    // Initialize args.items if empty\n    if (!args.items || args.items.length === 0) {\n      args.items = [...items];\n    }\n\n    const handleChipRemove = (e: CustomEvent<IAutocompleteItem>) => {\n      const autocomplete = (e.target as HTMLInputElement).closest(\n        'modus-wc-autocomplete'\n      );\n\n      if (autocomplete) {\n        args.items = args.items.map((item) =>\n          item.value === e.detail.value ? { ...item, selected: false } : item\n        );\n        autocomplete.items = [...args.items];\n      }\n    };\n\n    const handleInputChange = (e: CustomEvent<Event>) => {\n      if (!e.detail?.target) return;\n\n      const autocomplete = (e.target as HTMLInputElement).closest(\n        'modus-wc-autocomplete'\n      );\n\n      if (autocomplete) {\n        const input = e.detail.target as HTMLInputElement;\n        const searchText = input.value.toLowerCase();\n\n        const updatedItems = args.items.map((item) => ({\n          ...item,\n          visibleInMenu: item.label.toLowerCase().includes(searchText),\n          focused: false,\n        }));\n\n        args.items = updatedItems;\n        autocomplete.items = [...args.items];\n        autocomplete.value = input.value;\n        if (autocomplete.value) {\n          args.initialNavigation = false;\n        }\n      }\n    };\n\n    const handleBlur = () => {\n      args.initialNavigation = true;\n      args.items = args.items.map((item) => ({\n        ...item,\n        focused: false,\n        visibleInMenu: true,\n      }));\n    };\n\n    const handleItemSelect = (e: CustomEvent<IAutocompleteItem>) => {\n      const autocomplete = (e.target as HTMLInputElement).closest(\n        'modus-wc-autocomplete'\n      );\n\n      if (autocomplete) {\n        args.items = args.items.map((item) =>\n          item.value === e.detail.value ? { ...item, selected: true } : item\n        );\n        autocomplete.items = [...args.items];\n        autocomplete.value = '';\n      }\n    };\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      const autocomplete = (e.target as HTMLInputElement).closest(\n        'modus-wc-autocomplete'\n      );\n\n      if (!autocomplete) return;\n\n      // Initialize initialNavigation if undefined\n      if (args.initialNavigation === undefined) {\n        args.initialNavigation = true;\n      }\n\n      // Prevent default for navigation keys\n      if (['ArrowDown', 'ArrowUp', 'Enter'].includes(e.key)) {\n        e.preventDefault();\n      }\n\n      const visibleItems = args.items.filter(\n        (item) => item.visibleInMenu && !item.disabled\n      );\n      // Reset initial navigation when input value changes\n      if ((e.target as HTMLInputElement).value !== autocomplete.value) {\n        args.initialNavigation = true;\n      }\n\n      switch (e.key) {\n        case 'Escape':\n          args.items = args.items.map((item) => ({ ...item, focused: false }));\n          args.initialNavigation = true;\n          autocomplete.items = [...args.items];\n          return;\n\n        case 'ArrowDown':\n          if (args.initialNavigation) {\n            // On first arrow press, skip selection\n            args.initialNavigation = false;\n            return;\n          } else {\n            // Normal navigation\n            const currentFocusedIndex = visibleItems.findIndex(\n              (item) => item.focused\n            );\n            const nextIndex =\n              currentFocusedIndex < 0\n                ? 0\n                : Math.min(currentFocusedIndex + 1, visibleItems.length - 1);\n\n            args.items = args.items.map((item) => ({\n              ...item,\n              focused: visibleItems[nextIndex]?.value === item.value,\n            }));\n          }\n          break;\n\n        case 'ArrowUp':\n          if (args.initialNavigation) {\n            // On first arrow press, skip selection\n            args.initialNavigation = false;\n            return;\n          } else {\n            // Normal navigation\n            const currentFocusedIndex = visibleItems.findIndex(\n              (item) => item.focused\n            );\n            const prevIndex =\n              currentFocusedIndex < 0\n                ? visibleItems.length - 1\n                : Math.max(currentFocusedIndex - 1, 0);\n\n            args.items = args.items.map((item) => ({\n              ...item,\n              focused: visibleItems[prevIndex]?.value === item.value,\n            }));\n          }\n          break;\n\n        case 'Enter': {\n          const focusedItem = visibleItems.find((item) => item.focused);\n          if (focusedItem) {\n            args.items = args.items.map((item) => ({\n              ...item,\n              selected:\n                item.value === focusedItem.value\n                  ? !item.selected\n                  : item.selected,\n              focused: false,\n            }));\n            autocomplete.value = '';\n            args.initialNavigation = true; // Reset for next interaction\n          }\n          break;\n        }\n\n        default:\n          return;\n      }\n\n      autocomplete.items = [...args.items];\n    };\n\n    return html`\n      <style>\n        div#story--components-forms-autocomplete--multi-select-inner {\n          height: 400px;\n        }\n      </style>\n      <script>\n              // Initialize args.items if empty\n              if (!args.items || args.items.length === 0) {\n                args.items = [...items];\n              }\n\n              const handleChipRemove = (e: CustomEvent<IAutocompleteItem>) => {\n                const autocomplete = (e.target as HTMLInputElement).closest(\n                  'modus-wc-autocomplete'\n                );\n\n                if (autocomplete) {\n                  args.items = args.items.map((item) =>\n                    item.value === e.detail.value ? { ...item, selected: false } : item\n                  );\n                  autocomplete.items = [...args.items];\n                }\n              };\n\n              const handleInputChange = (e: CustomEvent<Event>) => {\n                if (!e.detail?.target) return;\n\n                const autocomplete = (e.target as HTMLInputElement).closest(\n                  'modus-wc-autocomplete'\n                );\n\n                if (autocomplete) {\n                  const input = e.detail.target as HTMLInputElement;\n                  const searchText = input.value.toLowerCase();\n\n                  const updatedItems = args.items.map((item) => ({\n                    ...item,\n                    visibleInMenu: item.label.toLowerCase().includes(searchText),\n                    focused: false,\n                  }));\n\n                  args.items = updatedItems;\n                  autocomplete.items = [...args.items];\n                  autocomplete.value = input.value;\n                  if (autocomplete.value) {\n                    args.initialNavigation = false;\n                  }\n                }\n              };\n\n              const handleBlur = () => {\n                args.initialNavigation = true;\n                args.items = args.items.map((item) => ({\n                  ...item,\n                  focused: false,\n                  visibleInMenu: true,\n                }));\n              };\n\n              const handleItemSelect = (e: CustomEvent<IAutocompleteItem>) => {\n                const autocomplete = (e.target as HTMLInputElement).closest(\n                  'modus-wc-autocomplete'\n                );\n\n          if (autocomplete) {\n            // Reset autocomplete 'value' and update the value of 'visibleInMenu' for all items.\n            autocomplete.value = '';\n            autocomplete.items = items.map((item) => ({\n              ...item,\n              visibleInMenu: true,\n            }));\n\n            // Mark the user selected item as selected.\n            const fruit = items.find((fruit) => fruit.value === e.detail.value);\n            if (fruit) {\n              fruit.selected = true;\n            }\n          }\n        };\n      </script>\n      <modus-wc-autocomplete\n        aria-label=\"Fruit autocomplete\"\n        ?bordered=${args.bordered}\n        custom-class=${ifDefined(args['custom-class'])}\n        debounce-ms=${ifDefined(args['debounce-ms'])}\n        ?disabled=${args.disabled}\n        input-id=${ifDefined(args['input-id'])}\n        input-tab-index=${ifDefined(args['input-tab-index'])}\n        .items=${args.items}\n        label=${ifDefined(args.label)}\n        ?leave-menu-open=${args['leave-menu-open']}\n        min-chars=${args['min-chars']}\n        ?multi-select=${true}\n        name=${ifDefined(args.name)}\n        .noResults=${args['no-results']}\n        placeholder=${ifDefined(args.placeholder)}\n        ?read-only=${args['read-only']}\n        ?required=${args.required}\n        size=${ifDefined(args.size)}\n        value=${args.value}\n        @chipRemove=${handleChipRemove}\n        @inputChange=${handleInputChange}\n        @itemSelect=${handleItemSelect}\n        @inputBlur=${handleBlur}\n        @keydown=${handleKeyDown}\n      ></modus-wc-autocomplete>\n    `;\n  },\n};\n\nexport const WithSpinner: Story = {\n  render: (args) => {\n    const handleInputChange = (e: CustomEvent<Event>) => {\n      if (!e.detail?.target) return;\n\n      const autocomplete = (e.target as HTMLInputElement).closest(\n        'modus-wc-autocomplete'\n      );\n\n      if (autocomplete) {\n        const input = e.detail.target as HTMLInputElement;\n        const searchText = input.value.toLowerCase();\n        // show the spinner for 2 seconds\n        setTimeout(() => {\n          autocomplete.showSpinner = false;\n        }, 2000);\n\n        autocomplete.showSpinner = true;\n        // Create a new array, updating the values of 'selected' and 'visibleInMenu'.\n        const updatedItems = items.map((item) => ({\n          ...item,\n          selected: searchText ? item.selected : false,\n          visibleInMenu: item.label.toLowerCase().includes(searchText),\n        }));\n\n        // Ensuring that a new array is created when updating items is critical to component re-render.\n        autocomplete.items = [...updatedItems];\n        autocomplete.value = input.value;\n      }\n    };\n\n    const handleItemSelect = (e: CustomEvent<IAutocompleteItem>) => {\n      const autocomplete = (e.target as HTMLInputElement).closest(\n        'modus-wc-autocomplete'\n      );\n\n      if (autocomplete) {\n        const label = e.detail.label;\n        if (label) {\n          autocomplete.value = label;\n        }\n\n        // Clear the previous selection.\n        items.forEach((item) => (item.selected = false));\n\n        // Mark the user selected menu item as selected and create a new array to update items.\n        const foundItem = items.find((item) => item.value === e.detail.value);\n        if (foundItem) {\n          foundItem.selected = true;\n          autocomplete.items = [...items];\n        }\n      }\n    };\n\n    // prettier-ignore\n    return html`\n<style>\n  /* Only for Storybook */\n  div[id^=\"story--components-forms-autocomplete--default\"] {\n    height: 400px;\n  }\n</style>\n<script>\n    const handleInputChange = (e: CustomEvent<Event>) => {\n      if (!e.detail?.target) return;\n\n      const autocomplete = (e.target as HTMLInputElement).closest(\n        'modus-wc-autocomplete'\n      );\n\n      if (autocomplete) {\n        const input = e.detail.target as HTMLInputElement;\n        const searchText = input.value.toLowerCase();\n        // show the spinner for 2 seconds\n        setTimeout(() => {\n          autocomplete.showSpinner = false;\n        }, 2000);\n\n        autocomplete.showSpinner = true;\n        // Create a new array, updating the values of 'selected' and 'visibleInMenu'.\n        const updatedItems = items.map((item) => ({\n          ...item,\n          selected: searchText ? item.selected : false,\n          visibleInMenu: item.label.toLowerCase().includes(searchText),\n        }));\n\n        // Ensuring that a new array is created when updating items is critical to component re-render.\n        autocomplete.items = [...updatedItems];\n        autocomplete.value = input.value;\n      }\n    };\n\n    const handleItemSelect = (e: CustomEvent<IAutocompleteItem>) => {\n      const autocomplete = (e.target as HTMLInputElement).closest(\n        'modus-wc-autocomplete'\n      );\n\n      if (autocomplete) {\n        const label = e.detail.label;\n        if (label) {\n          autocomplete.value = label;\n        }\n\n        // Clear the previous selection.\n        items.forEach((item) => (item.selected = false));\n\n        // Mark the user selected menu item as selected and create a new array to update items.\n        const foundItem = items.find((item) => item.value === e.detail.value);\n        if (foundItem) {\n          foundItem.selected = true;\n          autocomplete.items = [...items];\n        }\n      }\n    };\n</script>\n<modus-wc-autocomplete\n  aria-label=\"Fruit autocomplete\"\n  ?bordered=${args.bordered}\n  custom-class=${ifDefined(args['custom-class'])}\n  debounce-ms=${ifDefined(args['debounce-ms'])}\n  ?disabled=${args.disabled}\n  input-id=${ifDefined(args['input-id'])}\n  input-tab-index=${ifDefined(args['input-tab-index'])}\n  .items=${args.items}\n  label=${ifDefined(args.label)}\n  ?leave-menu-open=${args['leave-menu-open']}\n  min-chars=${args['min-chars']}\n  ?multi-select=${false}\n  name=${ifDefined(args.name)}\n  placeholder=${ifDefined(args.placeholder)}\n  ?read-only=${args['read-only']}\n  ?required=${args.required}\n  ?show-spinner=${args['show-spinner']}\n  size=${ifDefined(args.size)}\n  value=${args.value}\n  @inputChange=${handleInputChange}\n  @itemSelect=${handleItemSelect}\n></modus-wc-autocomplete>\n    `;\n  },\n};\n\nexport const CustomMenuItems: Story = {\n  render: (args) => {\n    const temp = args['no-results'];\n    if (args['leave-menu-open'] == true) {\n      args['no-results'] = {\n        ariaLabel: '',\n        label: '',\n        subLabel: '',\n      };\n    }\n    const handleInputChange = (e) => {\n      if (!e.detail?.target) return;\n\n      const autocomplete = (e.target as HTMLInputElement).closest(\n        'modus-wc-autocomplete'\n      );\n\n      if (autocomplete) {\n        const searchText = (e.detail.target as HTMLInputElement).value;\n\n        // Create a new array, updating the selected values.\n        const allLiItems = autocomplete?.querySelectorAll('li');\n        if (searchText === '') {\n          allLiItems?.forEach((liItem) => liItem.classList.remove('selected'));\n        }\n        let itemCount = 0;\n        Array.from(allLiItems ?? []).forEach((menuItem) => {\n          const label =\n            menuItem.querySelector('.title')?.textContent?.toLowerCase() || '';\n          if (!label.includes(searchText.toLowerCase())) {\n            menuItem.classList.add('hidden');\n            itemCount++;\n            if (itemCount === allLiItems?.length) {\n              autocomplete.noResults = temp;\n            }\n          } else {\n            menuItem.classList.remove('hidden');\n            autocomplete.noResults = {\n              ariaLabel: '',\n              label: '',\n              subLabel: '',\n            };\n          }\n        });\n      }\n    };\n    const handleFocus = (e) => {\n      const autocomplete = (e.target as HTMLInputElement).closest(\n        'modus-wc-autocomplete'\n      );\n\n      if (autocomplete) {\n        autocomplete.noResults = {\n          ariaLabel: '',\n          label: '',\n          subLabel: '',\n        };\n      }\n    };\n\n    const handleItemSelect = (e) => {\n      const autocomplete = (e.target as HTMLInputElement).closest(\n        'modus-wc-autocomplete'\n      );\n\n      if (autocomplete) {\n        const searchText = (e.detail.target as HTMLInputElement)?.value;\n\n        autocomplete.value = searchText;\n\n        const allLiItems = autocomplete?.querySelectorAll('li');\n        allLiItems?.forEach((liItem) => liItem.classList.remove('selected'));\n        allLiItems?.forEach((liItem) => {\n          if (liItem.contains(e.target as HTMLElement)) {\n            liItem.classList.add('selected');\n            autocomplete.value = liItem.querySelector('.title')\n              ?.textContent as string;\n          }\n        });\n      }\n    };\n\n    // prettier-ignore\n    return html`\n<style>\n  /* Only for Storybook */\n  div[id^=\"story--components-forms-autocomplete--custom-menu-items\"] {\n    height: 400px;\n  }\n  .list-item {\n    display: flex;\n    gap: 1rem;\n    border-bottom: 1px solid #ccc;\n  }\n  li.list-item.hidden {\n    display: none;\n  }\n  li.list-item img {\n    height: 28px;\n    width: 28px;\n  }\n  .item-info .title {\n    font-weight: 600;\n    margin-bottom: 0.25rem;\n  }\n  .item-info .description {\n    color: #666;\n    font-size: 0.875rem;\n  }\n  li.list-item.selected {\n    background-color: #dcedf9;\n  }\n  li.list-item .modus-wc-menu-item-selected-icon {\n    display: none;\n  }\n  li.list-item.selected .modus-wc-menu-item-selected-icon {\n    display: block;\n  }\n</style>\n<script>\n    const temp = args['no-results'];\n    if (args['leave-menu-open'] == true) {\n      args['no-results'] = {\n        ariaLabel: '',\n        label: '',\n        subLabel: '',\n      };\n    }\n    const handleInputChange = (e) => {\n      if (!e.detail?.target) return;\n\n      const autocomplete = (e.target as HTMLInputElement).closest(\n        'modus-wc-autocomplete'\n      );\n\n      if (autocomplete) {\n        const searchText = (e.detail.target as HTMLInputElement).value;\n\n        // Create a new array, updating the selected values.\n        const allLiItems = autocomplete?.querySelectorAll('li');\n        if (searchText === '') {\n          allLiItems?.forEach((liItem) => liItem.classList.remove('selected'));\n        }\n        let itemCount = 0;\n        Array.from(allLiItems ?? []).forEach((menuItem) => {\n          const label =\n            menuItem.querySelector('.title')?.textContent?.toLowerCase() || '';\n          if (!label.includes(searchText.toLowerCase())) {\n            menuItem.classList.add('hidden');\n            itemCount++;\n            if (itemCount === allLiItems?.length) {\n              autocomplete.noResults = temp;\n            }\n          } else {\n            menuItem.classList.remove('hidden');\n            autocomplete.noResults = {\n              ariaLabel: '',\n              label: '',\n              subLabel: '',\n            };\n          }\n        });\n      }\n    };\n    const handleFocus = (e) => {\n      const autocomplete = (e.target as HTMLInputElement).closest(\n        'modus-wc-autocomplete'\n      );\n\n      if (autocomplete) {\n        autocomplete.noResults = {\n          ariaLabel: '',\n          label: '',\n          subLabel: '',\n        };\n      }\n    };\n\n    const handleItemSelect = (e) => {\n      const autocomplete = (e.target as HTMLInputElement).closest(\n        'modus-wc-autocomplete'\n      );\n\n      if (autocomplete) {\n        const searchText = (e.detail.target as HTMLInputElement)?.value;\n\n        autocomplete.value = searchText;\n\n        const allLiItems = autocomplete?.querySelectorAll('li');\n        allLiItems?.forEach((liItem) => liItem.classList.remove('selected'));\n        allLiItems?.forEach((liItem) => {\n          if (liItem.contains(e.target as HTMLElement)) {\n            liItem.classList.add('selected');\n            autocomplete.value = liItem.querySelector('.title')\n              ?.textContent as string;\n          }\n        });\n      }\n    };\n</script>\n<modus-wc-autocomplete\n  aria-label=\"Custom items autocomplete\"\n  ?bordered=${args.bordered}\n  custom-class=${ifDefined(args['custom-class'])}\n  debounce-ms=${ifDefined(args['debounce-ms'])}\n  ?disabled=${args.disabled}\n  input-id=${ifDefined(args['input-id'])}\n  input-tab-index=${ifDefined(args['input-tab-index'])}\n  label=${ifDefined(args.label)}\n  ?leave-menu-open=${args['leave-menu-open']}\n  min-chars=${args['min-chars']}\n  ?multi-select=${false}\n  name=${ifDefined(args.name)}\n  .noResults=${args['no-results']}\n  placeholder=${ifDefined(args.placeholder)}\n  ?read-only=${args['read-only']}\n  ?required=${args.required}\n  size=${ifDefined(args.size)}\n  value=${args.value}\n  @inputFocus=${handleFocus}\n  @inputChange=${handleInputChange}\n>\n  <div slot=\"menu-items\" id=\"custom-menu-items\">\n    <li class=\"list-item\" @click=${handleItemSelect}>\n      <div class=\"item-info\">\n        <img\n          src=\"https://cdn-icons-png.flaticon.com/512/5166/5166970.png\"\n          alt=\"Project 1\"\n        />\n        <div>\n          <div class=\"title\">Project 1</div>\n          <div class=\"description\">Description</div>\n        </div>\n        <div class=\"modus-wc-menu-item-selected-icon\">\n          <modus-wc-icon\n            decorative=${true}\n            name=\"check\"\n            size=${ifDefined(args.size)}\n          />\n        </div>\n      </div>\n    </li>\n\n    <li class=\"list-item\" @click=${handleItemSelect}>\n      <div class=\"item-info\">\n        <img\n          src=\"https://cdn-icons-png.flaticon.com/512/1087/1087927.png\"\n          alt=\"Project 2\"\n        />\n        <div>\n          <div class=\"title\">Project 2</div>\n          <div class=\"description\">Description</div>\n        </div>\n        <div class=\"modus-wc-menu-item-selected-icon\">\n          <modus-wc-icon\n            decorative=${true}\n            name=\"check\"\n            size=${ifDefined(args.size)}\n          />\n        </div>\n      </div>\n    </li>\n\n    <li class=\"list-item\" @click=${handleItemSelect}>\n      <div class=\"item-info\">\n        <img\n          src=\"https://cdn-icons-png.flaticon.com/512/1659/1659067.png\"\n          alt=\"Project 3\"\n        />\n        <div>\n          <div class=\"title\">Project 3</div>\n          <div class=\"description\">Description</div>\n        </div>\n        <div class=\"modus-wc-menu-item-selected-icon\">\n          <modus-wc-icon\n            decorative=${true}\n            name=\"check\"\n            size=${ifDefined(args.size)}\n          />\n        </div>\n      </div>\n    </li>\n\n    <li class=\"list-item\" @click=${handleItemSelect}>\n      <div class=\"item-info\">\n        <img\n          src=\"https://cdn-icons-png.flaticon.com/512/1420/1420462.png\"\n          alt=\"Project 4\"\n        />\n        <div>\n          <div class=\"title\">Project 4</div>\n          <div class=\"description\">Description</div>\n        </div>\n        <div class=\"modus-wc-menu-item-selected-icon\">\n          <modus-wc-icon\n            decorative=${true}\n            name=\"check\"\n            size=${ifDefined(args.size)}\n          />\n        </div>\n      </div>\n    </li>\n\n    <li class=\"list-item\" @click=${handleItemSelect}>\n      <div class=\"item-info\">\n        <img\n          src=\"https://cdn-icons-png.flaticon.com/512/12959/12959935.png\"\n          alt=\"Project 5\"\n        />\n        <div>\n          <div class=\"title\">Project 5</div>\n          <div class=\"description\">Description</div>\n        </div>\n        <div class=\"modus-wc-menu-item-selected-icon\">\n          <modus-wc-icon\n            decorative=${true}\n            name=\"check\"\n            size=${ifDefined(args.size)}\n          />\n        </div>\n      </div>\n    </li>\n  </div>\n</modus-wc-autocomplete>\n`;\n  },\n};\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - In 1.0 input state was maintained by the component. 2.0 components encourage users to follow a controlled\n  input model. See the Form Inputs [documentation]([Angular](?path=/docs/documentation-form-inputs--docs) for\n  additional info and examples.\n  - To handle updating items in 2.0, simply create a new array of items and bind it to the \\`items\\` prop. The 1.0 prop\n  \\`filter-options\\` is no longer necessary.\n  - Size values have changed from verbose names (\\`small\\`, \\`medium\\`, \\`large\\`) to abbreviations (\\`sm\\`, \\`md\\`, \\`lg\\`).\n\n#### Prop Mapping\n\n| 1.0 Prop                      | 2.0 Prop            | Notes                                                       |\n|-------------------------------|---------------------|-------------------------------------------------------------|\n| aria-label                    | aria-label          |                                                             |\n| clearable                     |                     | Upcoming feature                                            |\n| disabled                      | disabled            |                                                             |\n| disable-close-on-select       | leave-menu-open     |                                                             |\n| dropdown-max-height           |                     | Not carried over, use CSS instead                           |\n| dropdown-z-index              |                     | Not carried over, use CSS instead                           |\n| error-text                    | feedback.message    | Use feedback level                                          |\n| filter-options                |                     | Rebind options                                              |\n| include-search-icon           |                     | Coming soon                                                 |\n| label                         | label               |                                                             |\n| loading                       |                     | Upcoming feature                                            |\n| multiple                      | multi-select        |                                                             |\n| no-results-found-text         | no-results.label    |                                                             |\n| no-results-found-subtext      | no-results.subLabel |                                                             |\n| options                       | items               |                                                             |\n| placeholder                   | placeholder         |                                                             |\n| read-only                     | read-only           |                                                             |\n| required                      | required            |                                                             |\n| show-no-results-found-message |                     | Not carried over, use \\`no-results\\` prop                   |\n| show-options-on-focus         |                     | Not carried over                                            |\n| size                          | size                | \\`small\\` \u2192 \\`sm\\`, \\`medium\\` \u2192 \\`md\\`, \\`large\\` \u2192 \\`lg\\` |\n| value                         | value               |                                                             |\n\n#### Event Mapping\n\n| 1.0 Event   | 2.0 Event   | Notes            |\n|-------------|-------------|------------------|\n| optionSelected ||\n| selectionsChanged ||\n| valueChange | inputChange |                  |\n\n#### Interfaces\n\n##### 1.0\n\n\\`\\`\\`typescript\ninterface ModusAutocompleteOption {\n  id: string;\n  value: string;\n}\n\\`\\`\\`\n\n##### 2.0\n\n\\`\\`\\`typescript\ninterface IAutocompleteItem {\n  label: string;\n  selected?: boolean;\n  value: string;\n  visibleInMenu: boolean;\n}\n\\`\\`\\`\n        `,\n      },\n    },\n    // To hide the actual story rendering and only show docs:\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  // Simple render function or leave it empty\n  render: () => html`<div></div>`,\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-autocomplete\n        aria-label=\"Fruit autocomplete\"\n        ?bordered=${args.bordered}\n        custom-class=${ifDefined(args['custom-class'])}\n        debounce-ms=${ifDefined(args['debounce-ms'])}\n        ?disabled=${args.disabled}\n        input-id=${ifDefined(args['input-id'])}\n        input-tab-index=${ifDefined(args['input-tab-index'])}\n        .items=${args.items}\n        label=${ifDefined(args.label)}\n        ?leave-menu-open=${args['leave-menu-open']}\n        min-chars=${args['min-chars']}\n        ?multi-select=${false}\n        name=${ifDefined(args.name)}\n        .noResults=${args['no-results']}\n        placeholder=${ifDefined(args.placeholder)}\n        ?read-only=${args['read-only']}\n        ?required=${args.required}\n        ?show-spinner=${args['show-spinner']}\n        size=${ifDefined(args.size)}\n        value=${args.value}\n        @inputChange=${handleInputChange}\n        @itemSelect=${handleItemSelect}\n        @inputBlur=${handleBlur}\n        @keydown=${handleKeyDown}\n      ></modus-wc-autocomplete>",
        "<modus-wc-autocomplete\n        aria-label=\"Fruit autocomplete\"\n        ?bordered=${args.bordered}\n        custom-class=${ifDefined(args['custom-class'])}\n        debounce-ms=${ifDefined(args['debounce-ms'])}\n        ?disabled=${args.disabled}\n        input-id=${ifDefined(args['input-id'])}\n        input-tab-index=${ifDefined(args['input-tab-index'])}\n        .items=${args.items}\n        label=${ifDefined(args.label)}\n        ?leave-menu-open=${args['leave-menu-open']}\n        min-chars=${args['min-chars']}\n        ?multi-select=${true}\n        name=${ifDefined(args.name)}\n        .noResults=${args['no-results']}\n        placeholder=${ifDefined(args.placeholder)}\n        ?read-only=${args['read-only']}\n        ?required=${args.required}\n        size=${ifDefined(args.size)}\n        value=${args.value}\n        @chipRemove=${handleChipRemove}\n        @inputChange=${handleInputChange}\n        @itemSelect=${handleItemSelect}\n        @inputBlur=${handleBlur}\n        @keydown=${handleKeyDown}\n      ></modus-wc-autocomplete>",
        "<modus-wc-autocomplete\n  aria-label=\"Fruit autocomplete\"\n  ?bordered=${args.bordered}\n  custom-class=${ifDefined(args['custom-class'])}\n  debounce-ms=${ifDefined(args['debounce-ms'])}\n  ?disabled=${args.disabled}\n  input-id=${ifDefined(args['input-id'])}\n  input-tab-index=${ifDefined(args['input-tab-index'])}\n  .items=${args.items}\n  label=${ifDefined(args.label)}\n  ?leave-menu-open=${args['leave-menu-open']}\n  min-chars=${args['min-chars']}\n  ?multi-select=${false}\n  name=${ifDefined(args.name)}\n  placeholder=${ifDefined(args.placeholder)}\n  ?read-only=${args['read-only']}\n  ?required=${args.required}\n  ?show-spinner=${args['show-spinner']}\n  size=${ifDefined(args.size)}\n  value=${args.value}\n  @inputChange=${handleInputChange}\n  @itemSelect=${handleItemSelect}\n></modus-wc-autocomplete>",
        "<modus-wc-icon\n            decorative=${true}\n            name=\"check\"\n            size=${ifDefined(args.size)}\n          />",
        "<modus-wc-icon\n            decorative=${true}\n            name=\"check\"\n            size=${ifDefined(args.size)}\n          />"
      ],
      "variants": [],
      "prop_usage": {
        "label": [
          "Fruit autocomplete",
          "Custom items autocomplete"
        ],
        "slot": [
          "menu-items"
        ],
        "id": [
          "custom-menu-items"
        ],
        "class": [
          "list-item",
          "item-info",
          "title",
          "description",
          "modus-wc-menu-item-selected-icon"
        ],
        "src": [
          "https://cdn-icons-png.flaticon.com/512/5166/5166970.png",
          "https://cdn-icons-png.flaticon.com/512/1087/1087927.png",
          "https://cdn-icons-png.flaticon.com/512/1659/1659067.png",
          "https://cdn-icons-png.flaticon.com/512/1420/1420462.png",
          "https://cdn-icons-png.flaticon.com/512/12959/12959935.png"
        ],
        "alt": [
          "Project 1",
          "Project 2",
          "Project 3",
          "Project 4",
          "Project 5"
        ],
        "name": [
          "check"
        ]
      }
    },
    "tag_name": "modus-wc-autocomplete"
  },
  "modus-wc-avatar": {
    "props": [
      {
        "name": "imgSrc",
        "description": "/**\n * A customizable avatar component used to create avatars with different images.\n */\n@Component({\n  tag: 'modus-wc-avatar',\n  styleUrl: 'modus-wc-avatar.scss',\n  shadow: false,\n})\nexport class ModusWcAvatar {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The image alt attribute for accessibility. */",
        "type": "string"
      }
    ],
    "events": [],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-wc-avatar.stories.ts ---\n\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { DaisySize } from '../types';\n\ninterface AvatarArgs {\n  alt: string;\n  'custom-class'?: string;\n  'img-src': string;\n  shape: string;\n  size: DaisySize;\n}\n\nconst meta: Meta<AvatarArgs> = {\n  title: 'Components/Avatar',\n  component: 'modus-wc-avatar',\n  args: {\n    alt: 'Example avatar',\n    'img-src':\n      'https://i.pinimg.com/474x/73/54/79/7354794bf3873c3ef2666f778da4bcac.jpg',\n    shape: 'circle',\n    size: 'md',\n  },\n  argTypes: {\n    shape: {\n      control: { type: 'select' },\n      options: ['circle', 'square'],\n    },\n    size: {\n      control: { type: 'select' },\n      options: ['xs', 'sm', 'md', 'lg'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<AvatarArgs>;\n\nconst Template: Story = {\n  render: (args) => {\n    return html`\n      <modus-wc-avatar\n        alt=\"${args.alt}\"\n        aria-label=\"Avatar\"\n        custom-class=\"${ifDefined(args['custom-class'])}\"\n        img-src=\"${args['img-src']}\"\n        shape=\"${args.shape}\"\n        size=\"${args.size}\"\n      ></modus-wc-avatar>\n    `;\n  },\n};\n\nexport const Default: Story = { ...Template };\n",
    "storybook": {
      "examples": [
        "<modus-wc-avatar\n        alt=\"${args.alt}\"\n        aria-label=\"Avatar\"\n        custom-class=\"${ifDefined(args['custom-class'])}\"\n        img-src=\"${args['img-src']}\"\n        shape=\"${args.shape}\"\n        size=\"${args.size}\"\n      ></modus-wc-avatar>",
        "\n      <modus-wc-avatar\n        alt=\"${args.alt}\"\n        aria-label=\"Avatar\"\n        custom-class=\"${ifDefined(args['custom-class'])}\"\n        img-src=\"${args['img-src']}\"\n        shape=\"${args.shape}\"\n        size=\"${args.size}\"\n      ></modus-wc-avatar>\n    "
      ],
      "variants": [],
      "prop_usage": {
        "alt": [
          "${args.alt}"
        ],
        "label": [
          "Avatar"
        ],
        "class": [
          "${ifDefined(args["
        ],
        "src": [
          "${args["
        ],
        "shape": [
          "${args.shape}"
        ],
        "size": [
          "${args.size}"
        ]
      }
    },
    "tag_name": "modus-wc-avatar"
  },
  "modus-wc-badge": {
    "props": [
      {
        "name": "color",
        "description": "/**\n * A customizable badge component used to create badges with different sizes, types, and colors.\n *\n * The component supports a `<slot>` for injecting content within the badge.\n */\n@Component({\n  tag: 'modus-wc-badge',\n  styleUrl: 'modus-wc-badge.scss',\n  shadow: false,\n})\nexport class ModusWcBadge {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The color variant of the badge. */",
        "type": "| 'primary'\n    | 'secondary'\n    | 'tertiary'\n    | 'high-contrast'\n    | 'success'\n    | 'warning'\n    | 'danger'"
      },
      {
        "name": "customClass",
        "description": "/**\n * A customizable badge component used to create badges with different sizes, types, and colors.\n *\n * The component supports a `<slot>` for injecting content within the badge.\n */\n@Component({\n  tag: 'modus-wc-badge',\n  styleUrl: 'modus-wc-badge.scss',\n  shadow: false,\n})\nexport class ModusWcBadge {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The color variant of the badge. */",
        "type": "string"
      },
      {
        "name": "size",
        "description": "/**\n * A customizable badge component used to create badges with different sizes, types, and colors.\n *\n * The component supports a `<slot>` for injecting content within the badge.\n */\n@Component({\n  tag: 'modus-wc-badge',\n  styleUrl: 'modus-wc-badge.scss',\n  shadow: false,\n})\nexport class ModusWcBadge {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The color variant of the badge. */",
        "type": "ModusSize"
      },
      {
        "name": "variant",
        "description": "/**\n * A customizable badge component used to create badges with different sizes, types, and colors.\n *\n * The component supports a `<slot>` for injecting content within the badge.\n */\n@Component({\n  tag: 'modus-wc-badge',\n  styleUrl: 'modus-wc-badge.scss',\n  shadow: false,\n})\nexport class ModusWcBadge {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The color variant of the badge. */",
        "type": "'counter' | 'filled' | 'text'"
      }
    ],
    "events": [],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-wc-badge.stories.ts ---\n\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { ModusSize } from '../types';\n\ninterface BadgeArgs {\n  color:\n    | 'primary'\n    | 'secondary'\n    | 'tertiary'\n    | 'high-contrast'\n    | 'success'\n    | 'warning'\n    | 'danger';\n  'custom-class'?: string;\n  size: ModusSize;\n  variant: 'counter' | 'filled' | 'text';\n}\n\nconst meta: Meta<BadgeArgs> = {\n  title: 'Components/Badge',\n  component: 'modus-wc-badge',\n  args: {\n    color: 'primary',\n    size: 'md',\n    variant: 'filled',\n  },\n  argTypes: {\n    color: {\n      control: { type: 'select' },\n      options: [\n        'primary',\n        'secondary',\n        'tertiary',\n        'high-contrast',\n        'success',\n        'warning',\n        'danger',\n      ],\n    },\n    size: {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg'],\n    },\n    variant: {\n      control: { type: 'select' },\n      options: ['counter', 'filled', 'text'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<BadgeArgs>;\n\nconst Template: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<modus-wc-badge\n  color=\"${args.color}\"\n  custom-class=\"${ifDefined(args['custom-class'])}\"\n  size=\"${args.size}\"\n  variant=\"${args.variant}\"\n>\n  Badge\n</modus-wc-badge>\n    `;\n  },\n};\n\nexport const Default: Story = {\n  ...Template,\n};\n\nexport const WithIcon: Story = {\n  render: () => {\n    // prettier-ignore\n    return html`\n<style>\n  .modus-wc-icon {\n    padding-inline-end: 4px;\n  }\n</style>\n<modus-wc-badge>\n  <modus-wc-icon decorative name=\"check\" size=\"xs\"></modus-wc-icon>\n  Item\n</modus-wc-badge>\n    `;\n  },\n};\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - The \\`dark\\` color option is now \\`high-contrast\\`\n  - The \\`type\\` prop is now \\`variant\\` and \\`default\\` type is now \\`filled\\`\n  - Size values have changed from verbose names (\\`small\\`, \\`medium\\`, \\`large\\`) to abbreviations (\\`sm\\`, \\`md\\`, \\`lg\\`).\n\n#### Prop Mapping\n\n| 1.0 Prop   | 2.0 Prop   | Notes                                                       |\n|------------|------------|-------------------------------------------------------------|\n| aria-label | aria-label |                                                             |\n| color      | color      | \\`dark\\` is now \\`high-contrast\\`                           |\n| size       | size       | \\`small\\` \u2192 \\`sm\\`, \\`medium\\` \u2192 \\`md\\`, \\`large\\` \u2192 \\`lg\\` |\n| type       | variant    | \\`default\\` is now \\`filled\\`                               |\n        `,\n      },\n    },\n    // To hide the actual story rendering and only show docs:\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  // Simple render function or leave it empty\n  render: () => html`<div></div>`,\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-badge\n  color=\"${args.color}\"\n  custom-class=\"${ifDefined(args['custom-class'])}\"\n  size=\"${args.size}\"\n  variant=\"${args.variant}\"\n>\n  Badge\n</modus-wc-badge>",
        "<modus-wc-icon decorative name=\"check\" size=\"xs\"></modus-wc-icon>",
        "\n<modus-wc-badge\n  color=\"${args.color}\"\n  custom-class=\"${ifDefined(args['custom-class'])}\"\n  size=\"${args.size}\"\n  variant=\"${args.variant}\"\n>\n  Badge\n</modus-wc-badge>\n    ",
        "\n<style>\n  .modus-wc-icon {\n    padding-inline-end: 4px;\n  }\n</style>\n<modus-wc-badge>\n  <modus-wc-icon decorative name=\"check\" size=\"xs\"></modus-wc-icon>\n  Item\n</modus-wc-badge>\n    "
      ],
      "variants": [
        "${args.variant}"
      ],
      "prop_usage": {
        "color": [
          "${args.color}"
        ],
        "class": [
          "${ifDefined(args["
        ],
        "size": [
          "${args.size}",
          "xs"
        ],
        "variant": [
          "${args.variant}"
        ],
        "name": [
          "check"
        ]
      }
    },
    "tag_name": "modus-wc-badge"
  },
  "modus-wc-breadcrumbs": {
    "props": [
      {
        "name": "items",
        "description": "/** The text to render in the breadcrumb. */\n  label: string;\n  /** The URL emitted when the breadcrumb is clicked. */\n  url?: string;\n}\n\n/**\n * A customizable breadcrumbs component used to help users navigate through a website.\n */\n@Component({\n  tag: 'modus-wc-breadcrumbs',\n  styleUrl: 'modus-wc-breadcrumbs.scss',\n  shadow: false,\n})\nexport class ModusWcBreadcrumbs {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The breadcrumbs to render. */",
        "type": "IBreadcrumb[]"
      }
    ],
    "events": [],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-wc-breadcrumbs.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { IBreadcrumb } from './modus-wc-breadcrumbs';\nimport { DaisySize } from '../types';\n\nconst items: IBreadcrumb[] = [\n  {\n    label: 'Root',\n    url: '#',\n  },\n  {\n    label: 'Subpage',\n    url: '#',\n  },\n  {\n    label: 'Current Page',\n    url: '#',\n  },\n];\n\ninterface BreadcrumbArgs {\n  'custom-class'?: string;\n  items: IBreadcrumb[];\n  size?: DaisySize;\n}\n\nconst meta: Meta<BreadcrumbArgs> = {\n  title: 'Components/Breadcrumbs',\n  component: 'modus-wc-breadcrumbs',\n  args: {\n    items,\n    size: 'md',\n  },\n  argTypes: {\n    items: {\n      description: 'Array of items for the breadcrumbs component',\n      table: {\n        type: {\n          detail: `\n            Interface: IBreadcrumb\n            Properties:\n            - label (string): The text to render in the breadcrumb\n            - url (string, optional): The URL emitted when the breadcrumb is clicked\n          `,\n        },\n      },\n    },\n    size: {\n      control: {\n        type: 'select',\n      },\n      options: ['xs', 'sm', 'md', 'lg'],\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['breadcrumbClick'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<BreadcrumbArgs>;\n\nconst Template: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<modus-wc-breadcrumbs\n  custom-class=${ifDefined(args['custom-class'])}\n  .items=${args.items}\n  size=${ifDefined(args.size)}\n></modus-wc-breadcrumbs>\n    `;\n  },\n};\n\nexport const Default: Story = { ...Template };\n\nexport const UnderlineLinks: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<style>\n  .underline-links a {\n    text-decoration: underline;\n  }\n</style>\n<modus-wc-breadcrumbs\n  custom-class=\"underline-links\"\n  .items=${args.items}\n  size=${ifDefined(args.size)}\n></modus-wc-breadcrumbs>\n    `;\n  },\n};\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - The structure of the breadcrumb \\`items\\` has changed from \\`Crumb\\` interface to \\`IBreadcrumb\\` interface.\n  - Underlined links are now applied using a custom class rather than a dedicated prop.\n\n#### Prop Mapping\n\n| 1.0 Prop        | 2.0 Prop      | Notes                                               |\n|-----------------|---------------|-----------------------------------------------------|\n| aria-label      | aria-label    |                                                     |\n| crumbs          | items         | Interface changed from \\`Crumb\\` to \\`IBreadcrumb\\` |\n| underline-links |               | Not carried over, use CSS instead                   |\n\n#### Event Mapping\n\n| 1.0 Event  | 2.0 Event       | Notes                                             |\n|------------|-----------------|---------------------------------------------------|\n| crumbClick | breadcrumbClick | Payload changed from \\`Crumb\\` to \\`IBreadcrumb\\` |\n\n#### Interfaces\n\n##### 1.0:\n\\`\\`\\`typescript\ninterface Crumb {\n  display: string;\n  id: string;\n}\n\\`\\`\\`\n\n##### 2.0:\n\\`\\`\\`typescript\ninterface IBreadcrumb {\n  label: string;\n  url?: string;\n}\n\\`\\`\\`\n        `,\n      },\n    },\n    // To hide the actual story rendering and only show docs:\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  // Simple render function or leave it empty\n  render: () => html`<div></div>`,\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-breadcrumbs\n  custom-class=${ifDefined(args['custom-class'])}\n  .items=${args.items}\n  size=${ifDefined(args.size)}\n></modus-wc-breadcrumbs>",
        "<modus-wc-breadcrumbs\n  custom-class=\"underline-links\"\n  .items=${args.items}\n  size=${ifDefined(args.size)}\n></modus-wc-breadcrumbs>",
        "\n<modus-wc-breadcrumbs\n  custom-class=${ifDefined(args['custom-class'])}\n  .items=${args.items}\n  size=${ifDefined(args.size)}\n></modus-wc-breadcrumbs>\n    ",
        "\n<style>\n  .underline-links a {\n    text-decoration: underline;\n  }\n</style>\n<modus-wc-breadcrumbs\n  custom-class=\"underline-links\"\n  .items=${args.items}\n  size=${ifDefined(args.size)}\n></modus-wc-breadcrumbs>\n    "
      ],
      "variants": [],
      "prop_usage": {
        "class": [
          "underline-links"
        ]
      }
    },
    "tag_name": "modus-wc-breadcrumbs"
  },
  "modus-wc-button": {
    "props": [
      {
        "name": "color",
        "description": "/**\n * A customizable button component used to create buttons with different sizes, variants, and types.\n *\n * The component supports a `<slot>` for injecting content within the button, similar to a native HTML button\n */\n@Component({\n  tag: 'modus-wc-button',\n  styleUrl: 'modus-wc-button.scss',\n  shadow: false,\n})\nexport class ModusWcButton {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The color variant of the button. */",
        "type": "'primary' | 'secondary' | 'tertiary' | 'warning' | 'danger'"
      },
      {
        "name": "shape",
        "description": "/**\n * A customizable button component used to create buttons with different sizes, variants, and types.\n *\n * The component supports a `<slot>` for injecting content within the button, similar to a native HTML button\n */\n@Component({\n  tag: 'modus-wc-button',\n  styleUrl: 'modus-wc-button.scss',\n  shadow: false,\n})\nexport class ModusWcButton {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The color variant of the button. */",
        "type": "'circle' | 'rectangle' | 'square'"
      },
      {
        "name": "size",
        "description": "/**\n * A customizable button component used to create buttons with different sizes, variants, and types.\n *\n * The component supports a `<slot>` for injecting content within the button, similar to a native HTML button\n */\n@Component({\n  tag: 'modus-wc-button',\n  styleUrl: 'modus-wc-button.scss',\n  shadow: false,\n})\nexport class ModusWcButton {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The color variant of the button. */",
        "type": "DaisySize"
      },
      {
        "name": "type",
        "description": "/**\n * A customizable button component used to create buttons with different sizes, variants, and types.\n *\n * The component supports a `<slot>` for injecting content within the button, similar to a native HTML button\n */\n@Component({\n  tag: 'modus-wc-button',\n  styleUrl: 'modus-wc-button.scss',\n  shadow: false,\n})\nexport class ModusWcButton {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The color variant of the button. */",
        "type": "'button' | 'submit' | 'reset'"
      },
      {
        "name": "variant",
        "description": "/**\n * A customizable button component used to create buttons with different sizes, variants, and types.\n *\n * The component supports a `<slot>` for injecting content within the button, similar to a native HTML button\n */\n@Component({\n  tag: 'modus-wc-button',\n  styleUrl: 'modus-wc-button.scss',\n  shadow: false,\n})\nexport class ModusWcButton {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The color variant of the button. */",
        "type": "'borderless' | 'filled' | 'outlined'"
      }
    ],
    "events": [],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-wc-button.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { DaisySize } from '../types';\n\ninterface ButtonArgs {\n  color: 'primary' | 'secondary' | 'tertiary' | 'warning' | 'danger';\n  'custom-class'?: string;\n  disabled: boolean;\n  'full-width': boolean;\n  pressed: boolean;\n  shape: 'circle' | 'rectangle' | 'square';\n  size: DaisySize;\n  type: 'button' | 'submit' | 'reset';\n  variant: 'borderless' | 'filled' | 'outlined';\n}\n\nconst meta: Meta<ButtonArgs> = {\n  title: 'Components/Button',\n  component: 'modus-wc-button',\n  args: {\n    color: 'primary',\n    disabled: false,\n    'full-width': false,\n    pressed: false,\n    shape: 'rectangle',\n    size: 'md',\n    type: 'button',\n    variant: 'filled',\n  },\n  argTypes: {\n    color: {\n      control: { type: 'select' },\n      options: ['primary', 'secondary', 'tertiary', 'warning', 'danger'],\n    },\n    shape: {\n      control: { type: 'select' },\n      options: ['circle', 'rectangle', 'square'],\n    },\n    size: {\n      control: { type: 'select' },\n      options: ['xs', 'sm', 'md', 'lg'],\n    },\n    type: {\n      control: { type: 'select' },\n      options: ['button', 'submit', 'reset'],\n    },\n    variant: {\n      control: { type: 'select' },\n      options: ['borderless', 'filled', 'outlined'],\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['buttonClick'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<ButtonArgs>;\n\nconst Template: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<modus-wc-button\n  aria-label=\"Click me button\"\n  color=\"${args.color}\"\n  custom-class=\"${ifDefined(args['custom-class'])}\"\n  ?disabled=\"${args.disabled}\"\n  ?full-width=\"${args['full-width']}\"\n  ?pressed=\"${args.pressed}\"\n  shape=\"${args.shape}\"\n  size=\"${args.size}\"\n  type=\"${args.type}\"\n  variant=\"${args.variant}\"\n>\n  Click me\n</modus-wc-button>\n    `;\n  },\n};\n\nexport const Default: Story = {\n  ...Template,\n};\n\nexport const ButtonShapes: Story = {\n  render: () => {\n    // prettier-ignore\n    return html`\n<modus-wc-button\n  aria-label=\"Circle button\"\n  shape=\"circle\"\n>\n  Circle\n</modus-wc-button>\n<modus-wc-button\n  aria-label=\"Square button\"\n  shape=\"square\"\n>\n  Square\n</modus-wc-button>\n    `;\n  },\n};\n\nexport const IconOnlyButton: Story = {\n  render: () => {\n    // prettier-ignore\n    return html`\n<modus-wc-button aria-label=\"Notification button\">\n  <modus-wc-icon decorative name=\"notifications\"></modus-wc-icon>\n</modus-wc-button>\n    `;\n  },\n};\n\nexport const IconLeftButton: Story = {\n  render: () => {\n    // prettier-ignore\n    return html`\n<modus-wc-button aria-label=\"Download button\">\n  <modus-wc-icon decorative name=\"download\"></modus-wc-icon>\n  Download\n</modus-wc-button>\n    `;\n  },\n};\n\nexport const IconRightButton: Story = {\n  render: () => {\n    // prettier-ignore\n    return html`\n<modus-wc-button aria-label=\"Details button\">\n  Details\n  <modus-wc-icon decorative name=\"launch\"></modus-wc-icon>\n</modus-wc-button>\n    `;\n  },\n};\n\nexport const IconLeftAndRightButton: Story = {\n  render: () => {\n    // prettier-ignore\n    return html`\n<modus-wc-button aria-label=\"Checkout button\">\n  <modus-wc-icon decorative name=\"shopping_cart\"></modus-wc-icon>\n  Checkout\n  <modus-wc-icon decorative name=\"shopping_cart\"></modus-wc-icon>\n</modus-wc-button>\n    `;\n  },\n};\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - In 1.0 buttons had specific properties for adding icons (\\`icon-only\\`, \\`left-icon\\`, \\`right-icon\\`). In 2.0, icons are added via slots using the \\`modus-wc-icon\\` component.\n  - The \\`button-style\\` property has been renamed to \\`variant\\` with similar options.\n  - Size values have changed from verbose names (\\`small\\`, \\`medium\\`, \\`large\\`) to abbreviations (\\`sm\\`, \\`md\\`, \\`lg\\`).\n\n#### Prop Mapping\n\n| 1.0 Prop        | 2.0 Prop   | Notes                                                       |\n|-----------------|------------|-------------------------------------------------------------|\n| aria-label      | aria-label |                                                             |\n| button-style    | variant    | \\`fill\\` \u2192 \\`filled\\`, \\`outline\\` \u2192 \\`outlined\\`           |\n| color           | color      | \\`dark\\` and \\`special\\` removed, \\`warning\\` added         |\n| critical-action |            | Not carried over                                            |\n| disabled        | disabled   |                                                             |\n| icon-only       |            | Not carried over, use \\`icon\\` slot                         |\n| left-icon       |            | Not carried over, use \\`icon\\` slot                         |\n| right-icon      |            | Not carried over, use \\`icon\\` slot                         |\n| show-caret      |            | Not carried over                                            |\n| size            | size       | \\`small\\` \u2192 \\`sm\\`, \\`medium\\` \u2192 \\`md\\`, \\`large\\` \u2192 \\`lg\\` |\n| type            | type       |                                                             |\n\n#### Event Mapping\n\n| 1.0 Event    | 2.0 Event    | Notes            |\n|--------------|--------------|------------------|\n| buttonClick  | buttonClick  |                  |\n        `,\n      },\n    },\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  render: () => html`<div></div>`,\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-button\n  aria-label=\"Click me button\"\n  color=\"${args.color}\"\n  custom-class=\"${ifDefined(args['custom-class'])}\"\n  ?disabled=\"${args.disabled}\"\n  ?full-width=\"${args['full-width']}\"\n  ?pressed=\"${args.pressed}\"\n  shape=\"${args.shape}\"\n  size=\"${args.size}\"\n  type=\"${args.type}\"\n  variant=\"${args.variant}\"\n>\n  Click me\n</modus-wc-button>",
        "<modus-wc-button\n  aria-label=\"Circle button\"\n  shape=\"circle\"\n>\n  Circle\n</modus-wc-button>",
        "<modus-wc-button\n  aria-label=\"Square button\"\n  shape=\"square\"\n>\n  Square\n</modus-wc-button>",
        "<modus-wc-icon decorative name=\"notifications\"></modus-wc-icon>",
        "<modus-wc-icon decorative name=\"download\"></modus-wc-icon>"
      ],
      "variants": [
        "${args.variant}"
      ],
      "prop_usage": {
        "label": [
          "Click me button",
          "Circle button",
          "Square button",
          "Notification button",
          "Download button",
          "Details button",
          "Checkout button"
        ],
        "color": [
          "${args.color}"
        ],
        "class": [
          "${ifDefined(args["
        ],
        "disabled": [
          "${args.disabled}"
        ],
        "width": [
          "${args["
        ],
        "pressed": [
          "${args.pressed}"
        ],
        "shape": [
          "${args.shape}",
          "circle",
          "square"
        ],
        "size": [
          "${args.size}"
        ],
        "type": [
          "${args.type}"
        ],
        "variant": [
          "${args.variant}"
        ],
        "name": [
          "notifications",
          "download",
          "launch",
          "shopping_cart"
        ]
      }
    },
    "tag_name": "modus-wc-button"
  },
  "modus-wc-card": {
    "props": [],
    "events": [],
    "slots": [
      "header",
      "title",
      "subtitle",
      "actions",
      "footer"
    ],
    "default_values": {},
    "documentation": "\n\n--- modus-wc-card.stories.ts ---\n\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\n\ninterface CardArgs {\n  'background-figure'?: boolean;\n  bordered?: boolean;\n  'custom-class'?: string;\n  layout?: 'vertical' | 'horizontal';\n  padding?: 'normal' | 'compact';\n}\n\nconst meta: Meta<CardArgs> = {\n  title: 'Components/Card',\n  component: 'modus-wc-card',\n  args: {\n    'background-figure': false,\n    bordered: false,\n    layout: 'vertical',\n    padding: 'normal',\n  },\n  argTypes: {\n    layout: {\n      control: { type: 'select' },\n      options: ['vertical', 'horizontal'],\n    },\n    padding: {\n      control: { type: 'select' },\n      options: ['normal', 'compact'],\n    },\n  },\n  parameters: {\n    layout: 'padded',\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<CardArgs>;\n\nconst Template: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<style>\n  .modus-wc-card {\n    width: 400px;\n  }\n</style>\n<modus-wc-card\n  aria-label=\"Sample card\"\n  ?background-figure=${args['background-figure']}\n  ?bordered=${args.bordered}\n  custom-class=${ifDefined(args['custom-class'])}\n  layout=${ifDefined(args.layout)}\n  padding=${ifDefined(args.padding)}\n>\n  <span slot=\"title\">Card Title</span>\n  <span slot=\"subtitle\">Card Subtitle</span>\n  <p>This is a sample card content. You can place any content here.</p>\n  <div slot=\"actions\" class=\"modus-wc-justify-end\">\n    <modus-wc-button aria-label=\"Click me\">Click me</modus-wc-button>\n  </div>\n</modus-wc-card>\n    `;\n  },\n};\n\nexport const Default: Story = {\n  ...Template,\n};\n\nexport const SimpleCard: Story = {\n  ...Template,\n  // prettier-ignore\n  render: () => html`\n<modus-wc-card aria-label=\"Simple Card\">\n  Raw card content.\n</modus-wc-card>\n  `,\n};\n\nexport const SlotsLayout: Story = {\n  ...Template,\n  // prettier-ignore\n  render: (args) => html`\n<style>\n  .slot-box {\n    background: #ccccff;\n    border: 2px solid rebeccapurple;\n    color: rebeccapurple;\n    display: flex;\n    justify-content: center;\n  }\n</style>\n<modus-wc-card\n  aria-label=\"Card with all slots\"\n  ?background-figure=${args['background-figure']}\n  layout=${ifDefined(args.layout)}\n  padding=${ifDefined(args.padding)}\n>\n  <div slot=\"header\" class=\"slot-box\">Header Slot</div>\n  <div slot=\"title\" class=\"slot-box\">Title Slot</div>\n  <div slot=\"subtitle\" class=\"slot-box\">Subtitle Slot</div>\n  <div class=\"slot-box\">Default (Body) Slot</div>\n  <div slot=\"actions\" class=\"slot-box\">Actions Slot</div>\n  <div slot=\"footer\" class=\"slot-box\">Footer Slot</div>\n</modus-wc-card>\n  `,\n};\n\nexport const ComplexCard: Story = {\n  ...Template,\n  // prettier-ignore\n  render: (args) => html`\n<style>\n  #complex-card > .modus-wc-card:hover {\n    box-shadow:\n      0 20px 25px -5px rgba(0, 0, 0, 0.1),\n      0 8px 10px -6px rgba(0, 0, 0, 0.1);\n  }\n</style>\n<modus-wc-card\n  aria-label=\"Complex card with images and shadow\"\n  id=\"complex-card\"\n  ?background-figure=${args['background-figure']}\n  ?bordered=${args.bordered}\n  custom-class=${ifDefined(args['custom-class'])}\n  layout=${ifDefined(args.layout)}\n  padding=${ifDefined(args.padding)}\n>\n  <figure slot=\"header\">\n    <img\n      src=\"https://picsum.photos/id/643/750/300\"\n      alt=\"Header Image with Shadow\"\n    />\n  </figure>\n  <span slot=\"title\">Complex Card</span>\n  <span slot=\"subtitle\">With Shadow</span>\n  <p>\n    This is a more of a traditional Card, featuring a header image, content,\n    multiple buttons, and a larger shadow that appears on hover.\n  </p>\n  <div slot=\"actions\" class=\"modus-wc-justify-end\">\n    <modus-wc-button aria-label=\"Action 1\">Action 1</modus-wc-button>\n    <modus-wc-button aria-label=\"Action 2\">Action 2</modus-wc-button>\n  </div>\n</modus-wc-card>\n  `,\n};\n\nexport const HorizontalImage: Story = {\n  ...Template,\n  // prettier-ignore\n  render: (args) => html`\n<modus-wc-card\n  aria-label=\"Horizontal image card\"\n  ?background-figure=${args['background-figure']}\n  ?bordered=${args.bordered}\n  custom-class=${ifDefined(args['custom-class'])}\n  layout=\"horizontal\"\n  padding=${ifDefined(args.padding)}\n>\n  <figure slot=\"header\">\n    <img src=\"https://picsum.photos/id/1025/200/300\" alt=\"Horizontal Image\" />\n  </figure>\n  <p>This card uses a horizontal layout.</p>\n</modus-wc-card>\n  `,\n};\n\nexport const BackgroundFigureImage: Story = {\n  ...Template,\n  // prettier-ignore\n  render: (args) => html`\n<modus-wc-card\n  aria-label=\"Full image card\"\n  background-figure\n  ?bordered=${args.bordered}\n  custom-class=${ifDefined(args['custom-class'])}\n  layout=${ifDefined(args.layout)}\n  padding=${ifDefined(args.padding)}\n>\n  <figure slot=\"header\">\n    <img src=\"https://picsum.photos/id/1045/600/400\" alt=\"Full Image\" />\n  </figure>\n  <span slot=\"title\">Full Image Card</span>\n  <p>This card has a figure image in the background.</p>\n</modus-wc-card>\n  `,\n};\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - In 1.0, card dimensions were controlled via direct props. In 2.0, styling should be handled through CSS.\n  - Shadow effects on hover are now controlled via CSS rather than props.\n  - The card component in 2.0 focuses on layout and structure rather than specific styling.\n\n#### Prop Mapping\n\n| 1.0 Prop             | 2.0 Prop            | Notes                                |\n|----------------------|---------------------|--------------------------------------|\n| aria-label           | aria-label          |                                      |\n| border-radius        |                     | Not carried over, use CSS instead    |\n| height               |                     | Not carried over, use CSS instead    |\n| show-card-border     | bordered            |                                      |\n| show-shadow-on-hover |                     | Not carried over, use CSS instead    |\n| width                |                     | Not carried over, use CSS instead    |\n        `,\n      },\n    },\n    // To hide the actual story rendering and only show docs:\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  // Simple render function or leave it empty\n  render: () => html`<div></div>`,\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-button aria-label=\"Click me\">Click me</modus-wc-button>",
        "<modus-wc-card aria-label=\"Simple Card\">\n  Raw card content.\n</modus-wc-card>",
        "<modus-wc-button aria-label=\"Action 1\">Action 1</modus-wc-button>",
        "<modus-wc-button aria-label=\"Action 2\">Action 2</modus-wc-button>",
        "\n<style>\n  .modus-wc-card {\n    width: 400px;\n  }\n</style>\n<modus-wc-card\n  aria-label=\"Sample card\"\n  ?background-figure=${args['background-figure']}\n  ?bordered=${args.bordered}\n  custom-class=${ifDefined(args['custom-class'])}\n  layout=${ifDefined(args.layout)}\n  padding=${ifDefined(args.padding)}\n>\n  <span slot=\"title\">Card Title</span>\n  <span slot=\"subtitle\">Card Subtitle</span>\n  <p>This is a sample card content. You can place any content here.</p>\n  <div slot=\"actions\" class=\"modus-wc-justify-end\">\n    <modus-wc-button aria-label=\"Click me\">Click me</modus-wc-button>\n  </div>\n</modus-wc-card>\n    "
      ],
      "variants": [],
      "prop_usage": {
        "label": [
          "Sample card",
          "Click me",
          "Simple Card",
          "Card with all slots",
          "Complex card with images and shadow",
          "Action 1",
          "Action 2",
          "Horizontal image card",
          "Full image card"
        ],
        "slot": [
          "title",
          "subtitle",
          "actions",
          "header",
          "footer"
        ],
        "class": [
          "modus-wc-justify-end",
          "slot-box"
        ],
        "id": [
          "complex-card"
        ],
        "src": [
          "https://picsum.photos/id/643/750/300",
          "https://picsum.photos/id/1025/200/300",
          "https://picsum.photos/id/1045/600/400"
        ],
        "alt": [
          "Header Image with Shadow",
          "Horizontal Image",
          "Full Image"
        ],
        "layout": [
          "horizontal"
        ]
      }
    },
    "tag_name": "modus-wc-card"
  },
  "modus-wc-checkbox": {
    "props": [],
    "events": [],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-wc-checkbox.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { ModusSize } from '../types';\n\ninterface CheckboxArgs {\n  'custom-class'?: string;\n  disabled?: boolean;\n  indeterminate?: boolean;\n  'input-id'?: string;\n  'input-tab-index'?: number;\n  label?: string;\n  name?: string;\n  required?: boolean;\n  size?: ModusSize;\n  value: boolean;\n}\n\nconst meta: Meta<CheckboxArgs> = {\n  title: 'Components/Forms/Checkbox',\n  component: 'modus-wc-checkbox',\n  args: {\n    'custom-class': '',\n    disabled: false,\n    indeterminate: false,\n    label: 'Label',\n    name: '',\n    required: false,\n    size: 'md',\n    value: true,\n  },\n  argTypes: {\n    size: {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg'],\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['inputBlur', 'inputChange', 'inputFocus'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<CheckboxArgs>;\n\nexport const Default: Story = {\n  render: (args) => {\n    return html`\n      <modus-wc-checkbox\n        aria-label=\"Checkbox\"\n        custom-class=${ifDefined(args['custom-class'])}\n        ?disabled=${args.disabled}\n        .indeterminate=${args.indeterminate}\n        input-id=${ifDefined(args['input-id'])}\n        input-tab-index=${ifDefined(args['input-tab-index'])}\n        label=${ifDefined(args.label)}\n        name=${ifDefined(args.name)}\n        ?required=${args.required}\n        size=${ifDefined(args.size)}\n        .value=${args.value}\n      ></modus-wc-checkbox>\n    `;\n  },\n};\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - In 1.0 input state was maintained by the component. 2.0 components encourage users to follow a controlled\n  input model. See the Form Inputs [documentation]([Angular](?path=/docs/documentation-form-inputs--docs) for\n  additional info and examples.\n  - The \\`checked\\` prop is now \\`value\\` in 2.0.\n  - The \\`checkboxClick\\` event is now \\`inputChange\\` in 2.0.\n  - Size values have changed from verbose names (\\`small\\`, \\`medium\\`) to abbreviations (\\`sm\\`, \\`md\\`, \\`lg\\`).\n\n#### Prop Mapping\n\n| 1.0 Prop         | 2.0 Prop      | Notes                                   |\n|------------------|---------------|-----------------------------------------|\n| aria-label       | aria-label    |                                         |\n| checked          | value         |                                         |\n| disabled         | disabled      |                                         |\n| indeterminate    | indeterminate |                                         |\n| label            | label         |                                         |\n| size             | size          | \\`small\\` \u2192 \\`sm\\`, \\`medium\\` \u2192 \\`md\\` |\n| stop-propagation |               | Not carried over                        |\n\n#### Event Mapping\n\n| 1.0 Event     | 2.0 Event   | Notes                                                 |\n|---------------|-------------|-------------------------------------------------------|\n| checkboxClick | inputChange | Event now emits \\`InputEvent\\` instead of \\`boolean\\` |\n        `,\n      },\n    },\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  render: () => html`<div></div>`,\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-checkbox\n        aria-label=\"Checkbox\"\n        custom-class=${ifDefined(args['custom-class'])}\n        ?disabled=${args.disabled}\n        .indeterminate=${args.indeterminate}\n        input-id=${ifDefined(args['input-id'])}\n        input-tab-index=${ifDefined(args['input-tab-index'])}\n        label=${ifDefined(args.label)}\n        name=${ifDefined(args.name)}\n        ?required=${args.required}\n        size=${ifDefined(args.size)}\n        .value=${args.value}\n      ></modus-wc-checkbox>",
        "\n      <modus-wc-checkbox\n        aria-label=\"Checkbox\"\n        custom-class=${ifDefined(args['custom-class'])}\n        ?disabled=${args.disabled}\n        .indeterminate=${args.indeterminate}\n        input-id=${ifDefined(args['input-id'])}\n        input-tab-index=${ifDefined(args['input-tab-index'])}\n        label=${ifDefined(args.label)}\n        name=${ifDefined(args.name)}\n        ?required=${args.required}\n        size=${ifDefined(args.size)}\n        .value=${args.value}\n      ></modus-wc-checkbox>\n    "
      ],
      "variants": [],
      "prop_usage": {
        "label": [
          "Checkbox"
        ]
      }
    },
    "tag_name": "modus-wc-checkbox"
  },
  "modus-wc-chip": {
    "props": [],
    "events": [],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-wc-chip.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { ModusSize } from '../types';\n\ninterface ChipArgs {\n  active?: boolean;\n  'custom-class'?: string;\n  disabled?: boolean;\n  'has-error'?: boolean;\n  label: string;\n  'show-remove'?: boolean;\n  size: ModusSize;\n  variant: 'filled' | 'outline';\n}\n\nconst meta: Meta<ChipArgs> = {\n  title: 'Components/Chip',\n  component: 'modus-wc-chip',\n  args: {\n    label: 'Chip',\n    'show-remove': true,\n    size: 'md',\n    variant: 'filled',\n  },\n  argTypes: {\n    size: {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg'],\n    },\n    variant: {\n      control: { type: 'select' },\n      options: ['filled', 'outline'],\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['chipClick', 'chipRemove'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<ChipArgs>;\n\nconst Template: Story = {\n  render: (args) => {\n    return html` <modus-wc-chip\n      aria-label=\"Chip example\"\n      active=${ifDefined(args.active)}\n      disabled=${ifDefined(args.disabled)}\n      has-error=${ifDefined(args['has-error'])}\n      label=${args.label}\n      show-remove=${ifDefined(args['show-remove'])}\n      size=${args.size}\n      variant=${args.variant}\n    />`;\n  },\n};\n\nexport const Default: Story = { ...Template };\n\nexport const AvatarChip: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<modus-wc-chip\n  aria-label=\"Chip example\"\n  active=${ifDefined(args.active)}\n  disabled=${ifDefined(args.disabled)}\n  has-error=${ifDefined(args['has-error'])}\n  label=${args.label}\n  show-remove=${ifDefined(args['show-remove'])}\n  size=${args.size}\n  variant=${args.variant}\n>\n  <modus-wc-avatar\n    img-src=\"https://i.pinimg.com/474x/73/54/79/7354794bf3873c3ef2666f778da4bcac.jpg\"\n    alt=\"sonic the hedgehog\"\n  ></modus-wc-avatar>\n</modus-wc-chip>\n    `;\n  },\n};\n\nexport const CheckIconChip: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<modus-wc-chip\n  aria-label=\"Chip example\"\n  active=${ifDefined(args.active)}\n  disabled=${ifDefined(args.disabled)}\n  has-error=${ifDefined(args['has-error'])}\n  label=${args.label}\n  show-remove=${ifDefined(args['show-remove'])}\n  size=${args.size}\n  variant=${args.variant}\n>\n  <modus-wc-icon name=\"check\" size=\"xs\"></modus-wc-icon>\n</modus-wc-chip>\n    `;\n  },\n};\n\n// prettier-ignore\nexport const Composable: Story = {\n  render: (args) => {\n    return html`\n<modus-wc-chip\n  aria-label=\"Chip example\"\n  active=${ifDefined(args.active)}\n  disabled=${ifDefined(args.disabled)}\n  has-error=${ifDefined(args['has-error'])}\n  size=${args.size}\n  variant=${args.variant}\n>\n  <modus-wc-icon name=\"heart\" size=\"xs\"></modus-wc-icon>\n  Chip\n</modus-wc-chip>\n\n<modus-wc-chip\n  aria-label=\"Chip example\"\n  active=${ifDefined(args.active)}\n  disabled=${ifDefined(args.disabled)}\n  has-error=${ifDefined(args['has-error'])}\n  show-remove=\"true\"\n  size=${args.size}\n  variant=${args.variant}\n>\n  <modus-wc-icon name=\"heart\" size=\"xs\"></modus-wc-icon>\n  Chip\n</modus-wc-chip>\n\n<modus-wc-chip\n  aria-label=\"Chip example\"\n  active=${ifDefined(args.active)}\n  disabled=${ifDefined(args.disabled)}\n  has-error=${ifDefined(args['has-error'])}\n  size=${args.size}\n  variant=${args.variant}\n>\n  <modus-wc-icon name=\"heart\" size=\"xs\"></modus-wc-icon>\n  Chip\n  <modus-wc-icon name=\"heart\" size=\"xs\"></modus-wc-icon>\n</modus-wc-chip>\n    `;\n  },\n};\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - \\`chip-style\\` prop has been renamed to \\`variant\\` and values changed from \\`solid\\` to \\`filled\\`.\n  - \\`closeClick\\` event has been renamed to \\`chipRemove\\`.\n  - \\`show-close\\` prop has been renamed to \\`show-remove\\`.\n  - Size values have changed from verbose names (\\`medium\\`, \\`small\\`) to abbreviations (\\`md\\`, \\`sm\\`).\n\n#### Prop Mapping\n\n| 1.0 Prop       | 2.0 Prop    | Notes                                             |\n|----------------|-------------|---------------------------------------------------|\n| active         | active      |                                                   |\n| advanced-chip  |             | Not carried over                                  |\n| aria-label     | aria-label  |                                                   |\n| chip-id        |             | Not carried over                                  |\n| chip-style     | variant     | \\`solid\\` \u2192 \\`filled\\`, \\`outline\\` \u2192 \\`outline\\` |\n| disabled       | disabled    |                                                   |\n| has-error      | has-error   |                                                   |\n| image-url      |             | Not carried over, use slot instead                |\n| max-width      |             | Not carried over, use CSS instead                 |\n| show-checkmark |             | Not carried over, use slot instead                |\n| show-close     | show-remove |                                                   |\n| size           | size        | \\`medium\\` \u2192 \\`md\\`, \\`small\\` \u2192 \\`sm\\`           |\n| value          | label       |                                                   |\n\n#### Event Mapping\n\n| 1.0 Event   | 2.0 Event   | Notes |\n|-------------|-------------|-------|\n| chipClick  | chipClick  |       |\n| closeClick | chipRemove |       |\n        `,\n      },\n    },\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  render: () => html`<div></div>`,\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-avatar\n    img-src=\"https://i.pinimg.com/474x/73/54/79/7354794bf3873c3ef2666f778da4bcac.jpg\"\n    alt=\"sonic the hedgehog\"\n  ></modus-wc-avatar>",
        "<modus-wc-icon name=\"check\" size=\"xs\"></modus-wc-icon>",
        "<modus-wc-icon name=\"heart\" size=\"xs\"></modus-wc-icon>",
        "<modus-wc-icon name=\"heart\" size=\"xs\"></modus-wc-icon>",
        "<modus-wc-icon name=\"heart\" size=\"xs\"></modus-wc-icon>"
      ],
      "variants": [],
      "prop_usage": {
        "label": [
          "Chip example"
        ],
        "src": [
          "https://i.pinimg.com/474x/73/54/79/7354794bf3873c3ef2666f778da4bcac.jpg"
        ],
        "alt": [
          "sonic the hedgehog"
        ],
        "name": [
          "check",
          "heart"
        ],
        "size": [
          "xs"
        ],
        "remove": [
          "true"
        ]
      }
    },
    "tag_name": "modus-wc-chip"
  },
  "modus-wc-collapse": {
    "props": [],
    "events": [],
    "slots": [
      "header",
      "content"
    ],
    "default_values": {},
    "documentation": "\n\n--- modus-wc-collapse.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { ICollapseOptions } from './modus-wc-collapse';\n\ninterface CollapseArgs {\n  bordered?: boolean;\n  'custom-class'?: string;\n  expanded?: boolean;\n  id?: string;\n  options?: ICollapseOptions;\n}\n\nconst options: ICollapseOptions = {\n  title: 'Collapse Title',\n  description: 'Collapse description',\n  icon: 'alert',\n  iconAriaLabel: 'Alert',\n};\n\nconst meta: Meta<CollapseArgs> = {\n  title: 'Components/Collapse',\n  component: 'modus-wc-collapse',\n  args: { bordered: false, expanded: false, options },\n  argTypes: {\n    options: {\n      description: 'Configuration options for the collapse component',\n      table: {\n        type: {\n          detail: `\n            Interface: ICollapseOptions\n            Properties:\n            - description (string, optional): The description to render in the collapse header\n            - icon (string, optional): The Modus icon name to render in the collapse header\n            - iconAriaLabel (string, optional): The icon's aria-label\n            - size (DaisySize, optional): The size of the collapse header\n            - title (string): The title to render in the collapse header\n          `,\n        },\n      },\n    },\n  },\n  decorators: [withActions],\n  parameters: { actions: { handles: ['expandedChange'] }, layout: 'padded' },\n};\n\nexport default meta;\n\ntype Story = StoryObj<CollapseArgs>;\n\nconst Template: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<modus-wc-collapse\n  ?bordered=${args.bordered}\n  custom-class=${ifDefined(args['custom-class'])}\n  ?expanded=${args.expanded}\n  id=${ifDefined(args.id)}\n  .options=${args.options}\n>\n  <div slot=\"content\">Collapse content</div>\n</modus-wc-collapse>\n    `;\n  },\n};\n\nexport const Default: Story = { ...Template };\n\nexport const WithCustomClickableHeader = {\n  render: (args) => {\n    const handleButtonClick = () => {\n      window.alert('Button was clicked!');\n    };\n\n    // prettier-ignore\n    return html`\n<style>\n  .clickable-div {\n    position: relative;\n    width: fit-content;\n    z-index: 99;\n  }\n</style>\n<modus-wc-collapse\n  ?bordered=${args.bordered}\n  custom-class=${ifDefined(args['custom-class'])}\n  ?expanded=${args.expanded}\n  id=\"123\"\n>\n  <div slot=\"header\" class=\"modus-wc-collapse-title\" id=\"123\">\n    <div class=\"clickable-div\">\n      <modus-wc-button @buttonClick=${handleButtonClick}>Alert 1</modus-wc-button>\n      <modus-wc-button @buttonClick=${handleButtonClick}>Alert 2</modus-wc-button>\n    </div>\n  </div>\n  <div slot=\"content\">Collapse content</div>\n</modus-wc-collapse>\n    `;\n  },\n};\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - The 1.0 accordion-item component maps to the 2.0 collapse component. See the [Accordion component](?path=/docs/components-accordion--docs).\n  - Size values have changed from \\`condensed\\`, \\`standard\\` in 1.0 to abbreviations (\\`xs\\`, \\`sm\\`, \\`md\\`, \\`lg\\`) in 2.0.\n\n#### Prop Mapping\n\n##### accordion-item (1.0) \u2192 collapse (2.0)\n\n| 1.0 Prop           | 2.0 Prop            | Notes            |\n|--------------------|---------------------|------------------|\n| aria-label         | aria-label          |                  |\n| disabled           |                     | Not carried over |\n| expand-button-type |                     | Not carried over |\n| expanded           | expanded            |                  |\n| header-text        | options.title       |                  |\n| icon               | options.icon        |                  |\n| size               | options.size        |                  |\n| supporting-label   | options.description |                  |\n\n#### Event Mapping\n\n| 1.0 Event | 2.0 Event      | Notes            |\n|-----------|----------------|------------------|\n| closed    | expandedChange |                  |\n| opened    | expandedChange |                  |\n        `,\n      },\n    },\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  render: () => html`<div></div>`,\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-button @buttonClick=${handleButtonClick}>Alert 1</modus-wc-button>",
        "<modus-wc-button @buttonClick=${handleButtonClick}>Alert 2</modus-wc-button>",
        "\n<modus-wc-collapse\n  ?bordered=${args.bordered}\n  custom-class=${ifDefined(args['custom-class'])}\n  ?expanded=${args.expanded}\n  id=${ifDefined(args.id)}\n  .options=${args.options}\n>\n  <div slot=\"content\">Collapse content</div>\n</modus-wc-collapse>\n    ",
        "\n<style>\n  .clickable-div {\n    position: relative;\n    width: fit-content;\n    z-index: 99;\n  }\n</style>\n<modus-wc-collapse\n  ?bordered=${args.bordered}\n  custom-class=${ifDefined(args['custom-class'])}\n  ?expanded=${args.expanded}\n  id=\"123\"\n>\n  <div slot=\"header\" class=\"modus-wc-collapse-title\" id=\"123\">\n    <div class=\"clickable-div\">\n      <modus-wc-button @buttonClick=${handleButtonClick}>Alert 1</modus-wc-button>\n      <modus-wc-button @buttonClick=${handleButtonClick}>Alert 2</modus-wc-button>\n    </div>\n  </div>\n  <div slot=\"content\">Collapse content</div>\n</modus-wc-collapse>\n    "
      ],
      "variants": [],
      "prop_usage": {
        "slot": [
          "content",
          "header"
        ],
        "id": [
          "123"
        ],
        "class": [
          "modus-wc-collapse-title",
          "clickable-div"
        ]
      }
    },
    "tag_name": "modus-wc-collapse"
  },
  "modus-wc-date": {
    "props": [],
    "events": [],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-wc-date.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { IInputFeedbackProp, ModusSize } from '../types';\n\ninterface DateArgs {\n  bordered?: boolean;\n  'custom-class'?: string;\n  disabled?: boolean;\n  feedback?: IInputFeedbackProp;\n  'input-id'?: string;\n  'input-tab-index'?: number;\n  label?: string;\n  max?: string;\n  min?: string;\n  name?: string;\n  placeholder?: string;\n  'read-only'?: boolean;\n  required?: boolean;\n  size?: ModusSize;\n  value: string;\n}\n\nconst meta: Meta<DateArgs> = {\n  title: 'Components/Forms/Date',\n  component: 'modus-wc-date',\n  args: {\n    bordered: true,\n    'custom-class': '',\n    disabled: false,\n    label: 'Label',\n    'read-only': false,\n    required: false,\n    size: 'md',\n    value: '',\n  },\n  argTypes: {\n    feedback: {\n      description: 'Feedback prop for input components',\n      table: {\n        type: {\n          detail: `\n            Interface: IInputFeedbackProp\n            Properties:\n            - level ('error' | 'info' | 'success' | 'warning'): The feedback level\n            - message (string, optional): The feedback message\n          `,\n        },\n      },\n    },\n    size: {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg'],\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['inputBlur', 'inputChange', 'inputFocus'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<DateArgs>;\n\nexport const Default: Story = {\n  render: (args) => {\n    return html`\n      <modus-wc-date\n        aria-label=\"Date input\"\n        ?bordered=${args.bordered}\n        custom-class=${ifDefined(args['custom-class'])}\n        ?disabled=${args.disabled}\n        .feedback=${args.feedback}\n        input-id=${ifDefined(args['input-id'])}\n        input-tab-index=${ifDefined(args['input-tab-index'])}\n        label=${ifDefined(args.label)}\n        max=${ifDefined(args.max)}\n        min=${ifDefined(args.min)}\n        name=${ifDefined(args.name)}\n        placeholder=${ifDefined(args.placeholder)}\n        ?read-only=${args['read-only']}\n        ?required=${args.required}\n        size=${ifDefined(args.size)}\n        .value=${args.value}\n      ></modus-wc-date>\n    `;\n  },\n};\n\nconst errorFeedback: IInputFeedbackProp = {\n  level: 'error',\n  message: 'Value is required.',\n};\n\nexport const WithErrorFeedback: Story = {\n  render: (args) => html`\n    <modus-wc-date\n      aria-label=\"Date input\"\n      .feedback=${errorFeedback}\n      label=${ifDefined(args.label)}\n      ?required=${true}\n      .value=${args.value}\n    ></modus-wc-date>\n  `,\n};\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - In 1.0 input state was maintained by the component. 2.0 components encourage users to follow a controlled\n  input model. See the Form Inputs [documentation]([Angular](?path=/docs/documentation-form-inputs--docs) for\n  additional info and examples.\n  - Format handling is no longer supported. The component now uses the standard HTML date input format (ISO 8601 \\`yyyy-mm-dd\\`).\n  - Size values have changed from verbose names (\\`medium\\`, \\`large\\`) to abbreviations (\\`sm\\`, \\`md\\`, \\`lg\\`).\n\n#### Prop Mapping\n\n| 1.0 Prop           | 2.0 Prop         | Notes                                   |\n|--------------------|------------------|-----------------------------------------|\n| allow-chars-regex  |                  | Not carried over                        |\n| alt-formats        |                  | Not carried over                        |\n| aria-label         | aria-label       |                                         |\n| auto-focus-input   |                  | Not carried over                        |\n| disabled           | disabled         |                                         |\n| disable-validation |                  | Not carried over                        |\n| error-text         | feedback.message | Use \\`feedback\\` level                  |\n| filler-date        |                  | Not carried over                        |\n| format             |                  | Not carried over                        |\n| helper-text        |                  | Not carried over                        |\n| label              | label            |                                         |\n| max                | max              |                                         |\n| min                | min              |                                         |\n| placeholder        |                  | Not carried over                        |\n| read-only          | read-only        |                                         |\n| required           | required         |                                         |\n| show-calendar-icon |                  | Not carried over                        |\n| size               | size             | \\`medium\\` \u2192 \\`md\\`, \\`large\\` \u2192 \\`lg\\` |\n| type               |                  | Not carried over                        |\n| valid-text         | feedback.message | Use \\`feedback\\` level                  |\n| value              | value            |                                         |\n\n#### Event Mapping\n\n| 1.0 Event           | 2.0 Event   | Notes            |\n|---------------------|-------------|------------------|\n| calendarIconClicked |             | Not carried over |\n| dateInputBlur       | inputBlur   |                  |\n| valueChange         | inputChange |                  |\n| valueError          |             | Not carried over |\n        `,\n      },\n    },\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  render: () => html`<div></div>`,\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-date\n        aria-label=\"Date input\"\n        ?bordered=${args.bordered}\n        custom-class=${ifDefined(args['custom-class'])}\n        ?disabled=${args.disabled}\n        .feedback=${args.feedback}\n        input-id=${ifDefined(args['input-id'])}\n        input-tab-index=${ifDefined(args['input-tab-index'])}\n        label=${ifDefined(args.label)}\n        max=${ifDefined(args.max)}\n        min=${ifDefined(args.min)}\n        name=${ifDefined(args.name)}\n        placeholder=${ifDefined(args.placeholder)}\n        ?read-only=${args['read-only']}\n        ?required=${args.required}\n        size=${ifDefined(args.size)}\n        .value=${args.value}\n      ></modus-wc-date>",
        "<modus-wc-date\n      aria-label=\"Date input\"\n      .feedback=${errorFeedback}\n      label=${ifDefined(args.label)}\n      ?required=${true}\n      .value=${args.value}\n    ></modus-wc-date>",
        "\n      <modus-wc-date\n        aria-label=\"Date input\"\n        ?bordered=${args.bordered}\n        custom-class=${ifDefined(args['custom-class'])}\n        ?disabled=${args.disabled}\n        .feedback=${args.feedback}\n        input-id=${ifDefined(args['input-id'])}\n        input-tab-index=${ifDefined(args['input-tab-index'])}\n        label=${ifDefined(args.label)}\n        max=${ifDefined(args.max)}\n        min=${ifDefined(args.min)}\n        name=${ifDefined(args.name)}\n        placeholder=${ifDefined(args.placeholder)}\n        ?read-only=${args['read-only']}\n        ?required=${args.required}\n        size=${ifDefined(args.size)}\n        .value=${args.value}\n      ></modus-wc-date>\n    ",
        "\n    <modus-wc-date\n      aria-label=\"Date input\"\n      .feedback=${errorFeedback}\n      label=${ifDefined(args.label)}\n      ?required=${true}\n      .value=${args.value}\n    ></modus-wc-date>\n  "
      ],
      "variants": [],
      "prop_usage": {
        "label": [
          "Date input"
        ]
      }
    },
    "tag_name": "modus-wc-date"
  },
  "modus-wc-divider": {
    "props": [],
    "events": [],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-wc-divider.stories.ts ---\n\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { Orientation } from '../types';\n\ninterface DividerArgs {\n  color:\n    | 'primary'\n    | 'secondary'\n    | 'tertiary'\n    | 'high-contrast'\n    | 'success'\n    | 'warning'\n    | 'danger';\n  content: string;\n  'custom-class'?: string;\n  orientation: Orientation;\n  position: 'center' | 'end' | 'start';\n  responsive: boolean;\n}\n\nconst meta: Meta<DividerArgs> = {\n  title: 'Components/Divider',\n  component: 'modus-wc-divider',\n  args: {\n    color: 'tertiary',\n    content: '',\n    'custom-class': '',\n    orientation: 'vertical',\n    position: 'center',\n    responsive: true,\n  },\n  argTypes: {\n    color: {\n      control: { type: 'select' },\n      options: [\n        'primary',\n        'secondary',\n        'tertiary',\n        'high-contrast',\n        'success',\n        'warning',\n        'danger',\n      ],\n    },\n    content: {\n      control: 'text',\n    },\n    'custom-class': {\n      control: 'text',\n    },\n    orientation: {\n      control: { type: 'select' },\n      options: ['horizontal', 'vertical'],\n    },\n    position: {\n      control: { type: 'select' },\n      options: ['start', 'center', 'end'],\n    },\n    responsive: {\n      control: { type: 'boolean' },\n    },\n  },\n  parameters: {\n    layout: 'padded',\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<DividerArgs>;\n\nconst Template: Story = {\n  render: (args) => html`\n    <modus-wc-divider\n      aria-label=\"Divider\"\n      color=\"${args.color}\"\n      content=\"${args.content}\"\n      custom-class=\"${ifDefined(args['custom-class'])}\"\n      orientation=\"${args.orientation}\"\n      position=\"${args.position}\"\n      responsive=\"${args.responsive}\"\n      style=\"${args.orientation === 'horizontal'\n        ? 'display: flex; height: 100px'\n        : ''}\"\n    ></modus-wc-divider>\n  `,\n};\n\nexport const Default: Story = { ...Template };\n",
    "storybook": {
      "examples": [
        "<modus-wc-divider\n      aria-label=\"Divider\"\n      color=\"${args.color}\"\n      content=\"${args.content}\"\n      custom-class=\"${ifDefined(args['custom-class'])}\"\n      orientation=\"${args.orientation}\"\n      position=\"${args.position}\"\n      responsive=\"${args.responsive}\"\n      style=\"${args.orientation === 'horizontal'\n        ? 'display: flex; height: 100px'\n        : ''}\"\n    ></modus-wc-divider>",
        "\n    <modus-wc-divider\n      aria-label=\"Divider\"\n      color=\"${args.color}\"\n      content=\"${args.content}\"\n      custom-class=\"${ifDefined(args['custom-class'])}\"\n      orientation=\"${args.orientation}\"\n      position=\"${args.position}\"\n      responsive=\"${args.responsive}\"\n      style=\"${args.orientation === 'horizontal'\n        ? 'display: flex; height: 100px'\n        : ''}\"\n    ></modus-wc-divider>\n  "
      ],
      "variants": [],
      "prop_usage": {
        "label": [
          "Divider"
        ],
        "color": [
          "${args.color}"
        ],
        "content": [
          "${args.content}"
        ],
        "class": [
          "${ifDefined(args["
        ],
        "orientation": [
          "${args.orientation}"
        ],
        "position": [
          "${args.position}"
        ],
        "responsive": [
          "${args.responsive}"
        ],
        "style": [
          "${args.orientation === "
        ]
      }
    },
    "tag_name": "modus-wc-divider"
  },
  "modus-wc-icon": {
    "props": [],
    "events": [],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-wc-icon.stories.ts ---\n\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { DaisySize } from '../types';\n\ninterface IconArgs {\n  'custom-class'?: string;\n  decorative: boolean;\n  name: string;\n  size: DaisySize;\n}\n\nconst meta: Meta<IconArgs> = {\n  title: 'Components/Icon',\n  component: 'modus-wc-icon',\n  args: {\n    'custom-class': '',\n    decorative: false,\n    name: 'alert',\n    size: 'md',\n  },\n  argTypes: {\n    size: {\n      control: { type: 'select' },\n      options: ['xs', 'sm', 'md', 'lg'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<IconArgs>;\n\nconst Template: Story = {\n  render: (args) => {\n    return html`\n      <modus-wc-icon\n        aria-label=\"Alert icon\"\n        custom-class=\"${ifDefined(args['custom-class'])}\"\n        ?decorative=\"${args.decorative}\"\n        name=\"${args.name}\"\n        size=\"${args.size}\"\n      >\n      </modus-wc-icon>\n    `;\n  },\n};\n\nexport const Default: Story = { ...Template };\n\nexport const CustomColor: Story = {\n  render: (args) => {\n    return html`\n      <style>\n        .red-icon {\n          color: red;\n        }\n      </style>\n      <modus-wc-icon\n        aria-label=\"Red alert icon\"\n        custom-class=\"red-icon\"\n        name=\"alert\"\n        size=\"${args.size}\"\n      >\n      </modus-wc-icon>\n    `;\n  },\n};\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - Requires <b>Modus Icons</b> to be installed in the host application see [Modus Icon Usage](/docs/documentation-modus-icon-usage--docs).\n  - The \\`color\\` property has been removed in favor of using CSS for styling.\n  - The \\`iconClick\\` event has been removed. Use the \\`click\\` event on the host element instead.\n  - In 1.0 the \\`size\\` prop accepted any numeric string (e.g., \\`'16'\\`, \\`'24'\\`, \\`'32'\\`) to set the icon's\n  width and height. 2.0 uses preset sizes: \\`sm\\`, \\`md\\`, \\`lg\\`, and can use CSS for custom sizes.\n\n#### Prop Mapping\n\n| 1.0 Prop | 2.0 Prop | Notes                                                |\n|----------|----------|------------------------------------------------------|\n| color    |          | Not carried over, use CSS instead                    |\n| name     | name     |                                                      |\n| size     | size     | Numeric values changed to \\`sm\\`, \\`md\\`, \\`lg\\`, use CSS for custom sizes |\n\n#### Event Mapping\n\n| 1.0 Event | 2.0 Event | Notes                                                         |\n|-----------|-----------|---------------------------------------------------------------|\n| iconClick |           | Not carried over, use \\`click\\` event on host element instead |\n        `,\n      },\n    },\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  render: () => html`<div></div>`,\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-icon\n        aria-label=\"Alert icon\"\n        custom-class=\"${ifDefined(args['custom-class'])}\"\n        ?decorative=\"${args.decorative}\"\n        name=\"${args.name}\"\n        size=\"${args.size}\"\n      >\n      </modus-wc-icon>",
        "<modus-wc-icon\n        aria-label=\"Red alert icon\"\n        custom-class=\"red-icon\"\n        name=\"alert\"\n        size=\"${args.size}\"\n      >\n      </modus-wc-icon>",
        "\n      <modus-wc-icon\n        aria-label=\"Alert icon\"\n        custom-class=\"${ifDefined(args['custom-class'])}\"\n        ?decorative=\"${args.decorative}\"\n        name=\"${args.name}\"\n        size=\"${args.size}\"\n      >\n      </modus-wc-icon>\n    ",
        "\n      <style>\n        .red-icon {\n          color: red;\n        }\n      </style>\n      <modus-wc-icon\n        aria-label=\"Red alert icon\"\n        custom-class=\"red-icon\"\n        name=\"alert\"\n        size=\"${args.size}\"\n      >\n      </modus-wc-icon>\n    "
      ],
      "variants": [],
      "prop_usage": {
        "label": [
          "Alert icon",
          "Red alert icon"
        ],
        "class": [
          "${ifDefined(args[",
          "red-icon"
        ],
        "decorative": [
          "${args.decorative}"
        ],
        "name": [
          "${args.name}",
          "alert"
        ],
        "size": [
          "${args.size}"
        ]
      }
    },
    "tag_name": "modus-wc-icon"
  },
  "modus-wc-input-feedback": {
    "props": [],
    "events": [],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-wc-input-feedback.stories.ts ---\n\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { IInputFeedbackLevel } from './modus-wc-input-feedback';\nimport { ModusSize } from '../types';\n\ninterface InputFeedbackArgs {\n  'custom-class'?: string;\n  icon?: string;\n  level: IInputFeedbackLevel;\n  message?: string;\n  size?: ModusSize;\n}\n\nconst meta: Meta<InputFeedbackArgs> = {\n  title: 'Components/Forms/Input Feedback',\n  component: 'modus-wc-input-feedback',\n  args: {\n    level: 'error',\n    message: 'Uh oh. You done messed up.',\n    size: 'md',\n  },\n  argTypes: {\n    level: {\n      control: { type: 'select' },\n      options: ['error', 'info', 'success', 'warning'],\n    },\n    size: {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<InputFeedbackArgs>;\n\nconst Template: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<modus-wc-input-feedback\n  custom-class=${ifDefined(args['custom-class'])}\n  icon=${ifDefined(args.icon)}\n  level=${args.level}\n  message=${ifDefined(args.message)}\n  size=${ifDefined(args.size)}\n>\n</modus-wc-input-feedback>\n    `;\n  },\n};\n\nexport const Default: Story = { ...Template };\n\nexport const WithCustomModusIcon: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<modus-wc-input-feedback\n  custom-class=${ifDefined(args['custom-class'])}\n  icon='calendar_check'\n  level='success'\n  message='Event added to calendar!'\n  size=${ifDefined(args.size)}\n>\n</modus-wc-input-feedback>\n    `;\n  },\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-input-feedback\n  custom-class=${ifDefined(args['custom-class'])}\n  icon=${ifDefined(args.icon)}\n  level=${args.level}\n  message=${ifDefined(args.message)}\n  size=${ifDefined(args.size)}\n>\n</modus-wc-input-feedback>",
        "<modus-wc-input-feedback\n  custom-class=${ifDefined(args['custom-class'])}\n  icon='calendar_check'\n  level='success'\n  message='Event added to calendar!'\n  size=${ifDefined(args.size)}\n>\n</modus-wc-input-feedback>",
        "\n<modus-wc-input-feedback\n  custom-class=${ifDefined(args['custom-class'])}\n  icon=${ifDefined(args.icon)}\n  level=${args.level}\n  message=${ifDefined(args.message)}\n  size=${ifDefined(args.size)}\n>\n</modus-wc-input-feedback>\n    ",
        "\n<modus-wc-input-feedback\n  custom-class=${ifDefined(args['custom-class'])}\n  icon='calendar_check'\n  level='success'\n  message='Event added to calendar!'\n  size=${ifDefined(args.size)}\n>\n</modus-wc-input-feedback>\n    "
      ],
      "variants": [],
      "prop_usage": {
        "icon": [
          "calendar_check"
        ],
        "level": [
          "success"
        ],
        "message": [
          "Event added to calendar!"
        ]
      }
    },
    "tag_name": "modus-wc-input-feedback"
  },
  "modus-wc-input-label": {
    "props": [],
    "events": [],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-wc-input-label.stories.ts ---\n\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { ModusSize } from '../types';\n\ninterface InputLabelArgs {\n  'for-id'?: string;\n  'custom-class'?: string;\n  'label-text'?: string;\n  required?: boolean;\n  size?: ModusSize;\n  'sub-label-text'?: string;\n}\n\nconst meta: Meta<InputLabelArgs> = {\n  title: 'Components/Forms/Input Label',\n  component: 'modus-wc-input-label',\n  args: {\n    'label-text': 'Label',\n    required: false,\n    size: 'md',\n  },\n  argTypes: {\n    size: {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<InputLabelArgs>;\n\nconst Template: Story = {\n  render: (args) => html`\n    <modus-wc-input-label\n      for-id=${ifDefined(args['for-id'])}\n      custom-class=${ifDefined(args['custom-class'])}\n      label-text=${ifDefined(args['label-text'])}\n      ?required=${args['required']}\n      size=${args.size}\n      sub-label-text=${ifDefined(args['sub-label-text'])}\n    ></modus-wc-input-label>\n  `,\n};\n\nexport const Default: Story = { ...Template };\n\nexport const Required: Story = { ...Template, args: { required: true } };\n",
    "storybook": {
      "examples": [
        "<modus-wc-input-label\n      for-id=${ifDefined(args['for-id'])}\n      custom-class=${ifDefined(args['custom-class'])}\n      label-text=${ifDefined(args['label-text'])}\n      ?required=${args['required']}\n      size=${args.size}\n      sub-label-text=${ifDefined(args['sub-label-text'])}\n    ></modus-wc-input-label>",
        "\n    <modus-wc-input-label\n      for-id=${ifDefined(args['for-id'])}\n      custom-class=${ifDefined(args['custom-class'])}\n      label-text=${ifDefined(args['label-text'])}\n      ?required=${args['required']}\n      size=${args.size}\n      sub-label-text=${ifDefined(args['sub-label-text'])}\n    ></modus-wc-input-label>\n  "
      ],
      "variants": [],
      "prop_usage": {}
    },
    "tag_name": "modus-wc-input-label"
  },
  "modus-wc-loader": {
    "props": [
      {
        "name": "color",
        "description": "/**\n * A customizable loader component used to indicate the loading of content\n */\n@Component({\n  tag: 'modus-wc-loader',\n  styleUrl: 'modus-wc-loader.scss',\n  shadow: false,\n})\nexport class ModusWcLoader {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The color of the loader. */",
        "type": "LoaderColor"
      },
      {
        "name": "size",
        "description": "/**\n * A customizable loader component used to indicate the loading of content\n */\n@Component({\n  tag: 'modus-wc-loader',\n  styleUrl: 'modus-wc-loader.scss',\n  shadow: false,\n})\nexport class ModusWcLoader {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The color of the loader. */",
        "type": "DaisySize"
      },
      {
        "name": "variant",
        "description": "/**\n * A customizable loader component used to indicate the loading of content\n */\n@Component({\n  tag: 'modus-wc-loader',\n  styleUrl: 'modus-wc-loader.scss',\n  shadow: false,\n})\nexport class ModusWcLoader {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The color of the loader. */",
        "type": "LoaderVariant"
      }
    ],
    "events": [],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-wc-loader.stories.ts ---\n\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { LoaderColor, LoaderVariant } from './modus-wc-loader';\nimport { DaisySize } from '../types';\n\ninterface LoaderArgs {\n  color: LoaderColor;\n  'custom-class'?: string;\n  size: DaisySize;\n  variant: LoaderVariant;\n}\n\nconst meta: Meta<LoaderArgs> = {\n  title: 'Components/Loader',\n  component: 'modus-wc-loader',\n  args: {\n    color: 'primary',\n    'custom-class': '',\n    size: 'md',\n    variant: 'spinner',\n  },\n  argTypes: {\n    color: {\n      control: { type: 'select' },\n      options: [\n        'primary',\n        'secondary',\n        'accent',\n        'neutral',\n        'info',\n        'success',\n        'warning',\n        'error',\n      ],\n    },\n    size: {\n      control: { type: 'select' },\n      options: ['xs', 'sm', 'md', 'lg'],\n    },\n    variant: {\n      control: { type: 'select' },\n      options: ['ball', 'bars', 'dots', 'infinity', 'ring', 'spinner'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<LoaderArgs>;\n\nexport const Default: Story = {\n  render: (args) => {\n    return html`\n      <modus-wc-loader\n        aria-label=\"Loading spinner\"\n        color=\"${args.color}\"\n        custom-class=\"${ifDefined(args['custom-class'])}\"\n        size=\"${args.size}\"\n        variant=\"${args.variant}\"\n      ></modus-wc-loader>\n    `;\n  },\n};\n\nexport const Ball: Story = {\n  render: (args) => {\n    return html`\n      <modus-wc-loader\n        aria-label=\"Loading ball\"\n        color=\"${args.color}\"\n        custom-class=\"${ifDefined(args['custom-class'])}\"\n        size=\"md\"\n        variant=\"ball\"\n      ></modus-wc-loader>\n    `;\n  },\n};\n\nexport const Bars: Story = {\n  render: (args) => {\n    return html`\n      <modus-wc-loader\n        aria-label=\"Loading bars\"\n        color=\"${args.color}\"\n        custom-class=\"${ifDefined(args['custom-class'])}\"\n        size=\"md\"\n        variant=\"bars\"\n      ></modus-wc-loader>\n    `;\n  },\n};\n\nexport const Dots: Story = {\n  render: (args) => {\n    return html`\n      <modus-wc-loader\n        aria-label=\"Loading dots\"\n        color=\"${args.color}\"\n        custom-class=\"${ifDefined(args['custom-class'])}\"\n        size=\"md\"\n        variant=\"dots\"\n      ></modus-wc-loader>\n    `;\n  },\n};\n\n// eslint-disable-next-line no-shadow-restricted-names\nexport const Infinity: Story = {\n  render: (args) => {\n    return html`\n      <modus-wc-loader\n        aria-label=\"Loading infinity symbol\"\n        color=\"${args.color}\"\n        custom-class=\"${ifDefined(args['custom-class'])}\"\n        size=\"md\"\n        variant=\"infinity\"\n      ></modus-wc-loader>\n    `;\n  },\n};\n\nexport const Ring: Story = {\n  render: (args) => {\n    return html`\n      <modus-wc-loader\n        aria-label=\"Loading ring\"\n        color=\"${args.color}\"\n        custom-class=\"${ifDefined(args['custom-class'])}\"\n        size=\"md\"\n        variant=\"ring\"\n      ></modus-wc-loader>\n    `;\n  },\n};\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - **Color value changes**: \\`dark\\` and \\`tertiary\\` values from 1.0 have been removed.\n  1.0 value \\`danger\\` has been renamed to \\`error\\` in 2.0. Values \\`accent\\`, \\`info\\`, and \\`neutral\\` are new options in 2.0.\n  - In 1.0 \\`size\\` used direct CSS size value strings (e.g., \\`'12rem'\\`). In 2.0 \\`size\\` is now defined by predefined values (\\`xs\\`, \\`sm\\`, \\`md\\`, \\`lg\\`), and CSS can be used for custom sizes.\n  - Added new \\`variant\\` prop to specify the loader type in 2.0.\n\n#### Prop Mapping\n\n| 1.0 Prop | 2.0 Prop | Notes                                                                                                  |\n|----------|----------|--------------------------------------------------------------------------------------------------------|\n| color    | color    | \\`dark\\` and \\`tertiary\\` from version 1.0 have been removed, \\`danger\\` has been renamed to \\`error\\` |\n| size     | size     | Now uses predefined sizes (\\`xs\\`, \\`sm\\`, \\`md\\`, \\`lg\\`), use CSS for custom sizes.                  |\n        `,\n      },\n    },\n    // To hide the actual story rendering and only show docs:\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  // Simple render function or leave it empty\n  render: () => html`<div></div>`,\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-loader\n        aria-label=\"Loading spinner\"\n        color=\"${args.color}\"\n        custom-class=\"${ifDefined(args['custom-class'])}\"\n        size=\"${args.size}\"\n        variant=\"${args.variant}\"\n      ></modus-wc-loader>",
        "<modus-wc-loader\n        aria-label=\"Loading ball\"\n        color=\"${args.color}\"\n        custom-class=\"${ifDefined(args['custom-class'])}\"\n        size=\"md\"\n        variant=\"ball\"\n      ></modus-wc-loader>",
        "<modus-wc-loader\n        aria-label=\"Loading bars\"\n        color=\"${args.color}\"\n        custom-class=\"${ifDefined(args['custom-class'])}\"\n        size=\"md\"\n        variant=\"bars\"\n      ></modus-wc-loader>",
        "<modus-wc-loader\n        aria-label=\"Loading dots\"\n        color=\"${args.color}\"\n        custom-class=\"${ifDefined(args['custom-class'])}\"\n        size=\"md\"\n        variant=\"dots\"\n      ></modus-wc-loader>",
        "<modus-wc-loader\n        aria-label=\"Loading infinity symbol\"\n        color=\"${args.color}\"\n        custom-class=\"${ifDefined(args['custom-class'])}\"\n        size=\"md\"\n        variant=\"infinity\"\n      ></modus-wc-loader>"
      ],
      "variants": [
        "ball",
        "bars",
        "infinity",
        "ring",
        "dots",
        "${args.variant}"
      ],
      "prop_usage": {
        "label": [
          "Loading spinner",
          "Loading ball",
          "Loading bars",
          "Loading dots",
          "Loading infinity symbol",
          "Loading ring"
        ],
        "color": [
          "${args.color}"
        ],
        "class": [
          "${ifDefined(args["
        ],
        "size": [
          "${args.size}",
          "md"
        ],
        "variant": [
          "${args.variant}",
          "ball",
          "bars",
          "dots",
          "infinity",
          "ring"
        ]
      }
    },
    "tag_name": "modus-wc-loader"
  },
  "modus-wc-menu": {
    "props": [],
    "events": [],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-wc-menu.stories.ts ---\n\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { ModusSize, Orientation } from '../types';\n\ninterface MenuArgs {\n  bordered?: boolean;\n  'custom-class'?: string;\n  orientation?: Orientation;\n  size?: ModusSize;\n}\n\nconst meta: Meta<MenuArgs> = {\n  title: 'Components/Menu',\n  component: 'modus-wc-menu',\n  args: {\n    orientation: 'vertical',\n    size: 'md',\n  },\n  argTypes: {\n    orientation: {\n      control: { type: 'select' },\n      options: ['horizontal', 'vertical'],\n    },\n    size: {\n      control: { type: 'select' },\n      options: ['xs', 'sm', 'md', 'lg'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<MenuArgs>;\n\nexport const Default: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<modus-wc-menu\n  aria-label=\"Menu\"\n  ?bordered=${args.bordered}\n  custom-class=${ifDefined(args['custom-class'])}\n  orientation=${ifDefined(args.orientation)}\n  size=${ifDefined(args.size)}\n>\n  <modus-wc-menu-item\n    label=\"Small\"\n    value=\"1\"\n    size=\"sm\"\n  ></modus-wc-menu-item>\n  <modus-wc-menu-item label=\"Medium\" value=\"2\"></modus-wc-menu-item>\n  <modus-wc-menu-item\n    label=\"Large\"\n    value=\"3\"\n    size=\"lg\"\n  ></modus-wc-menu-item>\n  <modus-wc-menu-item\n    label=\"Bordered\"\n    value=\"3\"\n    bordered=\"true\"\n  ></modus-wc-menu-item>\n  <modus-wc-menu-item\n    label=\"With Sub-label\"\n    value=\"3\"\n    sub-label=\"Sub-label\"\n  ></modus-wc-menu-item>\n  <modus-wc-menu-item\n    label=\"Selected\"\n    value=\"3\"\n    selected=\"true\"\n  ></modus-wc-menu-item>\n  <modus-wc-menu-item\n    label=\"With Start Icon\"\n    value=\"3\"\n    start-icon=\"info\"\n  ></modus-wc-menu-item>\n  <modus-wc-menu-item\n    label=\"Disabled\"\n    value=\"3\"\n    disabled=\"true\"\n  ></modus-wc-menu-item>\n</modus-wc-menu>\n    `;\n  },\n};\n\nexport const CustomMenu: Story = {\n  render: () => {\n    // prettier-ignore\n    return html`\n<style>\n  .menu-width {\n    width: 400px;\n  }\n  .flex-row {\n    display: flex;\n    align-items: center;\n  }\n  .nested-row {\n    padding-inline-start: 3rem;\n  }\n  .justify-end {\n    margin-left: auto;\n  }\n  .green-square {\n    height: 18px;\n    width: 18px;\n    background-color: green;\n  }\n  .red-square {\n    height: 18px;\n    width: 18px;\n    background-color: red;\n  }\n</style>\n<modus-wc-menu\n  aria-label=\"Custom menu\"\n  custom-class=\"menu-width\"\n>\n  <li>\n    <div class=\"flex-row\">\n      <modus-wc-icon decorative=\"true\" name=\"expand_more\"></modus-wc-icon>\n      <modus-wc-button aria-label=\"Visible button\" size=\"sm\" shape=\"circle\" variant=\"borderless\">\n        <modus-wc-icon aria-label=\"Visible icon\" name=\"visibility_on\"></modus-wc-icon>\n      </modus-wc-button>\n      <div>Parent</div>\n      <div class=\"justify-end\">\n        <modus-wc-button aria-label=\"Actions button\" size=\"sm\" shape=\"circle\" variant=\"borderless\">\n          <modus-wc-icon aria-label=\"Actions icon\" name=\"more_vertical\"></modus-wc-icon>\n        </modus-wc-button>\n      </div>\n    </div>\n  </li>\n  <li>\n    <div class=\"flex-row nested-row\">\n      <modus-wc-button aria-label=\"Visible button\" size=\"sm\" shape=\"circle\" variant=\"borderless\">\n        <modus-wc-icon aria-label=\"Visible icon\" name=\"visibility_on\"></modus-wc-icon>\n      </modus-wc-button>\n      <div class=\"green-square\"></div>\n      <div>Child</div>\n      <div class=\"justify-end\">\n        <modus-wc-button aria-label=\"Actions button\" size=\"sm\" shape=\"circle\" variant=\"borderless\">\n          <modus-wc-icon aria-label=\"Actions icon\" name=\"more_vertical\"></modus-wc-icon>\n        </modus-wc-button>\n      </div>\n    </div>\n  </li>\n  <li>\n    <div class=\"flex-row nested-row\">\n      <modus-wc-button aria-label=\"Visible button\" size=\"sm\" shape=\"circle\" variant=\"borderless\">\n        <modus-wc-icon aria-label=\"Invisible icon\" name=\"visibility_off\"></modus-wc-icon>\n      </modus-wc-button>\n      <div class=\"red-square\"></div>\n      <div>Child</div>\n      <div class=\"justify-end\">\n        <modus-wc-button aria-label=\"Actions button\" size=\"sm\" shape=\"circle\" variant=\"borderless\">\n          <modus-wc-icon aria-label=\"Actions icon\" name=\"more_vertical\"></modus-wc-icon>\n        </modus-wc-button>\n      </div>\n    </div>\n  </li>\n  <li>\n    <div class=\"flex-row\">\n      <modus-wc-icon decorative=\"true\" name=\"chevron_right\"></modus-wc-icon>\n      <modus-wc-button aria-label=\"Visible button\" size=\"sm\" shape=\"circle\" variant=\"borderless\">\n        <modus-wc-icon aria-label=\"Visible icon\" name=\"visibility_on\"></modus-wc-icon>\n      </modus-wc-button>\n      <div>Parent</div>\n      <div class=\"justify-end\">\n        <modus-wc-button aria-label=\"Actions button\" size=\"sm\" shape=\"circle\" variant=\"borderless\">\n          <modus-wc-icon aria-label=\"Actions icon\" name=\"more_vertical\"></modus-wc-icon>\n        </modus-wc-button>\n      </div>\n    </div>\n  </li>\n</modus-wc-menu>\n    `;\n  },\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-menu-item\n    label=\"Small\"\n    value=\"1\"\n    size=\"sm\"\n  ></modus-wc-menu-item>",
        "<modus-wc-menu-item label=\"Medium\" value=\"2\"></modus-wc-menu-item>",
        "<modus-wc-menu-item\n    label=\"Large\"\n    value=\"3\"\n    size=\"lg\"\n  ></modus-wc-menu-item>",
        "<modus-wc-menu-item\n    label=\"Bordered\"\n    value=\"3\"\n    bordered=\"true\"\n  ></modus-wc-menu-item>",
        "<modus-wc-menu-item\n    label=\"With Sub-label\"\n    value=\"3\"\n    sub-label=\"Sub-label\"\n  ></modus-wc-menu-item>"
      ],
      "variants": [
        "borderless"
      ],
      "prop_usage": {
        "label": [
          "Menu",
          "Small",
          "Medium",
          "Large",
          "Bordered",
          "With Sub-label",
          "Sub-label",
          "Selected",
          "With Start Icon",
          "Disabled",
          "Custom menu",
          "Visible button",
          "Visible icon",
          "Actions button",
          "Actions icon",
          "Invisible icon"
        ],
        "value": [
          "1",
          "2",
          "3"
        ],
        "size": [
          "sm",
          "lg"
        ],
        "bordered": [
          "true"
        ],
        "selected": [
          "true"
        ],
        "icon": [
          "info"
        ],
        "disabled": [
          "true"
        ],
        "class": [
          "menu-width",
          "flex-row",
          "justify-end",
          "flex-row nested-row",
          "green-square",
          "red-square"
        ],
        "decorative": [
          "true"
        ],
        "name": [
          "expand_more",
          "visibility_on",
          "more_vertical",
          "visibility_off",
          "chevron_right"
        ],
        "shape": [
          "circle"
        ],
        "variant": [
          "borderless"
        ]
      }
    },
    "tag_name": "modus-wc-menu"
  },
  "modus-wc-menu-item": {
    "props": [
      {
        "name": "label",
        "description": "/**\n * A customizable menu item component used to display the item portion of a menu\n */\n@Component({\n  tag: 'modus-wc-menu-item',\n  styleUrl: 'modus-wc-menu-item.scss',\n  shadow: false,\n})\nexport class ModusWcMenuItem {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  @Prop() bordered?: boolean;\n\n  /** Custom CSS class to apply to the li element. */",
        "type": "string"
      },
      {
        "name": "value",
        "description": "/**\n * A customizable menu item component used to display the item portion of a menu\n */\n@Component({\n  tag: 'modus-wc-menu-item',\n  styleUrl: 'modus-wc-menu-item.scss',\n  shadow: false,\n})\nexport class ModusWcMenuItem {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  @Prop() bordered?: boolean;\n\n  /** Custom CSS class to apply to the li element. */",
        "type": "string"
      }
    ],
    "events": [],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-wc-menu-item.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { ModusSize } from '../types';\n\ninterface MenuItemArgs {\n  bordered?: boolean;\n  'custom-class'?: string;\n  disabled?: boolean;\n  label: string;\n  'start-icon'?: string;\n  selected?: boolean;\n  size?: ModusSize;\n  'sub-label'?: string;\n  value: string;\n}\n\nconst meta: Meta<MenuItemArgs> = {\n  title: 'Components/Menu Item',\n  component: 'modus-wc-menu-item',\n  args: {\n    label: 'Menu Item',\n    size: 'md',\n    value: 'menuItem',\n  },\n  argTypes: {\n    size: {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg'],\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['itemSelect'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<MenuItemArgs>;\n\nconst Template: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<modus-wc-menu>\n  <modus-wc-menu-item\n    ?bordered=${args.bordered}\n    custom-class=${ifDefined(args['custom-class'])}\n    ?disabled=${args.disabled}\n    label=${args.label}\n    start-icon=${ifDefined(args['start-icon'])}\n    ?selected=${args.selected}\n    size=${args.size}\n    sub-label=${ifDefined(args['sub-label'])}\n    value=${args.value}\n  ></modus-wc-menu-item>\n</modus-wc-menu>\n    `;\n  },\n};\n\nexport const Default: Story = { ...Template };\n",
    "storybook": {
      "examples": [
        "<modus-wc-menu-item\n    ?bordered=${args.bordered}\n    custom-class=${ifDefined(args['custom-class'])}\n    ?disabled=${args.disabled}\n    label=${args.label}\n    start-icon=${ifDefined(args['start-icon'])}\n    ?selected=${args.selected}\n    size=${args.size}\n    sub-label=${ifDefined(args['sub-label'])}\n    value=${args.value}\n  ></modus-wc-menu-item>",
        "\n<modus-wc-menu>\n  <modus-wc-menu-item\n    ?bordered=${args.bordered}\n    custom-class=${ifDefined(args['custom-class'])}\n    ?disabled=${args.disabled}\n    label=${args.label}\n    start-icon=${ifDefined(args['start-icon'])}\n    ?selected=${args.selected}\n    size=${args.size}\n    sub-label=${ifDefined(args['sub-label'])}\n    value=${args.value}\n  ></modus-wc-menu-item>\n</modus-wc-menu>\n    "
      ],
      "variants": [],
      "prop_usage": {}
    },
    "tag_name": "modus-wc-menu-item"
  },
  "modus-wc-modal": {
    "props": [],
    "events": [],
    "slots": [
      "header",
      "content",
      "footer"
    ],
    "default_values": {},
    "documentation": "\n\n--- modus-wc-modal.stories.ts ---\n\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { generateRandomId } from '../utils';\n\ninterface ModalArgs {\n  backdrop: 'default' | 'static';\n  'custom-class'?: string;\n  fullscreen: boolean;\n  'modal-id'?: string;\n  position: 'bottom' | 'center' | 'top';\n  'show-close': boolean;\n  'show-fullscreen-toggle': boolean;\n}\n\nconst meta: Meta<ModalArgs> = {\n  title: 'Components/Modal',\n  component: 'modus-wc-modal',\n  args: {\n    backdrop: 'default',\n    'custom-class': '',\n    fullscreen: false,\n    'modal-id': 'my_modal_1',\n    position: 'center',\n    'show-close': true,\n    'show-fullscreen-toggle': false,\n  },\n  argTypes: {\n    backdrop: {\n      control: { type: 'select' },\n      options: ['default', 'static'],\n    },\n    position: {\n      control: { type: 'select' },\n      options: ['bottom', 'center', 'top'],\n    },\n  },\n  parameters: {\n    layout: 'centered',\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<ModalArgs>;\n\nexport const Default: Story = {\n  render: (args) => {\n    const modalId = `${args['modal-id']}${generateRandomId(4)}}`;\n\n    const handleModalVisibility = (action: 'show' | 'hide') => {\n      const modal = document.getElementById(modalId) as HTMLDialogElement;\n      if (modal) {\n        if (action === 'show') {\n          modal.showModal();\n        } else {\n          modal.close();\n        }\n      }\n    };\n\n    // prettier-ignore\n    return html`\n<modus-wc-button @buttonClick=${() => handleModalVisibility('show')}>\n  Open modal\n</modus-wc-button>\n<modus-wc-modal\n  aria-label=\"Example modal\"\n  custom-class=${ifDefined(args['custom-class'])}\n  fullscreen=${args.fullscreen}\n  modal-id=${modalId}\n  backdrop=${args.backdrop}\n  position=${args.position}\n  show-close=${args['show-close']}\n  show-fullscreen-toggle=${args['show-fullscreen-toggle']}\n>\n  <span slot=\"header\">Modal Title</span>\n  <span slot=\"content\"> This is sample modal content. </span>\n  <modus-wc-button slot=\"footer\" @buttonClick=${() => handleModalVisibility('hide')}>\n    Close\n  </modus-wc-button>\n</modus-wc-modal>\n    `;\n  },\n};\n\nexport const CustomWidthAndHeight: Story = {\n  render: (args) => {\n    const modalId = `${args['modal-id']}${generateRandomId(4)}}`;\n\n    const handleModalVisibility = (action: 'show' | 'hide') => {\n      const modal = document.getElementById(modalId) as HTMLDialogElement;\n      if (modal) {\n        if (action === 'show') {\n          modal.showModal();\n        } else {\n          modal.close();\n        }\n      }\n    };\n\n    // prettier-ignore\n    return html`\n<style>\n  .expanded-modal .modus-wc-modal-box {\n    width: 80%;\n    max-width: none;\n    height: 60%;\n    max-height: none;\n  }\n</style>\n<modus-wc-button @buttonClick=${() => handleModalVisibility('show')}>\n  Open modal\n</modus-wc-button>\n<modus-wc-modal\n  aria-label=\"Example modal\"\n  custom-class=\"expanded-modal\"\n  modal-id=${modalId}\n  backdrop=${ifDefined(args.backdrop)}\n  position=${ifDefined(args.position)}\n  show-close=${ifDefined(args['show-close'])}\n>\n  <span slot=\"header\">Modal Title</span>\n  <p slot=\"content\">Sample modal content.</p>\n  <modus-wc-button slot=\"footer\" @buttonClick=${() => handleModalVisibility('hide')}>\n    Close\n  </modus-wc-button>\n</modus-wc-modal>\n    `;\n  },\n};\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - Modal identification is now required via the \\`modal-id\\` prop.\n  - 2.0 requires the use of slots for a fully customizable \\`header\\`, \\`content\\`, and \\`footer\\`.\n  Primary and secondary buttons as well as \\`header-text\\` are no longer built-in.\n  - In 1.0, modals had built-in open/close state management with methods. 2.0 uses the native HTML dialog\n  element with \\`modal-id\\` to target the dialog with native \\`showModal()\\` and \\`close()\\` methods.\n\n#### Prop Mapping\n\n| 1.0 Prop                     | 2.0 Prop                | Notes                                         |\n|------------------------------|-------------------------|-----------------------------------------------|\n| aria-label                   | aria-label              |                                               |\n| backdrop                     | backdrop                |                                               |\n| fullscreen                   | fullscreen              |                                               |\n| header-text                  |                         | Not carried over, use \\`header\\` slot instead |\n| primary-button-aria-label    |                         | Not carried over, use \\`footer\\` slot instead |\n| primary-button-disabled      |                         | Not carried over, use \\`footer\\` slot instead |\n| primary-button-text          |                         | Not carried over, use \\`footer\\` slot instead |\n| secondary-button-aria-label  |                         | Not carried over, use \\`footer\\` slot instead |\n| secondary-button-disabled    |                         | Not carried over, use \\`footer\\` slot instead |\n| secondary-button-text        |                         | Not carried over, use \\`footer\\` slot instead |\n| show-fullscreen-toggle       | show-fullscreen-toggle  |                                               |\n| z-index                      |                         | Not carried over, use CSS instead             |\n\n#### Event Mapping\n\n| 1.0 Event            | 2.0 Event | Notes                                                                             |\n|----------------------|-----------|-----------------------------------------------------------------------------------|\n| closed               |           | Not carried over, use dialog \\`close()\\` event instead                            |\n| opened               |           | Not carried over, use dialog \\`showModal()\\` event instead                        |\n| primaryButtonClick   |           | Not carried over, handle with events on custom buttons in \\`footer\\` slot instead |\n| secondaryButtonClick |           | Not carried over, handle with events on custom buttons in \\`footer\\` slot instead |\n        `,\n      },\n    },\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  render: () => html`<div></div>`,\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-button @buttonClick=${() => handleModalVisibility('show')}>\n  Open modal\n</modus-wc-button>",
        "<modus-wc-button slot=\"footer\" @buttonClick=${() => handleModalVisibility('hide')}>\n    Close\n  </modus-wc-button>",
        "<modus-wc-button @buttonClick=${() => handleModalVisibility('show')}>\n  Open modal\n</modus-wc-button>",
        "<modus-wc-button slot=\"footer\" @buttonClick=${() => handleModalVisibility('hide')}>\n    Close\n  </modus-wc-button>",
        "\n<modus-wc-button @buttonClick=${() => handleModalVisibility('show')}>\n  Open modal\n</modus-wc-button>\n<modus-wc-modal\n  aria-label=\"Example modal\"\n  custom-class=${ifDefined(args['custom-class'])}\n  fullscreen=${args.fullscreen}\n  modal-id=${modalId}\n  backdrop=${args.backdrop}\n  position=${args.position}\n  show-close=${args['show-close']}\n  show-fullscreen-toggle=${args['show-fullscreen-toggle']}\n>\n  <span slot=\"header\">Modal Title</span>\n  <span slot=\"content\"> This is sample modal content. </span>\n  <modus-wc-button slot=\"footer\" @buttonClick=${() => handleModalVisibility('hide')}>\n    Close\n  </modus-wc-button>\n</modus-wc-modal>\n    "
      ],
      "variants": [],
      "prop_usage": {
        "label": [
          "Example modal"
        ],
        "slot": [
          "header",
          "content",
          "footer"
        ],
        "class": [
          "expanded-modal"
        ]
      }
    },
    "tag_name": "modus-wc-modal"
  },
  "modus-wc-navbar": {
    "props": [],
    "events": [],
    "slots": [
      "start",
      "center",
      "end",
      "notifications",
      "apps"
    ],
    "default_values": {},
    "documentation": "\n\n--- modus-wc-navbar.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport {\n  INavbarTextOverrides,\n  INavbarUserCard,\n  INavbarVisibility,\n} from './modus-wc-navbar';\n\nconst textOverrides: INavbarTextOverrides = {\n  apps: 'Apps',\n  help: 'Help',\n  notifications: 'Notifications',\n  search: 'Search',\n};\n\nconst userCard: INavbarUserCard = {\n  avatarAlt: 'Sonic',\n  avatarSrc: 'https://i1.sndcdn.com/artworks-000405996468-wmh3uv-t500x500.jpg',\n  email: 'sonic@trimble.com',\n  name: 'Sonic the Hedgehog',\n};\n\nconst visibility: INavbarVisibility = {\n  ai: true,\n  apps: true,\n  help: true,\n  mainMenu: true,\n  notifications: true,\n  search: true,\n  searchInput: true,\n  user: true,\n};\n\ninterface NavbarArgs {\n  'apps-menu-open'?: boolean;\n  condensed?: boolean;\n  'condensed-menu-open'?: boolean;\n  'custom-class'?: string;\n  'main-menu-open'?: boolean;\n  'notifications-menu-open'?: boolean;\n  'search-debounce-ms'?: number;\n  'search-input-open'?: boolean;\n  'text-overrides'?: INavbarTextOverrides;\n  'user-card': INavbarUserCard;\n  'user-menu-open'?: boolean;\n  visibility?: INavbarVisibility;\n}\n\nconst meta: Meta<NavbarArgs> = {\n  title: 'Components/Navbar',\n  component: 'modus-wc-navbar',\n  args: {\n    condensed: false,\n    'search-debounce-ms': 300,\n    'text-overrides': textOverrides,\n    'user-card': userCard,\n    visibility,\n  },\n  argTypes: {\n    'text-overrides': {\n      description: 'Text replacements for navbar menu items',\n      table: {\n        type: {\n          detail: `\n            Interface: INavbarTextOverrides\n            Properties:\n            - apps (string, optional): Replaces the text for \"Apps\" in the condensed menu\n            - help (string, optional): Replaces the text for \"Help\" in the condensed menu\n            - notifications (string, optional): Replaces the text for \"Notifications\" in the condensed menu\n            - search (string, optional): Replaces the text for \"Search\" in the condensed menu\n          `,\n        },\n      },\n      control: {\n        type: 'object',\n      },\n    },\n    'user-card': {\n      description: 'User profile card information',\n      table: {\n        type: {\n          detail: `\n            Interface: IUserCard\n            Properties:\n            - avatarAlt (string, optional): The alt value to set on the avatar\n            - avatarSrc (string, optional): The avatar image source value\n            - email (string): The email address of the user\n            - myTrimbleButton (string, optional): Text override for the Access MyTrimble button, allows for translation\n            - name (string): The name of the user\n            - signOutButton (string, optional): Text override for the Sign out button, allows for translation\n          `,\n        },\n      },\n    },\n    visibility: {\n      description: 'Controls visibility of individual navbar buttons',\n      table: {\n        type: {\n          detail: `\n            Interface: INavbarVisibility\n            Properties:\n            - ai (boolean, optional): Controls visibility of the AI button\n            - apps (boolean, optional): Controls visibility of the apps button\n            - help (boolean, optional): Controls visibility of the help button\n            - mainMenu (boolean, optional): Controls visibility of the main menu button\n            - notifications (boolean, optional): Controls visibility of the notifications button\n            - search (boolean, optional): Controls visibility of the search button\n            - searchInput (boolean, optional): Controls visibility of the search input\n            - user (boolean, optional): Controls visibility of the user button\n          `,\n        },\n      },\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: [\n        'aiClick',\n        'appsClick',\n        'appsMenuOpenChange',\n        'condensedMenuOpenChange',\n        'helpClick',\n        'mainMenuOpenChange',\n        'myTrimbleClick',\n        'notificationsMenuOpenChange',\n        'notificationsClick',\n        'searchChange',\n        'searchClick',\n        'searchInputOpenChange',\n        'signOutClick',\n        'trimbleLogoClick',\n        'userMenuOpenChange',\n      ],\n    },\n    layout: 'padded',\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<NavbarArgs>;\n\nconst Template: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<style>\n  div[id^='story--components-navbar--default'] {\n    border: 1px dashed black;\n    height: 365px;\n  }\n  [slot=main-menu] {\n    background-color: #0063a3;\n    color: white;\n    height: 305px;\n  }\n</style>\n<modus-wc-navbar\n  ?apps-menu-open=${args['apps-menu-open']}\n  ?condensed=${args.condensed}\n  ?condensed-menu-open=${args['condensed-menu-open']}\n  custom-class=${ifDefined(args['custom-class'])}\n  ?main-menu-open=${args['main-menu-open']}\n  ?notifications-menu-open=${args['notifications-menu-open']}\n  search-debounce-ms=${ifDefined(args['search-debounce-ms'])}\n  ?search-input-open=${args['search-input-open']}\n  .textOverrides=${ifDefined(args['text-overrides'])}\n  .userCard=${args['user-card']}\n  ?user-menu-open=${args['user-menu-open']}\n  .visibility=${args.visibility}\n>\n  <div slot=\"main-menu\">Main menu contents</div>\n  <div slot=\"notifications\">Notification contents</div>\n  <div slot=\"apps\">App drawer contents</div>\n</modus-wc-navbar>\n    `;\n  },\n};\n\nexport const Default: Story = { ...Template };\n",
    "storybook": {
      "examples": [
        "\n<style>\n  div[id^='story--components-navbar--default'] {\n    border: 1px dashed black;\n    height: 365px;\n  }\n  [slot=main-menu] {\n    background-color: #0063a3;\n    color: white;\n    height: 305px;\n  }\n</style>\n<modus-wc-navbar\n  ?apps-menu-open=${args['apps-menu-open']}\n  ?condensed=${args.condensed}\n  ?condensed-menu-open=${args['condensed-menu-open']}\n  custom-class=${ifDefined(args['custom-class'])}\n  ?main-menu-open=${args['main-menu-open']}\n  ?notifications-menu-open=${args['notifications-menu-open']}\n  search-debounce-ms=${ifDefined(args['search-debounce-ms'])}\n  ?search-input-open=${args['search-input-open']}\n  .textOverrides=${ifDefined(args['text-overrides'])}\n  .userCard=${args['user-card']}\n  ?user-menu-open=${args['user-menu-open']}\n  .visibility=${args.visibility}\n>\n  <div slot=\"main-menu\">Main menu contents</div>\n  <div slot=\"notifications\">Notification contents</div>\n  <div slot=\"apps\">App drawer contents</div>\n</modus-wc-navbar>\n    "
      ],
      "variants": [],
      "prop_usage": {
        "slot": [
          "main-menu",
          "notifications",
          "apps"
        ]
      }
    },
    "tag_name": "modus-wc-navbar"
  },
  "modus-wc-number-input": {
    "props": [
      {
        "name": "inputMode",
        "description": "/**\n * A customizable input component used to create number inputs with types\n */\n@Component({\n  tag: 'modus-wc-number-input',\n  styleUrl: 'modus-wc-number-input.scss',\n  shadow: false,\n})\nexport class ModusWcNumberInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */",
        "type": "'decimal' | 'none' | 'numeric'"
      }
    ],
    "events": [],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-wc-number-input.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { IInputFeedbackProp, ModusSize } from '../types';\n\ninterface NumberInputArgs {\n  'auto-complete'?: 'on' | 'off';\n  bordered?: boolean;\n  'currency-symbol'?: string;\n  'custom-class'?: string;\n  disabled?: boolean;\n  feedback?: IInputFeedbackProp;\n  'input-aria-invalid'?: 'true' | 'false';\n  'input-id'?: string;\n  'input-mode': 'decimal' | 'none' | 'numeric';\n  'input-tab-index'?: number;\n  label?: string;\n  max?: number;\n  min?: number;\n  name?: string;\n  placeholder?: string;\n  'read-only'?: boolean;\n  required?: boolean;\n  size?: ModusSize;\n  step?: number;\n  type?: 'number' | 'range';\n  value: string;\n}\n\nconst meta: Meta<NumberInputArgs> = {\n  title: 'Components/Forms/Number Input',\n  component: 'modus-wc-number-input',\n  args: {\n    bordered: true,\n    disabled: false,\n    'input-mode': 'numeric',\n    label: 'Label',\n    size: 'md',\n    type: 'number',\n    value: '',\n  },\n  argTypes: {\n    'auto-complete': {\n      control: { type: 'select' },\n      options: ['on', 'off'],\n    },\n    feedback: {\n      description: 'Feedback prop for input components',\n      table: {\n        type: {\n          detail: `\n            Interface: IInputFeedbackProp\n            Properties:\n            - level ('error' | 'info' | 'success' | 'warning'): The feedback level\n            - message (string, optional): The feedback message\n          `,\n        },\n      },\n    },\n    'input-aria-invalid': {\n      control: { type: 'select' },\n      options: ['true', 'false'],\n    },\n    'input-mode': {\n      control: { type: 'select' },\n      options: ['decimal', 'none', 'numeric'],\n    },\n    size: {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg'],\n    },\n    type: {\n      control: { type: 'select' },\n      options: ['number', 'range'],\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['inputBlur', 'inputChange', 'inputFocus'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<NumberInputArgs>;\n\nconst Template: Story = {\n  render: (args) => html`\n    <modus-wc-number-input\n      aria-label=\"Number input\"\n      auto-complete=${ifDefined(args['auto-complete'])}\n      ?bordered=${args.bordered}\n      currency-symbol=${ifDefined(args['currency-symbol'])}\n      custom-class=${ifDefined(args['custom-class'])}\n      ?disabled=${args.disabled}\n      .feedback=${args.feedback}\n      input-aria-invalid=${ifDefined(args['input-aria-invalid'])}\n      input-id=${ifDefined(args['input-id'])}\n      input-mode=${args['input-mode']}\n      input-tab-index=${ifDefined(args['input-tab-index'])}\n      label=${ifDefined(args.label)}\n      max=${ifDefined(args.max)}\n      min=${ifDefined(args.min)}\n      name=${ifDefined(args.name)}\n      placeholder=${ifDefined(args.placeholder)}\n      ?read-only=${args['read-only']}\n      ?required=${args.required}\n      size=${ifDefined(args.size)}\n      step=${ifDefined(args.step)}\n      type=${ifDefined(args.type)}\n      .value=${args.value}\n    ></modus-wc-number-input>\n  `,\n};\n\nexport const Default: Story = { ...Template };\n\nconst errorFeedback: IInputFeedbackProp = {\n  level: 'error',\n  message: 'Value is required.',\n};\n\nexport const Currency: Story = {\n  ...Template,\n  args: { 'currency-symbol': '$' },\n};\n\nexport const WithErrorFeedback: Story = {\n  ...Template,\n  args: { feedback: errorFeedback, required: true },\n};\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - In 1.0 input state was maintained by the component. 2.0 components encourage users to follow a controlled\n  input model. See the Form Inputs [documentation](/docs/documentation-form-inputs--docs) for\n  additional info and examples.\n  - Instead of changing the internal input type for currency formatting, the component now always renders\n  a number input and displays the currency symbol via the \\`currency-symbol\\` prop.\n  - Size values have changed from verbose names (\\`medium\\`, \\`large\\`) to abbreviations (\\`sm\\`, \\`md\\`, \\`lg\\`).\n\n#### Prop Mapping\n\n| 1.0 Prop     | 2.0 Prop            | Notes                                   |\n|--------------|---------------------|-----------------------------------------|\n| aria-label   | aria-label          |                                         |\n| currency     | currency-symbol     |                                         |\n| disabled     | disabled            |                                         |\n| error-text   | feedback.message    | Use \\`feedback\\` level                  |\n| helper-text  |                     | Not carried over                        |\n| label        | label               |                                         |\n| locale       |                     | Not carried over                        |\n| max-value    | max                 |                                         |\n| min-value    | min                 |                                         |\n| placeholder  | placeholder         |                                         |\n| read-only    | read-only           |                                         |\n| required     | required            |                                         |\n| size         | size                | \\`medium\\` \u2192 \\`md\\`, \\`large\\` \u2192 \\`lg\\` |\n| step         | step                |                                         |\n| text-align   |                     | Not carried over, use CSS instead       |\n| valid-text   | feedback.message    | Use \\`feedback\\` level                  |\n| value        | value               |                                         |\n\n#### Event Mapping\n\n| 1.0 Event    | 2.0 Event    | Notes |\n|--------------|--------------|-------|\n| valueChange  | inputChange  |       |\n        `,\n      },\n    },\n    // To hide the actual story rendering and only show docs:\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  // Simple render function or leave it empty\n  render: () => html`<div></div>`,\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-number-input\n      aria-label=\"Number input\"\n      auto-complete=${ifDefined(args['auto-complete'])}\n      ?bordered=${args.bordered}\n      currency-symbol=${ifDefined(args['currency-symbol'])}\n      custom-class=${ifDefined(args['custom-class'])}\n      ?disabled=${args.disabled}\n      .feedback=${args.feedback}\n      input-aria-invalid=${ifDefined(args['input-aria-invalid'])}\n      input-id=${ifDefined(args['input-id'])}\n      input-mode=${args['input-mode']}\n      input-tab-index=${ifDefined(args['input-tab-index'])}\n      label=${ifDefined(args.label)}\n      max=${ifDefined(args.max)}\n      min=${ifDefined(args.min)}\n      name=${ifDefined(args.name)}\n      placeholder=${ifDefined(args.placeholder)}\n      ?read-only=${args['read-only']}\n      ?required=${args.required}\n      size=${ifDefined(args.size)}\n      step=${ifDefined(args.step)}\n      type=${ifDefined(args.type)}\n      .value=${args.value}\n    ></modus-wc-number-input>",
        "\n    <modus-wc-number-input\n      aria-label=\"Number input\"\n      auto-complete=${ifDefined(args['auto-complete'])}\n      ?bordered=${args.bordered}\n      currency-symbol=${ifDefined(args['currency-symbol'])}\n      custom-class=${ifDefined(args['custom-class'])}\n      ?disabled=${args.disabled}\n      .feedback=${args.feedback}\n      input-aria-invalid=${ifDefined(args['input-aria-invalid'])}\n      input-id=${ifDefined(args['input-id'])}\n      input-mode=${args['input-mode']}\n      input-tab-index=${ifDefined(args['input-tab-index'])}\n      label=${ifDefined(args.label)}\n      max=${ifDefined(args.max)}\n      min=${ifDefined(args.min)}\n      name=${ifDefined(args.name)}\n      placeholder=${ifDefined(args.placeholder)}\n      ?read-only=${args['read-only']}\n      ?required=${args.required}\n      size=${ifDefined(args.size)}\n      step=${ifDefined(args.step)}\n      type=${ifDefined(args.type)}\n      .value=${args.value}\n    ></modus-wc-number-input>\n  "
      ],
      "variants": [],
      "prop_usage": {
        "label": [
          "Number input"
        ]
      }
    },
    "tag_name": "modus-wc-number-input"
  },
  "modus-wc-pagination": {
    "props": [
      {
        "name": "count",
        "description": "/** Aria label values for pagination buttons */\nexport interface IAriaLabelValues {\n  /** Aria label for the first page button */\n  firstPage?: string;\n  /** Aria label for the last page button */\n  lastPage?: string;\n  /** Aria label for the next page button */\n  nextPage?: string;\n  /** Aria label for the page number button. Use {0} as placeholder for the page number */\n  page?: string;\n  /** Aria label for the previous page button */\n  previousPage?: string;\n}\n\nexport interface IPageChange {\n  /** The number of the newly selected page */\n  newPage: number;\n  /** The number of the previously selected page */\n  prevPage: number;\n}\n\n/**\n * Pagination component to navigate through pages of content\n */\n@Component({\n  tag: 'modus-wc-pagination',\n  styleUrl: 'modus-wc-pagination.scss',\n  shadow: false,\n})\nexport class ModusWcPagination {\n  private inheritedAttributes: Attributes = {};\n  private readonly maxVisibleButtons: number = 5;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Aria label values for pagination buttons */",
        "type": "number"
      },
      {
        "name": "page",
        "description": "/** Aria label values for pagination buttons */\nexport interface IAriaLabelValues {\n  /** Aria label for the first page button */\n  firstPage?: string;\n  /** Aria label for the last page button */\n  lastPage?: string;\n  /** Aria label for the next page button */\n  nextPage?: string;\n  /** Aria label for the page number button. Use {0} as placeholder for the page number */\n  page?: string;\n  /** Aria label for the previous page button */\n  previousPage?: string;\n}\n\nexport interface IPageChange {\n  /** The number of the newly selected page */\n  newPage: number;\n  /** The number of the previously selected page */\n  prevPage: number;\n}\n\n/**\n * Pagination component to navigate through pages of content\n */\n@Component({\n  tag: 'modus-wc-pagination',\n  styleUrl: 'modus-wc-pagination.scss',\n  shadow: false,\n})\nexport class ModusWcPagination {\n  private inheritedAttributes: Attributes = {};\n  private readonly maxVisibleButtons: number = 5;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Aria label values for pagination buttons */",
        "type": "number"
      },
      {
        "name": "size",
        "description": "/** Aria label values for pagination buttons */\nexport interface IAriaLabelValues {\n  /** Aria label for the first page button */\n  firstPage?: string;\n  /** Aria label for the last page button */\n  lastPage?: string;\n  /** Aria label for the next page button */\n  nextPage?: string;\n  /** Aria label for the page number button. Use {0} as placeholder for the page number */\n  page?: string;\n  /** Aria label for the previous page button */\n  previousPage?: string;\n}\n\nexport interface IPageChange {\n  /** The number of the newly selected page */\n  newPage: number;\n  /** The number of the previously selected page */\n  prevPage: number;\n}\n\n/**\n * Pagination component to navigate through pages of content\n */\n@Component({\n  tag: 'modus-wc-pagination',\n  styleUrl: 'modus-wc-pagination.scss',\n  shadow: false,\n})\nexport class ModusWcPagination {\n  private inheritedAttributes: Attributes = {};\n  private readonly maxVisibleButtons: number = 5;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Aria label values for pagination buttons */",
        "type": "ModusSize"
      }
    ],
    "events": [],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-wc-pagination.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { IAriaLabelValues } from './modus-wc-pagination';\n\nconst defaultLabelValues: IAriaLabelValues = {\n  firstPage: 'First page',\n  lastPage: 'Last page',\n  nextPage: 'Next page',\n  page: 'Page {0}',\n  previousPage: 'Previous page',\n};\n\ninterface PaginationArgs {\n  'aria-label-values'?: IAriaLabelValues;\n  count: number;\n  'custom-class'?: string;\n  'next-button-text'?: string;\n  page: number;\n  'prev-button-text'?: string;\n  size?: 'sm' | 'md' | 'lg';\n}\n\nconst meta: Meta<PaginationArgs> = {\n  title: 'Components/Pagination',\n  component: 'modus-wc-pagination',\n  args: {\n    'aria-label-values': defaultLabelValues,\n    count: 5,\n    'custom-class': '',\n    page: 1,\n    size: 'md',\n  },\n  argTypes: {\n    'aria-label-values': {\n      description: 'Custom aria label values for pagination buttons',\n      table: {\n        type: {\n          detail: `\n            Interface: IAriaLabelValues\n            Properties:\n            - firstPage (string, optional): Aria label for the first page button\n            - lastPage (string, optional): Aria label for the last page button\n            - nextPage (string, optional): Aria label for the next page button\n            - page (string, optional): Aria label for the page number button. Use {0} as placeholder for the page number\n            - previousPage (string, optional): Aria label for the previous page button\n          `,\n        },\n      },\n    },\n    size: {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg'],\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['pageChange'],\n    },\n    docs: {\n      description: {\n        component: `\n## Event Interface Documentation\n\nThe pageChange event emits an object with the following interface:\n\n\\`\\`\\`typescript\ninterface IPageChange {\n  /** The number of the newly selected page */\n  newPage: number;\n  /** The number of the previously selected page */\n  prevPage: number;\n}\n\\`\\`\\`\n        `,\n      },\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<PaginationArgs>;\n\nexport const Default: Story = {\n  render: (args) => html`\n    <modus-wc-pagination\n      .ariaLabelValues=${args['aria-label-values']}\n      count=${args.count}\n      custom-class=${ifDefined(args['custom-class'])}\n      next-button-text=\"${ifDefined(args['next-button-text'])}\"\n      page=${args.page}\n      prev-button-text=\"${ifDefined(args['prev-button-text'])}\"\n      size=${ifDefined(args.size)}\n    ></modus-wc-pagination>\n  `,\n};\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - In 1.0 the pagination component incorporated ellipses to indicate page skips. In 2.0, the component\n  has been simplified to only show at most 5 page buttons relative to current page with previous/next\n  and first/last navigation buttons.\n  - In 1.0 the \\`active-page\\` prop was used, while 2.0 uses \\`page\\` instead.\n  - The \\`pageChange\\` event in 1.0 emitted just the page number value. In 2.0, it emits an object\n  with \\`newPage\\` and \\`prevPage\\` properties.\n  - Size values have changed from verbose names (\\`small\\`, \\`medium\\`, \\`large\\`) to abbreviations (\\`sm\\`, \\`md\\`, \\`lg\\`).\n\n#### Prop Mapping\n\n| 1.0 Prop              | 2.0 Prop           | Notes                                                       |\n|-----------------------|--------------------|-------------------------------------------------------------|\n| active-page           | page               |                                                             |\n| aria-label            | aria-label         |                                                             |\n| max-page              | count              |                                                             |\n| min-page              |                    | Not carried over, minimum page is always 1                  |\n| next-page-button-text | next-button-text   |                                                             |\n| prev-page-button-text | prev-button-text   |                                                             |\n| size                  | size               | \\`small\\` \u2192 \\`sm\\`, \\`medium\\` \u2192 \\`md\\`, \\`large\\` \u2192 \\`lg\\` |\n\n#### Event Mapping\n\n| 1.0 Event   | 2.0 Event   | Notes                                                   |\n|-------------|-------------|---------------------------------------------------------|\n| pageChange  | pageChange  | Now emits an object with \\`newPage\\` and \\`prevPage\\`   |\n        `,\n      },\n    },\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  render: () => html`<div></div>`,\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-pagination\n      .ariaLabelValues=${args['aria-label-values']}\n      count=${args.count}\n      custom-class=${ifDefined(args['custom-class'])}\n      next-button-text=\"${ifDefined(args['next-button-text'])}\"\n      page=${args.page}\n      prev-button-text=\"${ifDefined(args['prev-button-text'])}\"\n      size=${ifDefined(args.size)}\n    ></modus-wc-pagination>",
        "\n    <modus-wc-pagination\n      .ariaLabelValues=${args['aria-label-values']}\n      count=${args.count}\n      custom-class=${ifDefined(args['custom-class'])}\n      next-button-text=\"${ifDefined(args['next-button-text'])}\"\n      page=${args.page}\n      prev-button-text=\"${ifDefined(args['prev-button-text'])}\"\n      size=${ifDefined(args.size)}\n    ></modus-wc-pagination>\n  "
      ],
      "variants": [],
      "prop_usage": {
        "text": [
          "${ifDefined(args["
        ]
      }
    },
    "tag_name": "modus-wc-pagination"
  },
  "modus-wc-progress": {
    "props": [],
    "events": [],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-wc-progress.stories.ts ---\n\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\n\ninterface ProgressArgs {\n  'custom-class'?: string;\n  indeterminate: boolean;\n  label?: string;\n  max?: number;\n  value: number;\n  variant?: 'default' | 'radial';\n}\n\nconst meta: Meta<ProgressArgs> = {\n  title: 'Components/Progress',\n  component: 'modus-wc-progress',\n  args: {\n    indeterminate: false,\n    max: 100,\n    value: 70,\n    variant: 'default',\n  },\n  argTypes: {\n    variant: {\n      control: { type: 'select' },\n      options: ['default', 'radial'],\n    },\n  },\n  parameters: {\n    layout: 'padded',\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<ProgressArgs>;\n\nexport const Default: Story = {\n  render: (args) => {\n    return html`\n      <modus-wc-progress\n        aria-label=\"Progress bar\"\n        custom-class=\"${ifDefined(args['custom-class'])}\"\n        ?indeterminate=${args.indeterminate}\n        label=${ifDefined(args.label)}\n        max=${ifDefined(args.max)}\n        value=${args.value}\n        variant=${ifDefined(args.variant)}\n      ></modus-wc-progress>\n    `;\n  },\n};\n\nexport const Indeterminate: Story = {\n  render: () => {\n    return html` <modus-wc-progress indeterminate=\"true\"></modus-wc-progress> `;\n  },\n};\n\nexport const SizeVariations: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<style>\n  modus-wc-progress.modus-wc-progress-container .size-small {\n    height: 0.5rem;\n  }\n  modus-wc-progress.modus-wc-progress-container .size-compact {\n    height: 0.25rem;\n  }\n</style>\n<div>\n  <div>\n    Default size\n    <modus-wc-progress value=${args.value}></modus-wc-progress>\n  </div>\n  <div>\n    Small size\n    <modus-wc-progress\n      value=${args.value}\n      custom-class=\"size-small\"\n    ></modus-wc-progress>\n  </div>\n  <div>\n    Compact size\n    <modus-wc-progress\n      value=${args.value}\n      custom-class=\"size-compact\"\n    ></modus-wc-progress>\n  </div>\n</div>\n    `;\n  },\n};\n\nexport const LabelTextColor: Story = {\n  args: {\n    label: 'Loading...',\n    value: 50,\n  },\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<style>\n  modus-wc-progress .modus-wc-progress-label.custom-label-color {\n    color: #f00;\n  }\n</style>\n<modus-wc-progress\n  value=${args.value}\n  label=${ifDefined(args.label)}\n  custom-class=\"custom-label-color\"\n></modus-wc-progress>\n    `;\n  },\n};\n\nexport const CustomBarColor: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<style>\n  modus-wc-progress .modus-wc-progress.custom-bar-color::-webkit-progress-value {\n    background-color: #f48;\n  }\n  modus-wc-progress .modus-wc-progress.custom-bar-color::-moz-progress-bar {\n    background-color: #f48;\n  }\n</style>\n<modus-wc-progress\n  value=${args.value}\n  custom-class=\"custom-bar-color\"\n></modus-wc-progress>\n    `;\n  },\n};\n\nexport const CustomBackgroundColor: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<style>\n  modus-wc-progress .modus-wc-progress.custom-bg-color {\n    background-color: #f00;\n  }\n</style>\n<modus-wc-progress\n  value=${args.value}\n  custom-class=\"custom-bg-color\"\n></modus-wc-progress>\n    `;\n  },\n};\n\nexport const RadialWithSlottedContent: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<style>\n  #radial-icon {\n    justify-content: center;\n  }\n</style>\n<modus-wc-progress\n  aria-label=\"progress radial\"\n  ?indeterminate=${args.indeterminate}\n  max=${ifDefined(args.max)}\n  variant=\"radial\"\n  value=${args.value}\n>\n  <modus-wc-icon id=\"radial-icon\" name=\"clipboard\" size=\"md\"></modus-wc-icon>\n  ${args.value}%\n</modus-wc-progress>\n    `;\n  },\n  parameters: {\n    layout: 'centered',\n  },\n};\n\nexport const RadialWithCustomSizeAndThickness: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<style>\n  .radial-progress--lg {\n    --size: 12rem;\n  }\n  .radial-progress--thin {\n    --thickness: 0.5rem;\n  }\n</style>\n<modus-wc-progress\n  aria-label=\"progress radial\"\n  custom-class=\"radial-progress--lg\"\n  ?indeterminate=${args.indeterminate}\n  max=${ifDefined(args.max)}\n  variant=\"radial\"\n  value=${args.value}\n>\n  ${args.value}%\n</modus-wc-progress>\n<modus-wc-progress\n  aria-label=\"progress radial\"\n  custom-class=\"radial-progress--lg radial-progress--thin\"\n  ?indeterminate=${args.indeterminate}\n  max=${ifDefined(args.max)}\n  variant=\"radial\"\n  value=${args.value}\n>\n  ${args.value}%\n</modus-wc-progress>\n    `;\n  },\n  parameters: {\n    layout: 'centered',\n  },\n};\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - Colors and sizes are now handled through CSS instead of direct props.\n  - The \\`mode\\` prop has been replaced with an \\`indeterminate\\` boolean prop.\n\n#### Prop Mapping\n\n| 1.0 Prop          | 2.0 Prop      | Notes                                                |\n|-------------------|---------------|------------------------------------------------------|\n| aria-label        | aria-label    |                                                      |\n| background-color  |               | Not carried over, use CSS instead                    |\n| color             |               | Not carried over, use CSS instead                    |\n| max-value         | max           |                                                      |\n| min-value         |               | Not carried over                                     |\n| mode              | indeterminate | 1.0: \\`determinate\\`/\\`indeterminate\\`, 2.0: boolean |\n| size              |               | Not carried over, use CSS instead                    |\n| text              | label         |                                                      |\n| text-color        |               | Not carried over, use CSS instead                    |\n| value             | value         |                                                      |\n        `,\n      },\n    },\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  render: () => html`<div></div>`,\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-progress\n        aria-label=\"Progress bar\"\n        custom-class=\"${ifDefined(args['custom-class'])}\"\n        ?indeterminate=${args.indeterminate}\n        label=${ifDefined(args.label)}\n        max=${ifDefined(args.max)}\n        value=${args.value}\n        variant=${ifDefined(args.variant)}\n      ></modus-wc-progress>",
        "<modus-wc-progress indeterminate=\"true\"></modus-wc-progress>",
        "<modus-wc-progress value=${args.value}></modus-wc-progress>",
        "<modus-wc-progress\n      value=${args.value}\n      custom-class=\"size-small\"\n    ></modus-wc-progress>",
        "<modus-wc-progress\n      value=${args.value}\n      custom-class=\"size-compact\"\n    ></modus-wc-progress>"
      ],
      "variants": [
        "radial"
      ],
      "prop_usage": {
        "label": [
          "Progress bar",
          "progress radial"
        ],
        "class": [
          "${ifDefined(args[",
          "size-small",
          "size-compact",
          "custom-label-color",
          "custom-bar-color",
          "custom-bg-color",
          "radial-progress--lg",
          "radial-progress--lg radial-progress--thin"
        ],
        "indeterminate": [
          "true"
        ],
        "variant": [
          "radial"
        ],
        "id": [
          "radial-icon"
        ],
        "name": [
          "clipboard"
        ],
        "size": [
          "md"
        ]
      }
    },
    "tag_name": "modus-wc-progress"
  },
  "modus-wc-radio": {
    "props": [],
    "events": [],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-wc-radio.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { ModusSize } from '../types';\n\ninterface RadioArgs {\n  'custom-class'?: string;\n  disabled?: boolean;\n  'input-id'?: string;\n  'input-tab-index'?: number;\n  label?: string;\n  name?: string;\n  required?: boolean;\n  size?: ModusSize;\n  value: boolean;\n}\n\nconst meta: Meta<RadioArgs> = {\n  title: 'Components/Forms/Radio',\n  component: 'modus-wc-radio',\n  args: {\n    'custom-class': '',\n    disabled: false,\n    label: 'Label',\n    name: '',\n    required: false,\n    size: 'md',\n    value: true,\n  },\n  argTypes: {\n    size: {\n      control: { type: 'select' },\n      options: ['xs', 'sm', 'md', 'lg'],\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['inputBlur', 'inputChange', 'inputFocus'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<RadioArgs>;\n\nexport const Default: Story = {\n  render: (args) => {\n    return html`\n      <modus-wc-radio\n        aria-label=\"Radio\"\n        custom-class=${ifDefined(args['custom-class'])}\n        ?disabled=${args.disabled}\n        input-id=${ifDefined(args['input-id'])}\n        input-tab-index=${ifDefined(args['input-tab-index'])}\n        label=${ifDefined(args.label)}\n        name=${ifDefined(args.name)}\n        ?required=${args.required}\n        size=${ifDefined(args.size)}\n        .value=${args.value}\n      ></modus-wc-radio>\n    `;\n  },\n};\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - In 1.0 input state was maintained by the component. 2.0 components encourage users to follow a controlled\n  input model. See the Form Inputs [documentation](/docs/documentation-form-inputs--docs) for\n  additional info and examples.\n  - Size values have changed from verbose names (\\`small\\`, \\`medium\\`) to abbreviations (\\`xs\\`, \\`sm\\`, \\`md\\`, \\`lg\\`).\n\n#### Prop Mapping\n\n| 1.0 Prop            | 2.0 Prop    | Notes                                                |\n|---------------------|-------------|----------------------------------------------------- |\n| checked             | value       |                                                      |\n| disabled            | disabled    |                                                      |\n| handle-button-click |             | Not carried over                                     |\n| handle-keydown      |             | Not carried over                                     |\n| id                  | input-id    |                                                      |\n| label               | label       |                                                      |\n| name                | name        |                                                      |\n| ref                 |             | Not carried over                                     |\n| size                | size        | \\`small\\` \u2192 \\`sm\\`, \\`medium\\` \u2192 \\`md\\`              |\n\n#### Event Mapping\n\n| 1.0 Event   | 2.0 Event   | Notes                                               |\n|-------------|-------------|-----------------------------------------------------|\n| buttonClick | inputChange | Now emits an \\`InputEvent\\` instead of a \\`string\\` |\n        `,\n      },\n    },\n    // To hide the actual story rendering and only show docs:\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  // Simple render function or leave it empty\n  render: () => html`<div></div>`,\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-radio\n        aria-label=\"Radio\"\n        custom-class=${ifDefined(args['custom-class'])}\n        ?disabled=${args.disabled}\n        input-id=${ifDefined(args['input-id'])}\n        input-tab-index=${ifDefined(args['input-tab-index'])}\n        label=${ifDefined(args.label)}\n        name=${ifDefined(args.name)}\n        ?required=${args.required}\n        size=${ifDefined(args.size)}\n        .value=${args.value}\n      ></modus-wc-radio>",
        "\n      <modus-wc-radio\n        aria-label=\"Radio\"\n        custom-class=${ifDefined(args['custom-class'])}\n        ?disabled=${args.disabled}\n        input-id=${ifDefined(args['input-id'])}\n        input-tab-index=${ifDefined(args['input-tab-index'])}\n        label=${ifDefined(args.label)}\n        name=${ifDefined(args.name)}\n        ?required=${args.required}\n        size=${ifDefined(args.size)}\n        .value=${args.value}\n      ></modus-wc-radio>\n    "
      ],
      "variants": [],
      "prop_usage": {
        "label": [
          "Radio"
        ]
      }
    },
    "tag_name": "modus-wc-radio"
  },
  "modus-wc-rating": {
    "props": [
      {
        "name": "count",
        "description": "/**\n * A rating component that allows users to choose a rating from predefined options\n */\n@Component({\n  tag: 'modus-wc-rating',\n  styleUrl: 'modus-wc-rating.scss',\n  shadow: false,\n})\nexport class ModusWcRating {\n  private inheritedAttributes: Attributes = {};\n  private uniqueRatingGroupName: string;\n  private readonly VARIANTS_WITHOUT_HALF_SUPPORT: ModusWcRatingVariant[] = [\n    'smiley',\n    'thumb',\n  ];\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Whether to allow half-ratings. Only applies to star and heart variants. */",
        "type": "number"
      },
      {
        "name": "variant",
        "description": "/**\n * A rating component that allows users to choose a rating from predefined options\n */\n@Component({\n  tag: 'modus-wc-rating',\n  styleUrl: 'modus-wc-rating.scss',\n  shadow: false,\n})\nexport class ModusWcRating {\n  private inheritedAttributes: Attributes = {};\n  private uniqueRatingGroupName: string;\n  private readonly VARIANTS_WITHOUT_HALF_SUPPORT: ModusWcRatingVariant[] = [\n    'smiley',\n    'thumb',\n  ];\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Whether to allow half-ratings. Only applies to star and heart variants. */",
        "type": "ModusWcRatingVariant"
      }
    ],
    "events": [],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-wc-rating.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { ModusWcRatingVariant } from './modus-wc-rating';\n\ninterface RatingArgs {\n  'allow-half'?: boolean;\n  count: number;\n  'custom-class'?: string;\n  disabled?: boolean;\n  getAriaLabelText?: (index: number) => string;\n  size?: 'sm' | 'md' | 'lg';\n  value?: number;\n  variant: ModusWcRatingVariant;\n}\n\nconst meta: Meta<RatingArgs> = {\n  title: 'Components/Forms/Rating',\n  component: 'modus-wc-rating',\n  args: {\n    'allow-half': false,\n    count: 5,\n    'custom-class': '',\n    disabled: false,\n    getAriaLabelText: (index: number) => `${index} rating`,\n    size: 'md',\n    value: 0,\n    variant: 'smiley',\n  },\n  argTypes: {\n    size: {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg'],\n    },\n    variant: {\n      control: { type: 'select' },\n      options: ['heart', 'smiley', 'star', 'thumb'],\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['ratingChange'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<RatingArgs>;\n\nexport const Default: Story = {\n  render: (args) => html`\n    <modus-wc-rating\n      aria-label=\"Rating scale component\"\n      allow-half=${ifDefined(args['allow-half'])}\n      count=${args.count}\n      custom-class=${ifDefined(args['custom-class'])}\n      disabled=${ifDefined(args.disabled)}\n      size=${ifDefined(args.size)}\n      value=${ifDefined(args.value)}\n      variant=${args.variant}\n      .getAriaLabelText=${args.getAriaLabelText}\n    ></modus-wc-rating>\n  `,\n};\n\nexport const CustomAriaLabels: Story = {\n  render: (args) => {\n    const ariaLabelText = (index: number) =>\n      `Custom label for rating item ${index}`;\n\n    // prettier-ignore\n    return html`\n<script>\n  const myAriaLabelText = (index) => {\n    return 'Custom label for rating item ' + index.toString();\n  };\n</script>\n<modus-wc-rating\n  aria-label=\"Rating scale component\"\n  allow-half=${ifDefined(args['allow-half'])}\n  count=${args.count}\n  custom-class=\"custom-rating-component\"\n  disabled=${ifDefined(args.disabled)}\n  size=${ifDefined(args.size)}\n  value=${ifDefined(args.value)}\n  variant=${args.variant}\n  .getAriaLabelText=${ariaLabelText}\n></modus-wc-rating>\n    `;\n  },\n};\n\nexport const CustomColors: Story = {\n  // prettier-ignore\n  render: (args) => html`\n<style>\n  .custom-color-rating-component {\n    --modus-wc-rating-item-color: var(--modus-wc-color-yellow-dark);\n  }\n</style>\n<modus-wc-rating\n  aria-label=\"Rating scale component\"\n  allow-half=${ifDefined(args['allow-half'])}\n  count=${args.count}\n  custom-class=\"custom-color-rating-component\"\n  disabled=${ifDefined(args.disabled)}\n  size=${ifDefined(args.size)}\n  value=\"3\"\n  variant=\"star\"\n></modus-wc-rating>\n  `,\n};\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - In 1.0 input state was maintained by the component. 2.0 components encourage users to follow a controlled\n  input model. See the Form Inputs [documentation](/docs/documentation-form-inputs--docs) for\n  additional info and examples.\n  - Type/variant values have changed from \\`smileys\\` to \\`smiley\\` and \\`thumbs\\` to \\`thumb\\`.\n\n#### Prop Mapping\n\n| 1.0 Prop    | 2.0 Prop    | Notes                                                |\n|-------------|-------------|------------------------------------------------------|\n| aria-label  | aria-label  |                                                      |\n| disabled    | disabled    |                                                      |\n| type        | variant     | \\`smileys\\` \u2192 \\`smiley\\`, \\`thumbs\\` \u2192 \\`thumb\\`     |\n\n#### Event Mapping\n\n| 1.0 Event          | 2.0 Event    | Notes                                         |\n|--------------------|--------------|-----------------------------------------------|\n| sentimentSelection | ratingChange |                                               |\n        `,\n      },\n    },\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  render: () => html`<div></div>`,\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-rating\n      aria-label=\"Rating scale component\"\n      allow-half=${ifDefined(args['allow-half'])}\n      count=${args.count}\n      custom-class=${ifDefined(args['custom-class'])}\n      disabled=${ifDefined(args.disabled)}\n      size=${ifDefined(args.size)}\n      value=${ifDefined(args.value)}\n      variant=${args.variant}\n      .getAriaLabelText=${args.getAriaLabelText}\n    ></modus-wc-rating>",
        "<modus-wc-rating\n  aria-label=\"Rating scale component\"\n  allow-half=${ifDefined(args['allow-half'])}\n  count=${args.count}\n  custom-class=\"custom-rating-component\"\n  disabled=${ifDefined(args.disabled)}\n  size=${ifDefined(args.size)}\n  value=${ifDefined(args.value)}\n  variant=${args.variant}\n  .getAriaLabelText=${ariaLabelText}\n></modus-wc-rating>",
        "<modus-wc-rating\n  aria-label=\"Rating scale component\"\n  allow-half=${ifDefined(args['allow-half'])}\n  count=${args.count}\n  custom-class=\"custom-color-rating-component\"\n  disabled=${ifDefined(args.disabled)}\n  size=${ifDefined(args.size)}\n  value=\"3\"\n  variant=\"star\"\n></modus-wc-rating>",
        "\n    <modus-wc-rating\n      aria-label=\"Rating scale component\"\n      allow-half=${ifDefined(args['allow-half'])}\n      count=${args.count}\n      custom-class=${ifDefined(args['custom-class'])}\n      disabled=${ifDefined(args.disabled)}\n      size=${ifDefined(args.size)}\n      value=${ifDefined(args.value)}\n      variant=${args.variant}\n      .getAriaLabelText=${args.getAriaLabelText}\n    ></modus-wc-rating>\n  ",
        "\n<script>\n  const myAriaLabelText = (index) => {\n    return 'Custom label for rating item ' + index.toString();\n  };\n</script>\n<modus-wc-rating\n  aria-label=\"Rating scale component\"\n  allow-half=${ifDefined(args['allow-half'])}\n  count=${args.count}\n  custom-class=\"custom-rating-component\"\n  disabled=${ifDefined(args.disabled)}\n  size=${ifDefined(args.size)}\n  value=${ifDefined(args.value)}\n  variant=${args.variant}\n  .getAriaLabelText=${ariaLabelText}\n></modus-wc-rating>\n    "
      ],
      "variants": [
        "star"
      ],
      "prop_usage": {
        "label": [
          "Rating scale component"
        ],
        "class": [
          "custom-rating-component",
          "custom-color-rating-component"
        ],
        "value": [
          "3"
        ],
        "variant": [
          "star"
        ]
      }
    },
    "tag_name": "modus-wc-rating"
  },
  "modus-wc-select": {
    "props": [],
    "events": [],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-wc-select.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { ISelectOption } from './modus-wc-select';\nimport { IInputFeedbackProp, ModusSize } from '../types';\n\nconst options: ISelectOption[] = [\n  { label: 'Option 1', value: '1' },\n  { label: 'Option 2', value: '2' },\n  { label: 'Option 3', value: '3' },\n];\n\ninterface SelectArgs {\n  bordered?: boolean;\n  'custom-class'?: string;\n  disabled?: boolean;\n  feedback?: IInputFeedbackProp;\n  'input-aria-invalid'?: 'true' | 'false';\n  'input-id'?: string;\n  'input-tab-index'?: number;\n  label?: string;\n  name?: string;\n  options: ISelectOption[];\n  required?: boolean;\n  size?: ModusSize;\n  value: string;\n}\n\nconst meta: Meta<SelectArgs> = {\n  title: 'Components/Forms/Select',\n  component: 'modus-wc-select',\n  args: {\n    bordered: true,\n    disabled: false,\n    label: 'Label',\n    options,\n    size: 'md',\n    value: '',\n  },\n  argTypes: {\n    feedback: {\n      description: 'Feedback prop for input components',\n      table: {\n        type: {\n          detail: `\n            Interface: IInputFeedbackProp\n            Properties:\n            - level ('error' | 'info' | 'success' | 'warning'): The feedback level\n            - message (string, optional): The feedback message\n          `,\n        },\n      },\n    },\n    'input-aria-invalid': {\n      control: { type: 'select' },\n      options: ['true', 'false'],\n    },\n    options: {\n      description: 'Array of option objects for the select dropdown',\n      table: {\n        type: {\n          detail: `\n            Interface: ISelectOption\n            Properties:\n            - disabled (boolean, optional): Whether the option is disabled and cannot be selected\n            - label (string): Display text for the option\n            - value (string): The value of the option\n          `,\n        },\n      },\n    },\n    size: {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg'],\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['inputBlur', 'inputChange', 'inputFocus'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<SelectArgs>;\n\nexport const Default: Story = {\n  render: (args) => html`\n    <modus-wc-select\n      aria-label=\"Select input\"\n      ?bordered=${args.bordered}\n      custom-class=${ifDefined(args['custom-class'])}\n      ?disabled=${args.disabled}\n      .feedback=${args.feedback}\n      input-aria-invalid=${ifDefined(args['input-aria-invalid'])}\n      input-id=${ifDefined(args['input-id'])}\n      input-tab-index=${ifDefined(args['input-tab-index'])}\n      label=${ifDefined(args.label)}\n      name=${ifDefined(args.name)}\n      .options=${args.options}\n      ?required=${args.required}\n      size=${ifDefined(args.size)}\n      .value=${args.value}\n    ></modus-wc-select>\n  `,\n};\n\nconst errorFeedback: IInputFeedbackProp = {\n  level: 'error',\n  message: 'Value is required.',\n};\n\nexport const WithErrorFeedback: Story = {\n  render: (args) => html`\n    <modus-wc-select\n      aria-label=\"Select input\"\n      .feedback=${errorFeedback}\n      label=${ifDefined(args.label)}\n      .options=${[]}\n      ?required=${true}\n      .value=${args.value}\n    ></modus-wc-select>\n  `,\n};\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - In 1.0 input state was maintained by the component. 2.0 components encourage users to follow a controlled\n  input model. See the Form Inputs [documentation](/docs/documentation-form-inputs--docs) for\n  additional info and examples.\n  - The options format has changed to use a standardized \\`ISelectOption\\` object array.\n  - Size values have changed from verbose names (\\`medium\\`, \\`large\\`) to abbreviations (\\`sm\\`, \\`md\\`, \\`lg\\`).\n\n#### Prop Mapping\n\n| 1.0 Prop              | 2.0 Prop            | Notes                                                |\n|-----------------------|---------------------|------------------------------------------------------|\n| aria-label            | aria-label          |                                                      |\n| disabled              | disabled            |                                                      |\n| error-text            | feedback.message    | Use \\`feedback\\` level                               |\n| helper-text           |                     | Not carried over                                     |\n| label                 | label               |                                                      |\n| options               | options             | Format changed to require array of \\`ISelectOption\\` objects |\n| options-display-prop  |                     | Not carried over                                     |\n| placeholder           |                     | Not carried over                                     |\n| required              | required            |                                                      |\n| size                  | size                | \\`medium\\` \u2192 \\`md\\`, \\`large\\` \u2192 \\`lg\\`              |\n| valid-text            | feedback.message    | Use \\`feedback\\` level                               |\n| value                 | value               |                                                      |\n\n#### Event Mapping\n\n| 1.0 Event    | 2.0 Event   | Notes            |\n|--------------|-------------|------------------|\n| valueChange  | inputChange |                  |\n| inputBlur    | inputBlur   |                  |\n        `,\n      },\n    },\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  render: () => html`<div></div>`,\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-select\n      aria-label=\"Select input\"\n      ?bordered=${args.bordered}\n      custom-class=${ifDefined(args['custom-class'])}\n      ?disabled=${args.disabled}\n      .feedback=${args.feedback}\n      input-aria-invalid=${ifDefined(args['input-aria-invalid'])}\n      input-id=${ifDefined(args['input-id'])}\n      input-tab-index=${ifDefined(args['input-tab-index'])}\n      label=${ifDefined(args.label)}\n      name=${ifDefined(args.name)}\n      .options=${args.options}\n      ?required=${args.required}\n      size=${ifDefined(args.size)}\n      .value=${args.value}\n    ></modus-wc-select>",
        "<modus-wc-select\n      aria-label=\"Select input\"\n      .feedback=${errorFeedback}\n      label=${ifDefined(args.label)}\n      .options=${[]}\n      ?required=${true}\n      .value=${args.value}\n    ></modus-wc-select>",
        "\n    <modus-wc-select\n      aria-label=\"Select input\"\n      ?bordered=${args.bordered}\n      custom-class=${ifDefined(args['custom-class'])}\n      ?disabled=${args.disabled}\n      .feedback=${args.feedback}\n      input-aria-invalid=${ifDefined(args['input-aria-invalid'])}\n      input-id=${ifDefined(args['input-id'])}\n      input-tab-index=${ifDefined(args['input-tab-index'])}\n      label=${ifDefined(args.label)}\n      name=${ifDefined(args.name)}\n      .options=${args.options}\n      ?required=${args.required}\n      size=${ifDefined(args.size)}\n      .value=${args.value}\n    ></modus-wc-select>\n  ",
        "\n    <modus-wc-select\n      aria-label=\"Select input\"\n      .feedback=${errorFeedback}\n      label=${ifDefined(args.label)}\n      .options=${[]}\n      ?required=${true}\n      .value=${args.value}\n    ></modus-wc-select>\n  "
      ],
      "variants": [],
      "prop_usage": {
        "label": [
          "Select input"
        ]
      }
    },
    "tag_name": "modus-wc-select"
  },
  "modus-wc-skeleton": {
    "props": [
      {
        "name": "height",
        "description": "/**\n * A customizable skeleton component used to create skeletons of various sizes and shapes\n */\n@Component({\n  tag: 'modus-wc-skeleton',\n  styleUrl: 'modus-wc-skeleton.scss',\n  shadow: false,\n})\nexport class ModusWcSkeleton {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */",
        "type": "string"
      },
      {
        "name": "width",
        "description": "/**\n * A customizable skeleton component used to create skeletons of various sizes and shapes\n */\n@Component({\n  tag: 'modus-wc-skeleton',\n  styleUrl: 'modus-wc-skeleton.scss',\n  shadow: false,\n})\nexport class ModusWcSkeleton {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */",
        "type": "string"
      }
    ],
    "events": [],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-wc-skeleton.stories.ts ---\n\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\n\ninterface SkeletonArgs {\n  'custom-class'?: string;\n  height?: string;\n  shape?: 'circle' | 'rectangle';\n  width?: string;\n}\n\nconst meta: Meta<SkeletonArgs> = {\n  title: 'Components/Skeleton',\n  component: 'modus-wc-skeleton',\n  args: {\n    'custom-class': '',\n    height: '1.5rem',\n    shape: 'rectangle',\n    width: '100%',\n  },\n  argTypes: {\n    shape: {\n      control: {\n        type: 'select',\n      },\n      options: ['circle', 'rectangle'],\n    },\n  },\n  parameters: {\n    layout: 'padded',\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<SkeletonArgs>;\n\nexport const Default: Story = {\n  render: (args) => {\n    return html`\n      <modus-wc-skeleton\n        custom-class=${ifDefined(args['custom-class'])}\n        height=${ifDefined(args.height)}\n        shape=${ifDefined(args.shape)}\n        width=${ifDefined(args.width)}\n      ></modus-wc-skeleton>\n    `;\n  },\n};\n\nexport const Circle: Story = {\n  render: () => {\n    return html`\n      <modus-wc-skeleton\n        height=\"5rem\"\n        shape=\"circle\"\n        width=\"5rem\"\n      ></modus-wc-skeleton>\n    `;\n  },\n};\n\nexport const Square: Story = {\n  render: () => {\n    return html`\n      <modus-wc-skeleton height=\"5rem\" width=\"5rem\"></modus-wc-skeleton>\n    `;\n  },\n};\n\nexport const Composed: Story = {\n  render: () => {\n    // prettier-ignore\n    return html`\n<style>\n  .skeleton-container {\n    width: 13rem;\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n  }\n\n  .skeleton-profile {\n    display: flex;\n    gap: 1rem;\n  }\n\n  .skeleton-text {\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n  }\n</style>\n<div class=\"skeleton-container\">\n  <div class=\"skeleton-profile\">\n    <modus-wc-skeleton\n      height=\"4rem\"\n      shape=\"circle\"\n      width=\"4rem\"\n    ></modus-wc-skeleton>\n    <div class=\"skeleton-text\">\n      <modus-wc-skeleton width=\"5rem\"></modus-wc-skeleton>\n      <modus-wc-skeleton width=\"7rem\"></modus-wc-skeleton>\n    </div>\n  </div>\n  <modus-wc-skeleton height=\"8rem\"></modus-wc-skeleton>\n</div>\n    `;\n  },\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-skeleton\n        custom-class=${ifDefined(args['custom-class'])}\n        height=${ifDefined(args.height)}\n        shape=${ifDefined(args.shape)}\n        width=${ifDefined(args.width)}\n      ></modus-wc-skeleton>",
        "<modus-wc-skeleton\n        height=\"5rem\"\n        shape=\"circle\"\n        width=\"5rem\"\n      ></modus-wc-skeleton>",
        "<modus-wc-skeleton height=\"5rem\" width=\"5rem\"></modus-wc-skeleton>",
        "<modus-wc-skeleton\n      height=\"4rem\"\n      shape=\"circle\"\n      width=\"4rem\"\n    ></modus-wc-skeleton>",
        "<modus-wc-skeleton width=\"5rem\"></modus-wc-skeleton>"
      ],
      "variants": [],
      "prop_usage": {
        "height": [
          "5rem",
          "4rem",
          "8rem"
        ],
        "shape": [
          "circle"
        ],
        "width": [
          "5rem",
          "4rem",
          "7rem"
        ],
        "class": [
          "skeleton-container",
          "skeleton-profile",
          "skeleton-text"
        ]
      }
    },
    "tag_name": "modus-wc-skeleton"
  },
  "modus-wc-slider": {
    "props": [],
    "events": [],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-wc-slider.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { ModusSize } from '../types';\n\ninterface SliderArgs {\n  'custom-class'?: string;\n  disabled?: boolean;\n  'input-id'?: string;\n  'input-tab-index'?: number;\n  label?: string;\n  max?: number;\n  min?: number;\n  name?: string;\n  required?: boolean;\n  size?: ModusSize;\n  step?: number;\n  value: boolean;\n}\n\nconst meta: Meta<SliderArgs> = {\n  title: 'Components/Forms/Slider',\n  component: 'modus-wc-slider',\n  args: {\n    'custom-class': '',\n    disabled: false,\n    label: 'Label',\n    name: '',\n    required: false,\n    size: 'md',\n    value: true,\n  },\n  argTypes: {\n    size: {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg'],\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['inputBlur', 'inputChange', 'inputFocus'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<SliderArgs>;\n\nexport const Default: Story = {\n  render: (args) => {\n    return html`\n      <modus-wc-slider\n        aria-label=\"Slider\"\n        custom-class=${ifDefined(args['custom-class'])}\n        ?disabled=${args.disabled}\n        input-id=${ifDefined(args['input-id'])}\n        input-tab-index=${ifDefined(args['input-tab-index'])}\n        label=${ifDefined(args.label)}\n        max=${ifDefined(args.max)}\n        min=${ifDefined(args.min)}\n        name=${ifDefined(args.name)}\n        ?required=${args.required}\n        size=${ifDefined(args.size)}\n        step=${ifDefined(args.step)}\n        .value=${args.value}\n      ></modus-wc-slider>\n    `;\n  },\n};\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - In 1.0 input state was maintained by the component. 2.0 components encourage users to follow a controlled\n  input model. See the Form Inputs [documentation](/docs/documentation-form-inputs--docs) for additional info and examples.\n  - Property names have changed: \\`max-value\\` \u2192 \\`max\\`, \\`min-value\\` \u2192 \\`min\\`.\n\n#### Prop Mapping\n\n| 1.0 Prop    | 2.0 Prop     | Notes |\n|-------------|--------------|-------|\n| aria-label  | aria-label   |       |\n| disabled    | disabled     |       |\n| label       | label        |       |\n| max-value   | max          |       |\n| min-value   | min          |       |\n| value       | value        |       |\n\n#### Event Mapping\n\n| 1.0 Event   | 2.0 Event   | Notes            |\n|-------------|-------------|------------------|\n| valueChange |             | Not carried over |\n| valueInput  | inputChange |                  |\n        `,\n      },\n    },\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  render: () => html`<div></div>`,\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-slider\n        aria-label=\"Slider\"\n        custom-class=${ifDefined(args['custom-class'])}\n        ?disabled=${args.disabled}\n        input-id=${ifDefined(args['input-id'])}\n        input-tab-index=${ifDefined(args['input-tab-index'])}\n        label=${ifDefined(args.label)}\n        max=${ifDefined(args.max)}\n        min=${ifDefined(args.min)}\n        name=${ifDefined(args.name)}\n        ?required=${args.required}\n        size=${ifDefined(args.size)}\n        step=${ifDefined(args.step)}\n        .value=${args.value}\n      ></modus-wc-slider>",
        "\n      <modus-wc-slider\n        aria-label=\"Slider\"\n        custom-class=${ifDefined(args['custom-class'])}\n        ?disabled=${args.disabled}\n        input-id=${ifDefined(args['input-id'])}\n        input-tab-index=${ifDefined(args['input-tab-index'])}\n        label=${ifDefined(args.label)}\n        max=${ifDefined(args.max)}\n        min=${ifDefined(args.min)}\n        name=${ifDefined(args.name)}\n        ?required=${args.required}\n        size=${ifDefined(args.size)}\n        step=${ifDefined(args.step)}\n        .value=${args.value}\n      ></modus-wc-slider>\n    "
      ],
      "variants": [],
      "prop_usage": {
        "label": [
          "Slider"
        ]
      }
    },
    "tag_name": "modus-wc-slider"
  },
  "modus-wc-stepper": {
    "props": [
      {
        "name": "steps",
        "description": "/** The color theme of the step */\n  color?:\n    | 'primary'\n    | 'secondary'\n    | 'accent'\n    | 'info'\n    | 'success'\n    | 'warning'\n    | 'error'\n    | 'neutral';\n  /** Custom content to display in the step indicator */\n  content?: string;\n  /** Custom CSS class to apply to the step */\n  customClass?: string;\n  /** Text label for the step */\n  label?: string;\n}\n\n/**\n * Used to show a list of steps in a process.\n */\n@Component({\n  tag: 'modus-wc-stepper',\n  styleUrl: 'modus-wc-stepper.scss',\n  shadow: false,\n})\nexport class ModusWcStepper {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the steps element. */",
        "type": "IStepperItem[]"
      }
    ],
    "events": [],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-wc-stepper.stories.ts ---\n\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { Orientation } from '../types';\n\ninterface StepperArgs {\n  'custom-class'?: string;\n  orientation: Orientation;\n  steps?: IStepperItem[];\n}\n\ninterface IStepperItem {\n  color?:\n    | 'primary'\n    | 'secondary'\n    | 'accent'\n    | 'info'\n    | 'success'\n    | 'warning'\n    | 'error'\n    | 'neutral';\n  content?: string;\n  customClass?: string;\n  label?: string;\n}\n\nconst meta: Meta<StepperArgs> = {\n  title: 'Components/Stepper',\n  component: 'modus-wc-stepper',\n  args: {\n    steps: [\n      { label: 'Scale', color: 'primary' },\n      { label: 'Belong', color: 'primary' },\n      { label: 'Grow', color: 'warning' },\n      { label: 'Innovate', content: '\ud83d\ude80' },\n    ],\n  },\n  argTypes: {\n    'custom-class': {\n      control: 'text',\n    },\n    orientation: {\n      control: { type: 'select' },\n      options: ['horizontal', 'vertical'],\n    },\n    steps: {\n      description: 'Array of step objects defining the steps to display',\n      table: {\n        type: {\n          detail: `\n            Interface: IStepperItem\n            Properties:\n            - color ('primary' | 'secondary' | 'accent' | 'info' | 'success' | 'warning' | 'error' | 'neutral', optional): The color theme of the step\n            - content (string, optional): Custom content to display in the step indicator\n            - customClass (string, optional): Custom CSS class to apply to the step\n            - label (string, optional): Text label for the step\n          `,\n        },\n      },\n    },\n  },\n  parameters: {\n    layout: 'padded',\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<StepperArgs>;\n\nconst Template: Story = {\n  // prettier-ignore\n  render: (args) => html`\n<modus-wc-stepper\n  custom-class=\"${ifDefined(args['custom-class'])}\"\n  orientation=\"${ifDefined(args.orientation)}\"\n  .steps=\"${args.steps}\"\n>\n</modus-wc-stepper>\n  `,\n};\n\nexport const Default: Story = { ...Template };\n",
    "storybook": {
      "examples": [
        "<modus-wc-stepper\n  custom-class=\"${ifDefined(args['custom-class'])}\"\n  orientation=\"${ifDefined(args.orientation)}\"\n  .steps=\"${args.steps}\"\n>\n</modus-wc-stepper>",
        "\n<modus-wc-stepper\n  custom-class=\"${ifDefined(args['custom-class'])}\"\n  orientation=\"${ifDefined(args.orientation)}\"\n  .steps=\"${args.steps}\"\n>\n</modus-wc-stepper>\n  "
      ],
      "variants": [],
      "prop_usage": {
        "class": [
          "${ifDefined(args["
        ],
        "orientation": [
          "${ifDefined(args.orientation)}"
        ],
        "steps": [
          "${args.steps}"
        ]
      }
    },
    "tag_name": "modus-wc-stepper"
  },
  "modus-wc-switch": {
    "props": [],
    "events": [],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-wc-switch.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { ModusSize } from '../types';\n\ninterface SwitchArgs {\n  'custom-class'?: string;\n  disabled?: boolean;\n  indeterminate?: boolean;\n  'input-id'?: string;\n  'input-tab-index'?: number;\n  label?: string;\n  name?: string;\n  required?: boolean;\n  size?: ModusSize;\n  value: boolean;\n}\n\nconst meta: Meta<SwitchArgs> = {\n  title: 'Components/Forms/Switch',\n  component: 'modus-wc-switch',\n  args: {\n    'custom-class': '',\n    disabled: false,\n    indeterminate: false,\n    label: 'Label',\n    name: '',\n    required: false,\n    size: 'md',\n    value: true,\n  },\n  argTypes: {\n    size: {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg'],\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['inputBlur', 'inputChange', 'inputFocus'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<SwitchArgs>;\n\nexport const Default: Story = {\n  render: (args) => {\n    return html`\n      <modus-wc-switch\n        aria-label=\"Toggle\"\n        custom-class=${ifDefined(args['custom-class'])}\n        ?disabled=${args.disabled}\n        .indeterminate=${args.indeterminate}\n        input-id=${ifDefined(args['input-id'])}\n        input-tab-index=${ifDefined(args['input-tab-index'])}\n        label=${ifDefined(args.label)}\n        name=${ifDefined(args.name)}\n        ?required=${args.required}\n        size=${ifDefined(args.size)}\n        .value=${args.value}\n      ></modus-wc-switch>\n    `;\n  },\n};\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - In 1.0 input state was maintained by the component. 2.0 components encourage users to follow a controlled\n  input model. See the Form Inputs documentation for additional info and examples.\n  - \\`checked\\` prop has been renamed to \\`value\\` to maintain consistency across form components.\n  - Size values have changed from verbose names (\\`small\\`, \\`medium\\`) to abbreviations (\\`sm\\`, \\`md\\`, \\`lg\\`).\n\n#### Prop Mapping\n\n| 1.0 Prop         | 2.0 Prop            | Notes                                                       |\n|------------------|---------------------|-------------------------------------------------------------|\n| aria-label       | aria-label          |                                                             |\n| checked          | value               |                                                             |\n| disabled         | disabled            |                                                             |\n| label            | label               |                                                             |\n| size             | size                | \\`small\\` \u2192 \\`sm\\`, \\`medium\\` \u2192 \\`md\\`                     |\n\n#### Event Mapping\n\n| 1.0 Event      | 2.0 Event      | Notes                                                 |\n|----------------|----------------|-------------------------------------------------------|\n| switchClick    | inputChange    |                                                       |\n        `,\n      },\n    },\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  render: () => html`<div></div>`,\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-switch\n        aria-label=\"Toggle\"\n        custom-class=${ifDefined(args['custom-class'])}\n        ?disabled=${args.disabled}\n        .indeterminate=${args.indeterminate}\n        input-id=${ifDefined(args['input-id'])}\n        input-tab-index=${ifDefined(args['input-tab-index'])}\n        label=${ifDefined(args.label)}\n        name=${ifDefined(args.name)}\n        ?required=${args.required}\n        size=${ifDefined(args.size)}\n        .value=${args.value}\n      ></modus-wc-switch>",
        "\n      <modus-wc-switch\n        aria-label=\"Toggle\"\n        custom-class=${ifDefined(args['custom-class'])}\n        ?disabled=${args.disabled}\n        .indeterminate=${args.indeterminate}\n        input-id=${ifDefined(args['input-id'])}\n        input-tab-index=${ifDefined(args['input-tab-index'])}\n        label=${ifDefined(args.label)}\n        name=${ifDefined(args.name)}\n        ?required=${args.required}\n        size=${ifDefined(args.size)}\n        .value=${args.value}\n      ></modus-wc-switch>\n    "
      ],
      "variants": [],
      "prop_usage": {
        "label": [
          "Toggle"
        ]
      }
    },
    "tag_name": "modus-wc-switch"
  },
  "modus-wc-table": {
    "props": [],
    "events": [],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-wc-table.stories.ts ---\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { ITableColumn } from './modus-wc-table';\nimport { Density } from '../types';\n\nconst defaultColumns: ITableColumn[] = [\n  {\n    id: 'name',\n    header: 'Name',\n    accessor: 'name',\n    width: '200px',\n  },\n  {\n    id: 'email',\n    header: 'Email',\n    accessor: 'email',\n  },\n  {\n    id: 'status',\n    header: 'Status',\n    accessor: 'status',\n    cellRenderer: (value) => {\n      const isActive = value.toLowerCase() === 'active';\n      const badge = document.createElement('modus-wc-badge');\n      badge.color = isActive ? 'success' : 'danger';\n      const div = document.createElement('div');\n      div.textContent = value;\n      badge.appendChild(div);\n      return badge;\n    },\n  },\n];\n\nconst defaultData = [\n  { name: 'John Smith', email: 'john.smith@example.com', status: 'Active' },\n  { name: 'Jane Doe', email: 'jane.doe@example.com', status: 'Inactive' },\n  { name: 'Bob Johnson', email: 'bob.johnson@example.com', status: 'Active' },\n];\n\ninterface TableArgs {\n  columns: ITableColumn[];\n  'custom-class'?: string;\n  data: Record<string, any>[];\n  density?: Density;\n  zebra?: boolean;\n}\n\nconst meta: Meta<TableArgs> = {\n  title: 'Components/Table',\n  component: 'modus-wc-table',\n  args: {\n    columns: defaultColumns,\n    data: defaultData,\n    density: 'comfortable',\n    zebra: false,\n  },\n  argTypes: {\n    columns: {\n      description: 'Array of column definitions for the table',\n      table: {\n        type: {\n          detail: `\n            Interface: ITableColumn\n            Properties:\n            - accessor (string): Key to access data from row object\n            - cellRenderer ((value: any, row: any) => string | HTMLElement, optional): Custom cell renderer\n            - className (string, optional): Class names for the column\n            - header (string | HTMLElement): Header content - can be string or HTML\n            - id (string): Unique identifier for the column\n            - width (string, optional): Width style (e.g., '200px', '50%')\n        `,\n        },\n      },\n    },\n    density: {\n      control: { type: 'select' },\n      options: ['comfortable', 'compact'],\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['rowClick'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<TableArgs>;\n\nconst Template: Story = {\n  render: (args) => {\n    return html`\n      <modus-wc-table\n        aria-label=\"User data\"\n        .columns=${args.columns}\n        custom-class=${ifDefined(args['custom-class'])}\n        .data=${args.data}\n        density=${ifDefined(args.density)}\n        ?zebra=${args.zebra}\n      />\n    `;\n  },\n};\n\nexport const Default: Story = { ...Template };\n",
    "storybook": {
      "examples": [
        "<modus-wc-table\n        aria-label=\"User data\"\n        .columns=${args.columns}\n        custom-class=${ifDefined(args['custom-class'])}\n        .data=${args.data}\n        density=${ifDefined(args.density)}\n        ?zebra=${args.zebra}\n      />",
        "\n      <modus-wc-table\n        aria-label=\"User data\"\n        .columns=${args.columns}\n        custom-class=${ifDefined(args['custom-class'])}\n        .data=${args.data}\n        density=${ifDefined(args.density)}\n        ?zebra=${args.zebra}\n      />\n    "
      ],
      "variants": [],
      "prop_usage": {
        "label": [
          "User data"
        ]
      }
    },
    "tag_name": "modus-wc-table"
  },
  "modus-wc-tabs": {
    "props": [
      {
        "name": "tabs",
        "description": "/** Custom CSS class to apply to the inner button. */\n  customClass?: string;\n\n  /** Whether the tab is disabled. */\n  disabled?: boolean;\n\n  /** A Modus Icon to display in the tab. */\n  icon?: string;\n\n  /** The position of the icon. */\n  iconPosition?: 'left' | 'right';\n\n  /** The content to display in the tab. */\n  label?: string;\n}\n\n/**\n * A customizable tabs component used to create groups of tabs.\n */\n@Component({\n  tag: 'modus-wc-tabs',\n  styleUrl: 'modus-wc-tabs.scss',\n  shadow: false,\n})\nexport class ModusWcTabs {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The current active tab */\n  @Prop({ mutable: true }) activeTabIndex = 0;\n\n  /** Custom CSS class to apply to the inner div. */",
        "type": "ITab[]"
      }
    ],
    "events": [],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-wc-tabs.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { ITab } from './modus-wc-tabs';\nimport { DaisySize } from '../types';\n\ninterface TabsArgs {\n  activeTabIndex?: number;\n  'custom-class'?: string;\n  size?: DaisySize;\n  tabs: ITab[];\n  'tab-style': 'boxed' | 'bordered' | 'lifted' | 'none';\n}\n\nconst meta: Meta<TabsArgs> = {\n  title: 'Components/Tabs',\n  component: 'modus-wc-tabs',\n  args: {\n    size: 'md',\n    tabs: [\n      { label: 'Tab 1' },\n      { label: 'Tab 2' },\n      { label: 'Tab 3', disabled: true },\n      { icon: 'home' },\n    ],\n    'tab-style': 'bordered',\n  },\n  argTypes: {\n    tabs: {\n      description: 'Array of tab objects defining the tabs to display',\n      table: {\n        type: {\n          detail: `\n            Interface: ITab\n            Properties:\n            - customClass (string, optional): Custom CSS class for the inner button\n            - disabled (boolean, optional): Whether the tab is disabled\n            - icon (string, optional): A Modus Icon name to display\n            - iconPosition ('left' | 'right', optional): The position of the icon\n            - label (string, optional): The content to display in the tab\n          `,\n        },\n      },\n    },\n    'tab-style': {\n      control: { type: 'select' },\n      options: ['boxed', 'bordered', 'lifted', 'none'],\n    },\n    size: {\n      control: { type: 'select' },\n      options: ['xs', 'sm', 'md', 'lg'],\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['tabChange'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<TabsArgs>;\n\nconst Template: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<modus-wc-tabs\n  active-tab-index=\"${ifDefined(args.activeTabIndex)}\"\n  aria-label=\"Tab group\"\n  tab-style=\"${ifDefined(args['tab-style'])}\"\n  .tabs=\"${args.tabs}\"\n  size=\"${ifDefined(args.size)}\"\n>\n</modus-wc-tabs>\n    `;\n  },\n};\n\nexport const Default: Story = { ...Template };\n\nexport const ActiveAndDisabled: Story = { ...Template };\nActiveAndDisabled.args = {\n  activeTabIndex: 1,\n  tabs: [\n    { label: 'Normal' },\n    { label: 'Active' },\n    { label: 'Disabled', disabled: true },\n  ],\n};\n\nexport const Icons: Story = {\n  ...Template,\n  args: {\n    tabs: [\n      { icon: 'home' },\n      { icon: 'settings', iconPosition: 'left', label: 'Settings' },\n      {\n        icon: 'alert',\n        iconPosition: 'right',\n        label: 'Alerts',\n      },\n    ],\n  },\n};\n\nexport const TabsWithPanel: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<modus-wc-tabs\n  active-tab-index=\"${ifDefined(args.activeTabIndex)}\"\n  aria-label=\"Tab group\"\n  custom-class=\"${ifDefined(args['custom-class'])}\"\n  ?img-src=\"${args['img-src']}\"\n  tab-style=\"${ifDefined(args['tab-style'])}\"\n  .tabs=\"${args.tabs}\"\n  size=\"${ifDefined(args.size)}\"\n>\n  <p slot=\"tab-0\">\n    Modus (noun) : a mode of procedure : a way of doing something\n  </p>\n  <p slot=\"tab-1\">\n    input (noun) : information fed into a data processing system or computer\n  </p>\n  <p slot=\"tab-2\">\n    secret (noun) : kept from knowledge or view : hidden\n  </p>\n  <p slot=\"tab-3\">\n    snapshot (noun) : an impression or view of something brief or transitory\n  </p>\n</modus-wc-tabs>\n    `;\n  },\n};\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - In 2.0 tabs use the \\`ITab\\` interface, see details of interface changes below.\n  - Size values have changed from verbose names (\\`small\\`, \\`medium\\`) to abbreviations (\\`xs\\`, \\`sm\\`, \\`md\\`, \\`lg\\`).\n  - The \\`tabChange\\` event now emits an object with both previous and new tab indices, rather than just the tab ID.\n\n#### Prop Mapping\n\n| 1.0 Prop     | 2.0 Prop           | Notes                                                          |\n|--------------|--------------------|----------------------------------------------------------------|\n| aria-label   | aria-label         |                                                                |\n| full-width   |                    | Not carried over, use CSS instead                              |\n| size         | size               | \\`small\\` \u2192 \\`sm\\`, \\`medium\\` \u2192 \\`md\\`                        |\n| tabs         | tabs               | Tab object structure has changed. See Interface changes below. |\n\n#### Event Mapping\n\n| 1.0 Event   | 2.0 Event | Notes                                                 |\n|-------------|-----------|-------------------------------------------------------|\n| tabChange   | tabChange | Now emits \\`{ previousTab: number; newTab: number }\\` |\n\n#### Interfaces\n\n##### 1.0\n\n\\`\\`\\`typescript\nexport interface Tab {\n  active?: boolean;\n  iconOnly?: string;\n  id: string;\n  label?: string;\n  leftIcon?: string;\n  rightIcon?: string;\n}\n\\`\\`\\`\n\n##### 2.0\n\n\\`\\`\\`typescript\nexport interface ITab {\n  customClass?: string;\n  disabled?: boolean;\n  icon?: string;\n  iconPosition?: 'left' | 'right';\n  label?: string;\n}\n\\`\\`\\`\n        `,\n      },\n    },\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  render: () => html`<div></div>`,\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-tabs\n  active-tab-index=\"${ifDefined(args.activeTabIndex)}\"\n  aria-label=\"Tab group\"\n  tab-style=\"${ifDefined(args['tab-style'])}\"\n  .tabs=\"${args.tabs}\"\n  size=\"${ifDefined(args.size)}\"\n>\n</modus-wc-tabs>",
        "\n<modus-wc-tabs\n  active-tab-index=\"${ifDefined(args.activeTabIndex)}\"\n  aria-label=\"Tab group\"\n  tab-style=\"${ifDefined(args['tab-style'])}\"\n  .tabs=\"${args.tabs}\"\n  size=\"${ifDefined(args.size)}\"\n>\n</modus-wc-tabs>\n    ",
        "\n<modus-wc-tabs\n  active-tab-index=\"${ifDefined(args.activeTabIndex)}\"\n  aria-label=\"Tab group\"\n  custom-class=\"${ifDefined(args['custom-class'])}\"\n  ?img-src=\"${args['img-src']}\"\n  tab-style=\"${ifDefined(args['tab-style'])}\"\n  .tabs=\"${args.tabs}\"\n  size=\"${ifDefined(args.size)}\"\n>\n  <p slot=\"tab-0\">\n    Modus (noun) : a mode of procedure : a way of doing something\n  </p>\n  <p slot=\"tab-1\">\n    input (noun) : information fed into a data processing system or computer\n  </p>\n  <p slot=\"tab-2\">\n    secret (noun) : kept from knowledge or view : hidden\n  </p>\n  <p slot=\"tab-3\">\n    snapshot (noun) : an impression or view of something brief or transitory\n  </p>\n</modus-wc-tabs>\n    "
      ],
      "variants": [],
      "prop_usage": {
        "index": [
          "${ifDefined(args.activeTabIndex)}"
        ],
        "label": [
          "Tab group"
        ],
        "style": [
          "${ifDefined(args["
        ],
        "tabs": [
          "${args.tabs}"
        ],
        "size": [
          "${ifDefined(args.size)}"
        ],
        "class": [
          "${ifDefined(args["
        ],
        "src": [
          "${args["
        ],
        "slot": [
          "tab-0",
          "tab-1",
          "tab-2",
          "tab-3"
        ]
      }
    },
    "tag_name": "modus-wc-tabs"
  },
  "modus-wc-text-input": {
    "props": [
      {
        "name": "inputMode",
        "description": "/**\n * A customizable input component used to create text inputs with types.\n */\n@Component({\n  tag: 'modus-wc-text-input',\n  styleUrl: 'modus-wc-text-input.scss',\n  shadow: false,\n})\nexport class ModusWcTextInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic capitalization in inputted text. */",
        "type": "| 'decimal'\n    | 'email'\n    | 'none'\n    | 'numeric'\n    | 'search'\n    | 'tel'\n    | 'text'\n    | 'url'"
      }
    ],
    "events": [],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-wc-text-input.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { AutocompleteTypes, IInputFeedbackProp, ModusSize } from '../types';\n\ninterface TextInputArgs {\n  'auto-capitalize'?:\n    | 'off'\n    | 'none'\n    | 'on'\n    | 'sentences'\n    | 'words'\n    | 'characters';\n  'auto-complete'?: AutocompleteTypes;\n  'auto-correct'?: 'on' | 'off';\n  bordered?: boolean;\n  'clear-aria-label'?: string;\n  'custom-class'?: string;\n  disabled?: boolean;\n  enterkeyhint?:\n    | 'enter'\n    | 'done'\n    | 'go'\n    | 'next'\n    | 'previous'\n    | 'search'\n    | 'send';\n  feedback?: IInputFeedbackProp;\n  'include-clear'?: boolean;\n  'include-search'?: boolean;\n  'input-id'?: string;\n  'input-mode':\n    | 'decimal'\n    | 'email'\n    | 'none'\n    | 'numeric'\n    | 'search'\n    | 'tel'\n    | 'text'\n    | 'url';\n  'input-tab-index'?: number;\n  label?: string;\n  'max-length': number;\n  'min-length': number;\n  name?: string;\n  pattern?: string;\n  placeholder?: string;\n  'read-only'?: boolean;\n  required?: boolean;\n  size?: ModusSize;\n  spellcheck?: boolean;\n  type?: 'email' | 'password' | 'search' | 'tel' | 'text' | 'url';\n  value: string;\n}\n\nconst meta: Meta<TextInputArgs> = {\n  title: 'Components/Forms/Text Input',\n  component: 'modus-wc-text-input',\n  args: {\n    bordered: true,\n    disabled: false,\n    'include-clear': false,\n    'include-search': false,\n    'input-mode': 'text',\n    label: 'Label',\n    size: 'md',\n    spellcheck: false,\n    type: 'text',\n    value: '',\n  },\n  argTypes: {\n    'auto-capitalize': {\n      options: ['off', 'none', 'on', 'sentences', 'words', 'characters'],\n    },\n    'auto-complete': {\n      control: { type: 'text' },\n    },\n    'auto-correct': {\n      options: ['on', 'off'],\n    },\n    enterkeyhint: {\n      options: ['enter', 'done', 'go', 'next', 'previous', 'search', 'send'],\n    },\n    feedback: {\n      description: 'Feedback prop for input components',\n      table: {\n        type: {\n          detail: `\n            Interface: IInputFeedbackProp\n            Properties:\n            - level ('error' | 'info' | 'success' | 'warning'): The feedback level\n            - message (string, optional): The feedback message\n          `,\n        },\n      },\n    },\n    'input-mode': {\n      options: [\n        'decimal',\n        'email',\n        'none',\n        'numeric',\n        'search',\n        'tel',\n        'text',\n        'url',\n      ],\n    },\n    size: {\n      options: ['sm', 'md', 'lg'],\n    },\n    spellcheck: {\n      description:\n        'Whether the element may be checked for spelling errors. A hint for the browser, not a guarantee.',\n      table: {\n        category: 'attributes',\n        defaultValue: { summary: 'false' },\n      },\n    },\n    type: {\n      options: ['email', 'password', 'search', 'tel', 'text', 'url'],\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['inputBlur', 'inputChange', 'inputFocus'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<TextInputArgs>;\n\nexport const Default: Story = {\n  render: (args) => html`\n    <modus-wc-text-input\n      aria-label=\"Text input\"\n      auto-capitalize=${ifDefined(args['auto-capitalize'])}\n      auto-complete=${ifDefined(args['auto-complete'])}\n      auto-correct=${ifDefined(args['auto-correct'])}\n      ?bordered=${args.bordered}\n      clear-aria-label=${ifDefined(args['clear-aria-label'])}\n      custom-class=${ifDefined(args['custom-class'])}\n      ?disabled=${args.disabled}\n      enterkeyhint=${ifDefined(args.enterkeyhint)}\n      .feedback=${args.feedback}\n      include-clear=${ifDefined(args['include-clear'])}\n      include-search=${ifDefined(args['include-search'])}\n      input-aria-invalid=${ifDefined(args['input-aria-invalid'])}\n      input-id=${ifDefined(args['input-id'])}\n      input-mode=${args['input-mode']}\n      input-tab-index=${ifDefined(args['input-tab-index'])}\n      label=${ifDefined(args.label)}\n      max-length=${ifDefined(args['max-length'])}\n      min-length=${ifDefined(args['min-length'])}\n      name=${ifDefined(args.name)}\n      pattern=${ifDefined(args.pattern)}\n      placeholder=${ifDefined(args.placeholder)}\n      ?read-only=${args['read-only']}\n      ?required=${args.required}\n      size=${ifDefined(args.size)}\n      spellcheck=${ifDefined(args.spellcheck)}\n      type=${ifDefined(args.type)}\n      .value=${args.value}\n    ></modus-wc-text-input>\n  `,\n};\n\nconst errorFeedback: IInputFeedbackProp = {\n  level: 'error',\n  message: 'Value is required.',\n};\n\nexport const WithErrorFeedback: Story = {\n  render: (args) => html`\n    <modus-wc-text-input\n      aria-label=\"Text input\"\n      .feedback=${errorFeedback}\n      label=${ifDefined(args.label)}\n      ?required=${true}\n      .value=${args.value}\n    ></modus-wc-text-input>\n  `,\n};\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - In 1.0 input state was maintained by the component. 2.0 components encourage users to follow a controlled\n  input model. See the Form Inputs [documentation]([Angular](?path=/docs/documentation-form-inputs--docs) for\n  additional info and examples.\n  - Size values have changed from verbose names (\\`small\\`, \\`medium\\`, \\`large\\`) to abbreviations (\\`sm\\`, \\`md\\`, \\`lg\\`).\n\n#### Prop Mapping\n\n| 1.0 Prop                     | 2.0 Prop            | Notes                                                       |\n|------------------------------|---------------------|-------------------------------------------------------------|\n| aria-label                   | aria-label          |                                                             |\n| autocapitalize               | auto-capitalize     |                                                             |\n| autocorrect                  | auto-correct        |                                                             |\n| autocomplete                 | autocomplete        |                                                             |\n| auto-focus-input             | autofocus           |                                                             |\n| clearable                    | include-clear       |                                                             |\n| disabled                     | disabled            |                                                             |\n| enter-key-hint               | enterkeyhint        |                                                             |\n| error-text                   | feedback.message    | Use \\`feedback\\` level                                      |\n| helper-text                  |                     | Not carried over                                            |\n| include-error-icon           |                     | Not carried over                                            |\n| include-search-icon          | include-search      |                                                             |\n| include-password-text-toggle |                     | Not carried over                                            |\n| inputmode                    | input-mode          |                                                             |\n| label                        | label               |                                                             |\n| max-length                   | max-length          |                                                             |\n| pattern                      | pattern             |                                                             |\n| placeholder                  | placeholder         |                                                             |\n| read-only                    | read-only           |                                                             |\n| required                     | required            |                                                             |\n| size                         | size                | \\`small\\` \u2192 \\`sm\\`, \\`medium\\` \u2192 \\`md\\`, \\`large\\` \u2192 \\`lg\\` |\n| spellcheck                   | spellcheck          |                                                             |\n| text-align                   |                     | Not carried over, use CSS instead                           |\n| type                         | type                |                                                             |\n| valid-text                   | feedback.message    | Use \\`feedback\\` level                                      |\n| value                        | value               |                                                             |\n\n#### Event Mapping\n\n| 1.0 Event   | 2.0 Event   | Notes            |\n|-------------|-------------|------------------|\n| valueChange | inputChange |                  |\n        `,\n      },\n    },\n    // To hide the actual story rendering and only show docs:\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  // Simple render function or leave it empty\n  render: () => html`<div></div>`,\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-text-input\n      aria-label=\"Text input\"\n      auto-capitalize=${ifDefined(args['auto-capitalize'])}\n      auto-complete=${ifDefined(args['auto-complete'])}\n      auto-correct=${ifDefined(args['auto-correct'])}\n      ?bordered=${args.bordered}\n      clear-aria-label=${ifDefined(args['clear-aria-label'])}\n      custom-class=${ifDefined(args['custom-class'])}\n      ?disabled=${args.disabled}\n      enterkeyhint=${ifDefined(args.enterkeyhint)}\n      .feedback=${args.feedback}\n      include-clear=${ifDefined(args['include-clear'])}\n      include-search=${ifDefined(args['include-search'])}\n      input-aria-invalid=${ifDefined(args['input-aria-invalid'])}\n      input-id=${ifDefined(args['input-id'])}\n      input-mode=${args['input-mode']}\n      input-tab-index=${ifDefined(args['input-tab-index'])}\n      label=${ifDefined(args.label)}\n      max-length=${ifDefined(args['max-length'])}\n      min-length=${ifDefined(args['min-length'])}\n      name=${ifDefined(args.name)}\n      pattern=${ifDefined(args.pattern)}\n      placeholder=${ifDefined(args.placeholder)}\n      ?read-only=${args['read-only']}\n      ?required=${args.required}\n      size=${ifDefined(args.size)}\n      spellcheck=${ifDefined(args.spellcheck)}\n      type=${ifDefined(args.type)}\n      .value=${args.value}\n    ></modus-wc-text-input>",
        "<modus-wc-text-input\n      aria-label=\"Text input\"\n      .feedback=${errorFeedback}\n      label=${ifDefined(args.label)}\n      ?required=${true}\n      .value=${args.value}\n    ></modus-wc-text-input>",
        "\n    <modus-wc-text-input\n      aria-label=\"Text input\"\n      auto-capitalize=${ifDefined(args['auto-capitalize'])}\n      auto-complete=${ifDefined(args['auto-complete'])}\n      auto-correct=${ifDefined(args['auto-correct'])}\n      ?bordered=${args.bordered}\n      clear-aria-label=${ifDefined(args['clear-aria-label'])}\n      custom-class=${ifDefined(args['custom-class'])}\n      ?disabled=${args.disabled}\n      enterkeyhint=${ifDefined(args.enterkeyhint)}\n      .feedback=${args.feedback}\n      include-clear=${ifDefined(args['include-clear'])}\n      include-search=${ifDefined(args['include-search'])}\n      input-aria-invalid=${ifDefined(args['input-aria-invalid'])}\n      input-id=${ifDefined(args['input-id'])}\n      input-mode=${args['input-mode']}\n      input-tab-index=${ifDefined(args['input-tab-index'])}\n      label=${ifDefined(args.label)}\n      max-length=${ifDefined(args['max-length'])}\n      min-length=${ifDefined(args['min-length'])}\n      name=${ifDefined(args.name)}\n      pattern=${ifDefined(args.pattern)}\n      placeholder=${ifDefined(args.placeholder)}\n      ?read-only=${args['read-only']}\n      ?required=${args.required}\n      size=${ifDefined(args.size)}\n      spellcheck=${ifDefined(args.spellcheck)}\n      type=${ifDefined(args.type)}\n      .value=${args.value}\n    ></modus-wc-text-input>\n  ",
        "\n    <modus-wc-text-input\n      aria-label=\"Text input\"\n      .feedback=${errorFeedback}\n      label=${ifDefined(args.label)}\n      ?required=${true}\n      .value=${args.value}\n    ></modus-wc-text-input>\n  "
      ],
      "variants": [],
      "prop_usage": {
        "label": [
          "Text input"
        ]
      }
    },
    "tag_name": "modus-wc-text-input"
  },
  "modus-wc-textarea": {
    "props": [],
    "events": [],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-wc-textarea.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { IInputFeedbackProp, ModusSize } from '../types';\n\ninterface TextAreaArgs {\n  'auto-correct': 'on' | 'off';\n  bordered?: boolean;\n  'custom-class'?: string;\n  disabled?: boolean;\n  enterkeyhint?:\n    | 'enter'\n    | 'done'\n    | 'go'\n    | 'next'\n    | 'previous'\n    | 'search'\n    | 'send';\n  feedback?: IInputFeedbackProp;\n  'input-aria-invalid'?: 'grammar' | 'spelling' | 'true' | 'false';\n  'input-id'?: string;\n  'input-tab-index'?: number;\n  label?: string;\n  'max-length'?: number;\n  name?: string;\n  placeholder?: string;\n  readonly?: boolean;\n  required?: boolean;\n  rows?: number;\n  size?: ModusSize;\n  spellcheck?: boolean;\n  value: string;\n}\n\nconst meta: Meta<TextAreaArgs> = {\n  title: 'Components/Forms/Textarea',\n  component: 'modus-wc-textarea',\n  args: {\n    bordered: true,\n    'custom-class': '',\n    disabled: false,\n    label: 'Label',\n    readonly: false,\n    required: false,\n    size: 'md',\n    spellcheck: false,\n    value: '',\n  },\n  argTypes: {\n    'auto-correct': {\n      options: ['on', 'off'],\n    },\n    enterkeyhint: {\n      options: ['enter', 'done', 'go', 'next', 'previous', 'search', 'send'],\n    },\n    feedback: {\n      description: 'Feedback prop for input components',\n      table: {\n        type: {\n          detail: `\n            Interface: IInputFeedbackProp\n            Properties:\n            - level ('error' | 'info' | 'success' | 'warning'): The feedback level\n            - message (string, optional): The feedback message\n          `,\n        },\n      },\n    },\n    'input-aria-invalid': {\n      control: {\n        type: 'select',\n      },\n      options: ['grammar', 'spelling', 'true', 'false'],\n    },\n    size: {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg'],\n    },\n    spellcheck: {\n      description:\n        'Whether the element may be checked for spelling errors. A hint for the browser, not a guarantee.',\n      table: {\n        category: 'attributes',\n        defaultValue: { summary: 'false' },\n      },\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['inputBlur', 'inputChange', 'inputFocus'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<TextAreaArgs>;\n\nexport const Default: Story = {\n  render: (args) => {\n    return html`\n      <modus-wc-textarea\n        aria-label=\"Textarea input\"\n        auto-correct=${ifDefined(args['auto-correct'])}\n        ?bordered=${args.bordered}\n        custom-class=${ifDefined(args['custom-class'])}\n        enterkeyhint=${ifDefined(args.enterkeyhint)}\n        ?disabled=${args.disabled}\n        .feedback=${args.feedback}\n        input-aria-invalid=${ifDefined(args['input-aria-invalid'])}\n        input-id=${ifDefined(args['input-id'])}\n        input-tab-index=${ifDefined(args['input-tab-index'])}\n        label=${ifDefined(args.label)}\n        max-length=${ifDefined(args['max-length'])}\n        name=${ifDefined(args.name)}\n        placeholder=${ifDefined(args.placeholder)}\n        ?readonly=${args.readonly}\n        ?required=${args.required}\n        rows=${ifDefined(args.rows)}\n        size=${ifDefined(args.size)}\n        spellcheck=${ifDefined(args.spellcheck)}\n        .value=${args.value}\n      ></modus-wc-textarea>\n    `;\n  },\n};\n\nconst errorFeedback: IInputFeedbackProp = {\n  level: 'error',\n  message: 'Value is required.',\n};\n\nexport const WithErrorFeedback: Story = {\n  render: (args) => html`\n    <modus-wc-textarea\n      aria-label=\"Textarea input\"\n      .feedback=${errorFeedback}\n      label=${ifDefined(args.label)}\n      ?required=${true}\n      .value=${args.value}\n    ></modus-wc-textarea>\n  `,\n};\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - In 1.0 input state was maintained by the component. 2.0 components encourage users to follow a controlled\n  input model. See the Form Inputs [documentation](/docs/documentation-form-inputs--docs) for\n  additional info and examples.\n  - Size values have changed from verbose names (\\`medium\\`, \\`large\\`) to abbreviations (\\`sm\\`, \\`md\\`, \\`lg\\`).\n\n#### Prop Mapping\n\n| 1.0 Prop                     | 2.0 Prop            | Notes                                                       |\n|------------------------------|---------------------|-------------------------------------------------------------|\n| aria-label                   | aria-label          |                                                             |\n| autocorrect                  | auto-correct        |                                                             |\n| auto-focus-input             |                     | Not carried over                                            |\n| clearable                    |                     | Not carried over                                            |\n| disabled                     | disabled            |                                                             |\n| enterkeyhint                 | enterkeyhint        |                                                             |\n| error-text                   | feedback.message    | Use \\`feedback\\` level                                      |\n| helper-text                  |                     | Not carried over                                            |\n| label                        | label               |                                                             |\n| max-length                   | max-length          |                                                             |\n| min-length                   |                     | Not carried over                                            |\n| placeholder                  | placeholder         |                                                             |\n| read-only                    | readonly            |                                                             |\n| rows                         | rows                |                                                             |\n| required                     | required            |                                                             |\n| size                         | size                | \\`medium\\` \u2192 \\`md\\`, \\`large\\` \u2192 \\`lg\\`                     |\n| spellcheck                   | spellcheck          |                                                             |\n| text-align                   |                     | Not carried over, use CSS instead                           |\n| valid-text                   | feedback.message    | Use \\`feedback\\` level                                      |\n| value                        | value               |                                                             |\n\n#### Event Mapping\n\n| 1.0 Event   | 2.0 Event   | Notes            |\n|-------------|-------------|------------------|\n| valueChange | inputChange |                  |\n        `,\n      },\n    },\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  render: () => html`<div></div>`,\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-textarea\n        aria-label=\"Textarea input\"\n        auto-correct=${ifDefined(args['auto-correct'])}\n        ?bordered=${args.bordered}\n        custom-class=${ifDefined(args['custom-class'])}\n        enterkeyhint=${ifDefined(args.enterkeyhint)}\n        ?disabled=${args.disabled}\n        .feedback=${args.feedback}\n        input-aria-invalid=${ifDefined(args['input-aria-invalid'])}\n        input-id=${ifDefined(args['input-id'])}\n        input-tab-index=${ifDefined(args['input-tab-index'])}\n        label=${ifDefined(args.label)}\n        max-length=${ifDefined(args['max-length'])}\n        name=${ifDefined(args.name)}\n        placeholder=${ifDefined(args.placeholder)}\n        ?readonly=${args.readonly}\n        ?required=${args.required}\n        rows=${ifDefined(args.rows)}\n        size=${ifDefined(args.size)}\n        spellcheck=${ifDefined(args.spellcheck)}\n        .value=${args.value}\n      ></modus-wc-textarea>",
        "<modus-wc-textarea\n      aria-label=\"Textarea input\"\n      .feedback=${errorFeedback}\n      label=${ifDefined(args.label)}\n      ?required=${true}\n      .value=${args.value}\n    ></modus-wc-textarea>",
        "\n      <modus-wc-textarea\n        aria-label=\"Textarea input\"\n        auto-correct=${ifDefined(args['auto-correct'])}\n        ?bordered=${args.bordered}\n        custom-class=${ifDefined(args['custom-class'])}\n        enterkeyhint=${ifDefined(args.enterkeyhint)}\n        ?disabled=${args.disabled}\n        .feedback=${args.feedback}\n        input-aria-invalid=${ifDefined(args['input-aria-invalid'])}\n        input-id=${ifDefined(args['input-id'])}\n        input-tab-index=${ifDefined(args['input-tab-index'])}\n        label=${ifDefined(args.label)}\n        max-length=${ifDefined(args['max-length'])}\n        name=${ifDefined(args.name)}\n        placeholder=${ifDefined(args.placeholder)}\n        ?readonly=${args.readonly}\n        ?required=${args.required}\n        rows=${ifDefined(args.rows)}\n        size=${ifDefined(args.size)}\n        spellcheck=${ifDefined(args.spellcheck)}\n        .value=${args.value}\n      ></modus-wc-textarea>\n    ",
        "\n    <modus-wc-textarea\n      aria-label=\"Textarea input\"\n      .feedback=${errorFeedback}\n      label=${ifDefined(args.label)}\n      ?required=${true}\n      .value=${args.value}\n    ></modus-wc-textarea>\n  "
      ],
      "variants": [],
      "prop_usage": {
        "label": [
          "Textarea input"
        ]
      }
    },
    "tag_name": "modus-wc-textarea"
  },
  "modus-wc-theme-switcher": {
    "props": [],
    "events": [],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-wc-theme-switcher.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { IThemeConfig } from '../../providers/theme/theme.types';\n\ninterface ThemeSwitcherArgs {\n  'custom-class'?: string;\n  'initial-theme'?: Partial<IThemeConfig>;\n}\n\nconst meta: Meta<ThemeSwitcherArgs> = {\n  title: 'Components/ThemeSwitcher',\n  component: 'modus-wc-theme-switcher',\n  args: {\n    'custom-class': undefined,\n    'initial-theme': undefined,\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['themeChange'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<ThemeSwitcherArgs>;\n\nconst Template: Story = {\n  // prettier-ignore\n  render: (args) => html`\n<modus-wc-theme-provider .initialTheme=${args['initial-theme']}>\n  <modus-wc-theme-switcher\n    aria-label=\"Theme toggle\"\n    custom-class=${ifDefined(args['custom-class'])}\n  ></modus-wc-theme-switcher>\n</modus-wc-theme-provider>\n  `,\n};\n\nexport const Default: Story = { ...Template };\n",
    "storybook": {
      "examples": [
        "<modus-wc-theme-switcher\n    aria-label=\"Theme toggle\"\n    custom-class=${ifDefined(args['custom-class'])}\n  ></modus-wc-theme-switcher>",
        "\n<modus-wc-theme-provider .initialTheme=${args['initial-theme']}>\n  <modus-wc-theme-switcher\n    aria-label=\"Theme toggle\"\n    custom-class=${ifDefined(args['custom-class'])}\n  ></modus-wc-theme-switcher>\n</modus-wc-theme-provider>\n  "
      ],
      "variants": [],
      "prop_usage": {
        "label": [
          "Theme toggle"
        ]
      }
    },
    "tag_name": "modus-wc-theme-switcher"
  },
  "modus-wc-time-input": {
    "props": [
      {
        "name": "datalistOptions",
        "description": "/**\n * A customizable input component used to create time inputs.\n */\n@Component({\n  tag: 'modus-wc-time-input',\n  styleUrl: 'modus-wc-time-input.scss',\n  shadow: false,\n})\nexport class ModusWcTimeInput {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Hint for form autofill feature. */",
        "type": "string[]"
      }
    ],
    "events": [],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-wc-time-input.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { IInputFeedbackProp, ModusSize } from '../types';\n\n// const timeOptions = ['08:00', '12:00', '17:00'];\n\ninterface TimeInputArgs {\n  'auto-complete'?: 'on' | 'off';\n  bordered?: boolean;\n  'custom-class'?: string;\n  'datalist-id'?: string;\n  'datalist-options'?: string[];\n  disabled?: boolean;\n  feedback?: IInputFeedbackProp;\n  'input-id'?: string;\n  'input-tab-index'?: number;\n  label?: string;\n  max?: string;\n  min?: string;\n  name?: string;\n  'read-only'?: boolean;\n  required?: boolean;\n  'show-seconds'?: boolean;\n  size?: ModusSize;\n  step?: number;\n  value: string;\n}\n\nconst meta: Meta<TimeInputArgs> = {\n  title: 'Components/Forms/Time Input',\n  component: 'modus-wc-time-input',\n  args: {\n    disabled: false,\n    label: 'Label',\n    size: 'md',\n  },\n  argTypes: {\n    'auto-complete': {\n      control: { type: 'select' },\n      options: ['on', 'off'],\n    },\n    feedback: {\n      description: 'Feedback prop for input components',\n      table: {\n        type: {\n          detail: `\n            Interface: IInputFeedbackProp\n            Properties:\n            - level ('error' | 'info' | 'success' | 'warning'): The feedback level\n            - message (string, optional): The feedback message\n          `,\n        },\n      },\n    },\n    size: {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg'],\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['inputBlur', 'inputChange', 'inputFocus'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<TimeInputArgs>;\n\nexport const Template: Story = {\n  render: (args) => html`\n    <modus-wc-time-input\n      aria-label=\"Time input\"\n      auto-complete=${ifDefined(args['auto-complete'])}\n      bordered=${ifDefined(args.bordered)}\n      custom-class=${ifDefined(args['custom-class'])}\n      datalist-id=${ifDefined(args['datalist-id'])}\n      ?disabled=${args.disabled}\n      .feedback=${args.feedback}\n      input-id=${ifDefined(args['input-id'])}\n      input-tab-index=${ifDefined(args['input-tab-index'])}\n      label=${ifDefined(args.label)}\n      max=${ifDefined(args.max)}\n      min=${ifDefined(args.min)}\n      name=${ifDefined(args.name)}\n      ?read-only=${args['read-only']}\n      ?required=${args.required}\n      show-seconds=${ifDefined(args['show-seconds'])}\n      size=${ifDefined(args.size)}\n      step=${ifDefined(args.step)}\n      .datalistOptions=${args['datalist-options']}\n      .value=${args.value}\n    ></modus-wc-time-input>\n  `,\n};\n\nexport const WithSeconds: Story = {\n  render: () => {\n    return html`\n      <modus-wc-time-input\n        aria-label=\"Example time input\"\n        show-seconds=\"true\"\n      ></modus-wc-time-input>\n    `;\n  },\n};\n\nexport const WithDatalist: Story = {\n  render: () => {\n    // prettier-ignore\n    return html`\n<modus-wc-time-input\n  aria-label=\"Example time input\"\n  datalist-id=\"datalist-id-1\"\n></modus-wc-time-input>\n<datalist id=\"datalist-id-1\">\n  <option value=\"06:00\"></option>\n  <option value=\"12:00\"></option>\n  <option value=\"17:00\"></option>\n</datalist>\n    `;\n  },\n};\n\nexport const WithDatalistOptions: Story = {\n  render: () => {\n    // prettier-ignore\n    return html`\n<script>\n  document.addEventListener('DOMContentLoaded', () => {\n    // Example of programmatically adding 'datalistOptions'\n    const preferredTimes = ['09:30', '12:00', '17:30'];\n    document.querySelector('#time-input-with-options').datalistOptions = preferredTimes;\n  });\n</script>\n<modus-wc-time-input\n  aria-label=\"Example time input\"\n  id=\"time-input-with-options\"\n></modus-wc-time-input>\n    `;\n  },\n};\n\nconst errorFeedback: IInputFeedbackProp = {\n  level: 'error',\n  message: 'Value is required.',\n};\n\nexport const WithErrorFeedback: Story = {\n  render: (args) => html`\n    <modus-wc-time-input\n      aria-label=\"Time input\"\n      .feedback=${errorFeedback}\n      label=${ifDefined(args.label)}\n      ?required=${true}\n      .value=${args.value}\n    ></modus-wc-time-input>\n  `,\n};\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - In 1.0 input state was maintained by the component. 2.0 components encourage users to follow a controlled\n  input model. See the Form Inputs [documentation](/docs/documentation-form-inputs--docs) for\n  additional info and examples.\n  - Size values have changed from verbose names (\\`medium\\`, \\`large\\`) to abbreviations (\\`sm\\`, \\`md\\`, \\`lg\\`).\n\n#### Prop Mapping\n\n| 1.0 Prop                | 2.0 Prop            | Notes                                   |\n|-------------------------|---------------------|-----------------------------------------|\n| allowed-chars-regex     |                     | Not carried over                        |\n| ampm                    |                     | Not carried over                        |\n| aria-label              | aria-label          |                                         |\n| auto-focus-input        | autofocus           |                                         |\n| auto-format             |                     | Not carried over                        |\n| disable-validation      |                     | Not carried over                        |\n| disabled                | disabled            |                                         |\n| error-text              | feedback.message    | Use \\`feedback\\` level                  |\n| helper-text             |                     | Not carried over                        |\n| label                   | label               |                                         |\n| max                     | max                 |                                         |\n| min                     | min                 |                                         |\n| placeholder             |                     | Not carried over                        |\n| read-only               | read-only           |                                         |\n| required                | required            |                                         |\n| size                    | size                | \\`medium\\` \u2192 \\`md\\`, \\`large\\` \u2192 \\`lg\\` |\n| valid-text              | feedback.message    | Use \\`feedback\\` level                  |\n| value                   | value               |                                         |\n\n#### Event Mapping\n\n| 1.0 Event      | 2.0 Event   | Notes                                                |\n|----------------|-------------|------------------------------------------------------|\n| timeInputBlur  | inputBlur   |                                                      |\n| valueChange    | inputChange |                                                      |\n        `,\n      },\n    },\n    // To hide the actual story rendering and only show docs:\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  // Simple render function or leave it empty\n  render: () => html`<div></div>`,\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-time-input\n      aria-label=\"Time input\"\n      auto-complete=${ifDefined(args['auto-complete'])}\n      bordered=${ifDefined(args.bordered)}\n      custom-class=${ifDefined(args['custom-class'])}\n      datalist-id=${ifDefined(args['datalist-id'])}\n      ?disabled=${args.disabled}\n      .feedback=${args.feedback}\n      input-id=${ifDefined(args['input-id'])}\n      input-tab-index=${ifDefined(args['input-tab-index'])}\n      label=${ifDefined(args.label)}\n      max=${ifDefined(args.max)}\n      min=${ifDefined(args.min)}\n      name=${ifDefined(args.name)}\n      ?read-only=${args['read-only']}\n      ?required=${args.required}\n      show-seconds=${ifDefined(args['show-seconds'])}\n      size=${ifDefined(args.size)}\n      step=${ifDefined(args.step)}\n      .datalistOptions=${args['datalist-options']}\n      .value=${args.value}\n    ></modus-wc-time-input>",
        "<modus-wc-time-input\n        aria-label=\"Example time input\"\n        show-seconds=\"true\"\n      ></modus-wc-time-input>",
        "<modus-wc-time-input\n  aria-label=\"Example time input\"\n  datalist-id=\"datalist-id-1\"\n></modus-wc-time-input>",
        "<modus-wc-time-input\n  aria-label=\"Example time input\"\n  id=\"time-input-with-options\"\n></modus-wc-time-input>",
        "<modus-wc-time-input\n      aria-label=\"Time input\"\n      .feedback=${errorFeedback}\n      label=${ifDefined(args.label)}\n      ?required=${true}\n      .value=${args.value}\n    ></modus-wc-time-input>"
      ],
      "variants": [],
      "prop_usage": {
        "label": [
          "Time input",
          "Example time input"
        ],
        "seconds": [
          "true"
        ],
        "id": [
          "datalist-id-1",
          "time-input-with-options"
        ],
        "value": [
          "06:00",
          "12:00",
          "17:00"
        ]
      }
    },
    "tag_name": "modus-wc-time-input"
  },
  "modus-wc-toast": {
    "props": [],
    "events": [],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-wc-toast.stories.ts ---\n\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { ToastPosition } from './modus-wc-toast';\n\ninterface ToastArgs {\n  'custom-class'?: string;\n  delay?: number;\n  position?: ToastPosition;\n}\n\nconst meta: Meta<ToastArgs> = {\n  title: 'Components/Toast',\n  component: 'modus-wc-toast',\n  args: {\n    position: 'top-end',\n  },\n  argTypes: {\n    position: {\n      control: { type: 'select' },\n      options: [\n        'top-start',\n        'top-center',\n        'top-end',\n        'middle-start',\n        'middle-center',\n        'middle-end',\n        'bottom-start',\n        'bottom-center',\n        'bottom-end',\n      ],\n    },\n  },\n  parameters: {\n    layout: 'padded',\n    viewport: 'responsive',\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<ToastArgs>;\n\nconst Template: Story = {\n  // prettier-ignore\n  render: (args) => html`\n<div style=\"height: 200px;\">\n  <modus-wc-toast\n    custom-class=${ifDefined(args['custom-class'])}\n    delay=${ifDefined(args.delay)}\n    position=${ifDefined(args.position)}\n  >\n    <modus-wc-alert alert-title=\"Message sent successfully!\" variant=\"success\"></modus-wc-alert>\n  </modus-wc-toast>\n</div>\n  `,\n};\n\nexport const Default: Story = { ...Template };\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - In 1.0 toast included built-in dismiss functionality with delay timer and dismiss button. 2.0 components focus on positioning only.\n  - In 1.0 toast included built-in icons. 2.0 components rely on slotted content for visual elements.\n  - 2.0 toast components no longer support built-in types/variants, use slotted \\`modus-wc-alert\\` components instead.\n\n#### Prop Mapping\n\n| 1.0 Prop        | 2.0 Prop    | Notes                                      |\n|-----------------|-------------|--------------------------------------------|\n| aria-label      | aria-label  |                                            |\n| delay           |             | Not carried over                           |\n| dismissible     |             | Not carried over                           |\n| retain-element  |             | Not carried over                           |\n| role            |             | Not carried over                           |\n| show-icon       |             | Not carried over                           |\n| type            |             | Not carried over, use slotted content      |\n\n#### Event Mapping\n\n| 1.0 Event     | 2.0 Event | Notes            |\n|---------------|-----------|------------------|\n| dismissClick  |           | Not carried over |\n        `,\n      },\n    },\n    // To hide the actual story rendering and only show docs:\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  // Simple render function or leave it empty\n  render: () => html`<div></div>`,\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-alert alert-title=\"Message sent successfully!\" variant=\"success\"></modus-wc-alert>",
        "\n<div style=\"height: 200px;\">\n  <modus-wc-toast\n    custom-class=${ifDefined(args['custom-class'])}\n    delay=${ifDefined(args.delay)}\n    position=${ifDefined(args.position)}\n  >\n    <modus-wc-alert alert-title=\"Message sent successfully!\" variant=\"success\"></modus-wc-alert>\n  </modus-wc-toast>\n</div>\n  "
      ],
      "variants": [
        "success"
      ],
      "prop_usage": {
        "style": [
          "height: 200px;"
        ],
        "title": [
          "Message sent successfully!"
        ],
        "variant": [
          "success"
        ]
      }
    },
    "tag_name": "modus-wc-toast"
  },
  "modus-wc-toolbar": {
    "props": [],
    "events": [],
    "slots": [
      "start",
      "center",
      "end"
    ],
    "default_values": {},
    "documentation": "\n\n--- modus-wc-toolbar.stories.ts ---\n\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\n\ninterface ToolbarArgs {\n  'custom-class'?: string;\n}\n\nconst meta: Meta<ToolbarArgs> = {\n  title: 'Components/Toolbar',\n  component: 'modus-wc-toolbar',\n  parameters: {\n    layout: 'padded',\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<ToolbarArgs>;\n\nconst Template: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<modus-wc-toolbar custom-class=\"${ifDefined(args['custom-class'])}\">\n  <div slot=\"start\">Start</div>\n  <div slot=\"center\">Center</div>\n  <div slot=\"end\">End</div>\n</modus-wc-toolbar>\n    `;\n  },\n};\n\nexport const Default: Story = { ...Template };\n",
    "storybook": {
      "examples": [
        "\n<modus-wc-toolbar custom-class=\"${ifDefined(args['custom-class'])}\">\n  <div slot=\"start\">Start</div>\n  <div slot=\"center\">Center</div>\n  <div slot=\"end\">End</div>\n</modus-wc-toolbar>\n    "
      ],
      "variants": [],
      "prop_usage": {
        "class": [
          "${ifDefined(args["
        ],
        "slot": [
          "start",
          "center",
          "end"
        ]
      }
    },
    "tag_name": "modus-wc-toolbar"
  },
  "modus-wc-tooltip": {
    "props": [
      {
        "name": "content",
        "description": "/**\n * A customizable tooltip component used to create tooltips with different content.\n */\n@Component({\n  tag: 'modus-wc-tooltip',\n  styleUrl: 'modus-wc-tooltip.scss',\n  shadow: false,\n})\nexport class ModusWcTooltip {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The text content of the tooltip. */",
        "type": "string"
      }
    ],
    "events": [],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-wc-tooltip.stories.ts ---\n\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\n\ninterface TooltipArgs {\n  content?: string;\n  'custom-class'?: string;\n  disabled?: boolean;\n  'force-open'?: boolean;\n  'tooltip-id'?: string;\n  position: 'auto' | 'top' | 'right' | 'bottom' | 'left';\n}\n\nconst meta: Meta<TooltipArgs> = {\n  title: 'Components/Tooltip',\n  component: 'modus-wc-tooltip',\n  args: {\n    content: 'Tooltip content',\n    position: 'auto',\n  },\n  argTypes: {\n    position: {\n      control: { type: 'select' },\n      options: ['auto', 'top', 'right', 'left', 'bottom'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<TooltipArgs>;\n\nconst Template: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n      <modus-wc-tooltip\n        content=${ifDefined(args.content)}\n        custom-class=\"${ifDefined(args['custom-class'])}\"\n        ?disabled=\"${args.disabled}\"\n        ?force-open=\"${args['force-open']}\"\n        tooltip-id=\"${ifDefined(args['tooltip-id'])}\"\n        position=${ifDefined(args.position)}\n      >\n        <modus-wc-badge>Hover</modus-wc-badge>\n      </modus-wc-tooltip>\n    `;\n  },\n};\n\nexport const Default: Story = { ...Template };\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - In 1.0 tooltip positioning was handled by Popper.js. In 2.0, positioning is handled using CSS.\n  - The \\`text\\` prop has been renamed to \\`content\\`.\n\n#### Prop Mapping\n\n| 1.0 Prop    | 2.0 Prop    | Notes                                    |\n|-------------|-------------|------------------------------------------|\n| aria-label  | aria-label  |                                          |\n| disabled    | disabled    |                                          |\n| position    | position    | Added \\`auto\\` option as default value   |\n| text        | content     |                                          |\n        `,\n      },\n    },\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  render: () => html`<div></div>`,\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-badge>Hover</modus-wc-badge>",
        "\n      <modus-wc-tooltip\n        content=${ifDefined(args.content)}\n        custom-class=\"${ifDefined(args['custom-class'])}\"\n        ?disabled=\"${args.disabled}\"\n        ?force-open=\"${args['force-open']}\"\n        tooltip-id=\"${ifDefined(args['tooltip-id'])}\"\n        position=${ifDefined(args.position)}\n      >\n        <modus-wc-badge>Hover</modus-wc-badge>\n      </modus-wc-tooltip>\n    "
      ],
      "variants": [],
      "prop_usage": {
        "class": [
          "${ifDefined(args["
        ],
        "disabled": [
          "${args.disabled}"
        ],
        "open": [
          "${args["
        ],
        "id": [
          "${ifDefined(args["
        ]
      }
    },
    "tag_name": "modus-wc-tooltip"
  },
  "modus-wc-typography": {
    "props": [
      {
        "name": "variant",
        "description": "/**\n * A customizable typography component used to render text with different sizes, variants, and weights.\n */\n@Component({\n  tag: 'modus-wc-typography',\n  styleUrl: 'modus-wc-typography.scss',\n  shadow: false,\n})\nexport class ModusWCTypography {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the typography element. */",
        "type": "TypographyVariant"
      }
    ],
    "events": [],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-wc-typography.stories.ts ---\n\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html, render } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { TypographyVariant, TypographyWeight } from './modus-wc-typography';\nimport { DaisySize } from '../types';\n\n// Slot content was lost due to rendering issues when changing the \"variant\" attribute.\n// Because of this, each variant is rendered as a unique story below.\n\nconst content = 'The quick brown fox jumps over the lazy dog';\n\ninterface TypographyArgs {\n  'custom-class'?: string;\n  size?: DaisySize;\n  variant: TypographyVariant;\n  weight?: TypographyWeight;\n}\n\nconst meta: Meta<TypographyArgs> = {\n  title: 'Components/Typography',\n  component: 'modus-wc-typography',\n  args: {\n    size: 'md',\n    variant: 'p',\n    weight: 'normal',\n  },\n  argTypes: {\n    size: {\n      control: { type: 'select' },\n      options: ['xs', 'sm', 'md', 'lg'],\n    },\n    variant: {\n      control: { type: 'select' },\n      options: ['body', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'p'],\n    },\n    weight: {\n      control: { type: 'select' },\n      options: ['light', 'normal', 'semibold', 'bold'],\n    },\n  },\n  decorators: [\n    (story) => {\n      // Create a stable container that won't be recreated on re-renders\n      const container = document.createElement('div');\n      const template = document.createElement('template');\n      template.innerHTML = content;\n\n      const renderStory = () => {\n        render(story(), container);\n\n        // Ensure slot content is present after render\n        const typography = container.querySelector('modus-wc-typography');\n        if (typography && !typography.textContent) {\n          typography.textContent = template.innerHTML;\n        }\n      };\n\n      renderStory();\n      return container;\n    },\n  ],\n};\n\nexport default meta;\n\ntype Story = StoryObj<TypographyArgs>;\n\nexport const Default: Story = {\n  render: (args) => html`\n    <modus-wc-typography\n      custom-class=${ifDefined(args['custom-class'])}\n      size=${ifDefined(args.size)}\n      variant=${args.variant}\n      weight=${ifDefined(args.weight)}\n    ></modus-wc-typography>\n  `,\n};\n\nexport const Body: Story = {\n  args: {\n    variant: 'body',\n  },\n};\n\nexport const Heading1: Story = {\n  args: {\n    variant: 'h1',\n  },\n};\n\nexport const Heading2: Story = {\n  args: {\n    variant: 'h2',\n  },\n};\n\nexport const Heading3: Story = {\n  args: {\n    variant: 'h3',\n  },\n};\n\nexport const Heading4: Story = {\n  args: {\n    variant: 'h4',\n  },\n};\n\nexport const Heading5: Story = {\n  args: {\n    variant: 'h5',\n  },\n};\n\nexport const Heading6: Story = {\n  args: {\n    variant: 'h6',\n  },\n};\n\nexport const Paragraph: Story = {\n  args: {\n    variant: 'p',\n  },\n};\n",
    "storybook": {
      "examples": [
        "<modus-wc-typography\n      custom-class=${ifDefined(args['custom-class'])}\n      size=${ifDefined(args.size)}\n      variant=${args.variant}\n      weight=${ifDefined(args.weight)}\n    ></modus-wc-typography>",
        "\n    <modus-wc-typography\n      custom-class=${ifDefined(args['custom-class'])}\n      size=${ifDefined(args.size)}\n      variant=${args.variant}\n      weight=${ifDefined(args.weight)}\n    ></modus-wc-typography>\n  "
      ],
      "variants": [],
      "prop_usage": {}
    },
    "tag_name": "modus-wc-typography"
  }
}
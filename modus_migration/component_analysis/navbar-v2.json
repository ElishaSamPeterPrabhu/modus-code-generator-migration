{
  "component_name": "modus-wc-navbar",
  "version": "v2",
  "props": [
    {
      "name": "appsMenuOpen",
      "description": "/** Replaces the text for \"Apps\" in the condensed menu. */\n  apps?: string;\n  /** Replaces the text for \"Help\" in the condensed menu. */\n  help?: string;\n  /** Replaces the text for \"Notifications\" in the condensed menu. */\n  notifications?: string;\n  /** Replaces the text for \"Search\" in the condensed menu. */\n  search?: string;\n}\n\nexport interface INavbarVisibility {\n  /** Controls the visibility of the AI button. */\n  ai?: boolean;\n  /** Controls visibility of the apps button. */\n  apps?: boolean;\n  /** Controls visibility of the help button. */\n  help?: boolean;\n  /** Controls visibility of the main menu button. */\n  mainMenu?: boolean;\n  /** Controls visibility of the notifications button. */\n  notifications?: boolean;\n  /** Controls visibility of the search button. */\n  search?: boolean;\n  /** Controls visibility of the search input. */\n  searchInput?: boolean;\n  /** Controls visibility of the user button. */\n  user?: boolean;\n}\n\nexport interface INavbarUserCard {\n  /** The alt value to set on the avatar. */\n  avatarAlt?: string;\n  /** The avatar image source value. */\n  avatarSrc?: string;\n  /** The email address of the user. */\n  email: string;\n  /** Text override for the Access MyTrimble button, allows for translation. */\n  myTrimbleButton?: string;\n  /** The name of the user */\n  name: string;\n  /** Text override for the Sign out button, allows for translation. */\n  signOutButton?: string;\n}\n\n/**\n * A customizable navbar component used for top level navigation of all Trimble applications.\n *\n * The component supports a 'main-menu', 'notifications', and 'apps' `<slot>` for injecting custom HTML menus.\n * It also supports a 'start', 'center', and 'end' `<slot>` for injecting additional custom HTML\n */\n@Component({\n  tag: 'modus-wc-navbar',\n  styleUrl: 'modus-wc-navbar.scss',\n  shadow: false,\n})\nexport class ModusWcNavbar {\n  private appsRef?: HTMLDivElement;\n  private condensedMenuRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLDivElement;\n  private notificationsRef?: HTMLDivElement;\n  private searchDebounceTimer: number | null = null;\n  private userRef?: HTMLDivElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The open state of the apps menu. */",
      "type": ": boolean"
    },
    {
      "name": "condensed",
      "description": "/** Replaces the text for \"Apps\" in the condensed menu. */\n  apps?: string;\n  /** Replaces the text for \"Help\" in the condensed menu. */\n  help?: string;\n  /** Replaces the text for \"Notifications\" in the condensed menu. */\n  notifications?: string;\n  /** Replaces the text for \"Search\" in the condensed menu. */\n  search?: string;\n}\n\nexport interface INavbarVisibility {\n  /** Controls the visibility of the AI button. */\n  ai?: boolean;\n  /** Controls visibility of the apps button. */\n  apps?: boolean;\n  /** Controls visibility of the help button. */\n  help?: boolean;\n  /** Controls visibility of the main menu button. */\n  mainMenu?: boolean;\n  /** Controls visibility of the notifications button. */\n  notifications?: boolean;\n  /** Controls visibility of the search button. */\n  search?: boolean;\n  /** Controls visibility of the search input. */\n  searchInput?: boolean;\n  /** Controls visibility of the user button. */\n  user?: boolean;\n}\n\nexport interface INavbarUserCard {\n  /** The alt value to set on the avatar. */\n  avatarAlt?: string;\n  /** The avatar image source value. */\n  avatarSrc?: string;\n  /** The email address of the user. */\n  email: string;\n  /** Text override for the Access MyTrimble button, allows for translation. */\n  myTrimbleButton?: string;\n  /** The name of the user */\n  name: string;\n  /** Text override for the Sign out button, allows for translation. */\n  signOutButton?: string;\n}\n\n/**\n * A customizable navbar component used for top level navigation of all Trimble applications.\n *\n * The component supports a 'main-menu', 'notifications', and 'apps' `<slot>` for injecting custom HTML menus.\n * It also supports a 'start', 'center', and 'end' `<slot>` for injecting additional custom HTML\n */\n@Component({\n  tag: 'modus-wc-navbar',\n  styleUrl: 'modus-wc-navbar.scss',\n  shadow: false,\n})\nexport class ModusWcNavbar {\n  private appsRef?: HTMLDivElement;\n  private condensedMenuRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLDivElement;\n  private notificationsRef?: HTMLDivElement;\n  private searchDebounceTimer: number | null = null;\n  private userRef?: HTMLDivElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The open state of the apps menu. */",
      "type": ": boolean"
    },
    {
      "name": "condensedMenuOpen",
      "description": "/** Replaces the text for \"Apps\" in the condensed menu. */\n  apps?: string;\n  /** Replaces the text for \"Help\" in the condensed menu. */\n  help?: string;\n  /** Replaces the text for \"Notifications\" in the condensed menu. */\n  notifications?: string;\n  /** Replaces the text for \"Search\" in the condensed menu. */\n  search?: string;\n}\n\nexport interface INavbarVisibility {\n  /** Controls the visibility of the AI button. */\n  ai?: boolean;\n  /** Controls visibility of the apps button. */\n  apps?: boolean;\n  /** Controls visibility of the help button. */\n  help?: boolean;\n  /** Controls visibility of the main menu button. */\n  mainMenu?: boolean;\n  /** Controls visibility of the notifications button. */\n  notifications?: boolean;\n  /** Controls visibility of the search button. */\n  search?: boolean;\n  /** Controls visibility of the search input. */\n  searchInput?: boolean;\n  /** Controls visibility of the user button. */\n  user?: boolean;\n}\n\nexport interface INavbarUserCard {\n  /** The alt value to set on the avatar. */\n  avatarAlt?: string;\n  /** The avatar image source value. */\n  avatarSrc?: string;\n  /** The email address of the user. */\n  email: string;\n  /** Text override for the Access MyTrimble button, allows for translation. */\n  myTrimbleButton?: string;\n  /** The name of the user */\n  name: string;\n  /** Text override for the Sign out button, allows for translation. */\n  signOutButton?: string;\n}\n\n/**\n * A customizable navbar component used for top level navigation of all Trimble applications.\n *\n * The component supports a 'main-menu', 'notifications', and 'apps' `<slot>` for injecting custom HTML menus.\n * It also supports a 'start', 'center', and 'end' `<slot>` for injecting additional custom HTML\n */\n@Component({\n  tag: 'modus-wc-navbar',\n  styleUrl: 'modus-wc-navbar.scss',\n  shadow: false,\n})\nexport class ModusWcNavbar {\n  private appsRef?: HTMLDivElement;\n  private condensedMenuRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLDivElement;\n  private notificationsRef?: HTMLDivElement;\n  private searchDebounceTimer: number | null = null;\n  private userRef?: HTMLDivElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The open state of the apps menu. */",
      "type": ": boolean"
    },
    {
      "name": "customClass",
      "description": "/** Replaces the text for \"Apps\" in the condensed menu. */\n  apps?: string;\n  /** Replaces the text for \"Help\" in the condensed menu. */\n  help?: string;\n  /** Replaces the text for \"Notifications\" in the condensed menu. */\n  notifications?: string;\n  /** Replaces the text for \"Search\" in the condensed menu. */\n  search?: string;\n}\n\nexport interface INavbarVisibility {\n  /** Controls the visibility of the AI button. */\n  ai?: boolean;\n  /** Controls visibility of the apps button. */\n  apps?: boolean;\n  /** Controls visibility of the help button. */\n  help?: boolean;\n  /** Controls visibility of the main menu button. */\n  mainMenu?: boolean;\n  /** Controls visibility of the notifications button. */\n  notifications?: boolean;\n  /** Controls visibility of the search button. */\n  search?: boolean;\n  /** Controls visibility of the search input. */\n  searchInput?: boolean;\n  /** Controls visibility of the user button. */\n  user?: boolean;\n}\n\nexport interface INavbarUserCard {\n  /** The alt value to set on the avatar. */\n  avatarAlt?: string;\n  /** The avatar image source value. */\n  avatarSrc?: string;\n  /** The email address of the user. */\n  email: string;\n  /** Text override for the Access MyTrimble button, allows for translation. */\n  myTrimbleButton?: string;\n  /** The name of the user */\n  name: string;\n  /** Text override for the Sign out button, allows for translation. */\n  signOutButton?: string;\n}\n\n/**\n * A customizable navbar component used for top level navigation of all Trimble applications.\n *\n * The component supports a 'main-menu', 'notifications', and 'apps' `<slot>` for injecting custom HTML menus.\n * It also supports a 'start', 'center', and 'end' `<slot>` for injecting additional custom HTML\n */\n@Component({\n  tag: 'modus-wc-navbar',\n  styleUrl: 'modus-wc-navbar.scss',\n  shadow: false,\n})\nexport class ModusWcNavbar {\n  private appsRef?: HTMLDivElement;\n  private condensedMenuRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLDivElement;\n  private notificationsRef?: HTMLDivElement;\n  private searchDebounceTimer: number | null = null;\n  private userRef?: HTMLDivElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The open state of the apps menu. */",
      "type": ": string"
    },
    {
      "name": "mainMenuOpen",
      "description": "/** Replaces the text for \"Apps\" in the condensed menu. */\n  apps?: string;\n  /** Replaces the text for \"Help\" in the condensed menu. */\n  help?: string;\n  /** Replaces the text for \"Notifications\" in the condensed menu. */\n  notifications?: string;\n  /** Replaces the text for \"Search\" in the condensed menu. */\n  search?: string;\n}\n\nexport interface INavbarVisibility {\n  /** Controls the visibility of the AI button. */\n  ai?: boolean;\n  /** Controls visibility of the apps button. */\n  apps?: boolean;\n  /** Controls visibility of the help button. */\n  help?: boolean;\n  /** Controls visibility of the main menu button. */\n  mainMenu?: boolean;\n  /** Controls visibility of the notifications button. */\n  notifications?: boolean;\n  /** Controls visibility of the search button. */\n  search?: boolean;\n  /** Controls visibility of the search input. */\n  searchInput?: boolean;\n  /** Controls visibility of the user button. */\n  user?: boolean;\n}\n\nexport interface INavbarUserCard {\n  /** The alt value to set on the avatar. */\n  avatarAlt?: string;\n  /** The avatar image source value. */\n  avatarSrc?: string;\n  /** The email address of the user. */\n  email: string;\n  /** Text override for the Access MyTrimble button, allows for translation. */\n  myTrimbleButton?: string;\n  /** The name of the user */\n  name: string;\n  /** Text override for the Sign out button, allows for translation. */\n  signOutButton?: string;\n}\n\n/**\n * A customizable navbar component used for top level navigation of all Trimble applications.\n *\n * The component supports a 'main-menu', 'notifications', and 'apps' `<slot>` for injecting custom HTML menus.\n * It also supports a 'start', 'center', and 'end' `<slot>` for injecting additional custom HTML\n */\n@Component({\n  tag: 'modus-wc-navbar',\n  styleUrl: 'modus-wc-navbar.scss',\n  shadow: false,\n})\nexport class ModusWcNavbar {\n  private appsRef?: HTMLDivElement;\n  private condensedMenuRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLDivElement;\n  private notificationsRef?: HTMLDivElement;\n  private searchDebounceTimer: number | null = null;\n  private userRef?: HTMLDivElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The open state of the apps menu. */",
      "type": ": boolean"
    },
    {
      "name": "notificationsMenuOpen",
      "description": "/** Replaces the text for \"Apps\" in the condensed menu. */\n  apps?: string;\n  /** Replaces the text for \"Help\" in the condensed menu. */\n  help?: string;\n  /** Replaces the text for \"Notifications\" in the condensed menu. */\n  notifications?: string;\n  /** Replaces the text for \"Search\" in the condensed menu. */\n  search?: string;\n}\n\nexport interface INavbarVisibility {\n  /** Controls the visibility of the AI button. */\n  ai?: boolean;\n  /** Controls visibility of the apps button. */\n  apps?: boolean;\n  /** Controls visibility of the help button. */\n  help?: boolean;\n  /** Controls visibility of the main menu button. */\n  mainMenu?: boolean;\n  /** Controls visibility of the notifications button. */\n  notifications?: boolean;\n  /** Controls visibility of the search button. */\n  search?: boolean;\n  /** Controls visibility of the search input. */\n  searchInput?: boolean;\n  /** Controls visibility of the user button. */\n  user?: boolean;\n}\n\nexport interface INavbarUserCard {\n  /** The alt value to set on the avatar. */\n  avatarAlt?: string;\n  /** The avatar image source value. */\n  avatarSrc?: string;\n  /** The email address of the user. */\n  email: string;\n  /** Text override for the Access MyTrimble button, allows for translation. */\n  myTrimbleButton?: string;\n  /** The name of the user */\n  name: string;\n  /** Text override for the Sign out button, allows for translation. */\n  signOutButton?: string;\n}\n\n/**\n * A customizable navbar component used for top level navigation of all Trimble applications.\n *\n * The component supports a 'main-menu', 'notifications', and 'apps' `<slot>` for injecting custom HTML menus.\n * It also supports a 'start', 'center', and 'end' `<slot>` for injecting additional custom HTML\n */\n@Component({\n  tag: 'modus-wc-navbar',\n  styleUrl: 'modus-wc-navbar.scss',\n  shadow: false,\n})\nexport class ModusWcNavbar {\n  private appsRef?: HTMLDivElement;\n  private condensedMenuRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLDivElement;\n  private notificationsRef?: HTMLDivElement;\n  private searchDebounceTimer: number | null = null;\n  private userRef?: HTMLDivElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The open state of the apps menu. */",
      "type": ": boolean"
    },
    {
      "name": "searchDebounceMs",
      "description": "/** Replaces the text for \"Apps\" in the condensed menu. */\n  apps?: string;\n  /** Replaces the text for \"Help\" in the condensed menu. */\n  help?: string;\n  /** Replaces the text for \"Notifications\" in the condensed menu. */\n  notifications?: string;\n  /** Replaces the text for \"Search\" in the condensed menu. */\n  search?: string;\n}\n\nexport interface INavbarVisibility {\n  /** Controls the visibility of the AI button. */\n  ai?: boolean;\n  /** Controls visibility of the apps button. */\n  apps?: boolean;\n  /** Controls visibility of the help button. */\n  help?: boolean;\n  /** Controls visibility of the main menu button. */\n  mainMenu?: boolean;\n  /** Controls visibility of the notifications button. */\n  notifications?: boolean;\n  /** Controls visibility of the search button. */\n  search?: boolean;\n  /** Controls visibility of the search input. */\n  searchInput?: boolean;\n  /** Controls visibility of the user button. */\n  user?: boolean;\n}\n\nexport interface INavbarUserCard {\n  /** The alt value to set on the avatar. */\n  avatarAlt?: string;\n  /** The avatar image source value. */\n  avatarSrc?: string;\n  /** The email address of the user. */\n  email: string;\n  /** Text override for the Access MyTrimble button, allows for translation. */\n  myTrimbleButton?: string;\n  /** The name of the user */\n  name: string;\n  /** Text override for the Sign out button, allows for translation. */\n  signOutButton?: string;\n}\n\n/**\n * A customizable navbar component used for top level navigation of all Trimble applications.\n *\n * The component supports a 'main-menu', 'notifications', and 'apps' `<slot>` for injecting custom HTML menus.\n * It also supports a 'start', 'center', and 'end' `<slot>` for injecting additional custom HTML\n */\n@Component({\n  tag: 'modus-wc-navbar',\n  styleUrl: 'modus-wc-navbar.scss',\n  shadow: false,\n})\nexport class ModusWcNavbar {\n  private appsRef?: HTMLDivElement;\n  private condensedMenuRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLDivElement;\n  private notificationsRef?: HTMLDivElement;\n  private searchDebounceTimer: number | null = null;\n  private userRef?: HTMLDivElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The open state of the apps menu. */",
      "type": ": number"
    },
    {
      "name": "searchInputOpen",
      "description": "/** Replaces the text for \"Apps\" in the condensed menu. */\n  apps?: string;\n  /** Replaces the text for \"Help\" in the condensed menu. */\n  help?: string;\n  /** Replaces the text for \"Notifications\" in the condensed menu. */\n  notifications?: string;\n  /** Replaces the text for \"Search\" in the condensed menu. */\n  search?: string;\n}\n\nexport interface INavbarVisibility {\n  /** Controls the visibility of the AI button. */\n  ai?: boolean;\n  /** Controls visibility of the apps button. */\n  apps?: boolean;\n  /** Controls visibility of the help button. */\n  help?: boolean;\n  /** Controls visibility of the main menu button. */\n  mainMenu?: boolean;\n  /** Controls visibility of the notifications button. */\n  notifications?: boolean;\n  /** Controls visibility of the search button. */\n  search?: boolean;\n  /** Controls visibility of the search input. */\n  searchInput?: boolean;\n  /** Controls visibility of the user button. */\n  user?: boolean;\n}\n\nexport interface INavbarUserCard {\n  /** The alt value to set on the avatar. */\n  avatarAlt?: string;\n  /** The avatar image source value. */\n  avatarSrc?: string;\n  /** The email address of the user. */\n  email: string;\n  /** Text override for the Access MyTrimble button, allows for translation. */\n  myTrimbleButton?: string;\n  /** The name of the user */\n  name: string;\n  /** Text override for the Sign out button, allows for translation. */\n  signOutButton?: string;\n}\n\n/**\n * A customizable navbar component used for top level navigation of all Trimble applications.\n *\n * The component supports a 'main-menu', 'notifications', and 'apps' `<slot>` for injecting custom HTML menus.\n * It also supports a 'start', 'center', and 'end' `<slot>` for injecting additional custom HTML\n */\n@Component({\n  tag: 'modus-wc-navbar',\n  styleUrl: 'modus-wc-navbar.scss',\n  shadow: false,\n})\nexport class ModusWcNavbar {\n  private appsRef?: HTMLDivElement;\n  private condensedMenuRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLDivElement;\n  private notificationsRef?: HTMLDivElement;\n  private searchDebounceTimer: number | null = null;\n  private userRef?: HTMLDivElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The open state of the apps menu. */",
      "type": ": boolean"
    },
    {
      "name": "textOverrides",
      "description": "/** Replaces the text for \"Apps\" in the condensed menu. */\n  apps?: string;\n  /** Replaces the text for \"Help\" in the condensed menu. */\n  help?: string;\n  /** Replaces the text for \"Notifications\" in the condensed menu. */\n  notifications?: string;\n  /** Replaces the text for \"Search\" in the condensed menu. */\n  search?: string;\n}\n\nexport interface INavbarVisibility {\n  /** Controls the visibility of the AI button. */\n  ai?: boolean;\n  /** Controls visibility of the apps button. */\n  apps?: boolean;\n  /** Controls visibility of the help button. */\n  help?: boolean;\n  /** Controls visibility of the main menu button. */\n  mainMenu?: boolean;\n  /** Controls visibility of the notifications button. */\n  notifications?: boolean;\n  /** Controls visibility of the search button. */\n  search?: boolean;\n  /** Controls visibility of the search input. */\n  searchInput?: boolean;\n  /** Controls visibility of the user button. */\n  user?: boolean;\n}\n\nexport interface INavbarUserCard {\n  /** The alt value to set on the avatar. */\n  avatarAlt?: string;\n  /** The avatar image source value. */\n  avatarSrc?: string;\n  /** The email address of the user. */\n  email: string;\n  /** Text override for the Access MyTrimble button, allows for translation. */\n  myTrimbleButton?: string;\n  /** The name of the user */\n  name: string;\n  /** Text override for the Sign out button, allows for translation. */\n  signOutButton?: string;\n}\n\n/**\n * A customizable navbar component used for top level navigation of all Trimble applications.\n *\n * The component supports a 'main-menu', 'notifications', and 'apps' `<slot>` for injecting custom HTML menus.\n * It also supports a 'start', 'center', and 'end' `<slot>` for injecting additional custom HTML\n */\n@Component({\n  tag: 'modus-wc-navbar',\n  styleUrl: 'modus-wc-navbar.scss',\n  shadow: false,\n})\nexport class ModusWcNavbar {\n  private appsRef?: HTMLDivElement;\n  private condensedMenuRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLDivElement;\n  private notificationsRef?: HTMLDivElement;\n  private searchDebounceTimer: number | null = null;\n  private userRef?: HTMLDivElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The open state of the apps menu. */",
      "type": ": INavbarTextOverrides"
    },
    {
      "name": "userCard",
      "description": "/** Replaces the text for \"Apps\" in the condensed menu. */\n  apps?: string;\n  /** Replaces the text for \"Help\" in the condensed menu. */\n  help?: string;\n  /** Replaces the text for \"Notifications\" in the condensed menu. */\n  notifications?: string;\n  /** Replaces the text for \"Search\" in the condensed menu. */\n  search?: string;\n}\n\nexport interface INavbarVisibility {\n  /** Controls the visibility of the AI button. */\n  ai?: boolean;\n  /** Controls visibility of the apps button. */\n  apps?: boolean;\n  /** Controls visibility of the help button. */\n  help?: boolean;\n  /** Controls visibility of the main menu button. */\n  mainMenu?: boolean;\n  /** Controls visibility of the notifications button. */\n  notifications?: boolean;\n  /** Controls visibility of the search button. */\n  search?: boolean;\n  /** Controls visibility of the search input. */\n  searchInput?: boolean;\n  /** Controls visibility of the user button. */\n  user?: boolean;\n}\n\nexport interface INavbarUserCard {\n  /** The alt value to set on the avatar. */\n  avatarAlt?: string;\n  /** The avatar image source value. */\n  avatarSrc?: string;\n  /** The email address of the user. */\n  email: string;\n  /** Text override for the Access MyTrimble button, allows for translation. */\n  myTrimbleButton?: string;\n  /** The name of the user */\n  name: string;\n  /** Text override for the Sign out button, allows for translation. */\n  signOutButton?: string;\n}\n\n/**\n * A customizable navbar component used for top level navigation of all Trimble applications.\n *\n * The component supports a 'main-menu', 'notifications', and 'apps' `<slot>` for injecting custom HTML menus.\n * It also supports a 'start', 'center', and 'end' `<slot>` for injecting additional custom HTML\n */\n@Component({\n  tag: 'modus-wc-navbar',\n  styleUrl: 'modus-wc-navbar.scss',\n  shadow: false,\n})\nexport class ModusWcNavbar {\n  private appsRef?: HTMLDivElement;\n  private condensedMenuRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLDivElement;\n  private notificationsRef?: HTMLDivElement;\n  private searchDebounceTimer: number | null = null;\n  private userRef?: HTMLDivElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The open state of the apps menu. */",
      "type": ": INavbarUserCard"
    },
    {
      "name": "userMenuOpen",
      "description": "/** Replaces the text for \"Apps\" in the condensed menu. */\n  apps?: string;\n  /** Replaces the text for \"Help\" in the condensed menu. */\n  help?: string;\n  /** Replaces the text for \"Notifications\" in the condensed menu. */\n  notifications?: string;\n  /** Replaces the text for \"Search\" in the condensed menu. */\n  search?: string;\n}\n\nexport interface INavbarVisibility {\n  /** Controls the visibility of the AI button. */\n  ai?: boolean;\n  /** Controls visibility of the apps button. */\n  apps?: boolean;\n  /** Controls visibility of the help button. */\n  help?: boolean;\n  /** Controls visibility of the main menu button. */\n  mainMenu?: boolean;\n  /** Controls visibility of the notifications button. */\n  notifications?: boolean;\n  /** Controls visibility of the search button. */\n  search?: boolean;\n  /** Controls visibility of the search input. */\n  searchInput?: boolean;\n  /** Controls visibility of the user button. */\n  user?: boolean;\n}\n\nexport interface INavbarUserCard {\n  /** The alt value to set on the avatar. */\n  avatarAlt?: string;\n  /** The avatar image source value. */\n  avatarSrc?: string;\n  /** The email address of the user. */\n  email: string;\n  /** Text override for the Access MyTrimble button, allows for translation. */\n  myTrimbleButton?: string;\n  /** The name of the user */\n  name: string;\n  /** Text override for the Sign out button, allows for translation. */\n  signOutButton?: string;\n}\n\n/**\n * A customizable navbar component used for top level navigation of all Trimble applications.\n *\n * The component supports a 'main-menu', 'notifications', and 'apps' `<slot>` for injecting custom HTML menus.\n * It also supports a 'start', 'center', and 'end' `<slot>` for injecting additional custom HTML\n */\n@Component({\n  tag: 'modus-wc-navbar',\n  styleUrl: 'modus-wc-navbar.scss',\n  shadow: false,\n})\nexport class ModusWcNavbar {\n  private appsRef?: HTMLDivElement;\n  private condensedMenuRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLDivElement;\n  private notificationsRef?: HTMLDivElement;\n  private searchDebounceTimer: number | null = null;\n  private userRef?: HTMLDivElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The open state of the apps menu. */",
      "type": ": boolean"
    },
    {
      "name": "visibility",
      "description": "/** Replaces the text for \"Apps\" in the condensed menu. */\n  apps?: string;\n  /** Replaces the text for \"Help\" in the condensed menu. */\n  help?: string;\n  /** Replaces the text for \"Notifications\" in the condensed menu. */\n  notifications?: string;\n  /** Replaces the text for \"Search\" in the condensed menu. */\n  search?: string;\n}\n\nexport interface INavbarVisibility {\n  /** Controls the visibility of the AI button. */\n  ai?: boolean;\n  /** Controls visibility of the apps button. */\n  apps?: boolean;\n  /** Controls visibility of the help button. */\n  help?: boolean;\n  /** Controls visibility of the main menu button. */\n  mainMenu?: boolean;\n  /** Controls visibility of the notifications button. */\n  notifications?: boolean;\n  /** Controls visibility of the search button. */\n  search?: boolean;\n  /** Controls visibility of the search input. */\n  searchInput?: boolean;\n  /** Controls visibility of the user button. */\n  user?: boolean;\n}\n\nexport interface INavbarUserCard {\n  /** The alt value to set on the avatar. */\n  avatarAlt?: string;\n  /** The avatar image source value. */\n  avatarSrc?: string;\n  /** The email address of the user. */\n  email: string;\n  /** Text override for the Access MyTrimble button, allows for translation. */\n  myTrimbleButton?: string;\n  /** The name of the user */\n  name: string;\n  /** Text override for the Sign out button, allows for translation. */\n  signOutButton?: string;\n}\n\n/**\n * A customizable navbar component used for top level navigation of all Trimble applications.\n *\n * The component supports a 'main-menu', 'notifications', and 'apps' `<slot>` for injecting custom HTML menus.\n * It also supports a 'start', 'center', and 'end' `<slot>` for injecting additional custom HTML\n */\n@Component({\n  tag: 'modus-wc-navbar',\n  styleUrl: 'modus-wc-navbar.scss',\n  shadow: false,\n})\nexport class ModusWcNavbar {\n  private appsRef?: HTMLDivElement;\n  private condensedMenuRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLDivElement;\n  private notificationsRef?: HTMLDivElement;\n  private searchDebounceTimer: number | null = null;\n  private userRef?: HTMLDivElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The open state of the apps menu. */",
      "type": ": INavbarVisibility"
    }
  ],
  "events": [
    {
      "name": "aiClick",
      "description": "/** Replaces the text for \"Apps\" in the condensed menu. */\n  apps?: string;\n  /** Replaces the text for \"Help\" in the condensed menu. */\n  help?: string;\n  /** Replaces the text for \"Notifications\" in the condensed menu. */\n  notifications?: string;\n  /** Replaces the text for \"Search\" in the condensed menu. */\n  search?: string;\n}\n\nexport interface INavbarVisibility {\n  /** Controls the visibility of the AI button. */\n  ai?: boolean;\n  /** Controls visibility of the apps button. */\n  apps?: boolean;\n  /** Controls visibility of the help button. */\n  help?: boolean;\n  /** Controls visibility of the main menu button. */\n  mainMenu?: boolean;\n  /** Controls visibility of the notifications button. */\n  notifications?: boolean;\n  /** Controls visibility of the search button. */\n  search?: boolean;\n  /** Controls visibility of the search input. */\n  searchInput?: boolean;\n  /** Controls visibility of the user button. */\n  user?: boolean;\n}\n\nexport interface INavbarUserCard {\n  /** The alt value to set on the avatar. */\n  avatarAlt?: string;\n  /** The avatar image source value. */\n  avatarSrc?: string;\n  /** The email address of the user. */\n  email: string;\n  /** Text override for the Access MyTrimble button, allows for translation. */\n  myTrimbleButton?: string;\n  /** The name of the user */\n  name: string;\n  /** Text override for the Sign out button, allows for translation. */\n  signOutButton?: string;\n}\n\n/**\n * A customizable navbar component used for top level navigation of all Trimble applications.\n *\n * The component supports a 'main-menu', 'notifications', and 'apps' `<slot>` for injecting custom HTML menus.\n * It also supports a 'start', 'center', and 'end' `<slot>` for injecting additional custom HTML\n */\n@Component({\n  tag: 'modus-wc-navbar',\n  styleUrl: 'modus-wc-navbar.scss',\n  shadow: false,\n})\nexport class ModusWcNavbar {\n  private appsRef?: HTMLDivElement;\n  private condensedMenuRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLDivElement;\n  private notificationsRef?: HTMLDivElement;\n  private searchDebounceTimer: number | null = null;\n  private userRef?: HTMLDivElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The open state of the apps menu. */\n  @Prop({ mutable: true }) appsMenuOpen?: boolean = false;\n\n  /** Applies condensed layout and styling. */\n  @Prop() condensed?: boolean = false;\n\n  /** The open state of the condensed menu. */\n  @Prop({ mutable: true }) condensedMenuOpen?: boolean = false;\n\n  /** Custom CSS class to apply to the host element. */\n  @Prop() customClass?: string = '';\n\n  /** The open state of the main menu. */\n  @Prop({ mutable: true }) mainMenuOpen?: boolean = false;\n\n  /** The open state of the notifications menu. */\n  @Prop({ mutable: true }) notificationsMenuOpen?: boolean = false;\n\n  /** Debounce time in milliseconds for search input changes. Default is 300ms. */\n  @Prop() searchDebounceMs?: number = 300;\n\n  /** The open state of the search input. */\n  @Prop({ mutable: true }) searchInputOpen?: boolean = false;\n\n  /** Text replacements for the navbar. */\n  @Prop() textOverrides?: INavbarTextOverrides;\n\n  /** User information used to render the user card. */\n  @Prop() userCard!: INavbarUserCard;\n\n  /** The open state of the user menu. */\n  @Prop({ mutable: true }) userMenuOpen?: boolean = false;\n\n  /** The visibility of individual navbar buttons. Default is user profile visible, others hidden. */\n  @Prop() visibility?: INavbarVisibility = {\n    ai: false,\n    apps: false,\n    help: false,\n    mainMenu: false,\n    notifications: false,\n    search: false,\n    searchInput: false,\n    user: true,\n  };\n\n  /** Event emitted when the AI button is clicked or activated via keyboard. */"
    },
    {
      "name": "appsClick",
      "description": "/** Replaces the text for \"Apps\" in the condensed menu. */\n  apps?: string;\n  /** Replaces the text for \"Help\" in the condensed menu. */\n  help?: string;\n  /** Replaces the text for \"Notifications\" in the condensed menu. */\n  notifications?: string;\n  /** Replaces the text for \"Search\" in the condensed menu. */\n  search?: string;\n}\n\nexport interface INavbarVisibility {\n  /** Controls the visibility of the AI button. */\n  ai?: boolean;\n  /** Controls visibility of the apps button. */\n  apps?: boolean;\n  /** Controls visibility of the help button. */\n  help?: boolean;\n  /** Controls visibility of the main menu button. */\n  mainMenu?: boolean;\n  /** Controls visibility of the notifications button. */\n  notifications?: boolean;\n  /** Controls visibility of the search button. */\n  search?: boolean;\n  /** Controls visibility of the search input. */\n  searchInput?: boolean;\n  /** Controls visibility of the user button. */\n  user?: boolean;\n}\n\nexport interface INavbarUserCard {\n  /** The alt value to set on the avatar. */\n  avatarAlt?: string;\n  /** The avatar image source value. */\n  avatarSrc?: string;\n  /** The email address of the user. */\n  email: string;\n  /** Text override for the Access MyTrimble button, allows for translation. */\n  myTrimbleButton?: string;\n  /** The name of the user */\n  name: string;\n  /** Text override for the Sign out button, allows for translation. */\n  signOutButton?: string;\n}\n\n/**\n * A customizable navbar component used for top level navigation of all Trimble applications.\n *\n * The component supports a 'main-menu', 'notifications', and 'apps' `<slot>` for injecting custom HTML menus.\n * It also supports a 'start', 'center', and 'end' `<slot>` for injecting additional custom HTML\n */\n@Component({\n  tag: 'modus-wc-navbar',\n  styleUrl: 'modus-wc-navbar.scss',\n  shadow: false,\n})\nexport class ModusWcNavbar {\n  private appsRef?: HTMLDivElement;\n  private condensedMenuRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLDivElement;\n  private notificationsRef?: HTMLDivElement;\n  private searchDebounceTimer: number | null = null;\n  private userRef?: HTMLDivElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The open state of the apps menu. */\n  @Prop({ mutable: true }) appsMenuOpen?: boolean = false;\n\n  /** Applies condensed layout and styling. */\n  @Prop() condensed?: boolean = false;\n\n  /** The open state of the condensed menu. */\n  @Prop({ mutable: true }) condensedMenuOpen?: boolean = false;\n\n  /** Custom CSS class to apply to the host element. */\n  @Prop() customClass?: string = '';\n\n  /** The open state of the main menu. */\n  @Prop({ mutable: true }) mainMenuOpen?: boolean = false;\n\n  /** The open state of the notifications menu. */\n  @Prop({ mutable: true }) notificationsMenuOpen?: boolean = false;\n\n  /** Debounce time in milliseconds for search input changes. Default is 300ms. */\n  @Prop() searchDebounceMs?: number = 300;\n\n  /** The open state of the search input. */\n  @Prop({ mutable: true }) searchInputOpen?: boolean = false;\n\n  /** Text replacements for the navbar. */\n  @Prop() textOverrides?: INavbarTextOverrides;\n\n  /** User information used to render the user card. */\n  @Prop() userCard!: INavbarUserCard;\n\n  /** The open state of the user menu. */\n  @Prop({ mutable: true }) userMenuOpen?: boolean = false;\n\n  /** The visibility of individual navbar buttons. Default is user profile visible, others hidden. */\n  @Prop() visibility?: INavbarVisibility = {\n    ai: false,\n    apps: false,\n    help: false,\n    mainMenu: false,\n    notifications: false,\n    search: false,\n    searchInput: false,\n    user: true,\n  };\n\n  /** Event emitted when the AI button is clicked or activated via keyboard. */"
    },
    {
      "name": "appsMenuOpenChange",
      "description": "/** Replaces the text for \"Apps\" in the condensed menu. */\n  apps?: string;\n  /** Replaces the text for \"Help\" in the condensed menu. */\n  help?: string;\n  /** Replaces the text for \"Notifications\" in the condensed menu. */\n  notifications?: string;\n  /** Replaces the text for \"Search\" in the condensed menu. */\n  search?: string;\n}\n\nexport interface INavbarVisibility {\n  /** Controls the visibility of the AI button. */\n  ai?: boolean;\n  /** Controls visibility of the apps button. */\n  apps?: boolean;\n  /** Controls visibility of the help button. */\n  help?: boolean;\n  /** Controls visibility of the main menu button. */\n  mainMenu?: boolean;\n  /** Controls visibility of the notifications button. */\n  notifications?: boolean;\n  /** Controls visibility of the search button. */\n  search?: boolean;\n  /** Controls visibility of the search input. */\n  searchInput?: boolean;\n  /** Controls visibility of the user button. */\n  user?: boolean;\n}\n\nexport interface INavbarUserCard {\n  /** The alt value to set on the avatar. */\n  avatarAlt?: string;\n  /** The avatar image source value. */\n  avatarSrc?: string;\n  /** The email address of the user. */\n  email: string;\n  /** Text override for the Access MyTrimble button, allows for translation. */\n  myTrimbleButton?: string;\n  /** The name of the user */\n  name: string;\n  /** Text override for the Sign out button, allows for translation. */\n  signOutButton?: string;\n}\n\n/**\n * A customizable navbar component used for top level navigation of all Trimble applications.\n *\n * The component supports a 'main-menu', 'notifications', and 'apps' `<slot>` for injecting custom HTML menus.\n * It also supports a 'start', 'center', and 'end' `<slot>` for injecting additional custom HTML\n */\n@Component({\n  tag: 'modus-wc-navbar',\n  styleUrl: 'modus-wc-navbar.scss',\n  shadow: false,\n})\nexport class ModusWcNavbar {\n  private appsRef?: HTMLDivElement;\n  private condensedMenuRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLDivElement;\n  private notificationsRef?: HTMLDivElement;\n  private searchDebounceTimer: number | null = null;\n  private userRef?: HTMLDivElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The open state of the apps menu. */\n  @Prop({ mutable: true }) appsMenuOpen?: boolean = false;\n\n  /** Applies condensed layout and styling. */\n  @Prop() condensed?: boolean = false;\n\n  /** The open state of the condensed menu. */\n  @Prop({ mutable: true }) condensedMenuOpen?: boolean = false;\n\n  /** Custom CSS class to apply to the host element. */\n  @Prop() customClass?: string = '';\n\n  /** The open state of the main menu. */\n  @Prop({ mutable: true }) mainMenuOpen?: boolean = false;\n\n  /** The open state of the notifications menu. */\n  @Prop({ mutable: true }) notificationsMenuOpen?: boolean = false;\n\n  /** Debounce time in milliseconds for search input changes. Default is 300ms. */\n  @Prop() searchDebounceMs?: number = 300;\n\n  /** The open state of the search input. */\n  @Prop({ mutable: true }) searchInputOpen?: boolean = false;\n\n  /** Text replacements for the navbar. */\n  @Prop() textOverrides?: INavbarTextOverrides;\n\n  /** User information used to render the user card. */\n  @Prop() userCard!: INavbarUserCard;\n\n  /** The open state of the user menu. */\n  @Prop({ mutable: true }) userMenuOpen?: boolean = false;\n\n  /** The visibility of individual navbar buttons. Default is user profile visible, others hidden. */\n  @Prop() visibility?: INavbarVisibility = {\n    ai: false,\n    apps: false,\n    help: false,\n    mainMenu: false,\n    notifications: false,\n    search: false,\n    searchInput: false,\n    user: true,\n  };\n\n  /** Event emitted when the AI button is clicked or activated via keyboard. */"
    },
    {
      "name": "condensedMenuOpenChange",
      "description": "/** Replaces the text for \"Apps\" in the condensed menu. */\n  apps?: string;\n  /** Replaces the text for \"Help\" in the condensed menu. */\n  help?: string;\n  /** Replaces the text for \"Notifications\" in the condensed menu. */\n  notifications?: string;\n  /** Replaces the text for \"Search\" in the condensed menu. */\n  search?: string;\n}\n\nexport interface INavbarVisibility {\n  /** Controls the visibility of the AI button. */\n  ai?: boolean;\n  /** Controls visibility of the apps button. */\n  apps?: boolean;\n  /** Controls visibility of the help button. */\n  help?: boolean;\n  /** Controls visibility of the main menu button. */\n  mainMenu?: boolean;\n  /** Controls visibility of the notifications button. */\n  notifications?: boolean;\n  /** Controls visibility of the search button. */\n  search?: boolean;\n  /** Controls visibility of the search input. */\n  searchInput?: boolean;\n  /** Controls visibility of the user button. */\n  user?: boolean;\n}\n\nexport interface INavbarUserCard {\n  /** The alt value to set on the avatar. */\n  avatarAlt?: string;\n  /** The avatar image source value. */\n  avatarSrc?: string;\n  /** The email address of the user. */\n  email: string;\n  /** Text override for the Access MyTrimble button, allows for translation. */\n  myTrimbleButton?: string;\n  /** The name of the user */\n  name: string;\n  /** Text override for the Sign out button, allows for translation. */\n  signOutButton?: string;\n}\n\n/**\n * A customizable navbar component used for top level navigation of all Trimble applications.\n *\n * The component supports a 'main-menu', 'notifications', and 'apps' `<slot>` for injecting custom HTML menus.\n * It also supports a 'start', 'center', and 'end' `<slot>` for injecting additional custom HTML\n */\n@Component({\n  tag: 'modus-wc-navbar',\n  styleUrl: 'modus-wc-navbar.scss',\n  shadow: false,\n})\nexport class ModusWcNavbar {\n  private appsRef?: HTMLDivElement;\n  private condensedMenuRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLDivElement;\n  private notificationsRef?: HTMLDivElement;\n  private searchDebounceTimer: number | null = null;\n  private userRef?: HTMLDivElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The open state of the apps menu. */\n  @Prop({ mutable: true }) appsMenuOpen?: boolean = false;\n\n  /** Applies condensed layout and styling. */\n  @Prop() condensed?: boolean = false;\n\n  /** The open state of the condensed menu. */\n  @Prop({ mutable: true }) condensedMenuOpen?: boolean = false;\n\n  /** Custom CSS class to apply to the host element. */\n  @Prop() customClass?: string = '';\n\n  /** The open state of the main menu. */\n  @Prop({ mutable: true }) mainMenuOpen?: boolean = false;\n\n  /** The open state of the notifications menu. */\n  @Prop({ mutable: true }) notificationsMenuOpen?: boolean = false;\n\n  /** Debounce time in milliseconds for search input changes. Default is 300ms. */\n  @Prop() searchDebounceMs?: number = 300;\n\n  /** The open state of the search input. */\n  @Prop({ mutable: true }) searchInputOpen?: boolean = false;\n\n  /** Text replacements for the navbar. */\n  @Prop() textOverrides?: INavbarTextOverrides;\n\n  /** User information used to render the user card. */\n  @Prop() userCard!: INavbarUserCard;\n\n  /** The open state of the user menu. */\n  @Prop({ mutable: true }) userMenuOpen?: boolean = false;\n\n  /** The visibility of individual navbar buttons. Default is user profile visible, others hidden. */\n  @Prop() visibility?: INavbarVisibility = {\n    ai: false,\n    apps: false,\n    help: false,\n    mainMenu: false,\n    notifications: false,\n    search: false,\n    searchInput: false,\n    user: true,\n  };\n\n  /** Event emitted when the AI button is clicked or activated via keyboard. */"
    },
    {
      "name": "helpClick",
      "description": "/** Replaces the text for \"Apps\" in the condensed menu. */\n  apps?: string;\n  /** Replaces the text for \"Help\" in the condensed menu. */\n  help?: string;\n  /** Replaces the text for \"Notifications\" in the condensed menu. */\n  notifications?: string;\n  /** Replaces the text for \"Search\" in the condensed menu. */\n  search?: string;\n}\n\nexport interface INavbarVisibility {\n  /** Controls the visibility of the AI button. */\n  ai?: boolean;\n  /** Controls visibility of the apps button. */\n  apps?: boolean;\n  /** Controls visibility of the help button. */\n  help?: boolean;\n  /** Controls visibility of the main menu button. */\n  mainMenu?: boolean;\n  /** Controls visibility of the notifications button. */\n  notifications?: boolean;\n  /** Controls visibility of the search button. */\n  search?: boolean;\n  /** Controls visibility of the search input. */\n  searchInput?: boolean;\n  /** Controls visibility of the user button. */\n  user?: boolean;\n}\n\nexport interface INavbarUserCard {\n  /** The alt value to set on the avatar. */\n  avatarAlt?: string;\n  /** The avatar image source value. */\n  avatarSrc?: string;\n  /** The email address of the user. */\n  email: string;\n  /** Text override for the Access MyTrimble button, allows for translation. */\n  myTrimbleButton?: string;\n  /** The name of the user */\n  name: string;\n  /** Text override for the Sign out button, allows for translation. */\n  signOutButton?: string;\n}\n\n/**\n * A customizable navbar component used for top level navigation of all Trimble applications.\n *\n * The component supports a 'main-menu', 'notifications', and 'apps' `<slot>` for injecting custom HTML menus.\n * It also supports a 'start', 'center', and 'end' `<slot>` for injecting additional custom HTML\n */\n@Component({\n  tag: 'modus-wc-navbar',\n  styleUrl: 'modus-wc-navbar.scss',\n  shadow: false,\n})\nexport class ModusWcNavbar {\n  private appsRef?: HTMLDivElement;\n  private condensedMenuRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLDivElement;\n  private notificationsRef?: HTMLDivElement;\n  private searchDebounceTimer: number | null = null;\n  private userRef?: HTMLDivElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The open state of the apps menu. */\n  @Prop({ mutable: true }) appsMenuOpen?: boolean = false;\n\n  /** Applies condensed layout and styling. */\n  @Prop() condensed?: boolean = false;\n\n  /** The open state of the condensed menu. */\n  @Prop({ mutable: true }) condensedMenuOpen?: boolean = false;\n\n  /** Custom CSS class to apply to the host element. */\n  @Prop() customClass?: string = '';\n\n  /** The open state of the main menu. */\n  @Prop({ mutable: true }) mainMenuOpen?: boolean = false;\n\n  /** The open state of the notifications menu. */\n  @Prop({ mutable: true }) notificationsMenuOpen?: boolean = false;\n\n  /** Debounce time in milliseconds for search input changes. Default is 300ms. */\n  @Prop() searchDebounceMs?: number = 300;\n\n  /** The open state of the search input. */\n  @Prop({ mutable: true }) searchInputOpen?: boolean = false;\n\n  /** Text replacements for the navbar. */\n  @Prop() textOverrides?: INavbarTextOverrides;\n\n  /** User information used to render the user card. */\n  @Prop() userCard!: INavbarUserCard;\n\n  /** The open state of the user menu. */\n  @Prop({ mutable: true }) userMenuOpen?: boolean = false;\n\n  /** The visibility of individual navbar buttons. Default is user profile visible, others hidden. */\n  @Prop() visibility?: INavbarVisibility = {\n    ai: false,\n    apps: false,\n    help: false,\n    mainMenu: false,\n    notifications: false,\n    search: false,\n    searchInput: false,\n    user: true,\n  };\n\n  /** Event emitted when the AI button is clicked or activated via keyboard. */"
    },
    {
      "name": "mainMenuOpenChange",
      "description": "/** Replaces the text for \"Apps\" in the condensed menu. */\n  apps?: string;\n  /** Replaces the text for \"Help\" in the condensed menu. */\n  help?: string;\n  /** Replaces the text for \"Notifications\" in the condensed menu. */\n  notifications?: string;\n  /** Replaces the text for \"Search\" in the condensed menu. */\n  search?: string;\n}\n\nexport interface INavbarVisibility {\n  /** Controls the visibility of the AI button. */\n  ai?: boolean;\n  /** Controls visibility of the apps button. */\n  apps?: boolean;\n  /** Controls visibility of the help button. */\n  help?: boolean;\n  /** Controls visibility of the main menu button. */\n  mainMenu?: boolean;\n  /** Controls visibility of the notifications button. */\n  notifications?: boolean;\n  /** Controls visibility of the search button. */\n  search?: boolean;\n  /** Controls visibility of the search input. */\n  searchInput?: boolean;\n  /** Controls visibility of the user button. */\n  user?: boolean;\n}\n\nexport interface INavbarUserCard {\n  /** The alt value to set on the avatar. */\n  avatarAlt?: string;\n  /** The avatar image source value. */\n  avatarSrc?: string;\n  /** The email address of the user. */\n  email: string;\n  /** Text override for the Access MyTrimble button, allows for translation. */\n  myTrimbleButton?: string;\n  /** The name of the user */\n  name: string;\n  /** Text override for the Sign out button, allows for translation. */\n  signOutButton?: string;\n}\n\n/**\n * A customizable navbar component used for top level navigation of all Trimble applications.\n *\n * The component supports a 'main-menu', 'notifications', and 'apps' `<slot>` for injecting custom HTML menus.\n * It also supports a 'start', 'center', and 'end' `<slot>` for injecting additional custom HTML\n */\n@Component({\n  tag: 'modus-wc-navbar',\n  styleUrl: 'modus-wc-navbar.scss',\n  shadow: false,\n})\nexport class ModusWcNavbar {\n  private appsRef?: HTMLDivElement;\n  private condensedMenuRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLDivElement;\n  private notificationsRef?: HTMLDivElement;\n  private searchDebounceTimer: number | null = null;\n  private userRef?: HTMLDivElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The open state of the apps menu. */\n  @Prop({ mutable: true }) appsMenuOpen?: boolean = false;\n\n  /** Applies condensed layout and styling. */\n  @Prop() condensed?: boolean = false;\n\n  /** The open state of the condensed menu. */\n  @Prop({ mutable: true }) condensedMenuOpen?: boolean = false;\n\n  /** Custom CSS class to apply to the host element. */\n  @Prop() customClass?: string = '';\n\n  /** The open state of the main menu. */\n  @Prop({ mutable: true }) mainMenuOpen?: boolean = false;\n\n  /** The open state of the notifications menu. */\n  @Prop({ mutable: true }) notificationsMenuOpen?: boolean = false;\n\n  /** Debounce time in milliseconds for search input changes. Default is 300ms. */\n  @Prop() searchDebounceMs?: number = 300;\n\n  /** The open state of the search input. */\n  @Prop({ mutable: true }) searchInputOpen?: boolean = false;\n\n  /** Text replacements for the navbar. */\n  @Prop() textOverrides?: INavbarTextOverrides;\n\n  /** User information used to render the user card. */\n  @Prop() userCard!: INavbarUserCard;\n\n  /** The open state of the user menu. */\n  @Prop({ mutable: true }) userMenuOpen?: boolean = false;\n\n  /** The visibility of individual navbar buttons. Default is user profile visible, others hidden. */\n  @Prop() visibility?: INavbarVisibility = {\n    ai: false,\n    apps: false,\n    help: false,\n    mainMenu: false,\n    notifications: false,\n    search: false,\n    searchInput: false,\n    user: true,\n  };\n\n  /** Event emitted when the AI button is clicked or activated via keyboard. */"
    },
    {
      "name": "myTrimbleClick",
      "description": "/** Replaces the text for \"Apps\" in the condensed menu. */\n  apps?: string;\n  /** Replaces the text for \"Help\" in the condensed menu. */\n  help?: string;\n  /** Replaces the text for \"Notifications\" in the condensed menu. */\n  notifications?: string;\n  /** Replaces the text for \"Search\" in the condensed menu. */\n  search?: string;\n}\n\nexport interface INavbarVisibility {\n  /** Controls the visibility of the AI button. */\n  ai?: boolean;\n  /** Controls visibility of the apps button. */\n  apps?: boolean;\n  /** Controls visibility of the help button. */\n  help?: boolean;\n  /** Controls visibility of the main menu button. */\n  mainMenu?: boolean;\n  /** Controls visibility of the notifications button. */\n  notifications?: boolean;\n  /** Controls visibility of the search button. */\n  search?: boolean;\n  /** Controls visibility of the search input. */\n  searchInput?: boolean;\n  /** Controls visibility of the user button. */\n  user?: boolean;\n}\n\nexport interface INavbarUserCard {\n  /** The alt value to set on the avatar. */\n  avatarAlt?: string;\n  /** The avatar image source value. */\n  avatarSrc?: string;\n  /** The email address of the user. */\n  email: string;\n  /** Text override for the Access MyTrimble button, allows for translation. */\n  myTrimbleButton?: string;\n  /** The name of the user */\n  name: string;\n  /** Text override for the Sign out button, allows for translation. */\n  signOutButton?: string;\n}\n\n/**\n * A customizable navbar component used for top level navigation of all Trimble applications.\n *\n * The component supports a 'main-menu', 'notifications', and 'apps' `<slot>` for injecting custom HTML menus.\n * It also supports a 'start', 'center', and 'end' `<slot>` for injecting additional custom HTML\n */\n@Component({\n  tag: 'modus-wc-navbar',\n  styleUrl: 'modus-wc-navbar.scss',\n  shadow: false,\n})\nexport class ModusWcNavbar {\n  private appsRef?: HTMLDivElement;\n  private condensedMenuRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLDivElement;\n  private notificationsRef?: HTMLDivElement;\n  private searchDebounceTimer: number | null = null;\n  private userRef?: HTMLDivElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The open state of the apps menu. */\n  @Prop({ mutable: true }) appsMenuOpen?: boolean = false;\n\n  /** Applies condensed layout and styling. */\n  @Prop() condensed?: boolean = false;\n\n  /** The open state of the condensed menu. */\n  @Prop({ mutable: true }) condensedMenuOpen?: boolean = false;\n\n  /** Custom CSS class to apply to the host element. */\n  @Prop() customClass?: string = '';\n\n  /** The open state of the main menu. */\n  @Prop({ mutable: true }) mainMenuOpen?: boolean = false;\n\n  /** The open state of the notifications menu. */\n  @Prop({ mutable: true }) notificationsMenuOpen?: boolean = false;\n\n  /** Debounce time in milliseconds for search input changes. Default is 300ms. */\n  @Prop() searchDebounceMs?: number = 300;\n\n  /** The open state of the search input. */\n  @Prop({ mutable: true }) searchInputOpen?: boolean = false;\n\n  /** Text replacements for the navbar. */\n  @Prop() textOverrides?: INavbarTextOverrides;\n\n  /** User information used to render the user card. */\n  @Prop() userCard!: INavbarUserCard;\n\n  /** The open state of the user menu. */\n  @Prop({ mutable: true }) userMenuOpen?: boolean = false;\n\n  /** The visibility of individual navbar buttons. Default is user profile visible, others hidden. */\n  @Prop() visibility?: INavbarVisibility = {\n    ai: false,\n    apps: false,\n    help: false,\n    mainMenu: false,\n    notifications: false,\n    search: false,\n    searchInput: false,\n    user: true,\n  };\n\n  /** Event emitted when the AI button is clicked or activated via keyboard. */"
    },
    {
      "name": "notificationsClick",
      "description": "/** Replaces the text for \"Apps\" in the condensed menu. */\n  apps?: string;\n  /** Replaces the text for \"Help\" in the condensed menu. */\n  help?: string;\n  /** Replaces the text for \"Notifications\" in the condensed menu. */\n  notifications?: string;\n  /** Replaces the text for \"Search\" in the condensed menu. */\n  search?: string;\n}\n\nexport interface INavbarVisibility {\n  /** Controls the visibility of the AI button. */\n  ai?: boolean;\n  /** Controls visibility of the apps button. */\n  apps?: boolean;\n  /** Controls visibility of the help button. */\n  help?: boolean;\n  /** Controls visibility of the main menu button. */\n  mainMenu?: boolean;\n  /** Controls visibility of the notifications button. */\n  notifications?: boolean;\n  /** Controls visibility of the search button. */\n  search?: boolean;\n  /** Controls visibility of the search input. */\n  searchInput?: boolean;\n  /** Controls visibility of the user button. */\n  user?: boolean;\n}\n\nexport interface INavbarUserCard {\n  /** The alt value to set on the avatar. */\n  avatarAlt?: string;\n  /** The avatar image source value. */\n  avatarSrc?: string;\n  /** The email address of the user. */\n  email: string;\n  /** Text override for the Access MyTrimble button, allows for translation. */\n  myTrimbleButton?: string;\n  /** The name of the user */\n  name: string;\n  /** Text override for the Sign out button, allows for translation. */\n  signOutButton?: string;\n}\n\n/**\n * A customizable navbar component used for top level navigation of all Trimble applications.\n *\n * The component supports a 'main-menu', 'notifications', and 'apps' `<slot>` for injecting custom HTML menus.\n * It also supports a 'start', 'center', and 'end' `<slot>` for injecting additional custom HTML\n */\n@Component({\n  tag: 'modus-wc-navbar',\n  styleUrl: 'modus-wc-navbar.scss',\n  shadow: false,\n})\nexport class ModusWcNavbar {\n  private appsRef?: HTMLDivElement;\n  private condensedMenuRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLDivElement;\n  private notificationsRef?: HTMLDivElement;\n  private searchDebounceTimer: number | null = null;\n  private userRef?: HTMLDivElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The open state of the apps menu. */\n  @Prop({ mutable: true }) appsMenuOpen?: boolean = false;\n\n  /** Applies condensed layout and styling. */\n  @Prop() condensed?: boolean = false;\n\n  /** The open state of the condensed menu. */\n  @Prop({ mutable: true }) condensedMenuOpen?: boolean = false;\n\n  /** Custom CSS class to apply to the host element. */\n  @Prop() customClass?: string = '';\n\n  /** The open state of the main menu. */\n  @Prop({ mutable: true }) mainMenuOpen?: boolean = false;\n\n  /** The open state of the notifications menu. */\n  @Prop({ mutable: true }) notificationsMenuOpen?: boolean = false;\n\n  /** Debounce time in milliseconds for search input changes. Default is 300ms. */\n  @Prop() searchDebounceMs?: number = 300;\n\n  /** The open state of the search input. */\n  @Prop({ mutable: true }) searchInputOpen?: boolean = false;\n\n  /** Text replacements for the navbar. */\n  @Prop() textOverrides?: INavbarTextOverrides;\n\n  /** User information used to render the user card. */\n  @Prop() userCard!: INavbarUserCard;\n\n  /** The open state of the user menu. */\n  @Prop({ mutable: true }) userMenuOpen?: boolean = false;\n\n  /** The visibility of individual navbar buttons. Default is user profile visible, others hidden. */\n  @Prop() visibility?: INavbarVisibility = {\n    ai: false,\n    apps: false,\n    help: false,\n    mainMenu: false,\n    notifications: false,\n    search: false,\n    searchInput: false,\n    user: true,\n  };\n\n  /** Event emitted when the AI button is clicked or activated via keyboard. */"
    },
    {
      "name": "notificationsMenuOpenChange",
      "description": "/** Replaces the text for \"Apps\" in the condensed menu. */\n  apps?: string;\n  /** Replaces the text for \"Help\" in the condensed menu. */\n  help?: string;\n  /** Replaces the text for \"Notifications\" in the condensed menu. */\n  notifications?: string;\n  /** Replaces the text for \"Search\" in the condensed menu. */\n  search?: string;\n}\n\nexport interface INavbarVisibility {\n  /** Controls the visibility of the AI button. */\n  ai?: boolean;\n  /** Controls visibility of the apps button. */\n  apps?: boolean;\n  /** Controls visibility of the help button. */\n  help?: boolean;\n  /** Controls visibility of the main menu button. */\n  mainMenu?: boolean;\n  /** Controls visibility of the notifications button. */\n  notifications?: boolean;\n  /** Controls visibility of the search button. */\n  search?: boolean;\n  /** Controls visibility of the search input. */\n  searchInput?: boolean;\n  /** Controls visibility of the user button. */\n  user?: boolean;\n}\n\nexport interface INavbarUserCard {\n  /** The alt value to set on the avatar. */\n  avatarAlt?: string;\n  /** The avatar image source value. */\n  avatarSrc?: string;\n  /** The email address of the user. */\n  email: string;\n  /** Text override for the Access MyTrimble button, allows for translation. */\n  myTrimbleButton?: string;\n  /** The name of the user */\n  name: string;\n  /** Text override for the Sign out button, allows for translation. */\n  signOutButton?: string;\n}\n\n/**\n * A customizable navbar component used for top level navigation of all Trimble applications.\n *\n * The component supports a 'main-menu', 'notifications', and 'apps' `<slot>` for injecting custom HTML menus.\n * It also supports a 'start', 'center', and 'end' `<slot>` for injecting additional custom HTML\n */\n@Component({\n  tag: 'modus-wc-navbar',\n  styleUrl: 'modus-wc-navbar.scss',\n  shadow: false,\n})\nexport class ModusWcNavbar {\n  private appsRef?: HTMLDivElement;\n  private condensedMenuRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLDivElement;\n  private notificationsRef?: HTMLDivElement;\n  private searchDebounceTimer: number | null = null;\n  private userRef?: HTMLDivElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The open state of the apps menu. */\n  @Prop({ mutable: true }) appsMenuOpen?: boolean = false;\n\n  /** Applies condensed layout and styling. */\n  @Prop() condensed?: boolean = false;\n\n  /** The open state of the condensed menu. */\n  @Prop({ mutable: true }) condensedMenuOpen?: boolean = false;\n\n  /** Custom CSS class to apply to the host element. */\n  @Prop() customClass?: string = '';\n\n  /** The open state of the main menu. */\n  @Prop({ mutable: true }) mainMenuOpen?: boolean = false;\n\n  /** The open state of the notifications menu. */\n  @Prop({ mutable: true }) notificationsMenuOpen?: boolean = false;\n\n  /** Debounce time in milliseconds for search input changes. Default is 300ms. */\n  @Prop() searchDebounceMs?: number = 300;\n\n  /** The open state of the search input. */\n  @Prop({ mutable: true }) searchInputOpen?: boolean = false;\n\n  /** Text replacements for the navbar. */\n  @Prop() textOverrides?: INavbarTextOverrides;\n\n  /** User information used to render the user card. */\n  @Prop() userCard!: INavbarUserCard;\n\n  /** The open state of the user menu. */\n  @Prop({ mutable: true }) userMenuOpen?: boolean = false;\n\n  /** The visibility of individual navbar buttons. Default is user profile visible, others hidden. */\n  @Prop() visibility?: INavbarVisibility = {\n    ai: false,\n    apps: false,\n    help: false,\n    mainMenu: false,\n    notifications: false,\n    search: false,\n    searchInput: false,\n    user: true,\n  };\n\n  /** Event emitted when the AI button is clicked or activated via keyboard. */"
    },
    {
      "name": "searchChange",
      "description": "/** Replaces the text for \"Apps\" in the condensed menu. */\n  apps?: string;\n  /** Replaces the text for \"Help\" in the condensed menu. */\n  help?: string;\n  /** Replaces the text for \"Notifications\" in the condensed menu. */\n  notifications?: string;\n  /** Replaces the text for \"Search\" in the condensed menu. */\n  search?: string;\n}\n\nexport interface INavbarVisibility {\n  /** Controls the visibility of the AI button. */\n  ai?: boolean;\n  /** Controls visibility of the apps button. */\n  apps?: boolean;\n  /** Controls visibility of the help button. */\n  help?: boolean;\n  /** Controls visibility of the main menu button. */\n  mainMenu?: boolean;\n  /** Controls visibility of the notifications button. */\n  notifications?: boolean;\n  /** Controls visibility of the search button. */\n  search?: boolean;\n  /** Controls visibility of the search input. */\n  searchInput?: boolean;\n  /** Controls visibility of the user button. */\n  user?: boolean;\n}\n\nexport interface INavbarUserCard {\n  /** The alt value to set on the avatar. */\n  avatarAlt?: string;\n  /** The avatar image source value. */\n  avatarSrc?: string;\n  /** The email address of the user. */\n  email: string;\n  /** Text override for the Access MyTrimble button, allows for translation. */\n  myTrimbleButton?: string;\n  /** The name of the user */\n  name: string;\n  /** Text override for the Sign out button, allows for translation. */\n  signOutButton?: string;\n}\n\n/**\n * A customizable navbar component used for top level navigation of all Trimble applications.\n *\n * The component supports a 'main-menu', 'notifications', and 'apps' `<slot>` for injecting custom HTML menus.\n * It also supports a 'start', 'center', and 'end' `<slot>` for injecting additional custom HTML\n */\n@Component({\n  tag: 'modus-wc-navbar',\n  styleUrl: 'modus-wc-navbar.scss',\n  shadow: false,\n})\nexport class ModusWcNavbar {\n  private appsRef?: HTMLDivElement;\n  private condensedMenuRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLDivElement;\n  private notificationsRef?: HTMLDivElement;\n  private searchDebounceTimer: number | null = null;\n  private userRef?: HTMLDivElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The open state of the apps menu. */\n  @Prop({ mutable: true }) appsMenuOpen?: boolean = false;\n\n  /** Applies condensed layout and styling. */\n  @Prop() condensed?: boolean = false;\n\n  /** The open state of the condensed menu. */\n  @Prop({ mutable: true }) condensedMenuOpen?: boolean = false;\n\n  /** Custom CSS class to apply to the host element. */\n  @Prop() customClass?: string = '';\n\n  /** The open state of the main menu. */\n  @Prop({ mutable: true }) mainMenuOpen?: boolean = false;\n\n  /** The open state of the notifications menu. */\n  @Prop({ mutable: true }) notificationsMenuOpen?: boolean = false;\n\n  /** Debounce time in milliseconds for search input changes. Default is 300ms. */\n  @Prop() searchDebounceMs?: number = 300;\n\n  /** The open state of the search input. */\n  @Prop({ mutable: true }) searchInputOpen?: boolean = false;\n\n  /** Text replacements for the navbar. */\n  @Prop() textOverrides?: INavbarTextOverrides;\n\n  /** User information used to render the user card. */\n  @Prop() userCard!: INavbarUserCard;\n\n  /** The open state of the user menu. */\n  @Prop({ mutable: true }) userMenuOpen?: boolean = false;\n\n  /** The visibility of individual navbar buttons. Default is user profile visible, others hidden. */\n  @Prop() visibility?: INavbarVisibility = {\n    ai: false,\n    apps: false,\n    help: false,\n    mainMenu: false,\n    notifications: false,\n    search: false,\n    searchInput: false,\n    user: true,\n  };\n\n  /** Event emitted when the AI button is clicked or activated via keyboard. */"
    },
    {
      "name": "searchClick",
      "description": "/** Replaces the text for \"Apps\" in the condensed menu. */\n  apps?: string;\n  /** Replaces the text for \"Help\" in the condensed menu. */\n  help?: string;\n  /** Replaces the text for \"Notifications\" in the condensed menu. */\n  notifications?: string;\n  /** Replaces the text for \"Search\" in the condensed menu. */\n  search?: string;\n}\n\nexport interface INavbarVisibility {\n  /** Controls the visibility of the AI button. */\n  ai?: boolean;\n  /** Controls visibility of the apps button. */\n  apps?: boolean;\n  /** Controls visibility of the help button. */\n  help?: boolean;\n  /** Controls visibility of the main menu button. */\n  mainMenu?: boolean;\n  /** Controls visibility of the notifications button. */\n  notifications?: boolean;\n  /** Controls visibility of the search button. */\n  search?: boolean;\n  /** Controls visibility of the search input. */\n  searchInput?: boolean;\n  /** Controls visibility of the user button. */\n  user?: boolean;\n}\n\nexport interface INavbarUserCard {\n  /** The alt value to set on the avatar. */\n  avatarAlt?: string;\n  /** The avatar image source value. */\n  avatarSrc?: string;\n  /** The email address of the user. */\n  email: string;\n  /** Text override for the Access MyTrimble button, allows for translation. */\n  myTrimbleButton?: string;\n  /** The name of the user */\n  name: string;\n  /** Text override for the Sign out button, allows for translation. */\n  signOutButton?: string;\n}\n\n/**\n * A customizable navbar component used for top level navigation of all Trimble applications.\n *\n * The component supports a 'main-menu', 'notifications', and 'apps' `<slot>` for injecting custom HTML menus.\n * It also supports a 'start', 'center', and 'end' `<slot>` for injecting additional custom HTML\n */\n@Component({\n  tag: 'modus-wc-navbar',\n  styleUrl: 'modus-wc-navbar.scss',\n  shadow: false,\n})\nexport class ModusWcNavbar {\n  private appsRef?: HTMLDivElement;\n  private condensedMenuRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLDivElement;\n  private notificationsRef?: HTMLDivElement;\n  private searchDebounceTimer: number | null = null;\n  private userRef?: HTMLDivElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The open state of the apps menu. */\n  @Prop({ mutable: true }) appsMenuOpen?: boolean = false;\n\n  /** Applies condensed layout and styling. */\n  @Prop() condensed?: boolean = false;\n\n  /** The open state of the condensed menu. */\n  @Prop({ mutable: true }) condensedMenuOpen?: boolean = false;\n\n  /** Custom CSS class to apply to the host element. */\n  @Prop() customClass?: string = '';\n\n  /** The open state of the main menu. */\n  @Prop({ mutable: true }) mainMenuOpen?: boolean = false;\n\n  /** The open state of the notifications menu. */\n  @Prop({ mutable: true }) notificationsMenuOpen?: boolean = false;\n\n  /** Debounce time in milliseconds for search input changes. Default is 300ms. */\n  @Prop() searchDebounceMs?: number = 300;\n\n  /** The open state of the search input. */\n  @Prop({ mutable: true }) searchInputOpen?: boolean = false;\n\n  /** Text replacements for the navbar. */\n  @Prop() textOverrides?: INavbarTextOverrides;\n\n  /** User information used to render the user card. */\n  @Prop() userCard!: INavbarUserCard;\n\n  /** The open state of the user menu. */\n  @Prop({ mutable: true }) userMenuOpen?: boolean = false;\n\n  /** The visibility of individual navbar buttons. Default is user profile visible, others hidden. */\n  @Prop() visibility?: INavbarVisibility = {\n    ai: false,\n    apps: false,\n    help: false,\n    mainMenu: false,\n    notifications: false,\n    search: false,\n    searchInput: false,\n    user: true,\n  };\n\n  /** Event emitted when the AI button is clicked or activated via keyboard. */"
    },
    {
      "name": "searchInputOpenChange",
      "description": "/** Replaces the text for \"Apps\" in the condensed menu. */\n  apps?: string;\n  /** Replaces the text for \"Help\" in the condensed menu. */\n  help?: string;\n  /** Replaces the text for \"Notifications\" in the condensed menu. */\n  notifications?: string;\n  /** Replaces the text for \"Search\" in the condensed menu. */\n  search?: string;\n}\n\nexport interface INavbarVisibility {\n  /** Controls the visibility of the AI button. */\n  ai?: boolean;\n  /** Controls visibility of the apps button. */\n  apps?: boolean;\n  /** Controls visibility of the help button. */\n  help?: boolean;\n  /** Controls visibility of the main menu button. */\n  mainMenu?: boolean;\n  /** Controls visibility of the notifications button. */\n  notifications?: boolean;\n  /** Controls visibility of the search button. */\n  search?: boolean;\n  /** Controls visibility of the search input. */\n  searchInput?: boolean;\n  /** Controls visibility of the user button. */\n  user?: boolean;\n}\n\nexport interface INavbarUserCard {\n  /** The alt value to set on the avatar. */\n  avatarAlt?: string;\n  /** The avatar image source value. */\n  avatarSrc?: string;\n  /** The email address of the user. */\n  email: string;\n  /** Text override for the Access MyTrimble button, allows for translation. */\n  myTrimbleButton?: string;\n  /** The name of the user */\n  name: string;\n  /** Text override for the Sign out button, allows for translation. */\n  signOutButton?: string;\n}\n\n/**\n * A customizable navbar component used for top level navigation of all Trimble applications.\n *\n * The component supports a 'main-menu', 'notifications', and 'apps' `<slot>` for injecting custom HTML menus.\n * It also supports a 'start', 'center', and 'end' `<slot>` for injecting additional custom HTML\n */\n@Component({\n  tag: 'modus-wc-navbar',\n  styleUrl: 'modus-wc-navbar.scss',\n  shadow: false,\n})\nexport class ModusWcNavbar {\n  private appsRef?: HTMLDivElement;\n  private condensedMenuRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLDivElement;\n  private notificationsRef?: HTMLDivElement;\n  private searchDebounceTimer: number | null = null;\n  private userRef?: HTMLDivElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The open state of the apps menu. */\n  @Prop({ mutable: true }) appsMenuOpen?: boolean = false;\n\n  /** Applies condensed layout and styling. */\n  @Prop() condensed?: boolean = false;\n\n  /** The open state of the condensed menu. */\n  @Prop({ mutable: true }) condensedMenuOpen?: boolean = false;\n\n  /** Custom CSS class to apply to the host element. */\n  @Prop() customClass?: string = '';\n\n  /** The open state of the main menu. */\n  @Prop({ mutable: true }) mainMenuOpen?: boolean = false;\n\n  /** The open state of the notifications menu. */\n  @Prop({ mutable: true }) notificationsMenuOpen?: boolean = false;\n\n  /** Debounce time in milliseconds for search input changes. Default is 300ms. */\n  @Prop() searchDebounceMs?: number = 300;\n\n  /** The open state of the search input. */\n  @Prop({ mutable: true }) searchInputOpen?: boolean = false;\n\n  /** Text replacements for the navbar. */\n  @Prop() textOverrides?: INavbarTextOverrides;\n\n  /** User information used to render the user card. */\n  @Prop() userCard!: INavbarUserCard;\n\n  /** The open state of the user menu. */\n  @Prop({ mutable: true }) userMenuOpen?: boolean = false;\n\n  /** The visibility of individual navbar buttons. Default is user profile visible, others hidden. */\n  @Prop() visibility?: INavbarVisibility = {\n    ai: false,\n    apps: false,\n    help: false,\n    mainMenu: false,\n    notifications: false,\n    search: false,\n    searchInput: false,\n    user: true,\n  };\n\n  /** Event emitted when the AI button is clicked or activated via keyboard. */"
    },
    {
      "name": "signOutClick",
      "description": "/** Replaces the text for \"Apps\" in the condensed menu. */\n  apps?: string;\n  /** Replaces the text for \"Help\" in the condensed menu. */\n  help?: string;\n  /** Replaces the text for \"Notifications\" in the condensed menu. */\n  notifications?: string;\n  /** Replaces the text for \"Search\" in the condensed menu. */\n  search?: string;\n}\n\nexport interface INavbarVisibility {\n  /** Controls the visibility of the AI button. */\n  ai?: boolean;\n  /** Controls visibility of the apps button. */\n  apps?: boolean;\n  /** Controls visibility of the help button. */\n  help?: boolean;\n  /** Controls visibility of the main menu button. */\n  mainMenu?: boolean;\n  /** Controls visibility of the notifications button. */\n  notifications?: boolean;\n  /** Controls visibility of the search button. */\n  search?: boolean;\n  /** Controls visibility of the search input. */\n  searchInput?: boolean;\n  /** Controls visibility of the user button. */\n  user?: boolean;\n}\n\nexport interface INavbarUserCard {\n  /** The alt value to set on the avatar. */\n  avatarAlt?: string;\n  /** The avatar image source value. */\n  avatarSrc?: string;\n  /** The email address of the user. */\n  email: string;\n  /** Text override for the Access MyTrimble button, allows for translation. */\n  myTrimbleButton?: string;\n  /** The name of the user */\n  name: string;\n  /** Text override for the Sign out button, allows for translation. */\n  signOutButton?: string;\n}\n\n/**\n * A customizable navbar component used for top level navigation of all Trimble applications.\n *\n * The component supports a 'main-menu', 'notifications', and 'apps' `<slot>` for injecting custom HTML menus.\n * It also supports a 'start', 'center', and 'end' `<slot>` for injecting additional custom HTML\n */\n@Component({\n  tag: 'modus-wc-navbar',\n  styleUrl: 'modus-wc-navbar.scss',\n  shadow: false,\n})\nexport class ModusWcNavbar {\n  private appsRef?: HTMLDivElement;\n  private condensedMenuRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLDivElement;\n  private notificationsRef?: HTMLDivElement;\n  private searchDebounceTimer: number | null = null;\n  private userRef?: HTMLDivElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The open state of the apps menu. */\n  @Prop({ mutable: true }) appsMenuOpen?: boolean = false;\n\n  /** Applies condensed layout and styling. */\n  @Prop() condensed?: boolean = false;\n\n  /** The open state of the condensed menu. */\n  @Prop({ mutable: true }) condensedMenuOpen?: boolean = false;\n\n  /** Custom CSS class to apply to the host element. */\n  @Prop() customClass?: string = '';\n\n  /** The open state of the main menu. */\n  @Prop({ mutable: true }) mainMenuOpen?: boolean = false;\n\n  /** The open state of the notifications menu. */\n  @Prop({ mutable: true }) notificationsMenuOpen?: boolean = false;\n\n  /** Debounce time in milliseconds for search input changes. Default is 300ms. */\n  @Prop() searchDebounceMs?: number = 300;\n\n  /** The open state of the search input. */\n  @Prop({ mutable: true }) searchInputOpen?: boolean = false;\n\n  /** Text replacements for the navbar. */\n  @Prop() textOverrides?: INavbarTextOverrides;\n\n  /** User information used to render the user card. */\n  @Prop() userCard!: INavbarUserCard;\n\n  /** The open state of the user menu. */\n  @Prop({ mutable: true }) userMenuOpen?: boolean = false;\n\n  /** The visibility of individual navbar buttons. Default is user profile visible, others hidden. */\n  @Prop() visibility?: INavbarVisibility = {\n    ai: false,\n    apps: false,\n    help: false,\n    mainMenu: false,\n    notifications: false,\n    search: false,\n    searchInput: false,\n    user: true,\n  };\n\n  /** Event emitted when the AI button is clicked or activated via keyboard. */"
    },
    {
      "name": "trimbleLogoClick",
      "description": "/** Replaces the text for \"Apps\" in the condensed menu. */\n  apps?: string;\n  /** Replaces the text for \"Help\" in the condensed menu. */\n  help?: string;\n  /** Replaces the text for \"Notifications\" in the condensed menu. */\n  notifications?: string;\n  /** Replaces the text for \"Search\" in the condensed menu. */\n  search?: string;\n}\n\nexport interface INavbarVisibility {\n  /** Controls the visibility of the AI button. */\n  ai?: boolean;\n  /** Controls visibility of the apps button. */\n  apps?: boolean;\n  /** Controls visibility of the help button. */\n  help?: boolean;\n  /** Controls visibility of the main menu button. */\n  mainMenu?: boolean;\n  /** Controls visibility of the notifications button. */\n  notifications?: boolean;\n  /** Controls visibility of the search button. */\n  search?: boolean;\n  /** Controls visibility of the search input. */\n  searchInput?: boolean;\n  /** Controls visibility of the user button. */\n  user?: boolean;\n}\n\nexport interface INavbarUserCard {\n  /** The alt value to set on the avatar. */\n  avatarAlt?: string;\n  /** The avatar image source value. */\n  avatarSrc?: string;\n  /** The email address of the user. */\n  email: string;\n  /** Text override for the Access MyTrimble button, allows for translation. */\n  myTrimbleButton?: string;\n  /** The name of the user */\n  name: string;\n  /** Text override for the Sign out button, allows for translation. */\n  signOutButton?: string;\n}\n\n/**\n * A customizable navbar component used for top level navigation of all Trimble applications.\n *\n * The component supports a 'main-menu', 'notifications', and 'apps' `<slot>` for injecting custom HTML menus.\n * It also supports a 'start', 'center', and 'end' `<slot>` for injecting additional custom HTML\n */\n@Component({\n  tag: 'modus-wc-navbar',\n  styleUrl: 'modus-wc-navbar.scss',\n  shadow: false,\n})\nexport class ModusWcNavbar {\n  private appsRef?: HTMLDivElement;\n  private condensedMenuRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLDivElement;\n  private notificationsRef?: HTMLDivElement;\n  private searchDebounceTimer: number | null = null;\n  private userRef?: HTMLDivElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The open state of the apps menu. */\n  @Prop({ mutable: true }) appsMenuOpen?: boolean = false;\n\n  /** Applies condensed layout and styling. */\n  @Prop() condensed?: boolean = false;\n\n  /** The open state of the condensed menu. */\n  @Prop({ mutable: true }) condensedMenuOpen?: boolean = false;\n\n  /** Custom CSS class to apply to the host element. */\n  @Prop() customClass?: string = '';\n\n  /** The open state of the main menu. */\n  @Prop({ mutable: true }) mainMenuOpen?: boolean = false;\n\n  /** The open state of the notifications menu. */\n  @Prop({ mutable: true }) notificationsMenuOpen?: boolean = false;\n\n  /** Debounce time in milliseconds for search input changes. Default is 300ms. */\n  @Prop() searchDebounceMs?: number = 300;\n\n  /** The open state of the search input. */\n  @Prop({ mutable: true }) searchInputOpen?: boolean = false;\n\n  /** Text replacements for the navbar. */\n  @Prop() textOverrides?: INavbarTextOverrides;\n\n  /** User information used to render the user card. */\n  @Prop() userCard!: INavbarUserCard;\n\n  /** The open state of the user menu. */\n  @Prop({ mutable: true }) userMenuOpen?: boolean = false;\n\n  /** The visibility of individual navbar buttons. Default is user profile visible, others hidden. */\n  @Prop() visibility?: INavbarVisibility = {\n    ai: false,\n    apps: false,\n    help: false,\n    mainMenu: false,\n    notifications: false,\n    search: false,\n    searchInput: false,\n    user: true,\n  };\n\n  /** Event emitted when the AI button is clicked or activated via keyboard. */"
    },
    {
      "name": "userMenuOpenChange",
      "description": "/** Replaces the text for \"Apps\" in the condensed menu. */\n  apps?: string;\n  /** Replaces the text for \"Help\" in the condensed menu. */\n  help?: string;\n  /** Replaces the text for \"Notifications\" in the condensed menu. */\n  notifications?: string;\n  /** Replaces the text for \"Search\" in the condensed menu. */\n  search?: string;\n}\n\nexport interface INavbarVisibility {\n  /** Controls the visibility of the AI button. */\n  ai?: boolean;\n  /** Controls visibility of the apps button. */\n  apps?: boolean;\n  /** Controls visibility of the help button. */\n  help?: boolean;\n  /** Controls visibility of the main menu button. */\n  mainMenu?: boolean;\n  /** Controls visibility of the notifications button. */\n  notifications?: boolean;\n  /** Controls visibility of the search button. */\n  search?: boolean;\n  /** Controls visibility of the search input. */\n  searchInput?: boolean;\n  /** Controls visibility of the user button. */\n  user?: boolean;\n}\n\nexport interface INavbarUserCard {\n  /** The alt value to set on the avatar. */\n  avatarAlt?: string;\n  /** The avatar image source value. */\n  avatarSrc?: string;\n  /** The email address of the user. */\n  email: string;\n  /** Text override for the Access MyTrimble button, allows for translation. */\n  myTrimbleButton?: string;\n  /** The name of the user */\n  name: string;\n  /** Text override for the Sign out button, allows for translation. */\n  signOutButton?: string;\n}\n\n/**\n * A customizable navbar component used for top level navigation of all Trimble applications.\n *\n * The component supports a 'main-menu', 'notifications', and 'apps' `<slot>` for injecting custom HTML menus.\n * It also supports a 'start', 'center', and 'end' `<slot>` for injecting additional custom HTML\n */\n@Component({\n  tag: 'modus-wc-navbar',\n  styleUrl: 'modus-wc-navbar.scss',\n  shadow: false,\n})\nexport class ModusWcNavbar {\n  private appsRef?: HTMLDivElement;\n  private condensedMenuRef?: HTMLElement;\n  private inheritedAttributes: Attributes = {};\n  private menuRef?: HTMLDivElement;\n  private notificationsRef?: HTMLDivElement;\n  private searchDebounceTimer: number | null = null;\n  private userRef?: HTMLDivElement;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The open state of the apps menu. */\n  @Prop({ mutable: true }) appsMenuOpen?: boolean = false;\n\n  /** Applies condensed layout and styling. */\n  @Prop() condensed?: boolean = false;\n\n  /** The open state of the condensed menu. */\n  @Prop({ mutable: true }) condensedMenuOpen?: boolean = false;\n\n  /** Custom CSS class to apply to the host element. */\n  @Prop() customClass?: string = '';\n\n  /** The open state of the main menu. */\n  @Prop({ mutable: true }) mainMenuOpen?: boolean = false;\n\n  /** The open state of the notifications menu. */\n  @Prop({ mutable: true }) notificationsMenuOpen?: boolean = false;\n\n  /** Debounce time in milliseconds for search input changes. Default is 300ms. */\n  @Prop() searchDebounceMs?: number = 300;\n\n  /** The open state of the search input. */\n  @Prop({ mutable: true }) searchInputOpen?: boolean = false;\n\n  /** Text replacements for the navbar. */\n  @Prop() textOverrides?: INavbarTextOverrides;\n\n  /** User information used to render the user card. */\n  @Prop() userCard!: INavbarUserCard;\n\n  /** The open state of the user menu. */\n  @Prop({ mutable: true }) userMenuOpen?: boolean = false;\n\n  /** The visibility of individual navbar buttons. Default is user profile visible, others hidden. */\n  @Prop() visibility?: INavbarVisibility = {\n    ai: false,\n    apps: false,\n    help: false,\n    mainMenu: false,\n    notifications: false,\n    search: false,\n    searchInput: false,\n    user: true,\n  };\n\n  /** Event emitted when the AI button is clicked or activated via keyboard. */"
    }
  ],
  "slots": [
    "start",
    "center",
    "end",
    "notifications",
    "apps"
  ],
  "default_values": {
    "appsMenuOpen": "false",
    "condensed": "false",
    "condensedMenuOpen": "false",
    "customClass": "''",
    "mainMenuOpen": "false",
    "notificationsMenuOpen": "false",
    "searchDebounceMs": "300",
    "searchInputOpen": "false",
    "textOverrides": "{() => this.handleSearchClick()}\n                        value=\"search\"\n                      />\n                    )}\n                    {this.visibility?.notifications && (\n                      <modus-wc-menu-item\n                        label={\n                          this.textOverrides?.notifications || 'Notifications'\n                        }\n                        onItemSelect={() => this.handleNotificationsClick()}\n                        value=\"notifications\"\n                      />\n                    )}\n                    {this.visibility?.help && (\n                      <modus-wc-menu-item\n                        label={this.textOverrides?.help || 'Help'}\n                        onItemSelect={() => this.handleHelpClick()}\n                        value=\"help\"\n                      />\n                    )}\n                    {this.visibility?.apps && (\n                      <modus-wc-menu-item\n                        label={this.textOverrides?.apps || 'Apps'}\n                        onItemSelect={() => this.handleAppsClick()}\n                        value=\"apps\"\n                      />\n                    )}\n                  </modus-wc-menu>\n                )}\n              </Fragment>\n            )}\n\n            {this.visibility?.search && !this.condensed && (\n              <Fragment>\n                {this.visibility?.searchInput && this.searchInputOpen && (\n                  <modus-wc-text-input\n                    includeClear={true}\n                    includeSearch={true}\n                    onInputChange={this.handleSearchChange}\n                    placeholder={this.textOverrides?.search || 'Search'}\n                    size=\"sm\"\n                    value={this.searchValue}\n                  />\n                )}\n                <modus-wc-button\n                  onButtonClick={this.handleSearchClick}\n                  shape=\"square\"\n                  size=\"sm\"\n                  variant=\"borderless\"\n                >\n                  <SearchSolidIcon />\n                </modus-wc-button>\n              </Fragment>\n            )}\n\n            {this.visibility?.notifications && !this.condensed && (\n              <Fragment>\n                <modus-wc-button\n                  onButtonClick={this.handleNotificationsClick}\n                  shape=\"square\"\n                  size=\"sm\"\n                  variant=\"borderless\"\n                >\n                  <NotificationsSolidIcon />\n                </modus-wc-button>\n                <div\n                  class={`notifications ${this.notificationsMenuOpen ? 'visible' : 'hidden'}`}\n                  ref={(el) => (this.notificationsRef = el)}\n                >\n                  <slot name=\"notifications\" />\n                </div>\n              </Fragment>\n            )}\n\n            {this.visibility?.help && !this.condensed && (\n              <modus-wc-button\n                onButtonClick={this.handleHelpClick}\n                shape=\"square\"\n                size=\"sm\"\n                variant=\"borderless\"\n              >\n                <HelpSolidIcon />\n              </modus-wc-button>\n            )}\n\n            {this.visibility?.apps && !this.condensed && (\n              <Fragment>\n                <modus-wc-button\n                  onButtonClick={this.handleAppsClick}\n                  shape=\"square\"\n                  size=\"sm\"\n                  variant=\"borderless\"\n                >\n                  <AppsSolidIcon />\n                </modus-wc-button>\n                <div\n                  class={`apps ${this.appsMenuOpen ? 'visible' : 'hidden'}`}\n                  ref={(el) => (this.appsRef = el)}\n                >\n                  <slot name=\"apps\" />\n                </div>\n              </Fragment>\n            )}\n\n            {this.visibility?.user && (\n              <Fragment>\n                <modus-wc-button\n                  customClass=\"user-button\"\n                  onButtonClick={this.toggleUser}\n                  shape=\"circle\"\n                  size=\"sm\"\n                  variant=\"borderless\"\n                >\n                  <modus-wc-avatar\n                    alt={this.userCard?.avatarAlt || ''}\n                    imgSrc={this.userCard?.avatarSrc}\n                    initials={this.userCard?.name}\n                    size=\"xs\"\n                  />\n                </modus-wc-button>\n                <div\n                  class={`user ${this.userMenuOpen ? 'visible' : 'hidden'}`}\n                  ref={(el) => (this.userRef = el)}\n                >\n                  <modus-wc-card>\n                    <div slot=\"header\">\n                      <modus-wc-avatar\n                        alt={this.userCard?.avatarAlt || ''}\n                        imgSrc={this.userCard?.avatarSrc}\n                        initials={this.userCard?.name}\n                      />\n                    </div>\n                    <div slot=\"title\">{this.userCard?.name}</div>\n                    <div>{this.userCard?.email}</div>\n                    <div slot=\"actions\">\n                      <modus-wc-button\n                        customClass=\"my-trimble\"\n                        onButtonClick={this.handleMyTrimbleClick}\n                      >\n                        {this.userCard?.myTrimbleButton || 'Access MyTrimble'}\n                      </modus-wc-button>\n                    </div>\n                    <div slot=\"footer\">\n                      <modus-wc-button\n                        customClass=\"sign-out\"\n                        onButtonClick={this.handleSignOutClick}\n                        variant=\"borderless\"\n                      >\n                        {this.userCard?.signOutButton || 'Sign out'}\n                      </modus-wc-button>\n                    </div>\n                  </modus-wc-card>\n                </div>\n              </Fragment>\n            )}\n          </div>\n        </modus-wc-toolbar>\n      </Host>\n    )",
    "userCard": "{this.userCard?.avatarSrc}\n                    initials={this.userCard?.name}\n                    size=\"xs\"\n                  />\n                </modus-wc-button>\n                <div\n                  class={`user ${this.userMenuOpen ? 'visible' : 'hidden'}`}\n                  ref={(el) => (this.userRef = el)}\n                >\n                  <modus-wc-card>\n                    <div slot=\"header\">\n                      <modus-wc-avatar\n                        alt={this.userCard?.avatarAlt || ''}\n                        imgSrc={this.userCard?.avatarSrc}\n                        initials={this.userCard?.name}\n                      />\n                    </div>\n                    <div slot=\"title\">{this.userCard?.name}</div>\n                    <div>{this.userCard?.email}</div>\n                    <div slot=\"actions\">\n                      <modus-wc-button\n                        customClass=\"my-trimble\"\n                        onButtonClick={this.handleMyTrimbleClick}\n                      >\n                        {this.userCard?.myTrimbleButton || 'Access MyTrimble'}\n                      </modus-wc-button>\n                    </div>\n                    <div slot=\"footer\">\n                      <modus-wc-button\n                        customClass=\"sign-out\"\n                        onButtonClick={this.handleSignOutClick}\n                        variant=\"borderless\"\n                      >\n                        {this.userCard?.signOutButton || 'Sign out'}\n                      </modus-wc-button>\n                    </div>\n                  </modus-wc-card>\n                </div>\n              </Fragment>\n            )}\n          </div>\n        </modus-wc-toolbar>\n      </Host>\n    )",
    "userMenuOpen": "false",
    "visibility": "{\n    ai: false,\n    apps: false,\n    help: false,\n    mainMenu: false,\n    notifications: false,\n    search: false,\n    searchInput: false,\n    user: true,\n  }"
  },
  "documentation": "\n\n--- modus-wc-navbar.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport {\n  INavbarTextOverrides,\n  INavbarUserCard,\n  INavbarVisibility,\n} from './modus-wc-navbar';\n\nconst textOverrides: INavbarTextOverrides = {\n  apps: 'Apps',\n  help: 'Help',\n  notifications: 'Notifications',\n  search: 'Search',\n};\n\nconst userCard: INavbarUserCard = {\n  avatarAlt: 'Sonic',\n  avatarSrc: 'https://i1.sndcdn.com/artworks-000405996468-wmh3uv-t500x500.jpg',\n  email: 'sonic@trimble.com',\n  name: 'Sonic the Hedgehog',\n};\n\nconst visibility: INavbarVisibility = {\n  ai: true,\n  apps: true,\n  help: true,\n  mainMenu: true,\n  notifications: true,\n  search: true,\n  searchInput: true,\n  user: true,\n};\n\ninterface NavbarArgs {\n  'apps-menu-open'?: boolean;\n  condensed?: boolean;\n  'condensed-menu-open'?: boolean;\n  'custom-class'?: string;\n  'main-menu-open'?: boolean;\n  'notifications-menu-open'?: boolean;\n  'search-debounce-ms'?: number;\n  'search-input-open'?: boolean;\n  'text-overrides'?: INavbarTextOverrides;\n  'user-card': INavbarUserCard;\n  'user-menu-open'?: boolean;\n  visibility?: INavbarVisibility;\n}\n\nconst meta: Meta<NavbarArgs> = {\n  title: 'Components/Navbar',\n  component: 'modus-wc-navbar',\n  args: {\n    condensed: false,\n    'search-debounce-ms': 300,\n    'text-overrides': textOverrides,\n    'user-card': userCard,\n    visibility,\n  },\n  argTypes: {\n    'text-overrides': {\n      description: 'Text replacements for navbar menu items',\n      table: {\n        type: {\n          detail: `\n            Interface: INavbarTextOverrides\n            Properties:\n            - apps (string, optional): Replaces the text for \"Apps\" in the condensed menu\n            - help (string, optional): Replaces the text for \"Help\" in the condensed menu\n            - notifications (string, optional): Replaces the text for \"Notifications\" in the condensed menu\n            - search (string, optional): Replaces the text for \"Search\" in the condensed menu\n          `,\n        },\n      },\n      control: {\n        type: 'object',\n      },\n    },\n    'user-card': {\n      description: 'User profile card information',\n      table: {\n        type: {\n          detail: `\n            Interface: IUserCard\n            Properties:\n            - avatarAlt (string, optional): The alt value to set on the avatar\n            - avatarSrc (string, optional): The avatar image source value\n            - email (string): The email address of the user\n            - myTrimbleButton (string, optional): Text override for the Access MyTrimble button, allows for translation\n            - name (string): The name of the user\n            - signOutButton (string, optional): Text override for the Sign out button, allows for translation\n          `,\n        },\n      },\n    },\n    visibility: {\n      description: 'Controls visibility of individual navbar buttons',\n      table: {\n        type: {\n          detail: `\n            Interface: INavbarVisibility\n            Properties:\n            - ai (boolean, optional): Controls visibility of the AI button\n            - apps (boolean, optional): Controls visibility of the apps button\n            - help (boolean, optional): Controls visibility of the help button\n            - mainMenu (boolean, optional): Controls visibility of the main menu button\n            - notifications (boolean, optional): Controls visibility of the notifications button\n            - search (boolean, optional): Controls visibility of the search button\n            - searchInput (boolean, optional): Controls visibility of the search input\n            - user (boolean, optional): Controls visibility of the user button\n          `,\n        },\n      },\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: [\n        'aiClick',\n        'appsClick',\n        'appsMenuOpenChange',\n        'condensedMenuOpenChange',\n        'helpClick',\n        'mainMenuOpenChange',\n        'myTrimbleClick',\n        'notificationsMenuOpenChange',\n        'notificationsClick',\n        'searchChange',\n        'searchClick',\n        'searchInputOpenChange',\n        'signOutClick',\n        'trimbleLogoClick',\n        'userMenuOpenChange',\n      ],\n    },\n    layout: 'padded',\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<NavbarArgs>;\n\nconst Template: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<style>\n  div[id^='story--components-navbar--default'] {\n    border: 1px dashed black;\n    height: 360px;\n    overflow: hidden;\n  }\n  [slot=main-menu] {\n    background-color: #0063a3;\n    color: white;\n    height: 400px;\n  }\n</style>\n<modus-wc-navbar\n  ?apps-menu-open=${args['apps-menu-open']}\n  ?condensed=${args.condensed}\n  ?condensed-menu-open=${args['condensed-menu-open']}\n  custom-class=${ifDefined(args['custom-class'])}\n  ?main-menu-open=${args['main-menu-open']}\n  ?notifications-menu-open=${args['notifications-menu-open']}\n  search-debounce-ms=${ifDefined(args['search-debounce-ms'])}\n  ?search-input-open=${args['search-input-open']}\n  .textOverrides=${ifDefined(args['text-overrides'])}\n  .userCard=${args['user-card']}\n  ?user-menu-open=${args['user-menu-open']}\n  .visibility=${args.visibility}\n>\n  <div slot=\"main-menu\">Main menu contents</div>\n  <div slot=\"notifications\">Notification contents</div>\n  <div slot=\"apps\">App drawer contents</div>\n</modus-wc-navbar>\n    `;\n  },\n};\n\nexport const Default: Story = { ...Template };\n\nexport const CustomMenuAndSlots: Story = {\n  render: (args) => {\n    function toggleCustomUserMenu(e) {\n      const customIcon = e.currentTarget;\n      const menu = customIcon.parentElement?.querySelector('#custom-user-menu');\n      menu?.classList.toggle('hidden');\n    }\n    return html`\n      <div id=\"custom-menu-and-slots\">\n        <style>\n          #custom-menu-and-slots .modus-wc-navbar {\n            align-items: center;\n            display: flex;\n            gap: 0.2rem;\n            padding: 0 1rem;\n            width: 100%;\n          }\n          .modus-wc-card-body {\n            padding: 1rem;\n          }\n          #custom-menu-and-slots .modus-wc-navbar-center,\n          #custom-menu-and-slots .modus-wc-navbar-end,\n          #custom-menu-and-slots .modus-wc-navbar-start {\n            align-items: center;\n            display: flex;\n            flex: 1;\n          }\n          #custom-menu-and-slots .modus-wc-navbar-center {\n            background: #d9d9d969;\n            justify-content: center;\n          }\n          #custom-menu-and-slots .modus-wc-navbar-end {\n            background: #d9d9d969;\n            justify-content: flex-end;\n          }\n          #custom-menu-and-slots .modus-wc-navbar-start {\n            background: #d9d9d969;\n            justify-content: flex-start;\n          }\n          #custom-user-menu {\n            position: absolute;\n            right: 10px;\n            top: 50px;\n            z-index: 1000;\n          }\n          #custom-user-menu.hidden {\n            display: none;\n          }\n          .custom-user-email {\n            font-size: 0.8rem;\n          }\n          .custom-user-icon {\n            cursor: pointer;\n            margin-inline-start: 8px;\n            margin-inline-end: 8px;\n            position: relative;\n            top: 3px;\n          }\n          .custom-user-menu-header {\n            border-bottom: 1px solid #e0e0e0;\n            margin-bottom: 8px;\n            padding: 8px 16px;\n          }\n          .custom-user-menu-title {\n            font-weight: bold;\n          }\n          div[id^='story--components-navbar--custom-menu-and-slots'] {\n            border: 1px dashed black;\n            height: 365px;\n          }\n          .menu-item {\n            align-items: center;\n            cursor: pointer;\n            display: flex;\n            padding: 8px;\n          }\n          .slot-bg {\n            align-items: center;\n            display: flex;\n            font-weight: 600;\n            height: 40px;\n            justify-content: center;\n            opacity: 0.4;\n          }\n        </style>\n        <script>\n          /** function to toggle custom user menu */\n          function toggleCustomUserMenu(e) {\n            const customIcon = e.currentTarget;\n            const menu =\n              customIcon.parentElement?.querySelector('#custom-user-menu');\n            menu?.classList.toggle('hidden');\n          }\n        </script>\n        <modus-wc-navbar\n          ?apps-menu-open=${args['apps-menu-open']}\n          ?condensed=${args.condensed}\n          ?condensed-menu-open=${args['condensed-menu-open']}\n          custom-class=${ifDefined(args['custom-class'])}\n          ?main-menu-open=${args['main-menu-open']}\n          ?notifications-menu-open=${args['notifications-menu-open']}\n          search-debounce-ms=${ifDefined(args['search-debounce-ms'])}\n          ?search-input-open=${args['search-input-open']}\n          .textOverrides=${ifDefined(args['text-overrides'])}\n          .userCard=${args['user-card']}\n          ?user-menu-open=${args['user-menu-open']}\n          .visibility=${{\n            ai: false,\n            apps: false,\n            help: false,\n            mainMenu: false,\n            notifications: false,\n            search: false,\n            searchInput: false,\n            user: false,\n          }}\n        >\n          <div slot=\"main-menu\">Main menu contents</div>\n          <div slot=\"notifications\">Notification contents</div>\n          <div slot=\"apps\">App drawer contents</div>\n\n          <!-- Slots demonstration -->\n          <div slot=\"start\">\n            <div class=\"slot-bg\">Left slot</div>\n          </div>\n          <div slot=\"center\">\n            <div class=\"slot-bg\">Center slot</div>\n          </div>\n          <div slot=\"end\">\n            <div class=\"slot-bg\">Right slot</div>\n            <div class=\"custom-user-icon\" @click=${toggleCustomUserMenu}>\n              <modus-wc-avatar\n                alt=\"Sonic the Hedgehog\"\n                img-src=\"https://i1.sndcdn.com/artworks-000405996468-wmh3uv-t500x500.jpg\"\n                size=\"xs\"\n                shape=\"circle\"\n              ></modus-wc-avatar>\n            </div>\n\n            <!-- Custom user menu -->\n            <modus-wc-card id=\"custom-user-menu\" bordered=\"true\">\n              <div class=\"custom-user-menu-header\">\n                <div class=\"custom-user-menu-title\">Custom Menu</div>\n                <div class=\"custom-user-email\">custom.user@example.com</div>\n              </div>\n              <div class=\"menu-item\">\n                <span class=\"menu-item-icon\"\n                  ><modus-wc-icon\n                    name=\"settings_solid\"\n                    size=\"16px\"\n                  ></modus-wc-icon\n                ></span>\n                <span class=\"custom-user-icon\">Account Settings</span>\n              </div>\n              <div class=\"menu-item\">\n                <span class=\"menu-item-icon\"\n                  ><modus-wc-icon\n                    name=\"person_solid\"\n                    size=\"16px\"\n                  ></modus-wc-icon\n                ></span>\n                <span class=\"custom-user-icon\">Profile</span>\n              </div>\n              <div class=\"menu-item\">\n                <span class=\"menu-item-icon\"\n                  ><modus-wc-icon name=\"sign_out\" size=\"16px\"></modus-wc-icon\n                ></span>\n                <span class=\"custom-user-icon\">Logout</span>\n              </div>\n            </modus-wc-card>\n          </div>\n        </modus-wc-navbar>\n      </div>\n    `;\n  },\n};\n",
  "storybook": {
    "examples": [
      "<modus-wc-avatar\n                alt=\"Sonic the Hedgehog\"\n                img-src=\"https://i1.sndcdn.com/artworks-000405996468-wmh3uv-t500x500.jpg\"\n                size=\"xs\"\n                shape=\"circle\"\n              ></modus-wc-avatar>",
      "<modus-wc-icon\n                    name=\"settings_solid\"\n                    size=\"16px\"\n                  ></modus-wc-icon\n                >",
      "<modus-wc-icon\n                    name=\"person_solid\"\n                    size=\"16px\"\n                  ></modus-wc-icon\n                >",
      "<modus-wc-icon name=\"sign_out\" size=\"16px\"></modus-wc-icon\n                >",
      "\n<style>\n  div[id^='story--components-navbar--default'] {\n    border: 1px dashed black;\n    height: 360px;\n    overflow: hidden;\n  }\n  [slot=main-menu] {\n    background-color: #0063a3;\n    color: white;\n    height: 400px;\n  }\n</style>\n<modus-wc-navbar\n  ?apps-menu-open=${args['apps-menu-open']}\n  ?condensed=${args.condensed}\n  ?condensed-menu-open=${args['condensed-menu-open']}\n  custom-class=${ifDefined(args['custom-class'])}\n  ?main-menu-open=${args['main-menu-open']}\n  ?notifications-menu-open=${args['notifications-menu-open']}\n  search-debounce-ms=${ifDefined(args['search-debounce-ms'])}\n  ?search-input-open=${args['search-input-open']}\n  .textOverrides=${ifDefined(args['text-overrides'])}\n  .userCard=${args['user-card']}\n  ?user-menu-open=${args['user-menu-open']}\n  .visibility=${args.visibility}\n>\n  <div slot=\"main-menu\">Main menu contents</div>\n  <div slot=\"notifications\">Notification contents</div>\n  <div slot=\"apps\">App drawer contents</div>\n</modus-wc-navbar>\n    "
    ],
    "variants": [],
    "prop_usage": {
      "slot": [
        "main-menu",
        "notifications",
        "apps",
        "start",
        "center",
        "end"
      ],
      "id": [
        "custom-menu-and-slots",
        "custom-user-menu"
      ],
      "class": [
        "slot-bg",
        "custom-user-icon",
        "custom-user-menu-header",
        "custom-user-menu-title",
        "custom-user-email",
        "menu-item",
        "menu-item-icon"
      ],
      "alt": [
        "Sonic the Hedgehog"
      ],
      "src": [
        "https://i1.sndcdn.com/artworks-000405996468-wmh3uv-t500x500.jpg"
      ],
      "size": [
        "xs",
        "16px"
      ],
      "shape": [
        "circle"
      ],
      "bordered": [
        "true"
      ],
      "name": [
        "settings_solid",
        "person_solid",
        "sign_out"
      ]
    }
  },
  "tag_name": "modus-wc-navbar"
}
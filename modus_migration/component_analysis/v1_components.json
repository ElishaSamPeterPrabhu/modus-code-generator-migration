{
  "modus-accordion": {
    "props": [
      {
        "name": "ariaLabel",
        "description": "/** (optional) The accordion's aria-label. */",
        "type": "string | null"
      }
    ],
    "events": [],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-accordion-storybook-docs.mdx ---\n\n# Accordion\n\n---\n\n[Modus Accordion](https://modus.trimble.com/components/web/accordions/) web components are wrappers around `<modus-accordion-item>` custom HTML elements. They are referenced using the `<modus-accordion>` custom HTML element.\n\nThe `<modus-accordion-item>` utilizes the slot element, allowing you to render your own HTML in the component.\n\n### Default\n\n<modus-accordion>\n  <modus-accordion-item header-text=\"Item 1\">Content</modus-accordion-item>\n  <modus-accordion-item header-text=\"Item 2\">Content</modus-accordion-item>\n  <modus-accordion-item disabled header-text=\"Item 3\">\n    Content\n  </modus-accordion-item>\n</modus-accordion>\n\n### Condensed\n\n<modus-accordion>\n  <modus-accordion-item header-text=\"Item 1\" size=\"condensed\">\n    Content\n  </modus-accordion-item>\n  <modus-accordion-item header-text=\"Item 2\" size=\"condensed\">\n    Content\n  </modus-accordion-item>\n  <modus-accordion-item disabled expanded header-text=\"Item 3\" size=\"condensed\">\n    Content\n  </modus-accordion-item>\n</modus-accordion>\n\n### With Icon\n\n<modus-accordion>\n  <modus-accordion-item header-text=\"Item 1\" icon=\"notifications\">\n    Content\n  </modus-accordion-item>\n  <modus-accordion-item header-text=\"Item 2\" icon=\"notifications\">\n    Content\n  </modus-accordion-item>\n  <modus-accordion-item disabled header-text=\"Item 3\" icon=\"notifications\">\n    Content\n  </modus-accordion-item>\n</modus-accordion>\n\n### Circle Arrow\n\n<modus-accordion>\n  <modus-accordion-item header-text=\"Item 1\" size=\"condensed\" expand-button-type=\"circleArrow\">\n    Content\n  </modus-accordion-item>\n  <modus-accordion-item header-text=\"Item 2\" size=\"condensed\" expand-button-type=\"circleArrow\">\n    Content\n  </modus-accordion-item>\n  <modus-accordion-item disabled expanded header-text=\"Item 3\" size=\"condensed\" expand-button-type=\"circleArrow\">\n    Content\n  </modus-accordion-item>\n</modus-accordion>\n\n```html\n<modus-accordion>\n  <modus-accordion-item header-text=\"Item 1\">Content</modus-accordion-item>\n  <modus-accordion-item header-text=\"Item 2\">Content</modus-accordion-item>\n  <modus-accordion-item disabled header-text=\"Item 3\">Content</modus-accordion-item>\n</modus-accordion>\n\n<modus-accordion>\n  <modus-accordion-item header-text=\"Item 1\" size=\"condensed\">Content</modus-accordion-item>\n  <modus-accordion-item header-text=\"Item 2\" size=\"condensed\">Content</modus-accordion-item>\n  <modus-accordion-item disabled expanded header-text=\"Item 3\" size=\"condensed\">Content</modus-accordion-item>\n</modus-accordion>\n\n<modus-accordion-item header-text=\"Item 1\" icon=\"notifications\">Content</modus-accordion-item>\n  <modus-accordion-item header-text=\"Item 2\" icon=\"notifications\">Content</modus-accordion-item>\n  <modus-accordion-item disabled  header-text=\"Item 3\" icon=\"notifications\">\n    Content\n  </modus-accordion-item>\n</modus-accordion>\n\n<modus-accordion>\n  <modus-accordion-item header-text=\"Item 1\" size=\"condensed\" expand-button-type=\"circleArrow\">\n    Content\n  </modus-accordion-item>\n  <modus-accordion-item header-text=\"Item 2\" size=\"condensed\" expand-button-type=\"circleArrow\">\n    Content\n  </modus-accordion-item>\n  <modus-accordion-item disabled expanded header-text=\"Item 3\" size=\"condensed\" expand-button-type=\"circleArrow\">\n    Content\n  </modus-accordion-item>\n</modus-accordion>\n```\n\n### Properties\n\n| Name                 | Description                                     | Type      | Options                        | Default Value   | Required |\n| -------------------- | ----------------------------------------------- | --------- | ------------------------------ | --------------- | -------- |\n| `aria-label`         | The accordion's aria-label                      | `string`  |                                |                 |          |\n| `disabled`           | Disables the accordion item                     | `boolean` |                                |                 |          |\n| `expand-button-type` | The type of expand button                       | `string`  | 'standardArrow' ,'circleArrow' | 'standardArrow' |          |\n| `expanded`           | The expanded state of the accordion item        | `boolean` |                                |                 |          |\n| `header-text`        | The text to render in the accordion item header | `string`  |                                |                 |          |\n| `icon`               | Takes the icon name and renders the icon        | `string`  |                                |                 |          |\n| `supporting-label`   | The supportingLabel of the accordion            | `string`  |                                |                 |          |\n| `size`               | The size of the accordion item                  | `string`  | 'condensed', 'standard'        | 'standard'      |          |\n\n### DOM Events\n\n| Name     | Description                      | Emits |\n| -------- | -------------------------------- | ----- |\n| `closed` | Fires on accordion item collapse |       |\n| `opened` | Fires on accordion item expand   |       |\n\n### Accessibility\n\n- Accordion gets an `aria-label` provided by the `aria-label` property input.\n- When an Accordion Item has focus, <kbd>Enter</kbd> toggles it, and emits the appropriate `closed` or `open` event.\n",
    "storybook_content": "\n\n--- modus-accordion.stories.tsx ---\n\n// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-accordion-storybook-docs.mdx';\nimport { html } from 'lit-html';\n\nexport default {\n  title: 'Components/Accordion',\n  argTypes: {\n    icon: {\n      name: 'icon',\n      description: 'The icon to display before the header text',\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    expandButtonType: {\n      name: 'expandButtonType',\n      type: 'select',\n      defaultValue: 'standardArrow',\n      description: 'The type of expand button',\n      table: {\n        type: { summary: 'standardArrow | circleArrow' },\n        defaultValue: { summary: 'standardArrow' },\n      },\n      options: ['standardArrow', 'circleArrow'],\n    },\n    supportingLabel: {\n      name: 'supportingLabel',\n      type: 'string',\n      description: 'The supportingLabel of the accordion',\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n  },\n  parameters: {\n    controls: {\n      expanded: true,\n      sort: 'alpha',\n    },\n    docs: {\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n    },\n  },\n};\n\nconst Template = ({ expandButtonType, icon, supportingLabel }) => html`\n  <modus-accordion>\n    <modus-accordion-item\n      header-text=\"Item 1\"\n      icon=${icon}\n      expand-button-type=${expandButtonType}\n      supporting-label=${supportingLabel}\n      >Content</modus-accordion-item\n    >\n    <modus-accordion-item\n      header-text=\"Item 2\"\n      icon=${icon}\n      expand-button-type=${expandButtonType}\n      supporting-label=${supportingLabel}\n      >Content</modus-accordion-item\n    >\n    <modus-accordion-item\n      disabled\n      header-text=\"Item 3\"\n      icon=${icon}\n      expand-button-type=${expandButtonType}\n      supporting-label=${supportingLabel}>\n      Content\n    </modus-accordion-item>\n  </modus-accordion>\n`;\n\nconst DefaultTemplateArgs = {\n  expandButtonType: 'standardArrow',\n  icon: '',\n  supportingLabel: 'Item Label',\n};\n\nconst WithIconTemplateArgs = {\n  expandButtonType: 'standardArrow',\n  icon: 'notifications',\n  supportingLabel: 'Item Label',\n};\n\nconst CircleArrowTemplateArgs = {\n  expandButtonType: 'circleArrow',\n  icon: '',\n  supportingLabel: 'Item Label',\n};\n\nexport const Default = Template.bind({});\nDefault.args = DefaultTemplateArgs;\n\nexport const WithIcon = Template.bind({});\nWithIcon.args = WithIconTemplateArgs;\n\nexport const CircleArrow = Template.bind({});\nCircleArrow.args = CircleArrowTemplateArgs;\n",
    "storybook": {
      "examples": [
        "<modus-accordion-item\n      header-text=\"Item 1\"\n      icon=${icon}\n      expand-button-type=${expandButtonType}\n      supporting-label=${supportingLabel}\n      >Content</modus-accordion-item\n    >",
        "<modus-accordion-item\n      header-text=\"Item 2\"\n      icon=${icon}\n      expand-button-type=${expandButtonType}\n      supporting-label=${supportingLabel}\n      >Content</modus-accordion-item\n    >",
        "<modus-accordion-item\n      disabled\n      header-text=\"Item 3\"\n      icon=${icon}\n      expand-button-type=${expandButtonType}\n      supporting-label=${supportingLabel}>\n      Content\n    </modus-accordion-item>",
        "\n  <modus-accordion>\n    <modus-accordion-item\n      header-text=\"Item 1\"\n      icon=${icon}\n      expand-button-type=${expandButtonType}\n      supporting-label=${supportingLabel}\n      >Content</modus-accordion-item\n    >\n    <modus-accordion-item\n      header-text=\"Item 2\"\n      icon=${icon}\n      expand-button-type=${expandButtonType}\n      supporting-label=${supportingLabel}\n      >Content</modus-accordion-item\n    >\n    <modus-accordion-item\n      disabled\n      header-text=\"Item 3\"\n      icon=${icon}\n      expand-button-type=${expandButtonType}\n      supporting-label=${supportingLabel}>\n      Content\n    </modus-accordion-item>\n  </modus-accordion>\n"
      ],
      "variants": [],
      "prop_usage": {
        "text": [
          "Item 1",
          "Item 2",
          "Item 3"
        ]
      }
    },
    "tag_name": "modus-accordion"
  },
  "modus-accordion-item": {
    "props": [
      {
        "name": "disabled",
        "description": "/** (optional) Disables the accordion item, locks expand/collapse. */",
        "type": "boolean"
      },
      {
        "name": "expandButtonType",
        "description": "/** (optional) Disables the accordion item, locks expand/collapse. */",
        "type": "'standardArrow' | 'circleArrow'"
      },
      {
        "name": "headerText",
        "description": "/** (optional) Disables the accordion item, locks expand/collapse. */",
        "type": "string"
      },
      {
        "name": "icon",
        "description": "/** (optional) Disables the accordion item, locks expand/collapse. */",
        "type": "string"
      },
      {
        "name": "supportingLabel",
        "description": "/** (optional) Disables the accordion item, locks expand/collapse. */",
        "type": "string"
      },
      {
        "name": "size",
        "description": "/** (optional) Disables the accordion item, locks expand/collapse. */",
        "type": "'condensed' | 'standard'"
      }
    ],
    "events": [
      "closed",
      "opened"
    ],
    "slots": [],
    "default_values": {},
    "documentation": "",
    "storybook_content": "",
    "storybook": {
      "examples": [],
      "variants": [],
      "prop_usage": {}
    },
    "tag_name": "modus-accordion-item"
  },
  "modus-action-bar": {
    "props": [
      {
        "name": "size",
        "description": "/** (optional) List of actions */\n  @Prop({ mutable: true }) actions: ModusActionBarOptions[];\n\n  /** (optional) The size of the action items. */",
        "type": "'small' | 'medium' | 'large'"
      }
    ],
    "events": [
      "actionBarClick"
    ],
    "slots": [],
    "default_values": {},
    "documentation": "",
    "storybook_content": "",
    "storybook": {
      "examples": [],
      "variants": [],
      "prop_usage": {}
    },
    "tag_name": "modus-action-bar"
  },
  "modus-alert": {
    "props": [
      {
        "name": "ariaLabel",
        "description": "/** (optional) The alert's aria-label. */",
        "type": "string | null"
      },
      {
        "name": "buttonAriaLabel",
        "description": "/** (optional) The alert's aria-label. */",
        "type": "string | null"
      },
      {
        "name": "buttonText",
        "description": "/** (optional) The alert's aria-label. */",
        "type": "string | null"
      },
      {
        "name": "dismissible",
        "description": "/** (optional) The alert's aria-label. */",
        "type": "boolean"
      },
      {
        "name": "message",
        "description": "/** (optional) The alert's aria-label. */",
        "type": "string"
      },
      {
        "name": "type",
        "description": "/** (optional) The alert's aria-label. */",
        "type": "'error' | 'info' | 'info-gray' | 'info-gray-dark' | 'success' | 'warning'"
      }
    ],
    "events": [
      "dismissClick",
      "actionClick"
    ],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-alert-storybook-docs.mdx ---\n\nimport { Anchor, Story } from '@storybook/addon-docs';\n\n# Alert\n\n---\n\n[Modus Alert](https://modus.trimble.com/components/alerts/) web components provide well defined elements for rendering system level messages. They are referenced using the `<modus-alert>` custom HTML element.\n\n<Anchor storyId=\"components-alert--default\" />\n\n### Default\n\n<modus-alert message=\"Info alert (default)\"></modus-alert>\n\n<Anchor storyId=\"components-alert--dismissible\" />\n\n### Dismissible\n\n<modus-alert dismissible message=\"Dismissible alert\"></modus-alert>\n\n<Anchor storyId=\"components-alert--action-button\" />\n\n### Action button\n\n<modus-alert message=\"Info alert with action button\" button-text=\"Action\"></modus-alert>\n\n<Anchor storyId=\"components-alert--error\" />\n\n### Error\n\n<modus-alert message=\"Error alert\" type=\"error\"></modus-alert>\n\n<Anchor storyId=\"components-alert--success\" />\n\n### Success\n\n<modus-alert message=\"Success alert\" type=\"success\"></modus-alert>\n\n<Anchor storyId=\"components-alert--warning\" />\n\n### Warning\n\n<modus-alert message=\"Warning alert\" type=\"warning\"></modus-alert>\n\n<Anchor storyId=\"components-alert--with-link\" />\n\n### Alert with Link\n\nThe `<modus-alert>` utilizes the slot element, allowing you to insert links in the alert message.\nNote: If anchor tags are nested, it is required to apply CSS variables `--modus-alert-<variant>-link-color` on the link, due to the limitations of nested `slot` elements.\n\n<br />\n\n<modus-alert type=\"info\"> This is a info alert with <a href=\"#\">an example link</a> </modus-alert>\n\n```html\n<modus-alert message=\"Info alert (default)\"></modus-alert>\n<modus-alert dismissible message=\"Dismissible alert\"></modus-alert>\n<modus-alert message=\"Info alert with action button\" button-text=\"Action\"></modus-alert>\n<modus-alert message=\"Error alert\" type=\"error\"></modus-alert>\n<modus-alert message=\"Success alert\" type=\"success\"></modus-alert>\n<modus-alert message=\"Warning alert\" type=\"warning\"></modus-alert>\n<modus-alert type=\"info\"> This is a info alert with <a href=\"#\">an example link</a> </modus-alert>\n```\n\n### Properties\n\n| Name              | Description                                              | Type      | Options                               | Default Value |\n| ----------------- | -------------------------------------------------------- | --------- | ------------------------------------- | ------------- |\n| `ariaLabel`       | The alert's aria-label                                   | `string`  |                                       |               |\n| `buttonAriaLabel` | The button's aria-label                                  | `string`  |                                       |               |\n| `buttonText`      | The button's text                                        | `string`  |                                       |               |\n| `dismissible`     | Whether the alert is dismissible, renders the close icon | `boolean` |                                       |               |\n| `message`         | The alert message                                        | `string`  |                                       |               |\n| `type`            | The type of the alert                                    | `string`  | 'error', 'info', 'success', 'warning' | 'info'        |\n\n### DOM Events\n\n| Name           | Description                  | Type                |\n| -------------- | ---------------------------- | ------------------- |\n| `dismissClick` | Fires on dismiss icon click  | `CustomEvent<void>` |\n| `actionClick`  | Fires on action button click | `CustomEvent<void>` |\n\n### Accessibility\n\n- Alert has `role` of `alert`.\n- Alert gets an `aria-label` provided by the `aria-label` property input.\n- When Alert has focus, <kbd>Escape</kbd> causes the `dismissClick` event to fire if dismissible.\n",
    "storybook_content": "\n\n--- modus-alert.stories.tsx ---\n\nimport { html } from 'lit-html';\n// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-alert-storybook-docs.mdx';\nimport { withActions } from '@storybook/addon-actions/decorator';\n\nexport default {\n  title: 'Components/Alert',\n  argTypes: {\n    ariaLabel: {\n      name: 'aria-label',\n      description: \"The alert's aria-label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    buttonAriaLabel: {\n      description: \"The button's aria-label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    buttonText: {\n      description: \"The button's text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    dismissible: {\n      description: 'Whether the alert is dismissible, renders the close icon',\n      type: 'boolean',\n      table: {\n        defaultValue: { summary: false },\n      },\n    },\n    message: {\n      description: 'The alert message',\n      table: {\n        type: { summary: 'string' },\n      },\n      type: { required: true },\n    },\n    type: {\n      options: ['error', 'info', 'success', 'warning'],\n      type: 'select',\n      description: 'The type of the alert',\n      table: {\n        defaultValue: { summary: `'info'` },\n        type: {\n          summary: `'error' | 'info' | 'success' | 'warning'`,\n        },\n      },\n    },\n  },\n  parameters: {\n    actions: {\n      handles: ['dismissClick', 'actionClick '],\n    },\n    controls: { expanded: true, sort: 'requiredFirst' },\n    docs: {\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n    },\n  },\n  decorators: [withActions],\n};\n\nconst Template = ({ ariaLabel, buttonAriaLabel, buttonText, dismissible, message, type }) => html`\n  <modus-alert\n    ariaLabel=${ariaLabel}\n    button-aria-label=${buttonAriaLabel}\n    button-text=${buttonText}\n    dismissible=${dismissible}\n    message=${message}\n    type=${type}>\n  </modus-alert>\n`;\n\n// TODO - Figure out how to get rid of the optional parameters in the template (dismissible and type).\n// If not passed, they should result to null or their default values.\nexport const Default = Template.bind({});\nDefault.args = {\n  ariaLabel: '',\n  buttonAriaLabel: '',\n  buttonText: '',\n  dismissible: false,\n  message: 'Info alert (default)',\n  type: 'info',\n};\n\nexport const ActionButton = Template.bind({});\nActionButton.args = {\n  ariaLabel: '',\n  buttonAriaLabel: 'Action button',\n  buttonText: 'Action',\n  dismissible: false,\n  message: 'Info alert with action button',\n  type: 'info',\n};\n\nexport const Dismissible = Template.bind({});\nDismissible.args = {\n  ariaLabel: '',\n  buttonAriaLabel: '',\n  buttonText: '',\n  dismissible: true,\n  message: 'Dismissible alert',\n  type: 'info',\n};\n\nexport const Error = Template.bind({});\nError.args = {\n  ariaLabel: '',\n  buttonAriaLabel: '',\n  buttonText: '',\n  dismissible: false,\n  message: 'Error alert',\n  type: 'error',\n};\n\nexport const Success = Template.bind({});\nSuccess.args = {\n  ariaLabel: '',\n  buttonAriaLabel: '',\n  buttonText: '',\n  dismissible: false,\n  message: 'Success alert',\n  type: 'success',\n};\n\nexport const Warning = Template.bind({});\nWarning.args = {\n  ariaLabel: '',\n  buttonAriaLabel: '',\n  buttonText: '',\n  dismissible: false,\n  message: 'Warning alert',\n  type: 'warning',\n};\n\nconst TemplateWithLink = ({ ariaLabel, buttonAriaLabel, buttonText, dismissible, message, type }) => html`\n  <modus-alert\n    ariaLabel=${ariaLabel}\n    button-aria-label=${buttonAriaLabel}\n    button-text=${buttonText}\n    dismissible=${dismissible}\n    message=${message}\n    type=${type}>\n    This is a info alert with <a href=\"#\">an example link</a>\n  </modus-alert>\n`;\n\nexport const WithLink = TemplateWithLink.bind({});\nWithLink.args = {\n  ariaLabel: '',\n  buttonAriaLabel: '',\n  buttonText: '',\n  dismissible: false,\n  type: 'info',\n  message: null,\n};\n",
    "storybook": {
      "examples": [
        "<modus-alert\n    ariaLabel=${ariaLabel}\n    button-aria-label=${buttonAriaLabel}\n    button-text=${buttonText}\n    dismissible=${dismissible}\n    message=${message}\n    type=${type}>\n  </modus-alert>",
        "\n  <modus-alert\n    ariaLabel=${ariaLabel}\n    button-aria-label=${buttonAriaLabel}\n    button-text=${buttonText}\n    dismissible=${dismissible}\n    message=${message}\n    type=${type}>\n  </modus-alert>\n",
        "\n  <modus-alert\n    ariaLabel=${ariaLabel}\n    button-aria-label=${buttonAriaLabel}\n    button-text=${buttonText}\n    dismissible=${dismissible}\n    message=${message}\n    type=${type}>\n    This is a info alert with <a href=\"#\">an example link</a>\n  </modus-alert>\n"
      ],
      "variants": [],
      "prop_usage": {
        "href": [
          "#"
        ]
      }
    },
    "tag_name": "modus-alert"
  },
  "modus-autocomplete": {
    "props": [
      {
        "name": "multiple",
        "description": "/** When enabled, multiple options can be selected in the component. And selected options are shown as chips in the input. */",
        "type": "boolean"
      },
      {
        "name": "ariaLabel",
        "description": "/** When enabled, multiple options can be selected in the component. And selected options are shown as chips in the input. */",
        "type": "string | null"
      },
      {
        "name": "disabled",
        "description": "/** When enabled, multiple options can be selected in the component. And selected options are shown as chips in the input. */",
        "type": "boolean"
      },
      {
        "name": "disableCloseOnSelect",
        "description": "/** When enabled, multiple options can be selected in the component. And selected options are shown as chips in the input. */",
        "type": "boolean"
      },
      {
        "name": "label",
        "description": "/** When enabled, multiple options can be selected in the component. And selected options are shown as chips in the input. */",
        "type": "string"
      },
      {
        "name": "filterOptions",
        "description": "/** When enabled, multiple options can be selected in the component. And selected options are shown as chips in the input. */",
        "type": "(search: string)"
      },
      {
        "name": "showOptionsOnFocus",
        "description": "/** When enabled, multiple options can be selected in the component. And selected options are shown as chips in the input. */",
        "type": "boolean"
      },
      {
        "name": "placeholder",
        "description": "/** When enabled, multiple options can be selected in the component. And selected options are shown as chips in the input. */",
        "type": "string"
      },
      {
        "name": "readOnly",
        "description": "/** When enabled, multiple options can be selected in the component. And selected options are shown as chips in the input. */",
        "type": "boolean"
      },
      {
        "name": "required",
        "description": "/** When enabled, multiple options can be selected in the component. And selected options are shown as chips in the input. */",
        "type": "boolean"
      },
      {
        "name": "size",
        "description": "/** When enabled, multiple options can be selected in the component. And selected options are shown as chips in the input. */",
        "type": "'medium' | 'large'"
      }
    ],
    "events": [
      "optionSelected",
      "valueChange",
      "selectionsChanged"
    ],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-autocomplete-storybook-docs.mdx ---\n\nimport { Story } from '@storybook/blocks';\nimport * as Autocomplete from './modus-autocomplete.stories.tsx';\n\n# Autocomplete\n\n---\n\n[Modus Autocomplete](https://modus.trimble.com/components/web/autocomplete/) web components allow the user to search and select one option\nfrom a set of choices. When the user enters text into the input field, a list of suggestions are provided.\n\n## Overview\n\n- [Implementation Details](#implementation-details)\n- [Types](#types)\n- [Properties](#properties)\n- [Events](#events)\n\n---\n\n### Default\n\n<Story of={Autocomplete.Default} />\n\n### With Option\n\n<Story of={Autocomplete.WithOption} />\n\n### Multiple Selection\n\n<Story of={Autocomplete.MultipleSelection} />\n\n### With Custom Option\n\n<Story of={Autocomplete.WithCustomOption} />\n\n### With Dynamic Options\n\n<Story of={Autocomplete.WithDynamicOptions} />\n\n```html\n<div style=\"width: 500px\">\n  <!-- Default (values set in <script />) -->\n  <modus-autocomplete id=\"default\" label=\"Default Autocomplete\" placeholder=\"Search...\"></modus-autocomplete>\n\n  <!-- With ModusAutocompleteOption model (values set in <script />) -->\n  <modus-autocomplete id=\"with-option\" label=\"Autocomplete using option model\" placeholder=\"Search...\"></modus-autocomplete>\n\n  <!-- With ModusAutocompleteOption model (values set in <script />) where multiple values can be added in the form of chips -->\n  <modus-autocomplete\n    id=\"multiple-selection\"\n    label=\"Autocomplete using option model\"\n    multiple\n    placeholder=\"Search...\"></modus-autocomplete>\n\n  <!-- With custom option slot -->\n  <modus-autocomplete label=\"Employee Search\" clearable placeholder=\"Search...\">\n    <li data-search-value=\"The Git Guru\" data-id=\"1\" style=\"padding: 8px\">\n      <div style=\"font-weight: bold\">The Git Guru</div>\n      <div style=\"font-size: 12px\">Lead DevOps Engineer</div>\n    </li>\n    <li data-search-value=\"Bob the Builder\" data-id=\"2\" style=\"padding: 8px\">\n      <div style=\"font-weight: bold\">Bob the Builder</div>\n      <div style=\"font-size: 12px\">Senior Construction Engineer</div>\n    </li>\n  </modus-autocomplete>\n\n  <!-- With Dynamic Options -->\n  <modus-autocomplete id=\"dynamic-options\" label=\"Dynamic Autocomplete\" placeholder=\"Search...\"></modus-autocomplete>\n</div>\n<script>\n  document.querySelector('#default').options = [\n    'Apple',\n    'Banana',\n    'Orange',\n    'Mango',\n    'Pineapple',\n    'Grapes',\n    'Watermelon',\n    'Strawberry',\n    'Blueberry',\n    'Raspberry',\n    'Blackberry',\n    'Cherry',\n    'Peach',\n    'Pear',\n    'Plum',\n    'Kiwi',\n    'Lemon',\n    'Lime',\n    'Papaya',\n    'Passion Fruit',\n  ];\n  document.querySelector('#with-option').options = [\n    { id: '0', value: 'Apple' },\n    { id: '1', value: 'Banana' },\n    { id: '2', value: 'Orange' },\n    { id: '3', value: 'Mango' },\n    { id: '4', value: 'Pineapple' },\n    { id: '5', value: 'Grapes' },\n    { id: '6', value: 'Watermelon' },\n    { id: '7', value: 'Strawberry' },\n    { id: '8', value: 'Blueberry' },\n    { id: '9', value: 'Raspberry' },\n    { id: '10', value: 'Blackberry' },\n    { id: '11', value: 'Cherry' },\n    { id: '12', value: 'Peach' },\n    { id: '13', value: 'Pear' },\n    { id: '14', value: 'Plum' },\n    { id: '15', value: 'Kiwi' },\n    { id: '16', value: 'Lemon' },\n    { id: '17', value: 'Lime' },\n    { id: '18', value: 'Papaya' },\n    { id: '19', value: 'Passion Fruit' },\n  ];\n  document.querySelector('#multiple-selection').options = [\n    { id: '0', value: 'Apple' },\n    { id: '1', value: 'Banana' },\n    { id: '2', value: 'Orange' },\n    { id: '3', value: 'Mango' },\n    { id: '4', value: 'Pineapple' },\n    { id: '5', value: 'Grapes' },\n    { id: '6', value: 'Watermelon' },\n    { id: '7', value: 'Strawberry' },\n    { id: '8', value: 'Blueberry' },\n    { id: '9', value: 'Raspberry' },\n    { id: '10', value: 'Blackberry' },\n    { id: '11', value: 'Cherry' },\n    { id: '12', value: 'Peach' },\n    { id: '13', value: 'Pear' },\n    { id: '14', value: 'Plum' },\n    { id: '15', value: 'Kiwi' },\n    { id: '16', value: 'Lemon' },\n    { id: '17', value: 'Lime' },\n    { id: '18', value: 'Papaya' },\n    { id: '19', value: 'Passion Fruit' },\n  ];\n\n  // For dynamic options\n  const options = [\n    { id: '0', value: 'Apple' },\n    { id: '1', value: 'Banana' },\n    { id: '2', value: 'Orange' },\n    { id: '3', value: 'Mango' },\n    { id: '4', value: 'Pineapple' },\n  ];\n  const dynamicOptions = [\n    { id: '5', value: 'Grapes' },\n    { id: '6', value: 'Watermelon' },\n    { id: '7', value: 'Strawberry' },\n    { id: '8', value: 'Blueberry' },\n    { id: '9', value: 'Raspberry' },\n    { id: '10', value: 'Blackberry' },\n    { id: '11', value: 'Cherry' },\n    { id: '12', value: 'Peach' },\n    { id: '13', value: 'Pear' },\n    { id: '14', value: 'Plum' },\n    { id: '15', value: 'Kiwi' },\n    { id: '16', value: 'Lemon' },\n    { id: '17', value: 'Lime' },\n    { id: '18', value: 'Papaya' },\n    { id: '19', value: 'Passion Fruit' },\n  ];\n  const modusAutocomplete = document.querySelector('#dynamic-options');\n  if (modusAutocomplete) {\n    modusAutocomplete.filterOptions = filterOptions;\n\n    function filterOptions(value) {\n      modusAutocomplete.loading = true;\n      return new Promise((resolve) => {\n        setTimeout(() => {\n          const filteredOptions = [...options, ...dynamicOptions].filter((option) =>\n            (option.value ?? option).toLowerCase().includes(value.toLowerCase())\n          );\n          resolve(filteredOptions);\n          modusAutocomplete.loading = false;\n        }, 1000);\n      });\n    }\n    modusAutocomplete.options = options;\n    modusAutocomplete.filterOptions = filterOptions;\n  }\n</script>\n```\n\n### Implementation Details\n\n#### Options\n\nThe `options` property of the Autocomplete component can be either a `string[]` or an array of `ModusAutocompleteOption` objects.\n\nIf a `string[]` is passed as the `options` property, it will be converted into an array of `ModusAutocompleteOption` objects,\nwith the `id` and `value` properties both set to the value of each string in the original array.\n\nThe `optionSelected` event emits the `id` of the selected `ModusAutocompleteOption`.\n\n#### Custom Options\n\nTo pass custom markup as an option for the Autocomplete component,\nyou must add the option as a child slot to the `<modus-autocomplete>` element.\nThe `<li>` element passed as the slot must contain two data properties:\n\n- `data-search-value`: This is the value that will be used to filter the option while the user types into the search input.\n- `data-id`: This is the value that will be emitted when the option is clicked on.\n\n### Types\n\n```ts\ninterface ModusAutocompleteOption {\n  id: string;\n  value: string;\n}\n```\n\n### Properties\n\n| Property                    | Attribute                       | Description                                                                                                            | Type                                                    | Default                                       |\n| --------------------------- | ------------------------------- | ---------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------- | --------------------------------------------- |\n| `ariaLabel`                 | `aria-label`                    | The autocomplete's aria label.                                                                                         | `string`                                                | `undefined`                                   |\n| `clearable`                 | `clearable`                     | Whether the input has a clear button.                                                                                  | `boolean`                                               | `false`                                       |\n| `disabled`                  | `disabled`                      | Whether the input is disabled.                                                                                         | `boolean`                                               | `undefined`                                   |\n| `dropdownMaxHeight`         | `dropdown-max-height`           | The autocomplete's dropdown's max height.                                                                              | `string`                                                | `'300px'`                                     |\n| `dropdownZIndex`            | `dropdown-z-index`              | The autocomplete's dropdown z-index.                                                                                   | `string`                                                | `'1'`                                         |\n| `disableCloseOnSelect`      | `disable-close-on-select`       | Whether the autocomplete's options always display on select.                                                           | `boolean`                                               | `false`                                       |\n| `errorText`                 | `error-text`                    | The autocomplete's error text.                                                                                         | `string`                                                | `undefined`                                   |\n| `filterOptions`             | `filter-options`                | If provided, the built-in filtering will be turned off and the returned options will be displayed in the list.         | `(value: string) => Promise<ModusAutocompleteOption[]>` | `undefined`                                   |\n| `includeSearchIcon`         | `include-search-icon`           | Whether the search icon is included.                                                                                   | `boolean`                                               | `true`                                        |\n| `label`                     | `label`                         | The autocomplete's label.                                                                                              | `string`                                                | `undefined`                                   |\n| `loading`                   | `loading`                       | Whether the autocomplete is in a loading state.                                                                        | `boolean`                                               | `false`                                       |\n| `multiple`                  | `multiple`                      | When enabled, multiple options can be selected in the component. And selected options are shown as chips in the input. | `boolean`                                               | `false`                                       |\n| `noResultsFoundSubtext`     | `no-results-found-subtext`      | The autocomplete's no results sub-text.                                                                                | `string`                                                | `'Check spelling or try a different keyword'` |\n| `noResultsFoundText`        | `no-results-found-text`         | The autocomplete's no results text.                                                                                    | `string`                                                | `'No results found'`                          |\n| `options`                   | --                              | The autocomplete's options.                                                                                            | `ModusAutocompleteOption[]                              | string[]`\\| `undefined                        |\n| `placeholder`               | `placeholder`                   | The autocomplete's input placeholder.                                                                                  | `string`                                                | `undefined`                                   |\n| `readOnly`                  | `read-only`                     | Whether the autocomplete is read-only.                                                                                 | `boolean`                                               | `undefined`                                   |\n| `required`                  | `required`                      | Whether the autocomplete is required.                                                                                  | `boolean`                                               | `undefined`                                   |\n| `showNoResultsFoundMessage` | `show-no-results-found-message` | Whether to show the no results found message.                                                                          | `boolean`                                               | `true`                                        |\n| `showOptionsOnFocus`        | `show-options-on-focus`         | Whether to show autocomplete's options when focus                                                                      | `boolean`                                               | `false`                                       |\n| `size`                      | `size`                          | The autocomplete's size.                                                                                               | `\"large\" \\| \"medium\"`                                   | `'medium'`                                    |\n| `value`                     | `value`                         | The autocomplete's search value.                                                                                       | `\"string\" \\| \"string[]\"`                                | `undefined`                                   |\n\n### Events\n\n| Event               | Description                                                                   | Type                             |\n| ------------------- | ----------------------------------------------------------------------------- | -------------------------------- |\n| `optionSelected`    | An event that fires when a dropdown option is selected. Emits the option id.  | `CustomEvent<string>`            |\n| `valueChange`       | An event that fires when the input value changes. Emits the value string.     | `CustomEvent<string \\|string[]>` |\n| `selectionsChanged` | An event that fires when an option is selected/removed. Emits the option ids. | `CustomEvent<string[]>`          |\n\n### Methods\n\n| Method name  | Description     | Parameter | Return          |\n| ------------ | --------------- | --------- | --------------- |\n| `focusInput` | Focus the input |           | `Promise<void>` |\n",
    "storybook_content": "\n\n--- modus-autocomplete.stories.tsx ---\n\nimport { html } from 'lit-html';\n// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-autocomplete-storybook-docs.mdx';\nimport { withActions } from '@storybook/addon-actions/decorator';\n\nexport default {\n  title: 'User Inputs/Autocomplete',\n  argTypes: {\n    ariaLabel: {\n      name: 'aria-label',\n      description: \"The autocomplete's aria-label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    clearable: {\n      description: 'Whether the autocomplete is clearable',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    disabled: {\n      description: 'Whether the autocomplete is disabled',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    dropdownMaxHeight: {\n      name: 'dropdown-max-height',\n      description: 'The maximum height of the dropdown',\n      table: {\n        defaultValue: { summary: '300px' },\n        type: { summary: 'string' },\n      },\n    },\n    dropdownZIndex: {\n      name: 'dropdown-z-index',\n      description: \"The dropdown's z-index\",\n      table: {\n        defaultValue: { summary: '1' },\n        type: { summary: 'string' },\n      },\n    },\n    disableCloseOnSelect: {\n      name: 'disable-close-on-select',\n      description: 'Whether the autocomplete options always display on select',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    errorText: {\n      name: 'error-text',\n      description: \"The autocomplete's error text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    filterOptions: {\n      name: 'filter-options',\n      description: 'Function to filter options',\n      table: {\n        type: { summary: 'function' },\n      },\n    },\n    includeSearchIcon: {\n      name: 'include-search-icon',\n      description: 'Whether to include the search icon',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    label: {\n      description: \"The autocomplete's label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    loading: {\n      description: 'Whether the autocomplete is in a loading state',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    noResultsFoundText: {\n      name: 'no-results-found-text',\n      description: \"The autocomplete's no results found text\",\n      table: {\n        defaultValue: { summary: 'No results found' },\n        type: { summary: 'string' },\n      },\n    },\n    noResultsFoundSubtext: {\n      name: 'no-results-found-subtext',\n      description: \"The autocomplete's no results found subtext\",\n      table: {\n        defaultValue: { summary: 'Check spelling or try a different keyword' },\n        type: { summary: 'string' },\n      },\n    },\n    placeholder: {\n      description: \"The autocomplete's placeholder text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    readOnly: {\n      name: 'read-only',\n      description: 'Whether the autocomplete is read-only',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    required: {\n      description: 'Whether the autocomplete is required',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    showNoResultsFoundMessage: {\n      name: 'show-no-results-found-message',\n      description: 'Whether to show the no results found message when no results are found',\n      table: {\n        defaultValue: { summary: true },\n        type: { summary: 'boolean' },\n      },\n    },\n    showOptionsOnFocus: {\n      name: 'show-options-on-focus',\n      description: 'Whether to show autocomplete options when focus',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    size: {\n      options: ['medium', 'large'],\n      type: 'select',\n      description: 'The size of the autocomplete',\n      table: {\n        defaultValue: { summary: \"'medium'\" },\n        type: { summary: \"'medium' | 'large'\" },\n      },\n    },\n    value: {\n      description: \"The autocomplete's value\",\n      table: {\n        type: { summary: 'string | string[]' },\n      },\n    },\n    multiple: {\n      description:\n        'When enabled, multiple options can be selected in the component. And selected options are shown as chips in the input',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n  },\n  parameters: {\n    controls: { expanded: true, sort: 'requiredFirst' },\n    actions: {\n      handles: ['valueChange', 'optionSelected', 'selectionsChanged'],\n    },\n    docs: {\n      inlineStories: true,\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n    },\n  },\n  decorators: [withActions],\n};\n\nconst Template = ({\n  ariaLabel,\n  clearable,\n  disabled,\n  dropdownMaxHeight,\n  dropdownZIndex,\n  disableCloseOnSelect,\n  errorText,\n  includeSearchIcon,\n  label,\n  multiple,\n  noResultsFoundText,\n  noResultsFoundSubtext,\n  placeholder,\n  readOnly,\n  required,\n  showNoResultsFoundMessage,\n  showOptionsOnFocus,\n  size,\n  value,\n  options,\n}) => html`\n  <div style=\"width: 600px\">\n    <modus-autocomplete\n      id=\"autocomplete-default\"\n      aria-label=${ariaLabel}\n      clearable=${clearable}\n      ?disabled=${disabled}\n      disable-close-on-select=${disableCloseOnSelect}\n      dropdown-max-height=${dropdownMaxHeight}\n      dropdown-z-index=${dropdownZIndex}\n      error-text=${errorText}\n      include-search-icon=${includeSearchIcon}\n      label=${label}\n      multiple=${multiple}\n      no-results-found-text=${noResultsFoundText}\n      no-results-found-subtext=${noResultsFoundSubtext}\n      placeholder=${placeholder}\n      read-only=${readOnly}\n      ?required=${required}\n      show-no-results-found-message=${showNoResultsFoundMessage}\n      show-options-on-focus=${showOptionsOnFocus}\n      size=${size}\n      .value=${value}\n      .options=${options}>\n    </modus-autocomplete>\n  </div>\n`;\n\nconst defaultOptions = [\n  'Apple',\n  'Banana',\n  'Orange',\n  'Mango',\n  'Pineapple',\n  'Grapes',\n  'Watermelon',\n  'Strawberry',\n  'Blueberry',\n  'Raspberry',\n  'Blackberry',\n  'Cherry',\n  'Peach',\n  'Pear',\n  'Plum',\n  'Kiwi',\n  'Lemon',\n  'Lime',\n  'Papaya',\n  'Passion Fruit',\n];\n\nconst defaultArgs = {\n  ariaLabel: 'autocomplete',\n  clearable: false,\n  disabled: false,\n  disableCloseOnSelect: false,\n  dropdownMaxHeight: '300px',\n  dropdownZIndex: '1',\n  errorText: '',\n  includeSearchIcon: true,\n  label: 'Default Autocomplete',\n  multiple: false,\n  noResultsFoundText: 'No results found',\n  noResultsFoundSubtext: 'Check spelling or try a different keyword',\n  placeholder: 'Search...',\n  readOnly: false,\n  required: false,\n  showNoResultsFoundMessage: true,\n  showOptionsOnFocus: false,\n  size: 'medium',\n  value: '',\n  options: defaultOptions,\n};\n\nconst customOptions = [\n  { id: 'ID0', value: 'Apple' },\n  { id: 'ID1', value: 'Banana' },\n  { id: 'ID2', value: 'Orange' },\n];\n\nexport const Default = Template.bind({});\nDefault.args = defaultArgs;\n\nexport const WithOption = Template.bind({});\nWithOption.args = { ...defaultArgs, label: 'Autocomplete using option model' };\n\nexport const MultipleSelection = Template.bind({});\nMultipleSelection.args = {\n  ...defaultArgs,\n  label: 'Autocomplete with multiple selection',\n  multiple: true,\n  value: ['Apple', 'Banana'],\n  options: customOptions,\n};\n\nexport const WithCustomOption = ({\n  ariaLabel,\n  clearable,\n  disabled,\n  dropdownMaxHeight,\n  dropdownZIndex,\n  disableCloseOnSelect,\n  errorText,\n  includeSearchIcon,\n  label,\n  multiple,\n  noResultsFoundText,\n  noResultsFoundSubtext,\n  placeholder,\n  readOnly,\n  required,\n  showNoResultsFoundMessage,\n  showOptionsOnFocus,\n  size,\n  value,\n}) => html`\n  <div style=\"width: 600px\">\n    <modus-autocomplete\n      aria-label=${ariaLabel}\n      clearable=${clearable}\n      disabled=${disabled}\n      dropdown-max-height=${dropdownMaxHeight}\n      dropdown-z-index=${dropdownZIndex}\n      disable-close-on-select=${disableCloseOnSelect}\n      error-text=${errorText}\n      include-search-icon=${includeSearchIcon}\n      label=${label}\n      multiple=${multiple}\n      no-results-found-text=${noResultsFoundText}\n      no-results-found-subtext=${noResultsFoundSubtext}\n      placeholder=${placeholder}\n      read-only=${readOnly}\n      required=${required}\n      show-no-results-found-message=${showNoResultsFoundMessage}\n      show-options-on-focus=${showOptionsOnFocus}\n      size=${size}\n      value=${value}>\n      <li data-search-value=\"The Git Guru\" data-id=\"1\" style=\"padding: 8px\">\n        <div style=\"font-weight: bold\">The Git Guru</div>\n        <div style=\"font-size: 12px\">Lead DevOps Engineer</div>\n      </li>\n      <li data-search-value=\"Bob the Builder\" data-id=\"2\" style=\"padding: 8px\">\n        <div style=\"font-weight: bold\">Bob the Builder</div>\n        <div style=\"font-size: 12px\">Senior Construction Engineer</div>\n      </li>\n    </modus-autocomplete>\n  </div>\n`;\n\nWithCustomOption.args = {\n  ariaLabel: 'autocomplete',\n  clearable: false,\n  disabled: false,\n  dropdownMaxHeight: '300px',\n  dropdownZIndex: '1',\n  disableCloseOnSelect: false,\n  errorText: '',\n  includeSearchIcon: true,\n  label: 'Employee Search',\n  multiple: false,\n  noResultsFoundText: 'No results found',\n  noResultsFoundSubtext: 'Check spelling or try a different keyword',\n  placeholder: 'Search...',\n  readOnly: false,\n  required: false,\n  showNoResultsFoundMessage: true,\n  showOptionsOnFocus: false,\n  size: 'medium',\n  value: '',\n};\n\nexport const WithDynamicOptions = ({\n  ariaLabel,\n  clearable,\n  disabled,\n  dropdownMaxHeight,\n  dropdownZIndex,\n  disableCloseOnSelect,\n  errorText,\n  includeSearchIcon,\n  label,\n  loading,\n  multiple,\n  noResultsFoundText,\n  noResultsFoundSubtext,\n  placeholder,\n  readOnly,\n  required,\n  showNoResultsFoundMessage,\n  showOptionsOnFocus,\n  size,\n  value,\n}) => html`\n  <div style=\"width: 600px\">\n    <modus-autocomplete\n      aria-label=${ariaLabel}\n      clearable=${clearable}\n      disabled=${disabled}\n      dropdown-max-height=${dropdownMaxHeight}\n      dropdown-z-index=${dropdownZIndex}\n      disable-close-on-select=${disableCloseOnSelect}\n      error-text=${errorText}\n      include-search-icon=${includeSearchIcon}\n      id=\"dynamic-options\"\n      label=${label}\n      loading=${loading}\n      multiple=${multiple}\n      no-results-found-text=${noResultsFoundText}\n      no-results-found-subtext=${noResultsFoundSubtext}\n      placeholder=${placeholder}\n      read-only=${readOnly}\n      required=${required}\n      show-no-results-found-message=${showNoResultsFoundMessage}\n      show-options-on-focus=${showOptionsOnFocus}\n      size=${size}\n      .value=${value}>\n    </modus-autocomplete>\n  </div>\n  ${setDynamicOptions()}\n`;\nWithDynamicOptions.args = {\n  ariaLabel: 'autocomplete',\n  clearable: false,\n  disabled: false,\n  dropdownMaxHeight: '300px',\n  dropdownZIndex: '1',\n  disableCloseOnSelect: false,\n  errorText: '',\n  includeSearchIcon: true,\n  label: 'Dynamic Autocomplete',\n  loading: false,\n  multiple: false,\n  noResultsFoundText: 'No results found',\n  noResultsFoundSubtext: 'Check spelling or try a different keyword',\n  placeholder: 'Search...',\n  readOnly: false,\n  required: false,\n  showNoResultsFoundMessage: true,\n  showOptionsOnFocus: false,\n  size: 'medium',\n  value: '',\n};\nconst setDynamicOptions = () => {\n  const tag = document.createElement('script');\n  tag.innerHTML = `\n        (function () {\n          const modusAutocomplete = document.querySelector('#dynamic-options');\n          if (modusAutocomplete) {\n            const options = [\n              { id: '0', value: 'Apple' },\n              { id: '1', value: 'Banana' },\n              { id: '2', value: 'Orange' },\n              { id: '3', value: 'Mango' },\n              { id: '4', value: 'Pineapple' },\n            ];\n            const dynamicOptions = [\n              { id: '5', value: 'Grapes' },\n              { id: '6', value: 'Watermelon' },\n              { id: '7', value: 'Strawberry' },\n              { id: '8', value: 'Blueberry' },\n              { id: '9', value: 'Raspberry' },\n              { id: '10', value: 'Blackberry' },\n              { id: '11', value: 'Cherry' },\n              { id: '12', value: 'Peach' },\n              { id: '13', value: 'Pear' },\n              { id: '14', value: 'Plum' },\n              { id: '15', value: 'Kiwi' },\n              { id: '16', value: 'Lemon' },\n              { id: '17', value: 'Lime' },\n              { id: '18', value: 'Papaya' },\n              { id: '19', value: 'Passion Fruit' },\n            ];\n            function getFilteredOptions(value) {\n              modusAutocomplete.loading = true;\n              return new Promise((resolve) => {\n                setTimeout(() => {\n                  const filteredOptions = [...options, ...dynamicOptions].filter((option) =>\n                    (option.value ?? option).toLowerCase().includes(value.toLowerCase())\n                  );\n                  resolve(filteredOptions);\n                  modusAutocomplete.loading = false;\n                }, 1500);\n              });\n            }\n            modusAutocomplete.options = options;\n            modusAutocomplete.filterOptions = getFilteredOptions;\n          }\n        }())\n  `;\n\n  return tag;\n};\n",
    "storybook": {
      "examples": [
        "<modus-autocomplete\n      id=\"autocomplete-default\"\n      aria-label=${ariaLabel}\n      clearable=${clearable}\n      ?disabled=${disabled}\n      disable-close-on-select=${disableCloseOnSelect}\n      dropdown-max-height=${dropdownMaxHeight}\n      dropdown-z-index=${dropdownZIndex}\n      error-text=${errorText}\n      include-search-icon=${includeSearchIcon}\n      label=${label}\n      multiple=${multiple}\n      no-results-found-text=${noResultsFoundText}\n      no-results-found-subtext=${noResultsFoundSubtext}\n      placeholder=${placeholder}\n      read-only=${readOnly}\n      ?required=${required}\n      show-no-results-found-message=${showNoResultsFoundMessage}\n      show-options-on-focus=${showOptionsOnFocus}\n      size=${size}\n      .value=${value}\n      .options=${options}>\n    </modus-autocomplete>",
        "<modus-autocomplete\n      aria-label=${ariaLabel}\n      clearable=${clearable}\n      disabled=${disabled}\n      dropdown-max-height=${dropdownMaxHeight}\n      dropdown-z-index=${dropdownZIndex}\n      disable-close-on-select=${disableCloseOnSelect}\n      error-text=${errorText}\n      include-search-icon=${includeSearchIcon}\n      id=\"dynamic-options\"\n      label=${label}\n      loading=${loading}\n      multiple=${multiple}\n      no-results-found-text=${noResultsFoundText}\n      no-results-found-subtext=${noResultsFoundSubtext}\n      placeholder=${placeholder}\n      read-only=${readOnly}\n      required=${required}\n      show-no-results-found-message=${showNoResultsFoundMessage}\n      show-options-on-focus=${showOptionsOnFocus}\n      size=${size}\n      .value=${value}>\n    </modus-autocomplete>",
        "\n  <div style=\"width: 600px\">\n    <modus-autocomplete\n      id=\"autocomplete-default\"\n      aria-label=${ariaLabel}\n      clearable=${clearable}\n      ?disabled=${disabled}\n      disable-close-on-select=${disableCloseOnSelect}\n      dropdown-max-height=${dropdownMaxHeight}\n      dropdown-z-index=${dropdownZIndex}\n      error-text=${errorText}\n      include-search-icon=${includeSearchIcon}\n      label=${label}\n      multiple=${multiple}\n      no-results-found-text=${noResultsFoundText}\n      no-results-found-subtext=${noResultsFoundSubtext}\n      placeholder=${placeholder}\n      read-only=${readOnly}\n      ?required=${required}\n      show-no-results-found-message=${showNoResultsFoundMessage}\n      show-options-on-focus=${showOptionsOnFocus}\n      size=${size}\n      .value=${value}\n      .options=${options}>\n    </modus-autocomplete>\n  </div>\n",
        "\n  <div style=\"width: 600px\">\n    <modus-autocomplete\n      aria-label=${ariaLabel}\n      clearable=${clearable}\n      disabled=${disabled}\n      dropdown-max-height=${dropdownMaxHeight}\n      dropdown-z-index=${dropdownZIndex}\n      disable-close-on-select=${disableCloseOnSelect}\n      error-text=${errorText}\n      include-search-icon=${includeSearchIcon}\n      label=${label}\n      multiple=${multiple}\n      no-results-found-text=${noResultsFoundText}\n      no-results-found-subtext=${noResultsFoundSubtext}\n      placeholder=${placeholder}\n      read-only=${readOnly}\n      required=${required}\n      show-no-results-found-message=${showNoResultsFoundMessage}\n      show-options-on-focus=${showOptionsOnFocus}\n      size=${size}\n      value=${value}>\n      <li data-search-value=\"The Git Guru\" data-id=\"1\" style=\"padding: 8px\">\n        <div style=\"font-weight: bold\">The Git Guru</div>\n        <div style=\"font-size: 12px\">Lead DevOps Engineer</div>\n      </li>\n      <li data-search-value=\"Bob the Builder\" data-id=\"2\" style=\"padding: 8px\">\n        <div style=\"font-weight: bold\">Bob the Builder</div>\n        <div style=\"font-size: 12px\">Senior Construction Engineer</div>\n      </li>\n    </modus-autocomplete>\n  </div>\n",
        "\n  <div style=\"width: 600px\">\n    <modus-autocomplete\n      aria-label=${ariaLabel}\n      clearable=${clearable}\n      disabled=${disabled}\n      dropdown-max-height=${dropdownMaxHeight}\n      dropdown-z-index=${dropdownZIndex}\n      disable-close-on-select=${disableCloseOnSelect}\n      error-text=${errorText}\n      include-search-icon=${includeSearchIcon}\n      id=\"dynamic-options\"\n      label=${label}\n      loading=${loading}\n      multiple=${multiple}\n      no-results-found-text=${noResultsFoundText}\n      no-results-found-subtext=${noResultsFoundSubtext}\n      placeholder=${placeholder}\n      read-only=${readOnly}\n      required=${required}\n      show-no-results-found-message=${showNoResultsFoundMessage}\n      show-options-on-focus=${showOptionsOnFocus}\n      size=${size}\n      .value=${value}>\n    </modus-autocomplete>\n  </div>\n  ${setDynamicOptions()}\n"
      ],
      "variants": [],
      "prop_usage": {
        "style": [
          "width: 600px",
          "padding: 8px",
          "font-weight: bold",
          "font-size: 12px"
        ],
        "id": [
          "autocomplete-default",
          "1",
          "2",
          "dynamic-options"
        ],
        "value": [
          "The Git Guru",
          "Bob the Builder"
        ]
      }
    },
    "tag_name": "modus-autocomplete"
  },
  "modus-badge": {
    "props": [
      {
        "name": "ariaLabel",
        "description": "/** (optional) The badge's aria-label */",
        "type": "string | null"
      },
      {
        "name": "color",
        "description": "/** (optional) The badge's aria-label */",
        "type": "BadgeProperties['color']"
      },
      {
        "name": "size",
        "description": "/** (optional) The badge's aria-label */",
        "type": "BadgeProperties['size']"
      },
      {
        "name": "type",
        "description": "/** (optional) The badge's aria-label */",
        "type": "BadgeProperties['type']"
      }
    ],
    "events": [],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-badge-storybook-docs.mdx ---\n\nimport { Anchor } from '@storybook/addon-docs';\n\n# Badge\n\n---\n\n[Modus Badge](https://modus.trimble.com/components/web/badges/) web components provide non-interactive labels for displaying small amounts of information. They are referenced using the `<modus-badge>` custom HTML element.\nThis component utilizes the slot element, allowing you to render your own HTML in the badge.\n\n<Anchor storyId=\"components-badge--default\" />\n\n### Default\n\n<modus-badge color=\"primary\">Primary</modus-badge>\n<modus-badge color=\"secondary\">Secondary</modus-badge>\n<modus-badge color=\"tertiary\">Tertiary</modus-badge>\n<modus-badge color=\"dark\">High Contrast</modus-badge>\n<modus-badge color=\"success\">Success</modus-badge>\n<modus-badge color=\"warning\">Warning</modus-badge>\n<modus-badge color=\"danger\">Danger</modus-badge>\n\n<modus-badge size=\"small\">Small</modus-badge>\n<modus-badge size=\"medium\">Medium</modus-badge>\n<modus-badge size=\"large\">Large</modus-badge>\n\n<Anchor storyId=\"components-badge--counter\" />\n\n### Counter\n\n<modus-badge type=\"counter\">1</modus-badge>\n<modus-badge color=\"secondary\" type=\"counter\">2</modus-badge>\n<modus-badge color=\"tertiary\" type=\"counter\">3</modus-badge>\n<modus-badge color=\"dark\" type=\"counter\">4</modus-badge>\n<modus-badge color=\"success\" type=\"counter\">5</modus-badge>\n<modus-badge color=\"warning\" type=\"counter\">6</modus-badge>\n<modus-badge color=\"danger\" type=\"counter\">7</modus-badge>\n\n<modus-badge size=\"small\" type=\"counter\">sm</modus-badge>\n<modus-badge size=\"medium\" type=\"counter\">md</modus-badge>\n<modus-badge size=\"large\" type=\"counter\">lg</modus-badge>\n\n<Anchor storyId=\"components-badge--text\" />\n\n### Text\n\n<modus-badge type=\"text\">Primary</modus-badge>\n<modus-badge color=\"secondary\" type=\"text\">Secondary</modus-badge>\n<modus-badge color=\"dark\" type=\"text\">High Contrast</modus-badge>\n<modus-badge color=\"success\" type=\"text\">Success</modus-badge>\n<modus-badge color=\"danger\" type=\"text\">Danger</modus-badge>\n\n<modus-badge size=\"small\" type=\"text\">Small</modus-badge>\n<modus-badge size=\"medium\" type=\"text\">Medium</modus-badge>\n<modus-badge size=\"large\" type=\"text\">Large</modus-badge>\n\n```html\n<modus-badge>Default</modus-badge>\n<modus-badge color=\"secondary\">Secondary</modus-badge>\n<modus-badge color=\"tertiary\">Tertiary</modus-badge>\n<modus-badge color=\"dark\">Dark</modus-badge>\n<modus-badge color=\"warning\">Warning</modus-badge>\n<modus-badge color=\"danger\">Danger</modus-badge>\n\n<modus-badge size=\"small\">Small</modus-badge>\n<modus-badge size=\"medium\">Medium</modus-badge>\n<modus-badge size=\"large\">Large</modus-badge>\n\n<modus-badge type=\"counter\">Counter</modus-badge>\n<modus-badge color=\"secondary\" type=\"counter\">Counter</modus-badge>\n<modus-badge color=\"tertiary\" type=\"counter\">Counter</modus-badge>\n<modus-badge color=\"dark\" type=\"counter\">Counter</modus-badge>\n<modus-badge color=\"warning\" type=\"counter\">Counter</modus-badge>\n<modus-badge color=\"danger\" type=\"counter\">Counter</modus-badge>\n\n<modus-badge size=\"small\" type=\"counter\">Small</modus-badge>\n<modus-badge size=\"medium\" type=\"counter\">Medium</modus-badge>\n<modus-badge size=\"large\" type=\"counter\">Large</modus-badge>\n\n<modus-badge type=\"text\">Primary</modus-badge>\n<modus-badge color=\"secondary\" type=\"text\">Secondary</modus-badge>\n<modus-badge color=\"dark\" type=\"text\">High Contrast</modus-badge>\n<modus-badge color=\"success\" type=\"text\">Success</modus-badge>\n<modus-badge color=\"danger\" type=\"text\">Danger</modus-badge>\n\n<modus-badge size=\"small\" type=\"text\">Small</modus-badge>\n<modus-badge size=\"medium\" type=\"text\">Medium</modus-badge>\n<modus-badge size=\"large\" type=\"text\">Large</modus-badge>\n```\n\n### Properties\n\n<section>\n  <table>\n    <thead>\n      <tr>\n        <th>Name</th>\n        <th>Description</th>\n        <th>Type</th>\n        <th>Options</th>\n        <th>Default Value</th>\n        <th>Required</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td>aria-label</td>\n        <td>The badge's aria-label</td>\n        <td>string</td>\n        <td></td>\n        <td></td>\n        <td></td>\n      </tr>\n      <tr>\n        <td>color</td>\n        <td>The color of the badge</td>\n        <td>string</td>\n        <td>'danger', 'dark', 'primary', 'secondary', 'success', 'tertiary', 'warning'</td>\n        <td>'primary'</td>\n        <td></td>\n      </tr>\n      <tr>\n        <td>size</td>\n        <td>The size of the badge</td>\n        <td>string</td>\n        <td>'small', 'medium', 'large'</td>\n        <td>'medium'</td>\n        <td></td>\n      </tr>\n      <tr>\n        <td>type</td>\n        <td>The type of the badge</td>\n        <td>string</td>\n        <td>'counter', 'default', 'text'</td>\n        <td>'default'</td>\n        <td></td>\n      </tr>\n    </tbody>\n  </table>\n</section>\n\n### Accessibility\n\n- Badge has `role` of `status`.\n- Badge gets an `aria-label` provided by the `aria-label` property input.\n",
    "storybook_content": "\n\n--- modus-badge.stories.tsx ---\n\nimport { html } from 'lit-html';\n// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-badge-storybook-docs.mdx';\n\nexport default {\n  title: 'Components/Badge',\n  argTypes: {\n    ariaLabel: {\n      name: 'aria-label',\n      description: \"The badge's aria-label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    color: {\n      options: ['danger', 'dark', 'primary', 'secondary', 'success', 'tertiary', 'warning'],\n      type: 'select',\n      description: 'The color of the badge',\n      table: {\n        defaultValue: { summary: `'primary'` },\n        type: {\n          summary: `'danger' | 'dark' | 'primary' | 'secondary' | 'success' | 'tertiary' | 'warning'`,\n        },\n      },\n    },\n    size: {\n      options: ['small', 'medium', 'large'],\n      type: 'select',\n      description: 'The size of the badge',\n      table: {\n        defaultValue: { summary: `'medium'` },\n        type: { summary: `'small' | 'medium' | 'large'` },\n      },\n    },\n    type: {\n      options: ['counter', 'default', 'text'],\n      type: 'select',\n      description: 'The type of the badge',\n      table: {\n        defaultValue: { summary: `'default'` },\n        type: { summary: `'counter' | 'default' | 'text'` },\n      },\n    },\n  },\n  parameters: {\n    controls: { expanded: true, sort: 'requiredFirst' },\n    docs: {\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n    },\n  },\n};\n\n// TODO - Figure how to work with slots.\nexport const Default = ({ ariaLabel, color, size, type }) => html`\n  <modus-badge aria-label=${ariaLabel} color=${color} size=${size} type=${type}> Default </modus-badge>\n`;\nDefault.args = {\n  ariaLabel: '',\n  color: 'primary',\n  size: 'medium',\n  type: 'default',\n};\n\nexport const Counter = ({ ariaLabel, color, size, type }) => html`\n  <modus-badge aria-label=${ariaLabel} color=${color} size=${size} type=${type}> 12 </modus-badge>\n`;\nCounter.args = {\n  ariaLabel: '',\n  color: 'primary',\n  size: 'medium',\n  type: 'counter',\n};\n\nexport const Text = ({ ariaLabel, color, size, type }) => html`\n  <modus-badge aria-label=${ariaLabel} color=${color} size=${size} type=${type}> Text </modus-badge>\n`;\nText.args = { ariaLabel: '', color: 'primary', size: 'medium', type: 'text' };\n",
    "storybook": {
      "examples": [
        "<modus-badge aria-label=${ariaLabel} color=${color} size=${size} type=${type}> Default </modus-badge>",
        "<modus-badge aria-label=${ariaLabel} color=${color} size=${size} type=${type}> 12 </modus-badge>",
        "<modus-badge aria-label=${ariaLabel} color=${color} size=${size} type=${type}> Text </modus-badge>",
        "\n  <modus-badge aria-label=${ariaLabel} color=${color} size=${size} type=${type}> Default </modus-badge>\n",
        "\n  <modus-badge aria-label=${ariaLabel} color=${color} size=${size} type=${type}> 12 </modus-badge>\n"
      ],
      "variants": [],
      "prop_usage": {}
    },
    "tag_name": "modus-badge"
  },
  "modus-breadcrumb": {
    "props": [
      {
        "name": "ariaLabel",
        "description": "/** The breadcrumb's aria-label. */",
        "type": "string | null"
      },
      {
        "name": "crumbs",
        "description": "/** The breadcrumb's aria-label. */",
        "type": "Crumb[]"
      },
      {
        "name": "underlineLinks",
        "description": "/** The breadcrumb's aria-label. */",
        "type": "boolean"
      }
    ],
    "events": [
      "crumbClick"
    ],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-breadcrumb-storybook-docs.mdx ---\n\nimport { Story } from '@storybook/blocks';\nimport * as Breadcrumb from './modus-breadcrumb.stories.tsx';\n\n# Breadcrumb\n\n---\n\n[Modus Breadcrumb](https://modus.trimble.com/components/web/breadcrumbs/) web components are wrappers around native `<nav>` elements. They are referenced using the `<modus-breadcrumb>` custom HTML element.\n\nA new TypeScript typing has been provided named Crumb defined as:\n\n```ts\n{\n  id: string; // required, must be unique.\n  display: string; // required.\n}\n```\n\n#### Implementation Details\n\n- Crumb id values must be unique within the crumbs collection.\n\n### Default\n\n<Story of={Breadcrumb.Default} height={'72px'} />\n\n```html\n<modus-breadcrumb></modus-breadcrumb>\n\n<script>\n  const modusBreadcrumb = document.querySelector('modus-breadcrumb');\n  const crumbs = [\n    { id: '1', display: 'Crumb 1' },\n    { id: '2', display: 'Crumb 2' },\n    { id: '3', display: 'Crumb 3' },\n    { id: '4', display: 'Crumb 4' },\n  ];\n  modusBreadcrumb.crumbs = crumbs;\n</script>\n```\n\n### Properties\n\n| Name             | Description                                   | Type      | Options | Default Value | Required |\n| ---------------- | --------------------------------------------- | --------- | ------- | ------------- | -------- |\n| `ariaLabel`      | The breadcrumb's aria-label                   | `string`  |         |               |          |\n| `crumbs`         | The breadcrumbs to render                     | `Crumb[]` |         | `[]`          | &#10004; |\n| `underlineLinks` | A flag that controls the display of underline | `boolean` |         | `false`       |          |\n\n### DOM Events\n\n| Name         | Description               | Emits                    |\n| ------------ | ------------------------- | ------------------------ |\n| `crumbClick` | Fires on breadcrumb click | The clicked crumb object |\n\n### Accessibility\n\n- When a Breadcrumb has focus, <kbd>Enter</kbd> emits the `crumbClick` event.\n",
    "storybook_content": "\n\n--- modus-breadcrumb.stories.tsx ---\n\n// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-breadcrumb-storybook-docs.mdx';\nimport { html } from 'lit-html';\nimport { withActions } from '@storybook/addon-actions/decorator';\n\nexport default {\n  title: 'Components/Breadcrumb',\n  argTypes: {\n    underlineLinks: {\n      name: 'underlineLinks',\n      description: 'A flag that controls the display of underline',\n      type: 'boolean',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n  },\n  parameters: {\n    docs: {\n      inlineStories: false,\n      page: docs,\n    },\n    actions: {\n      handles: ['crumbClick'],\n    },\n    controls: {\n      disabled: false,\n      expanded: true,\n    },\n    options: {\n      isToolshown: true,\n    },\n  },\n  decorators: [withActions],\n};\n\nconst defaultCrumbs = [\n  { id: '1', display: 'Crumb 1' },\n  { id: '2', display: 'Crumb 2' },\n  { id: '3', display: 'Crumb 3' },\n  { id: '4', display: 'Crumb 4' },\n];\n\nconst Template = ({ underlineLinks }) => html`\n  <modus-breadcrumb underline-links=${underlineLinks} .crumbs=${defaultCrumbs}></modus-breadcrumb>\n`;\nexport const Default = Template.bind({});\nDefault.args = { underlineLinks: false };\n\nexport const Underline = Template.bind({});\nUnderline.args = { underlineLinks: true };\n",
    "storybook": {
      "examples": [
        "<modus-breadcrumb underline-links=${underlineLinks} .crumbs=${defaultCrumbs}></modus-breadcrumb>",
        "\n  <modus-breadcrumb underline-links=${underlineLinks} .crumbs=${defaultCrumbs}></modus-breadcrumb>\n"
      ],
      "variants": [],
      "prop_usage": {}
    },
    "tag_name": "modus-breadcrumb"
  },
  "modus-button": {
    "props": [
      {
        "name": "ariaDisabled",
        "description": "/** (optional) The button's aria-disabled state. */",
        "type": "string | null"
      },
      {
        "name": "ariaLabel",
        "description": "/** (optional) The button's aria-disabled state. */",
        "type": "string | null"
      },
      {
        "name": "iconOnly",
        "description": "/** (optional) The button's aria-disabled state. */",
        "type": "string"
      },
      {
        "name": "leftIcon",
        "description": "/** (optional) The button's aria-disabled state. */",
        "type": "string"
      },
      {
        "name": "rightIcon",
        "description": "/** (optional) The button's aria-disabled state. */",
        "type": "string"
      },
      {
        "name": "size",
        "description": "/** (optional) The button's aria-disabled state. */",
        "type": "ButtonSize"
      },
      {
        "name": "showCaret",
        "description": "/** (optional) The button's aria-disabled state. */",
        "type": "boolean"
      },
      {
        "name": "type",
        "description": "/** (optional) The button's aria-disabled state. */",
        "type": "ButtonType"
      },
      {
        "name": "criticalAction",
        "description": "/** (optional) The button's aria-disabled state. */",
        "type": "boolean"
      }
    ],
    "events": [
      "buttonClick"
    ],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-button-storybook-docs.mdx ---\n\nimport { Anchor } from '@storybook/addon-docs';\n\n# Button\n\n---\n\n[Modus Button](https://modus.trimble.com/components/web/buttons/) web components are wrappers around native `<button>` elements. They are referenced using the `<modus-button>` custom HTML element.\nThis component utilizes the slot element, allowing you to render your own HTML in the button.\n\n#### Implementation Details\n\nFor Text Buttons and Icon with Text Buttons,\n\n- Solid buttons supports all the given colors.\n- Outline buttons only support `primary` and `secondary` colors.\n- Borderless buttons only support `primary` color.\n\nFor Icon only Buttons,\n\n- Outline buttons only support `primary` and `secondary` colors.\n\n<Anchor storyId=\"components-button--default\" />\n\n### Default\n\n<modus-button color=\"primary\">Primary</modus-button>\n<modus-button color=\"secondary\">Secondary</modus-button>\n<modus-button color=\"tertiary\">Tertiary</modus-button>\n\n<modus-button size=\"small\" color=\"primary\">Small</modus-button>\n<modus-button size=\"large\" color=\"primary\">Large</modus-button>\n\n### Loading Button\n\n<modus-button color=\"primary\" disabled>\n  <div style={{ display: 'flex', alignItems: 'center', gap: '2px' }}>\n    <modus-spinner color=\"white\" size=\".6rem\"></modus-spinner>\n    &nbsp;Loading...\n  </div>\n</modus-button>\n\n<Anchor storyId=\"components-button--borderless\" />\n\n### Borderless\n\n<modus-button button-style=\"borderless\">Borderless</modus-button>\n\n<Anchor storyId=\"components-button--outline\" />\n\n### Outline\n\n<modus-button button-style=\"outline\" color=\"primary\">Outline</modus-button>\n<modus-button button-style=\"outline\" color=\"secondary\">Outline</modus-button>\n\n```html\n<modus-button color=\"primary\">Primary</modus-button>\n<modus-button color=\"secondary\">Secondary</modus-button>\n<modus-button color=\"tertiary\">Tertiary</modus-button>\n\n<modus-button size=\"small\" color=\"primary\">Small</modus-button>\n<modus-button size=\"large\" color=\"primary\">Large</modus-button>\n\n<modus-button color=\"primary\" disabled>\n  <modus-spinner color=\"white\" size=\".5rem\"></modus-spinner>\n  &nbsp;Loading...\n</modus-button>\n\n<modus-button button-style=\"borderless\">Borderless</modus-button>\n\n<modus-button button-style=\"outline\" color=\"primary\">Outline</modus-button>\n<modus-button button-style=\"outline\" color=\"secondary\">Outline</modus-button>\n```\n\n<Anchor storyId=\"components-button--icon-with-text\" />\n\n### Icon with Text Button\n\n<modus-button size=\"small\" left-icon=\"notifications\">Primary</modus-button>\n<modus-button color=\"secondary\" right-icon=\"notifications\">Secondary</modus-button>\n<modus-button size=\"large\" left-icon=\"notifications\" color=\"tertiary\" right-icon=\"notifications\">Tertiary</modus-button>\n\n<Anchor storyId=\"components-button--icon-only\" />\n\n### Icon Only Button\n\n#### Solid\n\n<modus-button size=\"small\" color=\"primary\" icon-only=\"notifications\" aria-label=\"Notifications\"></modus-button>\n<modus-button color=\"secondary\" icon-only=\"notifications\" aria-label=\"Notifications\"></modus-button>\n<modus-button size=\"large\" color=\"tertiary\" icon-only=\"notifications\" aria-label=\"Notifications\"></modus-button>\n\n#### Outline\n\n<modus-button button-style=\"outline\" color=\"primary\" icon-only=\"notifications\" aria-label=\"Notifications\"></modus-button>\n<modus-button button-style=\"outline\" color=\"secondary\" icon-only=\"notifications\" aria-label=\"Notifications\"></modus-button>\n\n#### Borderless\n\n<modus-button button-style=\"borderless\" color=\"primary\" icon-only=\"notifications\" aria-label=\"Notifications\"></modus-button>\n<modus-button button-style=\"borderless\" color=\"secondary\" icon-only=\"notifications\" aria-label=\"Notifications\"></modus-button>\n<modus-button button-style=\"borderless\" color=\"tertiary\" icon-only=\"notifications\" aria-label=\"Notifications\"></modus-button>\n\n```html\n<!-- Icon with Text Buttons -->\n<modus-button size=\"small\" left-icon=\"notifications\">Primary</modus-button>\n<modus-button color=\"secondary\" right-icon=\"notifications\">Secondary</modus-button>\n<modus-button size=\"large\" left-icon=\"notifications\" color=\"tertiary\" right-icon=\"notifications\">Tertiary</modus-button>\n\n<!-- Icon only Buttons - Default(Fill) -->\n<modus-button size=\"small\" color=\"primary\" icon-only=\"notifications\" aria-label=\"Notifications\"></modus-button>\n<modus-button color=\"secondary\" icon-only=\"notifications\" aria-label=\"Notifications\"></modus-button>\n<modus-button size=\"large\" color=\"tertiary\" icon-only=\"notifications\" aria-label=\"Notifications\"></modus-button>\n\n<!-- Icon only Buttons - Outline -->\n<modus-button button-style=\"outline\" color=\"primary\" icon-only=\"notifications\" aria-label=\"Notifications\"></modus-button>\n<modus-button button-style=\"outline\" color=\"secondary\" icon-only=\"notifications\" aria-label=\"Notifications\"></modus-button>\n\n<!-- Icon only Buttons - Borderless -->\n<modus-button button-style=\"borderless\" color=\"primary\" icon-only=\"notifications\" aria-label=\"Notifications\"></modus-button>\n<modus-button\n  button-style=\"borderless\"\n  color=\"secondary\"\n  icon-only=\"notifications\"\n  aria-label=\"Notifications\"></modus-button>\n<modus-button button-style=\"borderless\" color=\"tertiary\" icon-only=\"notifications\" aria-label=\"Notifications\"></modus-button>\n```\n\n<Anchor storyId=\"components-button--with-caret\" />\n\n### With Caret Icon\n\nUsers can choose to show a caret icon at the right side of the button using `show-caret`. Note: Only one icon should be added to the right position, which means if `show-caret` is `true`, `right-icon` will not be effective.\n\n<modus-button color=\"primary\" show-caret=\"true\">Primary</modus-button>\n<modus-button color=\"secondary\" button-style=\"borderless\"  icon-only=\"notifications\" show-caret=\"true\"></modus-button>\n\n```html\n<modus-button color=\"primary\" show-caret=\"true\">Primary</modus-button>\n<modus-button color=\"secondary\" button-style=\"borderless\" icon-only=\"notifications\" show-caret=\"true\"></modus-button>\n```\n\n### Special Button\n\nOnly use in special cases and sparingly within an otherwise blue/gray UI in order to bring more attention to a particular action. It should not be used with primary or danger buttons. It does not support borderless or outline variants.\n\n<modus-button color=\"special\" >Button</modus-button>\n<modus-button disabled color=\"special\">Disabled</modus-button>\n\n```html\n<modus-button color=\"special\">Button</modus-button> <modus-button disabled color=\"special\">Disabled</modus-button>\n```\n\n### Danger Button\n\nThe danger color variant is used for alerting or critical actions. It does not support borderless or outline variants.\n\n<modus-button color=\"danger\" >Button</modus-button>\n<modus-button disabled color=\"danger\">Disabled</modus-button>\n\n```html\n<modus-button color=\"danger\">Button</modus-button> <modus-button disabled color=\"danger\">Disabled</modus-button>\n```\n\n### Critical Action Button\n\nCritical action buttons require users to press and hold for 3 seconds in order to trigger a critical action that should only be performed with clear intent. Only supported with a color of `danger` and `fill` variant. It has a progress animation when pressed and held.\n\n<modus-button color=\"danger\" critical-action>Critical Action</modus-button>\n<modus-button disabled color=\"danger\" critical-action>Disabled</modus-button>\n\n```html\n<modus-button color=\"danger\" critical-action>Critical Action</modus-button>\n<modus-button disabled color=\"danger\" critical-action>Disabled</modus-button>\n```\n\n#### Accessibility Warning:\n\nThe critical action button is currently not accessible on touch screen devices as it does not respond to taps or long presses.\n\n### Properties\n\n| Property         | Attribute         | Description                                                                                | Type                                                      | Default     |\n| ---------------- | ----------------- | ------------------------------------------------------------------------------------------ | --------------------------------------------------------- | ----------- |\n| `ariaDisabled`   | `aria-disabled`   | (optional) The button's `aria-disabled` state.                                             | `string`                                                  | `undefined` |\n| `ariaLabel`      | `aria-label`      | (optional) The button's aria-label.                                                        | `string`                                                  | `undefined` |\n| `buttonStyle`    | `button-style`    | (optional) The style of the button                                                         | `\"borderless\", \"fill\", \"outline\"`                         | `'fill'`    |\n| `color`          | `color`           | (optional) The color of the button                                                         | `\"danger\", \"primary\", \"secondary\", \"tertiary\", \"special\"` | `'primary'` |\n| `criticalAction` | `critical-action` | (optional) Enable progress animation for danger button                                     | `boolean`                                                 | `undefined` |\n| `disabled`       | `disabled`        | (optional) Disables the button.                                                            | `boolean`                                                 | `undefined` |\n| `iconOnly`       | `icon-only`       | (optional) Takes the icon name and renders an icon-only button.                            | `string`                                                  | `undefined` |\n| `leftIcon`       | `left-icon`       | (optional) Takes the icon name and shows the icon aligned to the left of the button text.  | `string`                                                  | `undefined` |\n| `rightIcon`      | `right-icon`      | (optional) Takes the icon name and shows the icon aligned to the right of the button text. | `string`                                                  | `undefined` |\n| `showCaret`      | `show-caret`      | (optional) Shows a caret icon right side of the button.                                    | `boolean`                                                 | `undefined` |\n| `size`           | `size`            | (optional) The size of the button.                                                         | `\"large\", \"medium\", \"small\"`                              | `'medium'`  |\n| `type`           | `type`            | (optional) The type of the button.                                                         | `\"button\", \"reset\", \"submit\"`                             | `'button'`  |\n\n### DOM Events\n\n| Event         | Description                          | Type               |\n| ------------- | ------------------------------------ | ------------------ |\n| `buttonClick` | An event that fires on button click. | `CustomEvent<any>` |\n\n### Methods\n\n| Method name   | Description      | Parameter | Return          |\n| ------------- | ---------------- | --------- | --------------- |\n| `focusButton` | Focus the Button |           | `Promise<void>` |\n\n### Accessibility\n\n- Button gets an `aria-label` provided by the `aria-label` property input.\n- Button gets an `aria-disabled` set to whether Button is disabled.\n- Button gets an `aria-pressed` set to whether Button is pressed.\n- When Button has focus, <kbd>Space</kbd> or <kbd>Enter</kbd> emit `buttonClick` event.\n",
    "storybook_content": "\n\n--- modus-button.stories.tsx ---\n\nimport { html } from 'lit-html';\n// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-button-storybook-docs.mdx';\n\nimport { withActions } from '@storybook/addon-actions/decorator';\n\nexport default {\n  title: 'Components/Button',\n  argTypes: {\n    ariaDisabled: {\n      name: 'aria-disabled',\n      description: \"The button's aria-disabled state\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    ariaLabel: {\n      name: 'aria-label',\n      description: \"The button's aria-label\",\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'string' },\n      },\n    },\n    buttonStyle: {\n      name: 'button-style',\n      options: ['borderless', 'fill', 'outline'],\n      type: 'select',\n      description: 'The style of the button',\n      table: {\n        defaultValue: { summary: `'fill'` },\n        type: { summary: `'borderless' | 'fill' | 'outline'` },\n      },\n    },\n    color: {\n      options: ['danger', 'primary', 'secondary', 'tertiary', 'special'],\n      type: 'select',\n      description: 'The color of the button',\n      table: {\n        defaultValue: { summary: `'primary'` },\n        type: { summary: `'danger' | 'primary' | 'secondary' | 'tertiary' | 'special'` },\n      },\n    },\n    criticalAction: {\n      name: 'critical-action',\n      description: 'Enable the progress animation for danger button',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    disabled: {\n      description: 'Whether the button is disabled',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    size: {\n      options: ['small', 'medium', 'large'],\n      type: 'select',\n      description: 'The size of the button',\n      table: {\n        defaultValue: { summary: `'medium'` },\n        type: { summary: `'small' | 'medium' | 'large'` },\n      },\n    },\n    showCaret: {\n      description: 'Shows a caret icon right side of the button',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    iconOnly: {\n      name: 'icon-only',\n      description: 'Takes the icon name and renders an icon-only button',\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    leftIcon: {\n      name: 'left-icon',\n      description: 'Takes the icon name and shows the icon aligned to the left of the button text',\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    rightIcon: {\n      name: 'right-icon',\n      description: 'Takes the icon name and shows the icon aligned to the right of the button text',\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n  },\n  parameters: {\n    controls: { expanded: true, sort: 'alpha' },\n    actions: {\n      handles: ['buttonClick modus-button'],\n    },\n    docs: {\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n    },\n  },\n  decorators: [withActions],\n};\n\nconst DefaultTemplate = ({\n  ariaDisabled,\n  ariaLabel,\n  buttonStyle,\n  color,\n  criticalAction,\n  disabled,\n  size,\n  leftIcon,\n  rightIcon,\n  iconOnly,\n  showCaret,\n  label,\n}) => html`\n  <modus-button\n    aria-disabled=${ariaDisabled}\n    aria-label=${ariaLabel}\n    button-style=${buttonStyle}\n    color=${color}\n    ?disabled=${disabled}\n    critical-action=${criticalAction}\n    size=${size}\n    left-icon=${leftIcon}\n    right-icon=${rightIcon}\n    icon-only=${iconOnly}\n    show-caret=${showCaret}>\n    ${label}\n  </modus-button>\n`;\n\nconst DefaultTemplateArgs = {\n  ariaDisabled: 'false',\n  ariaLabel: '',\n  buttonStyle: 'fill',\n  color: 'primary',\n  disabled: false,\n  size: 'medium',\n  leftIcon: '',\n  rightIcon: '',\n  iconOnly: '',\n  showCaret: false,\n  label: 'Default',\n  criticalAction: false,\n};\n\nexport const Default = DefaultTemplate.bind({});\nDefault.args = { ...DefaultTemplateArgs };\n\nexport const Borderless = DefaultTemplate.bind({});\nBorderless.args = { ...DefaultTemplateArgs, buttonStyle: 'borderless', label: 'Borderless' };\n\nexport const Outline = DefaultTemplate.bind({});\nOutline.args = { ...DefaultTemplateArgs, buttonStyle: 'outline', label: 'Outline' };\n\nexport const IconWithText = DefaultTemplate.bind({});\nIconWithText.args = { ...DefaultTemplateArgs, label: 'Default', leftIcon: 'notifications' };\n\nexport const IconOnly = DefaultTemplate.bind({});\nIconOnly.args = {\n  ...DefaultTemplateArgs,\n  ariaLabel: 'Notifications',\n  ariaDisabled: false,\n  label: '',\n  buttonStyle: 'borderless',\n  color: 'secondary',\n  size: 'large',\n  iconOnly: 'notifications',\n  showCaret: false,\n};\n\nexport const WithCaret = DefaultTemplate.bind({});\nWithCaret.args = { ...DefaultTemplateArgs, label: 'Primary', color: 'primary', disabled: false, showCaret: true };\n\nexport const SpecialButton = DefaultTemplate.bind({});\nSpecialButton.args = { ...DefaultTemplateArgs, label: 'Button', color: 'special' };\n\nexport const DangerButton = DefaultTemplate.bind({});\nDangerButton.args = { ...DefaultTemplateArgs, label: 'Danger', color: 'danger' };\n\nexport const CriticalActionButton = DefaultTemplate.bind({});\nCriticalActionButton.args = { ...DefaultTemplateArgs, label: 'Critical Action', color: 'danger', criticalAction: true };\n",
    "storybook": {
      "examples": [
        "<modus-button\n    aria-disabled=${ariaDisabled}\n    aria-label=${ariaLabel}\n    button-style=${buttonStyle}\n    color=${color}\n    ?disabled=${disabled}\n    critical-action=${criticalAction}\n    size=${size}\n    left-icon=${leftIcon}\n    right-icon=${rightIcon}\n    icon-only=${iconOnly}\n    show-caret=${showCaret}>\n    ${label}\n  </modus-button>",
        "\n  <modus-button\n    aria-disabled=${ariaDisabled}\n    aria-label=${ariaLabel}\n    button-style=${buttonStyle}\n    color=${color}\n    ?disabled=${disabled}\n    critical-action=${criticalAction}\n    size=${size}\n    left-icon=${leftIcon}\n    right-icon=${rightIcon}\n    icon-only=${iconOnly}\n    show-caret=${showCaret}>\n    ${label}\n  </modus-button>\n"
      ],
      "variants": [],
      "prop_usage": {}
    },
    "tag_name": "modus-button"
  },
  "modus-button-group": {
    "props": [],
    "events": [],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-button-group-storybook-docs.mdx ---\n\nimport { Anchor } from '@storybook/addon-docs';\n\n# Button Group\n\n[Modus Button Group](https://modus.trimble.com/components/web/button-groups/) web components provide a way to group buttons together. They are referenced using the `<modus-button-group>` custom HTML element.\nThis component utilizes the `modus-button` element, allowing you to render your own HTML in the button group.\n\n#### Implementation Details\n\nFor Text Buttons and Icon with Text Buttons,\n\n- Solid buttons supports all the given colors.\n- Outline buttons only support `primary` and `secondary` colors.\n- Borderless buttons only support `primary` color.\n\nFor Icon only Buttons,\n\n- Solid buttons supports all the given colors except `danger`.\n- Outline buttons only support `primary` and `secondary` colors.\n- Borderless buttons supports all the given colors except `danger`.\n\n<Anchor storyId=\"components-button-group--default\" />\n\n## Default\n\n<modus-button-group>\n  <modus-button>Button 1</modus-button>\n  <modus-button>Button 2</modus-button>\n  <modus-button>Button 3</modus-button>\n</modus-button-group>\n\n```html\n<modus-button-group>\n  <modus-button>Button 1</modus-button>\n  <modus-button>Button 2</modus-button>\n  <modus-button>Button 3</modus-button>\n</modus-button-group>\n```\n\n<Anchor storyId=\"components-button-group--single-selection\" />\n\n## Single Selection\n\n<modus-button-group selection-type=\"single\">\n  <modus-button selected>Button 1</modus-button>\n  <modus-button>Button 2</modus-button>\n  <modus-button>Button 3</modus-button>\n</modus-button-group>\n\n```html\n<modus-button-group selection-type=\"single\">\n  <modus-button selected>Button 1</modus-button>\n  <modus-button>Button 2</modus-button>\n  <modus-button>Button 3</modus-button>\n</modus-button-group>\n```\n\n<Anchor storyId=\"components-button-group--multiple-selection\" />\n\n## Multiple Selection\n\n<modus-button-group selection-type=\"multiple\">\n  <modus-button selected>Button 1</modus-button>\n  <modus-button selected>Button 2</modus-button>\n  <modus-button>Button 3</modus-button>\n</modus-button-group>\n\n```html\n<modus-button-group selection-type=\"multiple\">\n  <modus-button selected>Button 1</modus-button>\n  <modus-button selected>Button 2</modus-button>\n  <modus-button>Button 3</modus-button>\n</modus-button-group>\n```\n\n### Types\n\n```ts\ntype ButtonGroupSelectionType = 'single' | 'multiple' | 'none';\n\ninterface ModusButtonGroupButtonClickEvent {\n  button: HTMLModusButtonElement;\n  isSelected: boolean;\n}\n```\n\n### Properties\n\n| Property        | Attribute        | Description                                                      | Type                                             | Default     |\n| --------------- | ---------------- | ---------------------------------------------------------------- | ------------------------------------------------ | ----------- |\n| `ariaDisabled`  | `aria-disabled`  | (optional) The button groups's `aria-disabled` state             | `string`                                         | `undefined` |\n| `ariaLabel`     | `aria-label`     | (optional) The button groups's `aria-label`                      | `string`                                         | `undefined` |\n| `buttonStyle`   | `button-style`   | (optional) The style of the buttons in group                     | `\"borderless\" , \"fill\" , \"outline\"`              | `'outline'` |\n| `color`         | `color`          | (optional) The color of the buttons in group                     | `\"danger\" ,\"primary\" , \"secondary\" , \"tertiary\"` | `'primary'` |\n| `disabled`      | `disabled`       | (optional) If `true`, the button group is disabled               | `boolean`                                        | `false`     |\n| `selected`      | `selected`       | (optional) The default selected button in the group              | `HTMLModusButtonElement`                         | `undefined` |\n| `selectionType` | `selection-type` | (optional) The selection type (`none`, `single`, `multiple`)     | `ButtonGroupSelectionType`                       | `none`      |\n| `size`          | `size`           | (optional) The size of the buttons. (`small`, `medium`, `large`) | `ButtonSize`                                     | `medium`    |\n\n### DOM Events\n\n| Event             | Description                                                                                                                   | Type                                            |\n| ----------------- | ----------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------- |\n| `buttonClick`     | An event that fires on button click.                                                                                          | `CustomEvent<ModusButtonGroupButtonClickEvent>` |\n| `selectionChange` | An event that fires when selection type is `single` or `multiple` on button click that provides the list of selected buttons. | `CustomEvent<HTMLModusButtonElement[]>`         |\n\n### Accessibility\n\n- ButtonGroup gets an `aria-label` provided by the `aria-label` property input.\n- ButtonGroup gets an `aria-disabled` set to whether ButtonGroup is disabled.\n- ButtonGroup gets `role=\"group\"` set.\n",
    "storybook_content": "\n\n--- modus-button-group.stories.tsx ---\n\nimport { html } from 'lit-html';\n// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-button-group-storybook-docs.mdx';\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nexport default {\n  title: 'Components/Button Group',\n  argTypes: {\n    ariaDisabled: {\n      name: 'aria-disabled',\n      description: \"The button group's aria-disabled state\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    ariaLabel: {\n      name: 'aria-label',\n      description: \"The button's aria-label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    buttonStyle: {\n      name: 'button-style',\n      options: ['borderless', 'fill', 'outline'],\n      type: 'select',\n      description: 'The style of the buttons in group, not all colors are supported for each button style',\n      table: {\n        defaultValue: { summary: `'outline'` },\n        type: { summary: `'borderless' | 'fill' | 'outline'` },\n      },\n    },\n    color: {\n      options: ['danger', 'primary', 'secondary', 'tertiary'],\n      type: 'select',\n      description: 'The color of the buttons in group, not all button styles are supported for each color',\n      table: {\n        defaultValue: { summary: `'primary'` },\n        type: { summary: `'danger' | 'primary' | 'secondary' | 'tertiary'` },\n      },\n    },\n    disabled: {\n      description: 'Whether the button is disabled',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    selectionType: {\n      name: 'selection-type',\n      description: 'The type of selection',\n      options: ['none', 'single', 'multiple'],\n      type: 'select',\n      table: {\n        defaultValue: { summary: `'none'` },\n        type: { summary: `'none' | 'single' | 'multiple'` },\n      },\n    },\n    size: {\n      name: 'size',\n      description: 'The size of the buttons',\n      options: ['small', 'medium', 'large'],\n      type: 'select',\n      table: {\n        defaultValue: { summary: `'medium'` },\n        type: { summary: `'small' | 'medium' | 'large'` },\n      },\n    },\n  },\n\n  parameters: {\n    controls: { expanded: true, sort: 'alpha' },\n    actions: {\n      handles: ['buttonGroupClick modus-button-group', 'buttonSelectionChange modus-button-group'],\n    },\n    docs: {\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n    },\n  },\n  decorators: [withActions],\n};\nconst DefaultTemplate = ({ ariaLabel, buttonStyle, color, disabled, selectionType, size }) => html`\n  <modus-button-group\n    aria-label=${ariaLabel}\n    button-style=${buttonStyle}\n    color=${color}\n    .disabled=${disabled}\n    selection-type=${selectionType}\n    size=${size}>\n    <modus-button>Button 1</modus-button>\n    <modus-button>Button 2</modus-button>\n    <modus-button>Button 3</modus-button>\n  </modus-button-group>\n`;\nconst SingleSelectionTemplate = ({ ariaLabel, buttonStyle, color, disabled, selectionType, size }) => html`\n  <modus-button-group\n    aria-label=${ariaLabel}\n    button-style=${buttonStyle}\n    color=${color}\n    .disabled=${disabled}\n    selection-type=${selectionType}\n    size=${size}>\n    <modus-button selected>Button 1</modus-button>\n    <modus-button>Button 2</modus-button>\n    <modus-button>Button 3</modus-button>\n  </modus-button-group>\n`;\nconst MultipleSelectionTemplate = ({ ariaLabel, buttonStyle, color, disabled, selectionType, size }) => html`\n  <modus-button-group\n    aria-label=${ariaLabel}\n    button-style=${buttonStyle}\n    color=${color}\n    .disabled=${disabled}\n    selection-type=${selectionType}\n    size=${size}>\n    <modus-button selected>Button 1</modus-button>\n    <modus-button selected>Button 2</modus-button>\n    <modus-button>Button 3</modus-button>\n  </modus-button-group>\n`;\nconst DefaultArgs = {\n  ariaDisabled: '',\n  ariaLabel: '',\n  disabled: false,\n  selectionType: 'none',\n  size: 'medium',\n  color: 'primary',\n  buttonStyle: 'outline',\n};\nexport const Default = DefaultTemplate.bind({});\nDefault.args = { ...DefaultArgs };\n\nexport const SingleSelection = SingleSelectionTemplate.bind({});\nSingleSelection.args = { ...DefaultArgs, selectionType: 'single' };\n\nexport const MultipleSelection = MultipleSelectionTemplate.bind({});\nMultipleSelection.args = { ...DefaultArgs, selectionType: 'multiple' };\n",
    "storybook": {
      "examples": [
        "<modus-button>Button 1</modus-button>",
        "<modus-button>Button 2</modus-button>",
        "<modus-button>Button 3</modus-button>",
        "<modus-button selected>Button 1</modus-button>",
        "<modus-button>Button 2</modus-button>"
      ],
      "variants": [],
      "prop_usage": {}
    },
    "tag_name": "modus-button-group"
  },
  "modus-card": {
    "props": [
      {
        "name": "ariaLabel",
        "description": "/** (optional) The card's aria-label. */",
        "type": "string | null"
      },
      {
        "name": "borderRadius",
        "description": "/** (optional) The card's aria-label. */",
        "type": "string"
      }
    ],
    "events": [],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-card-storybook-docs.mdx ---\n\nimport { Story } from '@storybook/blocks';\nimport * as Card from './modus-card.stories.tsx';\n\n# Card\n\n---\n\n[Modus Card](https://modus.trimble.com/components/web/cards/) web components are wrappers around native `<article>` elements. They are referenced using the `<modus-card>` custom HTML element.\n\nThis component utilizes the slot element, allowing you to render your own HTML in the card. You can change the background color using the CSS variable `--modus-card-bg`.\n\n### Default\n\n<Story of={Card.Default} height={'150px'} />\n\n```html\n<modus-card height=\"270px\" width=\"250px\" show-card-border=\"true\" show-shadow-on-hover=\"true\">\n  <!-- Render anything here -->\n  <div style=\"padding:10px\">\n    <h4>Card title</h4>\n    <h5>Card subtitle</h5>\n    <p>Some quick example text to build on the card title and make up the bulk of the card's content.</p>\n    <modus-button color=\"primary\">Go somewhere</modus-button>\n  </div>\n</modus-card>\n```\n\n### Properties\n\n| Property            | Attribute              | Description                                                                            | Type      | Default     |\n| ------------------- | ---------------------- | -------------------------------------------------------------------------------------- | --------- | ----------- |\n| `ariaLabel`         | `aria-label`           | (optional) The card's aria-label.                                                      | `string`  | `undefined` |\n| `borderRadius`      | `border-radius`        | (optional) The border radius of the card.                                              | `string`  | `4px`       |\n| `height`            | `height`               | (optional) The height of the card.                                                     | `string`  | `269px`     |\n| `showCardBorder`    | `show-card-border`     | (optional) A flag that controls the display of border.                                 | `boolean` | `true`      |\n| `showShadowOnHover` | `show-shadow-on-hover` | (optional) A flag that controls the display of shadow box when the element is hovered. | `boolean` | `true`      |\n| `width`             | `width`                | (optional) The width of the card.                                                      | `string`  | `240px`     |\n\n---\n\n### Accessibility\n\n- Card gets an `aria-label` provided by the `aria-label` property input.\n",
    "storybook_content": "\n\n--- modus-card.stories.tsx ---\n\n// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-card-storybook-docs.mdx';\nimport { html } from 'lit-html';\n\nexport default {\n  title: 'Components/Card',\n  argTypes: {\n    ariaLabel: {\n      name: 'aria-label',\n      description: \"The card's aria-label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    height: {\n      height: 'The height of the card',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'string' },\n      },\n    },\n    width: {\n      description: 'The width of the card',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'string' },\n      },\n    },\n    borderRadius: {\n      description: 'The border radius of the card',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'string' },\n      },\n    },\n    showCardBorder: {\n      description: 'A flag that controls the display of border',\n      table: {\n        type: { summary: 'boolean' },\n      },\n    },\n    showShadowOnHover: {\n      description: 'A flag that controls the display of shadow box when the element is hovered',\n      table: {\n        type: { summary: 'boolean' },\n      },\n    },\n  },\n  parameters: {\n    docs: {\n      page: docs,\n    },\n    controls: { expanded: true, sort: 'requiredFirst' },\n    options: {\n      isToolshown: true,\n    },\n  },\n};\n\nconst Template = ({ ariaLabel, height, width, borderRadius, showCardBorder, showShadowOnHover }) => html`\n  <modus-card\n    aria-label=${ariaLabel}\n    height=${height}\n    width=${width}\n    border-radius=${borderRadius}\n    show-card-border=${showCardBorder}\n    show-shadow-on-hover=${showShadowOnHover}>\n    <!-- Render anything here -->\n    <div style=\"padding:10px\">\n      <h4>Card title</h4>\n      <h5>Card subtitle</h5>\n      <p>Some quick example text to build on the card title and make up the bulk of the card's content.</p>\n      <modus-button color=\"primary\">Go somewhere</modus-button>\n    </div>\n  </modus-card>\n`;\nexport const Default = Template.bind({});\nDefault.args = {\n  ariaLabel: '',\n  height: '270px',\n  width: '250px',\n  borderRadius: '4px',\n  showCardBorder: true,\n  showShadowOnHover: true,\n};\n",
    "storybook": {
      "examples": [
        "<modus-button color=\"primary\">Go somewhere</modus-button>",
        "\n  <modus-card\n    aria-label=${ariaLabel}\n    height=${height}\n    width=${width}\n    border-radius=${borderRadius}\n    show-card-border=${showCardBorder}\n    show-shadow-on-hover=${showShadowOnHover}>\n    <!-- Render anything here -->\n    <div style=\"padding:10px\">\n      <h4>Card title</h4>\n      <h5>Card subtitle</h5>\n      <p>Some quick example text to build on the card title and make up the bulk of the card's content.</p>\n      <modus-button color=\"primary\">Go somewhere</modus-button>\n    </div>\n  </modus-card>\n"
      ],
      "variants": [],
      "prop_usage": {
        "style": [
          "padding:10px"
        ],
        "color": [
          "primary"
        ]
      }
    },
    "tag_name": "modus-card"
  },
  "modus-checkbox": {
    "props": [
      {
        "name": "ariaLabel",
        "description": "/** (optional) The checkbox's aria-label. */",
        "type": "string | null"
      },
      {
        "name": "disabled",
        "description": "/** (optional) The checkbox's aria-label. */",
        "type": "boolean"
      },
      {
        "name": "label",
        "description": "/** (optional) The checkbox's aria-label. */",
        "type": "string"
      },
      {
        "name": "stopPropagation",
        "description": "/** (optional) The checkbox's aria-label. */",
        "type": "boolean"
      },
      {
        "name": "size",
        "description": "/** (optional) The checkbox's aria-label. */",
        "type": "'small' | 'medium'"
      }
    ],
    "events": [
      "checkboxClick"
    ],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-checkbox-storybook-docs.mdx ---\n\nimport { Anchor } from '@storybook/addon-docs';\n\n# Checkbox\n\n---\n\n[Modus Checkbox](https://modus.trimble.com/components/checkboxes/) web components are wrappers around native `<input type=\"checkbox\">` elements. They are referenced using the `<modus-checkbox>` custom HTML element.\n\nThis component is compatible with Angular reactive forms. This can be achieved through the implementation of a simple directive.\n\n<Anchor storyId=\"user-inputs-checkbox--medium\" />\n\n### Medium\n\n<modus-checkbox></modus-checkbox><br />\n<modus-checkbox disabled></modus-checkbox><br />\n<modus-checkbox label=\"Checkbox\"></modus-checkbox><br />\n<modus-checkbox disabled label=\"Checkbox\"></modus-checkbox><br />\n<modus-checkbox checked disabled label=\"Checkbox\"></modus-checkbox><br />\n<modus-checkbox indeterminate></modus-checkbox>\n\n### Small\n\n<modus-checkbox size='small'></modus-checkbox><br />\n<modus-checkbox disabled size='small'></modus-checkbox><br />\n<modus-checkbox label=\"Checkbox\" size='small'></modus-checkbox><br />\n<modus-checkbox disabled label=\"Checkbox\" size='small'></modus-checkbox><br />\n<modus-checkbox checked disabled label=\"Checkbox\" size='small'></modus-checkbox><br />\n<modus-checkbox indeterminate size='small'></modus-checkbox>\n\n```html\n<modus-checkbox></modus-checkbox>\n<modus-checkbox disabled></modus-checkbox>\n<modus-checkbox label=\"Checkbox\"></modus-checkbox>\n<modus-checkbox disabled label=\"Checkbox\"></modus-checkbox>\n<modus-checkbox checked disabled label=\"Checkbox\"></modus-checkbox>\n<modus-checkbox indeterminate></modus-checkbox>\n\n<modus-checkbox size=\"small\"></modus-checkbox>\n<modus-checkbox disabled size=\"small\"></modus-checkbox>\n<modus-checkbox label=\"Checkbox\" size=\"small\"></modus-checkbox>\n<modus-checkbox disabled label=\"Checkbox\" size=\"small\"></modus-checkbox>\n<modus-checkbox checked disabled label=\"Checkbox\" size=\"small\"></modus-checkbox>\n<modus-checkbox indeterminate size=\"small\"></modus-checkbox>\n```\n\n### Properties\n\n| Property          | Attribute          | Description                                              | Type                | Default     |\n| ----------------- | ------------------ | -------------------------------------------------------- | ------------------- | ----------- |\n| `ariaLabel`       | `aria-label`       | (optional) The checkbox's aria-label.                    | `string`            | `undefined` |\n| `checked`         | `checked`          | (optional) Whether the checkbox is checked.              | `boolean`           | `undefined` |\n| `disabled`        | `disabled`         | (optional) Whether the checkbox is disabled.             | `boolean`           | `undefined` |\n| `indeterminate`   | `indeterminate`    | (optional) Whether the checkbox is indeterminate.        | `boolean`           | `undefined` |\n| `label`           | `label`            | (optional) The checkbox label.                           | `string`            | `undefined` |\n| `stopPropagation` | `stop-propagation` | (optional) It should stop propagating the event further. | `boolean`           | `undefined` |\n| `size`            | `size`             | (optional) The size of the checkbox.                     | `\"small\", \"medium\"' | `'medium'`  |\n\n### DOM Events\n\n| Event           | Description                            | Type                   |\n| --------------- | -------------------------------------- | ---------------------- |\n| `checkboxClick` | An event that fires on checkbox click. | `CustomEvent<boolean>` |\n\n### Methods\n\n| Method name     | Description              | Parameter | Return          |\n| --------------- | ------------------------ | --------- | --------------- |\n| `focusCheckbox` | Focus the checkbox input |           | `Promise<void>` |\n\n### Accessibility\n\n- Checkbox gets an `aria-label` provided by the `aria-label` property input.\n- Checkbox gets an `aria-disabled` set to whether Checkbox is disabled.\n- When Checkbox has focus, <kbd>Space</kbd> or <kbd>Enter</kbd> toggle it, and emit `checkboxClick` event.\n",
    "storybook_content": "\n\n--- modus-checkbox.stories.tsx ---\n\n// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-checkbox-storybook-docs.mdx';\nimport { html } from 'lit-html';\nimport { withActions } from '@storybook/addon-actions/decorator';\n\nexport default {\n  title: 'User Inputs/Checkbox',\n  argTypes: {\n    ariaLabel: {\n      name: 'aria-label',\n      description: \"The checkbox's aria-label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    checked: {\n      description: 'Whether the checkbox is checked',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    disabled: {\n      description: 'Whether the checkbox is disabled',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    indeterminate: {\n      description: 'Whether the checkbox is indeterminate',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    label: {\n      description: \"The checkbox's label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    stopPropagation: {\n      name: 'stop-propagation',\n      description: 'It should stop propagating the event further.',\n      table: {\n        type: { summary: 'boolean' },\n      },\n    },\n    size: {\n      options: ['small', 'medium'],\n      type: 'select',\n    },\n  },\n  parameters: {\n    actions: {\n      handles: ['checkboxClick'],\n    },\n    controls: { expanded: true, sort: 'requiredFirst' },\n    docs: {\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n    },\n  },\n  decorators: [withActions],\n};\n\nconst Template = ({ ariaLabel, checked, disabled, indeterminate, label, size }) => html`\n  <modus-checkbox\n    aria-label=${ariaLabel}\n    checked=${checked}\n    ?disabled=${disabled}\n    indeterminate=${indeterminate}\n    label=${label}\n    size=${size}></modus-checkbox>\n`;\n\nexport const Medium = Template.bind({});\nMedium.args = {\n  ariaLabel: '',\n  checked: false,\n  disabled: false,\n  indeterminate: false,\n  label: 'Checkbox',\n  size: 'medium',\n};\n\nexport const Indeterminate = Template.bind({});\nIndeterminate.args = {\n  ariaLabel: '',\n  checked: false,\n  disabled: false,\n  indeterminate: true,\n  label: 'Checkbox',\n  size: 'medium',\n};\n",
    "storybook": {
      "examples": [
        "<modus-checkbox\n    aria-label=${ariaLabel}\n    checked=${checked}\n    ?disabled=${disabled}\n    indeterminate=${indeterminate}\n    label=${label}\n    size=${size}></modus-checkbox>",
        "\n  <modus-checkbox\n    aria-label=${ariaLabel}\n    checked=${checked}\n    ?disabled=${disabled}\n    indeterminate=${indeterminate}\n    label=${label}\n    size=${size}></modus-checkbox>\n"
      ],
      "variants": [],
      "prop_usage": {}
    },
    "tag_name": "modus-checkbox"
  },
  "modus-chip": {
    "props": [
      {
        "name": "ariaLabel",
        "description": "/** (optional) The chip's aria-label. */",
        "type": "string | null"
      },
      {
        "name": "chipStyle",
        "description": "/** (optional) The chip's aria-label. */",
        "type": "'outline' | 'solid'"
      },
      {
        "name": "imageUrl",
        "description": "/** (optional) The chip's aria-label. */",
        "type": "string"
      },
      {
        "name": "advancedChip",
        "description": "/** (optional) The chip's aria-label. */",
        "type": "boolean"
      },
      {
        "name": "size",
        "description": "/** (optional) The chip's aria-label. */",
        "type": "'medium' | 'small'"
      },
      {
        "name": "value",
        "description": "/** (optional) The chip's aria-label. */",
        "type": "string"
      },
      {
        "name": "chipId",
        "description": "/** (optional) The chip's aria-label. */",
        "type": "string"
      },
      {
        "name": "maxWidth",
        "description": "/** (optional) The chip's aria-label. */",
        "type": "string"
      }
    ],
    "events": [
      "chipClick",
      "closeClick"
    ],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-chip-storybook-docs.mdx ---\n\nimport { Anchor } from '@storybook/addon-docs';\nimport { Meta, Story } from '@storybook/blocks';\nimport * as Chip from './modus-chip.stories.tsx';\n\n# Chip\n\n---\n\n[Modus Chip](https://modus.trimble.com/components/web/chips/) web components are referenced using the `<modus-chip>` custom HTML element.\n\n<Anchor storyId=\"components-chip--default\" />\n\n### Default\n\n<modus-chip image-url=\"https://randomuser.me/api/portraits/lego/1.jpg\" show-close value=\"Bryan\"></modus-chip>\n<modus-chip active image-url=\"https://randomuser.me/api/portraits/lego/1.jpg\" show-close value=\"Bryan\"></modus-chip>\n<modus-chip has-error image-url=\"https://randomuser.me/api/portraits/lego/1.jpg\" show-close value=\"Bryan\"></modus-chip>\n<modus-chip disabled image-url=\"https://randomuser.me/api/portraits/lego/1.jpg\" show-close value=\"Bryan\"></modus-chip>\n\n<Anchor storyId=\"components-chip--outline\" />\n\n### Outline\n\n<modus-chip image-url=\"https://randomuser.me/api/portraits/lego/1.jpg\" show-close chip-style=\"outline\" value=\"Bryan\"></modus-chip>\n<modus-chip active image-url=\"https://randomuser.me/api/portraits/lego/1.jpg\" show-close chip-style=\"outline\" value=\"Bryan\"></modus-chip>\n<modus-chip has-error image-url=\"https://randomuser.me/api/portraits/lego/1.jpg\" show-close chip-style=\"outline\" value=\"Bryan\"></modus-chip>\n<modus-chip disabled image-url=\"https://randomuser.me/api/portraits/lego/1.jpg\" show-close chip-style=\"outline\" value=\"Bryan\"></modus-chip>\n\n### Checkmark, Small\n\n<modus-chip show-checkmark size=\"small\" value=\"Pets OK\"></modus-chip>\n\n### Chips with chip-id\n\n<modus-chip image-url=\"https://randomuser.me/api/portraits/lego/1.jpg\" show-close chip-id=\"chip-id-1\" size=\"small\" value=\"Pet 1\"></modus-chip>\n<modus-chip image-url=\"https://randomuser.me/api/portraits/lego/1.jpg\" show-close chip-id=\"chip-id-2\" size=\"small\" value=\"Pet 2\"></modus-chip>\n\n### Advanced Chip\n\n<Story of={Chip.AdvancedChip} />\n\n```html\n<modus-chip image-url=\"https://example.com/image.jpg\" show-close value=\"Bryan\"></modus-chip>\n<modus-chip active image-url=\"https://example.com/image.jpg\" show-close value=\"Bryan\"></modus-chip>\n<modus-chip has-error image-url=\"https://example.com/image.jpg\" show-close value=\"Bryan\"></modus-chip>\n<modus-chip disabled image-url=\"https://example.com/image.jpg\" show-close value=\"Bryan\"></modus-chip>\n\n<modus-chip image-url=\"https://example.com/image.jpg\" show-close chip-style=\"outline\" value=\"Bryan\"></modus-chip>\n<modus-chip active image-url=\"https://example.com/image.jpg\" show-close chip-style=\"outline\" value=\"Bryan\"></modus-chip>\n<modus-chip has-error image-url=\"https://example.com/image.jpg\" show-close chip-style=\"outline\" value=\"Bryan\"></modus-chip>\n<modus-chip disabled image-url=\"https://example.com/image.jpg\" show-close chip-style=\"outline\" value=\"Bryan\"></modus-chip>\n\n<modus-chip\n  image-url=\"https://randomuser.me/api/portraits/lego/1.jpg\"\n  show-close\n  chipId=\"chip-1\"\n  size=\"small\"\n  value=\"Pet 1\"></modus-chip>\n<modus-chip\n  image-url=\"https://randomuser.me/api/portraits/lego/1.jpg\"\n  show-close\n  chipId=\"chip-2\"\n  size=\"small\"\n  value=\"Pet 2\"></modus-chip>\n<modus-dropdown label=\"Dropdown\" ?disabled=\"${disabled}\" id=\"dropdown\" toggle-element-id=\"toggleElement\" animate-list>\n  <modus-chip id=\"toggleElement\" slot=\"dropdownToggle\" advanced-chip value=\"Processes Type\"> </modus-chip>\n  <modus-list slot=\"dropdownList\">\n    <modus-list-item value=\"1\" disabled borderless>Select Process</modus-list-item>\n    <modus-list-item value=\"2\" borderless>First Option (FO)</modus-list-item>\n    <modus-list-item value=\"3\" borderless>Second Option (SO)</modus-list-item>\n    <modus-list-item value=\"4\" borderless>Next Option (NO)</modus-list-item>\n    <modus-list-item value=\"4\" borderless>Another Option (AO)</modus-list-item>\n  </modus-list>\n</modus-dropdown>\n\n<script>\n  const chip = document.querySelector('modus-chip');\n  const dropdown = document.querySelector('modus-dropdown');\n  const list = document.querySelector('modus-list');\n  let itemSelected = false;\n  dropdown.addEventListener('dropdownClose', (e) => {\n    console.log('dropdownClose');\n    if (!itemSelected) {\n      chip.active = false;\n    }\n  });\n  chip.addEventListener('chipClick', (e) => {\n    console.log('chipClick');\n    chip.active = true;\n    dropdown.toggleDropdown = true;\n  });\n  chip.addEventListener('closeClick', (e) => {\n    console.log('chipClose');\n    chip.value = 'Processes Type';\n    chip.active = false;\n    chip.showClose = false;\n    dropdown.toggleDropdown = false;\n  });\n  list.addEventListener('itemClick', (e) => {\n    console.log('listItem', e.srcElement.innerText);\n    chip.value = 'Processes Type: ' + e.srcElement.innerText;\n    chip.showClose = true;\n    chip.active = true;\n    itemSelected = true;\n  });\n</script>\n```\n\n### Properties\n\n| Name           | Description                                                         | Type    | Options            | Default Value | Required |\n| -------------- | ------------------------------------------------------------------- | ------- | ------------------ | ------------- | -------- |\n| active         | Whether the chip is active                                          | boolean |                    | false         |          |\n| aria-label     | The chip's aria-label                                               | string  |                    |               |          |\n| chip-style     | The chip's style                                                    | string  | 'outline', 'solid' | 'solid'       |          |\n| disabled       | Whether the chip is disabled                                        | boolean |                    | false         |          |\n| has-error      | Whether the chip has an error                                       | boolean |                    | false         |          |\n| image-url      | The chip's image url                                                | string  |                    |               |          |\n| show-checkmark | Whether to show the checkmark                                       | boolean |                    | false         |          |\n| show-close     | Whether to show the close icon                                      | boolean |                    | false         |          |\n| size           | The chip's size                                                     | string  | 'medium', 'small'  | 'medium'      |          |\n| advanced-chip  | Whether the chip is in advanced state                               | boolean |                    | false         |          |\n| value          | The chip's value                                                    | string  |                    |               |          |\n| maxWidth       | Maximum width for the Chip's text and shows ellipsis when truncated | string  |                    |               |          |\n| chipId         | This chip's id will create much more visibility for testing         | string  |                    |               |          |\n\n### DOM Events\n\n| Name       | Description               | Emits                     |\n| ---------- | ------------------------- | ------------------------- |\n| chipClick  | Fires on chip click       | KeyboardEvent, MouseEvent |\n| closeClick | Fires on close icon click | KeyboardEvent, MouseEvent |\n\n### Accessibility\n\n- Chip gets an `aria-label` provided by the `aria-label` property input.\n- Chip gets an `aria-disabled` set to whether Chip is disabled.\n- When Chip has focus, <kbd>Enter</kbd> emits the `chipClick` event.\n- When Chip has focus, <kbd>Escape</kbd> emits the `closeClick` event.\n",
    "storybook_content": "\n\n--- modus-chip.stories.tsx ---\n\nimport { html } from 'lit-html';\n// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-chip-storybook-docs.mdx';\nimport { withActions } from '@storybook/addon-actions/decorator';\n\nexport default {\n  title: 'Components/Chip',\n  argTypes: {\n    active: {\n      name: 'active',\n      description: 'Whether the chip is active',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    ariaLabel: {\n      name: 'aria-label',\n      description: \"The chip's aria-label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    advancedChip: {\n      name: 'advanced-chip',\n      description: 'Whether the chip is advanced',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    chipStyle: {\n      name: 'chip-style',\n      options: ['solid', 'outline'],\n      type: 'select',\n      description: 'The style of the chip',\n      table: {\n        defaultValue: { summary: `'solid'` },\n        type: { summary: `'solid' | 'outline'` },\n      },\n    },\n    disabled: {\n      description: 'Whether the chip is disabled',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    hasError: {\n      name: 'has-error',\n      description: 'Whether the chip has an error',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    imageUrl: {\n      name: 'image-url',\n      description: \"The chip's image URL\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    showCheckmark: {\n      name: 'show-checkmark',\n      description: 'Whether to show the checkmark',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    showClose: {\n      name: 'show-close',\n      description: 'Whether to show the close icon',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    size: {\n      options: ['medium', 'small'],\n      type: 'select',\n      description: 'The size of the chip',\n      table: {\n        defaultValue: { summary: `'medium'` },\n        type: { summary: `medium' | 'small'` },\n      },\n    },\n    value: {\n      description: \"The chip's value\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    maxWidth: {\n      description: \"Chip text's maximum width\",\n      table: {\n        type: { summary: 'string' },\n        defaultValue: { summary: '100px' },\n      },\n    },\n    chipId: {\n      description: \"This chip's id will create much more visibility for testing\",\n      table: {\n        type: { summary: `string` },\n      },\n    },\n  },\n  parameters: {\n    controls: { expanded: true },\n    actions: {\n      handles: ['chipClick', 'closeClick'],\n    },\n    docs: {\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n    },\n  },\n  decorators: [withActions],\n};\n\nexport const Default = ({\n  active,\n  ariaLabel,\n  advancedChip,\n  chipStyle,\n  disabled,\n  hasError,\n  imageUrl,\n  maxWidth,\n  showCheckmark,\n  showClose,\n  size,\n  value,\n  chipId,\n}) => html`\n  <modus-chip\n    active=${active}\n    aria-label=${ariaLabel}\n    ?advanced-chip=${advancedChip}\n    chip-style=${chipStyle}\n    ?disabled=${disabled}\n    has-error=${hasError}\n    image-url=${imageUrl}\n    max-width=${maxWidth}\n    show-checkmark=${showCheckmark}\n    show-close=${showClose}\n    size=${size}\n    value=${value}\n    chip-id=${chipId}>\n  </modus-chip>\n`;\nDefault.args = {\n  active: false,\n  ariaLabel: '',\n  advancedChip: false,\n  chipStyle: 'solid',\n  disabled: false,\n  hasError: false,\n  imageUrl: 'https://randomuser.me/api/portraits/lego/1.jpg',\n  maxWidth: '100px',\n  showCheckmark: false,\n  showClose: false,\n  size: 'medium',\n  value: 'Bryan',\n  chipId: '',\n};\n\nexport const Outline = ({\n  active,\n  ariaLabel,\n  advancedChip,\n  chipStyle,\n  disabled,\n  hasError,\n  imageUrl,\n  maxWidth,\n  showCheckmark,\n  showClose,\n  size,\n  value,\n}) => html`\n  <modus-chip\n    active=${active}\n    aria-label=${ariaLabel}\n    ?advanced-chip=${advancedChip}\n    chip-style=${chipStyle}\n    ?disabled=${disabled}\n    has-error=${hasError}\n    image-url=${imageUrl}\n    max-width=${maxWidth}\n    show-checkmark=${showCheckmark}\n    show-close=${showClose}\n    size=${size}\n    value=${value}>\n  </modus-chip>\n`;\nOutline.args = {\n  active: false,\n  ariaLabel: '',\n  advancedChip: false,\n  chipStyle: 'outline',\n  disabled: false,\n  hasError: false,\n  imageUrl: 'https://randomuser.me/api/portraits/lego/1.jpg',\n  maxWidth: '100px',\n  showCheckmark: false,\n  showClose: false,\n  size: 'medium',\n  value: 'Bryan',\n};\n\nexport const AdvancedChip = ({\n  active,\n  ariaLabel,\n  advancedChip,\n  chipStyle,\n  disabled,\n  hasError,\n  imageUrl,\n  maxWidth,\n  showCheckmark,\n  showClose,\n  size,\n  value,\n}) => html`\n  <modus-dropdown label=\"Dropdown\" ?disabled=${disabled} id=\"dropdown\" toggle-element-id=\"toggleElement\" animate-list>\n    <modus-chip\n      id=\"toggleElement\"\n      slot=\"dropdownToggle\"\n      active=${active}\n      aria-label=${ariaLabel}\n      ?advanced-chip=${advancedChip}\n      chip-style=${chipStyle}\n      ?disabled=${disabled}\n      has-error=${hasError}\n      image-url=${imageUrl}\n      max-width=${maxWidth}\n      show-checkmark=${showCheckmark}\n      show-close=${showClose}\n      size=${size}\n      value=${value}>\n    </modus-chip>\n    <modus-list slot=\"dropdownList\">\n      <modus-list-item value=\"1\" disabled borderless>Select Process</modus-list-item>\n      <modus-list-item value=\"2\" borderless>First Option (FO)</modus-list-item>\n      <modus-list-item value=\"3\" borderless>Second Option (SO)</modus-list-item>\n      <modus-list-item value=\"4\" borderless>Next Option (NO)</modus-list-item>\n      <modus-list-item value=\"4\" borderless>Another Option (AO)</modus-list-item>\n    </modus-list>\n  </modus-dropdown>\n\n  ${setAdvancedChip()}\n`;\nAdvancedChip.args = {\n  active: false,\n  ariaLabel: '',\n  advancedChip: true,\n  chipStyle: 'outline',\n  disabled: false,\n  hasError: false,\n  imageUrl: '',\n  maxWidth: '',\n  showCheckmark: false,\n  showClose: false,\n  size: 'medium',\n  value: 'Processes Type',\n};\n\nconst setAdvancedChip = () => {\n  const tag = document.createElement('script');\n  tag.innerHTML = `\n      const chip = document.querySelector('#toggleElement');\n      const dropdown = document.querySelector('modus-dropdown');\n      const list = document.querySelector('modus-list');\n      let itemSelected = false;\n      dropdown.addEventListener('dropdownClose', (e) => {\n        console.log('dropdownClose');\n        if(!itemSelected) {\n          chip.active = false;\n        }\n      });\n      chip.addEventListener('chipClick', (e) => {\n        console.log('chipClick');\n        chip.active = true;\n        dropdown.toggleDropdown = true;\n      });\n      chip.addEventListener('closeClick', (e) => {\n        console.log('chipClose');\n        chip.value = 'Processes Type';\n        chip.active = false;\n        chip.showClose = false;\n        dropdown.toggleDropdown = false;\n\n      });\n      list.addEventListener('itemClick', (e) => {\n        console.log('listItem', e.srcElement.innerText);\n        chip.value = 'Processes Type: ' + e.srcElement.innerText;\n        chip.showClose = true;\n        chip.active = true;\n        itemSelected = true;\n      });\n  `;\n  return tag;\n};\n",
    "storybook": {
      "examples": [
        "<modus-chip\n    active=${active}\n    aria-label=${ariaLabel}\n    ?advanced-chip=${advancedChip}\n    chip-style=${chipStyle}\n    ?disabled=${disabled}\n    has-error=${hasError}\n    image-url=${imageUrl}\n    max-width=${maxWidth}\n    show-checkmark=${showCheckmark}\n    show-close=${showClose}\n    size=${size}\n    value=${value}\n    chip-id=${chipId}>\n  </modus-chip>",
        "<modus-chip\n    active=${active}\n    aria-label=${ariaLabel}\n    ?advanced-chip=${advancedChip}\n    chip-style=${chipStyle}\n    ?disabled=${disabled}\n    has-error=${hasError}\n    image-url=${imageUrl}\n    max-width=${maxWidth}\n    show-checkmark=${showCheckmark}\n    show-close=${showClose}\n    size=${size}\n    value=${value}>\n  </modus-chip>",
        "<modus-chip\n      id=\"toggleElement\"\n      slot=\"dropdownToggle\"\n      active=${active}\n      aria-label=${ariaLabel}\n      ?advanced-chip=${advancedChip}\n      chip-style=${chipStyle}\n      ?disabled=${disabled}\n      has-error=${hasError}\n      image-url=${imageUrl}\n      max-width=${maxWidth}\n      show-checkmark=${showCheckmark}\n      show-close=${showClose}\n      size=${size}\n      value=${value}>\n    </modus-chip>",
        "<modus-list-item value=\"1\" disabled borderless>Select Process</modus-list-item>",
        "<modus-list-item value=\"2\" borderless>First Option (FO)</modus-list-item>"
      ],
      "variants": [],
      "prop_usage": {
        "label": [
          "Dropdown"
        ],
        "id": [
          "dropdown",
          "toggleElement"
        ],
        "slot": [
          "dropdownToggle",
          "dropdownList"
        ],
        "value": [
          "1",
          "2",
          "3",
          "4"
        ]
      }
    },
    "tag_name": "modus-chip"
  },
  "modus-content-tree": {
    "props": [],
    "events": [],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-content-tree-storybook-docs.mdx ---\n\nimport { Meta, Story } from '@storybook/blocks';\nimport * as ContentTree from './modus-content-tree.stories';\n\n# Content Tree\n\n---\n\n[Modus Content Tree](https://modus.trimble.com/components/content-tree/) provides users with a way to navigate nested hierarchical information using a parent-child relationship model.\nIt is located on the left side of the screen and cannot be combined with Side Navigation or Toolbar.\n\n#### Implementation Details\n\n- Content tree can be created using the components `modus-tree-view` in the root and `modus-tree-view-item` for nodes.\n- The `modus-tree-view-item` takes `nodeId` which should be a unique id and the `label` prop to display the node text.\n- Clicking on collapse/expand button expands or collapse a tree view item and clicking on the node selects it.\n- By default multiple items selection is disabled. The prop `multi-selection` lets multiple items to be selected using `Shift + Up/Down arrow` and `Ctrl + click`.\n- Checkbox selection can be enabled using the prop `checkbox-selection` and to let multiple checkbox selection use the prop `multi-checkbox-selection`.\n- This component utilizes the slot element, allowing you to render custom expand icon, collapse icon, drag icon, item icon and the slot names are `expandIcon`, `collapseIcon`, `dragIcon`, `itemIcon`.\n- By default `label` prop is used for displaying the node text. Custom label element can be added through the slot `label`.\n\n### Default\n\n<Story id=\"components-content-tree--default\" />\n\n```html\n<modus-tree-view\n  style=\"width:400px;\"\n  checkbox-selection=\"false\"\n  checked-items=\"false\"\n  expanded-items=\"false\"\n  multi-checkbox-selection=\"false\"\n  multi-selection=\"false\"\n  selected-items=\"false\"\n  size=\"\"\n  class=\"hydrated\">\n  <modus-tree-view-item node-id=\"1\" label=\"Inbox\" class=\"hydrated\">\n    <modus-tree-view-item node-id=\"2\" label=\"Personal\" class=\"hydrated\"></modus-tree-view-item>\n    <modus-tree-view-item node-id=\"3\" label=\"Work\" class=\"hydrated\"></modus-tree-view-item>\n    <modus-tree-view-item node-id=\"4\" label=\"Social\" class=\"hydrated\"></modus-tree-view-item>\n    <modus-tree-view-item node-id=\"5\" label=\"More ...\" class=\"hydrated\"></modus-tree-view-item>\n  </modus-tree-view-item>\n  <modus-tree-view-item node-id=\"6\" label=\"Archived\" class=\"hydrated\">\n    <modus-tree-view-item node-id=\"7\" label=\"Folder1\" class=\"hydrated\">\n      <modus-tree-view-item node-id=\"8\" label=\"File1\" class=\"hydrated\"></modus-tree-view-item>\n      <modus-tree-view-item node-id=\"9\" label=\"Folder2\" class=\"hydrated\">\n        <modus-tree-view-item node-id=\"10\" label=\"File2\" class=\"hydrated\"></modus-tree-view-item>\n      </modus-tree-view-item>\n      <modus-tree-view-item node-id=\"11\" label=\"File3\" class=\"hydrated\"></modus-tree-view-item>\n    </modus-tree-view-item>\n  </modus-tree-view-item>\n  <modus-tree-view-item node-id=\"12\" label=\"Spam\" class=\"hydrated\"></modus-tree-view-item>\n</modus-tree-view>\n```\n\n### With Icon\n\n<Story of={ContentTree.WithIcon} />\n\n```html\n<modus-tree-view style=\"width:400px;\" class=\"hydrated\">\n  <modus-tree-view-item node-id=\"1\" label=\"Inbox\" class=\"hydrated\">\n    <svg slot=\"itemIcon\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" height=\"16\" width=\"16\" viewBox=\"0 0 32 32\">\n      <path\n        d=\"M28.79 12.39A1 1 0 0 0 28 12h-2V9c0-.55-.45-1-1-1h-9.59l-1.7-1.71C13.52 6.11 13.27 6 13 6H4c-.55 0-1 .45-1 1v17c0 .04.02.07.02.11.01.05.02.11.04.16.02.09.06.17.1.25.02.03.02.06.05.09.01.01.03.02.04.03.07.08.15.14.23.19.04.03.06.05.1.07.13.06.27.1.42.1h21c.13 0 .25-.03.36-.07.04-.02.07-.04.1-.06.07-.04.14-.08.2-.13.03-.03.06-.06.09-.1.05-.05.09-.11.12-.18a.31.31 0 0 0 .06-.13c.01-.02.03-.04.03-.07l3-11c.09-.3.02-.62-.17-.87zM5 8h7.59l1.7 1.71c.19.18.44.29.71.29h9v2H7c-.45 0-.85.3-.96.74L5 16.53V8z\"></path>\n    </svg>\n    <modus-tree-view-item node-id=\"2\" label=\"Personal\" class=\"hydrated\"></modus-tree-view-item>\n    <modus-tree-view-item node-id=\"3\" label=\"Work\" class=\"hydrated\"></modus-tree-view-item>\n    <modus-tree-view-item node-id=\"4\" label=\"Social\" class=\"hydrated\"></modus-tree-view-item>\n    <modus-tree-view-item node-id=\"5\" label=\"More ...\" is-last-child=\"true\" class=\"hydrated\"></modus-tree-view-item>\n  </modus-tree-view-item>\n</modus-tree-view>\n```\n\n### Condensed\n\n<Story of={ContentTree.Condensed} />\n\n```html\n<modus-tree-view\n  style=\"width:400px;\"\n  checkbox-selection=\"true\"\n  checked-items=\"false\"\n  expanded-items=\"false\"\n  multi-checkbox-selection=\"false\"\n  multi-selection=\"false\"\n  selected-items=\"false\"\n  size=\"condensed\"\n  class=\"hydrated\">\n  <modus-tree-view-item node-id=\"1\" label=\"Inbox\" class=\"hydrated\">\n    <modus-tree-view-item node-id=\"2\" label=\"Personal\" class=\"hydrated\"></modus-tree-view-item>\n    <modus-tree-view-item node-id=\"3\" label=\"Work\" class=\"hydrated\"></modus-tree-view-item>\n    <modus-tree-view-item node-id=\"4\" label=\"Social\" class=\"hydrated\"></modus-tree-view-item>\n    <modus-tree-view-item node-id=\"5\" label=\"More ...\" class=\"hydrated\"></modus-tree-view-item>\n  </modus-tree-view-item>\n  <modus-tree-view-item node-id=\"6\" label=\"Archived\" class=\"hydrated\">\n    <modus-tree-view-item node-id=\"7\" label=\"Folder1\" class=\"hydrated\">\n      <modus-tree-view-item node-id=\"8\" label=\"File1\" class=\"hydrated\"></modus-tree-view-item>\n      <modus-tree-view-item node-id=\"9\" label=\"Folder2\" class=\"hydrated\">\n        <modus-tree-view-item node-id=\"10\" label=\"File2\" class=\"hydrated\"></modus-tree-view-item>\n      </modus-tree-view-item>\n      <modus-tree-view-item node-id=\"11\" label=\"File3\" class=\"hydrated\"></modus-tree-view-item>\n    </modus-tree-view-item>\n  </modus-tree-view-item>\n  <modus-tree-view-item node-id=\"12\" label=\"Spam\" class=\"hydrated\"></modus-tree-view-item>\n</modus-tree-view>\n```\n\n### Borderless\n\n<Story of={ContentTree.Borderless} />\n\n```html\n<modus-tree-view\n  borderless=\"true\"\n  style=\"width:400px;\"\n  checkbox-selection=\"true\"\n  checked-items=\"false\"\n  expanded-items=\"false\"\n  multi-checkbox-selection=\"false\"\n  multi-selection=\"false\"\n  selected-items=\"false\"\n  size=\"condensed\">\n  <modus-tree-view-item node-id=\"1\" label=\"Inbox\" class=\"hydrated\">\n    <modus-tree-view-item node-id=\"2\" label=\"Personal\" class=\"hydrated\"></modus-tree-view-item>\n    <modus-tree-view-item node-id=\"3\" label=\"Work\" class=\"hydrated\"></modus-tree-view-item>\n    <modus-tree-view-item node-id=\"4\" label=\"Social\" class=\"hydrated\"></modus-tree-view-item>\n    <modus-tree-view-item node-id=\"5\" label=\"More ...\" class=\"hydrated\"></modus-tree-view-item>\n  </modus-tree-view-item>\n  <modus-tree-view-item node-id=\"6\" label=\"Archived\" class=\"hydrated\">\n    <modus-tree-view-item node-id=\"7\" label=\"Folder1\" class=\"hydrated\">\n      <modus-tree-view-item node-id=\"8\" label=\"File1\" class=\"hydrated\"></modus-tree-view-item>\n      <modus-tree-view-item node-id=\"9\" label=\"Folder2\" class=\"hydrated\">\n        <modus-tree-view-item node-id=\"10\" label=\"File2\" class=\"hydrated\"></modus-tree-view-item>\n      </modus-tree-view-item>\n      <modus-tree-view-item node-id=\"11\" label=\"File3\" class=\"hydrated\"></modus-tree-view-item>\n    </modus-tree-view-item>\n  </modus-tree-view-item>\n  <modus-tree-view-item node-id=\"12\" label=\"Spam\" class=\"hydrated\"></modus-tree-view-item>\n</modus-tree-view>\n```\n\n### Multi Selection\n\n<Story of={ContentTree.MultiSelection} />\n\n```html\n<modus-tree-view\n  style=\"width:400px;\"\n  checkbox-selection=\"true\"\n  checked-items=\"false\"\n  expanded-items=\"false\"\n  multi-checkbox-selection=\"true\"\n  multi-selection=\"true\"\n  selected-items=\"false\"\n  size=\"\"\n  class=\"hydrated\">\n  <modus-tree-view-item node-id=\"1\" label=\"Inbox\" class=\"hydrated\">\n    <modus-tree-view-item node-id=\"2\" label=\"Personal\" class=\"hydrated\"></modus-tree-view-item>\n    <modus-tree-view-item node-id=\"3\" label=\"Work\" class=\"hydrated\"></modus-tree-view-item>\n    <modus-tree-view-item node-id=\"4\" label=\"Social\" class=\"hydrated\"></modus-tree-view-item>\n    <modus-tree-view-item node-id=\"5\" label=\"More ...\" class=\"hydrated\"></modus-tree-view-item>\n  </modus-tree-view-item>\n  <modus-tree-view-item node-id=\"6\" label=\"Archived\" class=\"hydrated\">\n    <modus-tree-view-item node-id=\"7\" label=\"Folder1\" class=\"hydrated\">\n      <modus-tree-view-item node-id=\"8\" label=\"File1\" class=\"hydrated\"></modus-tree-view-item>\n      <modus-tree-view-item node-id=\"9\" label=\"Folder2\" class=\"hydrated\">\n        <modus-tree-view-item node-id=\"10\" label=\"File2\" class=\"hydrated\"></modus-tree-view-item>\n      </modus-tree-view-item>\n      <modus-tree-view-item node-id=\"11\" label=\"File3\" class=\"hydrated\"></modus-tree-view-item>\n    </modus-tree-view-item>\n  </modus-tree-view-item>\n  <modus-tree-view-item node-id=\"12\" label=\"Spam\" class=\"hydrated\"></modus-tree-view-item>\n</modus-tree-view>\n```\n\n### Custom Action Bar\n\n<Story of={ContentTree.CustomActionBar} />\n\n```html\n<div\n  id=\"tree-with-action-bar\"\n  style=\"display: flex; flex-direction: column; width: 400px;\">\n  <div\n    style=\"display: flex; justify-content: end; flex-wrap: wrap; margin-top: 1rem;\">\n    <modus-button\n      button-style=\"borderless\"\n      aria-label=\"Add\"\n      title=\"Add\"\n      size=\"small\"\n      color=\"primary\"\n      disabled\n      id=\"add\">\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"24\"\n        height=\"24\"\n        viewBox=\"0 0 24 24\">\n        <path d=\"M0,0H24V24H0Z\" fill=\"none\" />\n        <path d=\"M19,13H13v6H11V13H5V11h6V5h2v6h6Z\" fill=\"#252a2e\" />\n      </svg>\n    </modus-button>\n    <modus-button\n      button-style=\"borderless\"\n      aria-label=\"Remove\"\n      title=\"Remove\"\n      size=\"small\"\n      color=\"primary\"\n      disabled\n      id=\"remove\">\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"24\"\n        height=\"24\"\n        viewBox=\"0 0 24 24\">\n        <path d=\"M0,0H24V24H0Z\" fill=\"none\" />\n        <path\n          d=\"M6,19a2.006,2.006,0,0,0,2,2h8a2.006,2.006,0,0,0,2-2V7H6ZM19,4H15.5l-1-1h-5l-1,1H5V6H19Z\"\n          fill=\"#252a2e\" />\n      </svg>\n    </modus-button>\n    <modus-button\n      button-style=\"borderless\"\n      size=\"small\"\n      aria-label=\"Edit\"\n      title=\"Edit\"\n      color=\"primary\"\n      disabled\n      id=\"edit\">\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"24\"\n        height=\"24\"\n        viewBox=\"0 0 24 24\">\n        <path d=\"M0,0H24V24H0Z\" fill=\"none\" />\n        <path\n          d=\"M3,17.25V21H6.75L17.81,9.94,14.06,6.19ZM20.71,7.04a1,1,0,0,0,0-1.41L18.37,3.29a1,1,0,0,0-1.41,0L15.13,5.12l3.75,3.75,1.83-1.83Z\"\n          fill=\"#252a2e\" />\n      </svg>\n    </modus-button>\n    <modus-button\n      button-style=\"borderless\"\n      size=\"small\"\n      aria-label=\"Copy\"\n      title=\"Copy\"\n      color=\"primary\"\n      disabled\n      id=\"copy\">\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"24\"\n        height=\"24\"\n        viewBox=\"0 0 24 24\">\n        <path d=\"M0,0H24V24H0Z\" fill=\"none\" />\n        <path\n          d=\"M16,1H4A2.006,2.006,0,0,0,2,3V17H4V3H16Zm3,4H8A2.006,2.006,0,0,0,6,7V21a2.006,2.006,0,0,0,2,2H19a2.006,2.006,0,0,0,2-2V7A2.006,2.006,0,0,0,19,5Zm0,16H8V7H19Z\"\n          fill=\"#252a2e\" />\n      </svg>\n    </modus-button>\n    <modus-button\n      button-style=\"borderless\"\n      size=\"small\"\n      aria-label=\"Drag\"\n      title=\"Drag\"\n      color=\"primary\"\n      disabled\n      id=\"drag\">\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"24\"\n        height=\"24\"\n        viewBox=\"0 0 24 24\">\n        <path\n          d=\"M11,18a2,2,0,1,1-2-2A2.006,2.006,0,0,1,11,18ZM9,10a2,2,0,1,0,2,2A2.006,2.006,0,0,0,9,10ZM9,4a2,2,0,1,0,2,2A2.006,2.006,0,0,0,9,4Zm6,4a2,2,0,1,0-2-2A2.006,2.006,0,0,0,15,8Zm0,2a2,2,0,1,0,2,2A2.006,2.006,0,0,0,15,10Zm0,6a2,2,0,1,0,2,2A2.006,2.006,0,0,0,15,16Z\"\n          fill=\"#252a2e\" />\n      </svg>\n    </modus-button>\n    <modus-button\n      button-style=\"borderless\"\n      size=\"small\"\n      aria-label=\"Expand\"\n      title=\"Expand\"\n      color=\"primary\"\n      disabled\n      id=\"expand\">\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"24\"\n        height=\"24\"\n        viewBox=\"0 0 24 24\">\n        <path d=\"M0,0H24V24H0Z\" fill=\"rgba(0,0,0,0)\" />\n        <path\n          d=\"M12,5.83,15.17,9l1.41-1.41L12,3,7.41,7.59,8.83,9Zm0,12.34L8.83,15,7.42,16.41,12,21l4.59-4.59L15.17,15Z\"\n          fill=\"#252a2e\" /></svg\n    ></modus-button>\n    <modus-button\n      button-style=\"borderless\"\n      size=\"small\"\n      aria-label=\"Collapse\"\n      title=\"Collapse\"\n      color=\"primary\"\n      disabled\n      style=\"display: none\"\n      id=\"collapse\">\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"24\"\n        height=\"24\"\n        viewBox=\"0 0 24 24\">\n        <path d=\"M0,0H24V24H0Z\" fill=\"none\" />\n        <path\n          d=\"M7.41,18.59,8.83,20,12,16.83,15.17,20l1.41-1.41L12,14ZM16.59,5.41,15.17,4,12,7.17,8.83,4,7.41,5.41,12,10Z\"\n          fill=\"#252a2e\" />\n      </svg>\n    </modus-button>\n  </div>\n  <modus-tree-view>\n    <modus-tree-view-item node-Id=\"1\" label=\"Inbox\">\n      <modus-tree-view-item node-Id=\"2\" label=\"Personal\"></modus-tree-view-item>\n      <modus-tree-view-item node-Id=\"3\" label=\"Work\"></modus-tree-view-item>\n      <modus-tree-view-item node-Id=\"4\" label=\"Social\"></modus-tree-view-item>\n      <modus-tree-view-item node-Id=\"5\" label=\"More ...\"></modus-tree-view-item>\n    </modus-tree-view-item>\n    <modus-tree-view-item node-Id=\"6\" label=\"Archived\">\n      <modus-tree-view-item node-Id=\"7 is-last-child=\"true\" label=\"Folder1\">\n        <modus-tree-view-item node-Id=\"8\" label=\"File1\"></modus-tree-view-item>\n        <modus-tree-view-item node-Id=\"9\" is-last-child=\"true\" label=\"File3\"></modus-tree-view-item>\n      </modus-tree-view-item>\n    </modus-tree-view-item>\n  </modus-tree-view>\n</div>\n<script>\n  function actionBarScript() {\n    const container = document.querySelector(\"div[id='tree-with-action-bar']\");\n    const root = container.querySelector('modus-tree-view');\n    const addButton = container.querySelector(\"modus-button[id='add']\");\n    const removeButton = container.querySelector(\"modus-button[id='remove']\");\n    const editButton = container.querySelector(\"modus-button[id='edit']\");\n    const copyButton = container.querySelector(\"modus-button[id='copy']\");\n    const expandAllButton = container.querySelector(\n      \"modus-button[id='expand']\"\n    );\n    const collapseAllButton = container.querySelector(\n      \"modus-button[id='collapse']\"\n    );\n    const dragButton = container.querySelector(\"modus-button[id='drag']\");\n\n    const disableButtons = (disable) => {\n      removeButton.disabled = disable;\n      copyButton.disabled = disable;\n      editButton.disabled = disable;\n    };\n    const getChildren = (element) => {\n      const children = element.querySelectorAll('modus-tree-view-item');\n      if (!children) return [];\n      return Array.from(children).reduce((r, c) => {\n        r.push(c, ...getChildren(c));\n        return r;\n      }, []);\n    };\n    const getItems = () =>\n      new Map(\n        Array.from(root.querySelectorAll('modus-tree-view-item')).map((i) => [\n          i.nodeId,\n          i.label,\n        ])\n      );\n    const querySelect = (itemId) =>\n      container.querySelector(\"modus-tree-view-item[node-id='\" + itemId + \"']\");\n\n    addButton.disabled = false;\n    expandAllButton.disabled = false;\n    collapseAllButton.disabled = false;\n\n    container.addEventListener('itemClick', () => {\n      if (root.selectedItems.length > 0) {\n        disableButtons(false);\n      } else {\n        disableButtons(true);\n      }\n    });\n\n    addButton.addEventListener('buttonClick', () => {\n      const nodeId =\n        container.querySelectorAll('modus-tree-view-item').length + 1;\n      const selectedItems = root.selectedItems;\n      if (nodeId) {\n        const selectedItemId =\n          selectedItems && selectedItems.length > 0 ? selectedItems[0] : null;\n        const selectedItemElement = querySelect(selectedItemId);\n        const selectedItemParent = selectedItemElement?.parentElement;\n        const newNode = document.createElement('modus-tree-view-item');\n        newNode.nodeId = nodeId;\n        newNode.editable = true;\n        const insertParent = selectedItemParent || root;\n        const insertBeforeElement =\n          selectedItemElement || root.firstElementChild;\n        insertParent.insertBefore(newNode, insertBeforeElement);\n      }\n    });\n\n    removeButton.addEventListener('buttonClick', () => {\n      const selectedItems = root.selectedItems;\n      selectedItems?.forEach((i) => {\n        const selectedItemElement = querySelect(i);\n        const selectedItemParent = selectedItemElement?.parentElement;\n        if (selectedItemElement) {\n          selectedItemParent.removeChild(selectedItemElement);\n        }\n      });\n\n      if (!Array.from(getItems()).length) {\n        container\n          .querySelectorAll('modus-button')\n          .forEach((b) => (b.disabled = true));\n      } else disableButtons(true);\n    });\n\n    editButton.addEventListener('buttonClick', () => {\n      const selectedItems = root.selectedItems;\n      const selectedItemId =\n        selectedItems && selectedItems.length > 0 ? selectedItems[0] : null;\n      const selectedItemElement = querySelect(selectedItemId);\n      selectedItemElement.editable = true;\n    });\n\n    copyButton.addEventListener('buttonClick', () => {\n      const nodeId =\n        container.querySelectorAll('modus-tree-view-item').length + 1;\n      const selectedItems = root.selectedItems;\n      const selectedItemId =\n        selectedItems && selectedItems.length > 0 ? selectedItems[0] : null;\n      const selectedItemElement = querySelect(selectedItemId);\n      if (selectedItemElement) {\n        const newNode = selectedItemElement.cloneNode(true);\n        newNode.nodeId = nodeId;\n        newNode.editable = true;\n        newNode.label = 'Copy of ' + selectedItemElement.label;\n\n        let count = nodeId + 1;\n        getChildren(newNode).forEach((c) => {\n          c.nodeId = count;\n          count++;\n        });\n\n        (selectedItemElement.parentElement || root).insertBefore(\n          newNode,\n          selectedItemElement\n        );\n      }\n    });\n\n    expandAllButton.addEventListener('buttonClick', () => {\n      root.expandedItems = Array.from(getItems().keys());\n      expandAllButton.style.display = 'none';\n      collapseAllButton.style.display = 'inline-block';\n    });\n\n    collapseAllButton.addEventListener('buttonClick', () => {\n      root.expandedItems = [];\n      collapseAllButton.style.display = 'none';\n      expandAllButton.style.display = 'inline-block';\n    });\n\n    dragButton.addEventListener('buttonClick', () => {\n      root.enableReordering = !root.enableReordering;\n    });\n  }\n  actionBarScript();\n</script>\n```\n\n### Custom Filter\n\n<Story of={ContentTree.CustomFilter} />\n\n```html\n<div id=\"tree-with-filter\" style=\"display: flex; flex-direction: column; width: 400px;\">\n  <modus-text-input id=\"filter\" size=\"large\" placeholder=\"Search\" disabled=\"true\" include-search-icon></modus-text-input>\n  <modus-tree-view>\n    <modus-tree-view-item node-Id=\"1\">\n      <div slot=\"label\">Inbox</div>\n      <modus-tree-view-item node-Id=\"2\">\n        <div slot=\"label\">Personal</div>\n      </modus-tree-view-item>\n      <modus-tree-view-item node-Id=\"5\">\n        <div slot=\"label\">More ...</div>\n      </modus-tree-view-item>\n    </modus-tree-view-item>\n    <modus-tree-view-item node-Id=\"6\">\n      <div slot=\"label\">Archived</div>\n      <modus-tree-view-item is-last-child=\"true\" node-Id=\"7\">\n        <div slot=\"label\">Folder1</div>\n        <modus-tree-view-item node-Id=\"8\">\n          <div slot=\"label\">File1</div>\n        </modus-tree-view-item>\n        <modus-tree-view-item is-last-child=\"true\" node-Id=\"11\">\n          <div slot=\"label\">File2</div>\n        </modus-tree-view-item>\n      </modus-tree-view-item>\n    </modus-tree-view-item>\n  </modus-tree-view>\n</div>\n<script>\n  function filterScript() {\n    const container = document.querySelector(\"div[id='tree-with-filter']\");\n    const root = container.querySelector('modus-tree-view');\n\n    let items = new Map();\n    container.querySelectorAll('modus-tree-view-item').forEach((element) => {\n      items.set(element.nodeId, element.querySelector(\"div[slot='label']\").innerHTML);\n    });\n    root.expandedItems = Array.from(items.keys());\n\n    const filter = container.querySelector(\"modus-text-input[id='filter']\");\n    filter.disabled = false;\n\n    filter.addEventListener('valueChange', (e) => {\n      const searchText = e.detail;\n      if (searchText) {\n        const searchResult = [...items]\n          .filter(([key, value]) => {\n            return value.toLowerCase().indexOf(searchText) > -1;\n          })\n          .map(([key, value]) => key);\n        const getParents = (e) => {\n          if (e.parentNode && e.parentNode.nodeId) return [e.parentNode, ...getParents(e.parentNode)];\n          return [];\n        };\n        items.forEach((value, key) => {\n          const element = container.querySelector(\"modus-tree-view-item[node-id='\" + key + \"']\");\n          element.expanded = true;\n          if (searchResult.includes(key)) {\n            element.querySelector(\"div[slot='label']\").style.color = '#0063a3';\n            element.style.display = 'block';\n            getParents(element).forEach((e) => {\n              e.style.display = 'block';\n            });\n          } else {\n            element.querySelector(\"div[slot='label']\").style.color = undefined;\n            element.style.display = 'none';\n          }\n        });\n      } else {\n        items.forEach((value, key) => {\n          const element = container.querySelector(\"modus-tree-view-item[node-id='\" + key + \"']\");\n          element.querySelector(\"div[slot='label']\").style.color = '';\n          element.style.display = 'block';\n          element.expanded = false;\n        });\n      }\n    });\n  }\n\n  filterScript();\n</script>\n```\n\n### With Item Action Bar\n\n<Story of={ContentTree.WithActionBar} />\n\n```html\n<div>\n  <modus-tree-view\n    style=\"width:400px;\"\n    checkbox-selection=\"false\"\n    checked-items=\"false\"\n    expanded-items=\"false\"\n    multi-checkbox-selection=\"false\"\n    multi-selection=\"false\"\n    selected-items=\"false\"\n    size=\"\"\n    class=\"hydrated\">\n    <modus-tree-view-item node-id=\"1\" label=\"Inbox\" class=\"hydrated\"></modus-tree-view-item>\n  </modus-tree-view>\n</div>\n<script>\n  function loadActions() {\n    document.querySelector('[node-id=\"1\"]').actions = [\n      { id: 'export', icon: 'export', label: 'Export' },\n      { id: 'history', icon: 'history', label: 'History' },\n      { id: 'edit', icon: 'pencil', label: 'Edit' },\n    ];\n  }\n  loadActions();\n</script>\n```\n\n### Accessibility\n\nEvery item and the elements such as drag icon, expand & collapse icon and the checkbox are accessible through keyboard. <kbd>Tab</kbd> key moves focus to the next focusable element and <kbd>Shift</kbd> + <kbd>Tab</kbd> moves focus to the previous focusable element. If `disableTabbing` is set `true`, tabbing inside the tree isn't allowed. Please refer to the next section for more details on keyboard interaction.\n\n### Keyboard Navigation\n\n| Key                   | Description                                                                                                                                                                                                                           |\n| --------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Arrow Left            | Collapses the item                                                                                                                                                                                                                    |\n| Arrow Right           | Expands the item                                                                                                                                                                                                                      |\n| Arrow Up              | Moves to the previous focusable item and focus moves to a child if the current or previous parent item is expanded                                                                                                                    |\n| Arrow Down            | Moves to the next focusable item and focus moves to a child if the current or next parent item is expanded                                                                                                                            |\n| Ctrl + click          | If `multi-selection` is true, it performs multiple selection on the clicked items                                                                                                                                                     |\n| Enter                 | Using <kbd>Tab</kbd> key if the focus is set on an item, pressing `Enter` key will select it and if the focus is on an element like checkbox, collapse/expand icon, pressing `Enter` key will perform operations only on that element |\n| Shift + Arrow Up/Down | If `multi-selection` is true, it performs multiple selection starting from the item that is already selected                                                                                                                          |\n| Shift + Arrow Right   | Can be used to focus the checkbox inside a tree item if `disableTabbing` is true                                                                                                                                                      |\n| Space                 | Expands/Collapses the item when it is in focus                                                                                                                                                                                        |\n\n### Properties\n\n##### Modus Tree View\n\n| Property                 | Attribute                  | Description                                                                                                                                                                                            | Type                                   | Default      |\n| ------------------------ | -------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | -------------------------------------- | ------------ |\n| `borderless`             | `borderless`               | (optional) Whether the content tree and items have a border or not                                                                                                                                     | `boolean`                              | `undefined`  |\n| `enableReordering`       | `enable-reordering`        | (optional) Sets draggable state to be true to all the children                                                                                                                                         | `boolean`                              | `undefined`  |\n| `checkboxSelection`      | `checkbox-selection`       | (optional) Enables checkbox selection on each tree item                                                                                                                                                | `boolean`                              | `undefined`  |\n| `checkedItems`           | --                         | (optional) Set checked tree items                                                                                                                                                                      | `string[]`                             | `[]`         |\n| `disableTabbing`         | `disable-tabbing`          | (optional) Disable usage of <kbd>Tab</kbd> key to focus elements inside a tree view. Use `Arrow Up/Down` for focussing a tree item and `Shift + Arrow Right` for focussing a checkbox inside the item. | `boolean`                              | `undefined`  |\n| `expandedItems`          | --                         | (optional) Set expanded tree items                                                                                                                                                                     | `string[]`                             | `[]`         |\n| `multiCheckboxSelection` | `multi-checkbox-selection` | (optional) Enables multiple checkbox selection                                                                                                                                                         | `boolean`                              | `undefined`  |\n| `multiSelection`         | `multi-selection`          | (optional) Enables multiple tree items selection                                                                                                                                                       | `boolean`                              | `undefined`  |\n| `selectedItems`          | --                         | (optional) Set selected tree items                                                                                                                                                                     | `string[]`                             | `[]`         |\n| `size`                   | `size`                     | (optional) The default size of all tree items                                                                                                                                                          | `\"condensed\" \\| \"large\" \\| \"standard\"` | `'standard'` |\n\n##### Modus Tree View Item\n\n| Property              | Attribute         | Description                                                                                                                          | Type                    | Default     |\n| --------------------- | ----------------- | ------------------------------------------------------------------------------------------------------------------------------------ | ----------------------- | ----------- |\n| `actions`             | `actions`         | (optional) Actions that can be performed on each item. A maximum of 3 icons will be shown, including overflow menu and expand icons. | `ModusActionBarOptions` | `undefined` |\n| `disabled`            | `disabled`        | (optional) Disables the tree item                                                                                                    | `boolean`               | `undefined` |\n| `draggableItem`       | `draggable-item`  | (optional) Allows the item to be dragged across the tree                                                                             | `boolean`               | `undefined` |\n| `droppableItem`       | `droppable-item`  | (optional) Allows the item to be a drop zone so other tree items can be dropped above it                                             | `boolean`               | `undefined` |\n| `editable`            | `editable`        | (optional) Changes the label field into a text box                                                                                   | `boolean`               | `undefined` |\n| `label` _(required)_  | `label`           | (required) Label for the tree item                                                                                                   | `string`                | `undefined` |\n| `nodeId` _(required)_ | `node-id`         | (required) Unique tree item identifier                                                                                               | `string`                | `undefined` |\n| `tabIndexValue`       | `tab-index-value` | (optional) Tab Index for the tree item                                                                                               | `number \\| string`      | `0`         |\n| `isLastChild          | `is-last-child`   | To be set true when the tree item is an expandable last child                                                                        | `boolean`               | false       |\n\n### DOM Events\n\n#### Modus Tree View\n\n| Name                | Description                                                                                                                           | Emits                                                |\n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------- |\n| itemActionClick     | Fired when an action is clicked within any tree item. Includes both the `actionId` and `nodeId` of the action and item, respectively. | `{ actionId: string, nodeId: string }`               |\n| itemDrop            | Fired when an item is dropped in a different position. Includes the updated item's map.                                               | `{ [key: string]: TreeViewItemInfo }`                |\n| itemSelectionChange | Fired when the item's selection state changes by any means, such as mouse or keyboard interactions                                    | `CustomEvent<{isSelected: boolean, nodeId: number}>` |\n\n##### Modus Tree View Item\n\n| Name             | Description                                                                           | Emits                  |\n| ---------------- | ------------------------------------------------------------------------------------- | ---------------------- |\n| actionClick      | Fired when an action button within the tree item is clicked. Includes the `actionId`. | `{ actionId: string }` |\n| checkboxClick    | An event that fires on tree item checkbox click                                       | boolean                |\n| itemClick        | An event that fires on tree item click                                                | boolean                |\n| itemExpandToggle | An event that fires on tree item expand/collapse                                      | boolean                |\n| itemLabelChange  | An event that fires on tree item label change                                         | `CustomEvent<string>`  |\n\n### Methods\n\n##### Modus Tree View Item\n\n| Method name     | Description                           | Parameter | Return          |\n| --------------- | ------------------------------------- | --------- | --------------- |\n| `focusCheckbox` | Focus the checkbox inside a tree item |           | `Promise<void>` |\n| `focusItem`     | Focus the tree item                   |           | `Promise<void>` |\n\n### Types\n\n```ts\ntype ModusActionBarOptions = {\n  id: string;\n  icon: string;\n  label: string;\n};\n```\n",
    "storybook_content": "\n\n--- modus-content-tree.stories.tsx ---\n\n// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-content-tree-storybook-docs.mdx';\nimport { html } from 'lit-html';\nimport { withActions } from '@storybook/addon-actions/decorator';\n\nexport default {\n  title: 'Components/Content Tree',\n  argTypes: {\n    checkboxSelection: {\n      name: 'checkbox-selection',\n      description: 'Enables checkbox selection on each tree item.',\n      table: {\n        type: { summary: 'boolean' },\n      },\n    },\n    disableTabbing: {\n      name: 'disable-tabbing',\n      description:\n        'Disables tabbing inside a tree view. Use `Arrow Up/Down` for focusing a tree item and `Shift + Arrow Right` for focusing a checkbox inside the item.',\n      table: {\n        type: { summary: 'boolean' },\n      },\n    },\n    multiCheckboxSelection: {\n      name: 'multi-checkbox-selection',\n      description: 'Enables multiple checkbox selection.',\n      table: {\n        type: { summary: 'boolean' },\n      },\n    },\n    multiSelection: {\n      name: 'multi-selection',\n      description: 'Enables multiple tree items selection.',\n      table: {\n        type: { summary: 'boolean' },\n      },\n    },\n    size: {\n      options: ['condensed', 'standard', 'large'],\n      type: 'select',\n      name: 'size',\n      description: 'The default size of all tree items.',\n      table: {\n        defaultValue: { summary: `'standard'` },\n        type: { summary: `'condensed' | 'standard' | 'large' ` },\n      },\n    },\n    borderless: {\n      description: 'Whether the content tree and items have a border or not. Default is `false`.',\n      table: {\n        type: { summary: 'boolean' },\n      },\n    },\n    enableReordering: {\n      description: 'Sets draggable state to be true to all the children',\n      table: {\n        type: { summary: 'boolean' },\n      },\n    },\n    isLastChild: {\n      description: 'To be set true when the tree item is an expandable last child',\n      table: {\n        type: { summary: 'boolean' },\n      },\n    },\n  },\n  parameters: {\n    docs: {\n      page: docs,\n    },\n    actions: {\n      handles: [\n        'itemActionClick modus-tree-view',\n        'actionClick modus-tree-view-item',\n        'itemClick modus-tree-view-item',\n        'itemLabelChange modus-tree-view-item',\n        'itemDrop modus-tree-view',\n        'itemSelectionChange modus-tree-view',\n        'checkboxClick modus-tree-view-item',\n      ],\n    },\n    controls: { expanded: true, sort: 'requiredFirst' },\n    options: {\n      isToolshown: true,\n      enableShortcuts: false,\n    },\n  },\n  decorators: [withActions],\n};\n\nconst Template = ({\n  borderless,\n  enableReordering,\n  checkboxSelection,\n  multiCheckboxSelection,\n  multiSelection,\n  disableTabbing,\n  size,\n}) => html`\n  <modus-tree-view\n    style=\"width:400px;\"\n    enable-reordering=${enableReordering ? 'true' : 'false'}\n    borderless=${borderless ? 'true' : 'false'}\n    checkbox-selection=${checkboxSelection ? 'true' : 'false'}\n    disable-tabbing=${disableTabbing ? 'true' : 'false'}\n    multi-checkbox-selection=${multiCheckboxSelection ? 'true' : 'false'}\n    multi-selection=${multiSelection ? 'true' : 'false'}\n    size=${size}>\n    <modus-tree-view-item node-Id=\"1\" label=\"Inbox\">\n      <modus-tree-view-item node-Id=\"2\" label=\"Personal\"></modus-tree-view-item>\n      <modus-tree-view-item node-Id=\"3\" label=\"Work\"></modus-tree-view-item>\n      <modus-tree-view-item node-Id=\"4\" label=\"Social\"></modus-tree-view-item>\n      <modus-tree-view-item node-Id=\"5\" label=\"More ...\"></modus-tree-view-item>\n    </modus-tree-view-item>\n    <modus-tree-view-item node-Id=\"6\" label=\"Archived\">\n      <modus-tree-view-item node-Id=\"7\" label=\"Folder1\">\n        <modus-tree-view-item node-Id=\"8\" label=\"File1\"></modus-tree-view-item>\n        <modus-tree-view-item node-Id=\"9\" label=\"Folder2\">\n          <modus-tree-view-item node-Id=\"10\" label=\"File2\"></modus-tree-view-item>\n        </modus-tree-view-item>\n        <modus-tree-view-item node-Id=\"11\" label=\"File3\"></modus-tree-view-item>\n      </modus-tree-view-item>\n    </modus-tree-view-item>\n    <modus-tree-view-item node-Id=\"12\" label=\"Spam\"></modus-tree-view-item>\n  </modus-tree-view>\n`;\n\nconst SlotIconTemplate = ({\n  borderless,\n  enableReordering,\n  checkboxSelection,\n  multiCheckboxSelection,\n  multiSelection,\n  disableTabbing,\n  size,\n  isLastChild,\n}) => html`\n  <modus-tree-view\n    style=\"width:400px;\"\n    enable-reordering=${enableReordering}\n    borderless=${borderless ? 'true' : 'false'}\n    checkbox-selection=${checkboxSelection ? 'true' : 'false'}\n    disable-tabbing=${disableTabbing ? 'true' : 'false'}\n    multi-checkbox-selection=${multiCheckboxSelection ? 'true' : 'false'}\n    multi-selection=${multiSelection ? 'true' : 'false'}\n    size=${size}>\n    <modus-tree-view-item node-Id=\"1\" label=\"Inbox\">\n      <svg slot=\"itemIcon\" fill=\"currentColor\" height=\"16\" width=\"16\" viewBox=\"0 0 32 32\">\n        <path\n          d=\"M28.79 12.39A1 1 0 0 0 28 12h-2V9c0-.55-.45-1-1-1h-9.59l-1.7-1.71C13.52 6.11 13.27 6 13 6H4c-.55 0-1 .45-1 1v17c0 .04.02.07.02.11.01.05.02.11.04.16.02.09.06.17.1.25.02.03.02.06.05.09.01.01.03.02.04.03.07.08.15.14.23.19.04.03.06.05.1.07.13.06.27.1.42.1h21c.13 0 .25-.03.36-.07.04-.02.07-.04.1-.06.07-.04.14-.08.2-.13.03-.03.06-.06.09-.1.05-.05.09-.11.12-.18a.31.31 0 0 0 .06-.13c.01-.02.03-.04.03-.07l3-11c.09-.3.02-.62-.17-.87zM5 8h7.59l1.7 1.71c.19.18.44.29.71.29h9v2H7c-.45 0-.85.3-.96.74L5 16.53V8z\" />\n      </svg>\n      <modus-tree-view-item node-Id=\"2\" label=\"Personal\"></modus-tree-view-item>\n      <modus-tree-view-item node-Id=\"3\" label=\"Work\"></modus-tree-view-item>\n      <modus-tree-view-item node-Id=\"4\" label=\"Social\"></modus-tree-view-item>\n      <modus-tree-view-item node-Id=\"5\" is-last-child=${isLastChild} label=\"More ...\"></modus-tree-view-item>\n    </modus-tree-view-item>\n  </modus-tree-view>\n`;\n\nexport const Default = Template.bind({});\nDefault.args = {\n  borderless: false,\n  enableReordering: false,\n  checkboxSelection: false,\n  disableTabbing: false,\n  multiCheckboxSelection: false,\n  multiSelection: false,\n  size: 'standard',\n};\n\nexport const WithIcon = SlotIconTemplate.bind({});\nWithIcon.args = { ...Default.args };\n\n// export const Borderless = Template.bind({});\n\nexport const Condensed = Template.bind({});\nCondensed.args = { ...Default.args, checkboxSelection: true, size: 'condensed' };\n\nexport const Borderless = Template.bind({});\nBorderless.args = { ...Default.args, borderless: true };\n\nexport const MultiSelection = Template.bind({});\nMultiSelection.args = { ...Default.args, multiSelection: true, checkboxSelection: true, multiCheckboxSelection: true };\n\nconst ActionBarTemplate = ({\n  borderless,\n  enableReordering,\n  checkboxSelection,\n  multiCheckboxSelection,\n  multiSelection,\n  disableTabbing,\n  size,\n  isLastChild,\n}) => html`\n  <style>\n    .toolbar {\n      gap: 4px;\n      display: flex;\n      justify-content: end;\n      flex-wrap: wrap;\n      margin-top: 1rem;\n    }\n\n    modus-button {\n      width: 24px;\n      height: 28px;\n      padding: 0;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    }\n\n    modus-button svg {\n      width: 20px;\n      height: 20px;\n      padding-top: 3px;\n    }\n  </style>\n  <div id=\"tree-with-action-bar\" style=\"display: flex; flex-direction: column; width: 400px;\">\n    <div class=\"toolbar\">\n      <modus-button button-style=\"borderless\" aria-label=\"Add\" title=\"Add\" size=\"small\" color=\"primary\" disabled id=\"add\">\n        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n          <path d=\"M0,0H24V24H0Z\" fill=\"none\" />\n          <path d=\"M19,13H13v6H11V13H5V11h6V5h2v6h6Z\" fill=\"var(--icon-fill)\" />\n        </svg>\n      </modus-button>\n      <modus-button\n        button-style=\"borderless\"\n        aria-label=\"Remove\"\n        title=\"Remove\"\n        size=\"small\"\n        color=\"primary\"\n        disabled\n        id=\"remove\">\n        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n          <path d=\"M0,0H24V24H0Z\" fill=\"none\" />\n          <path\n            d=\"M6,19a2.006,2.006,0,0,0,2,2h8a2.006,2.006,0,0,0,2-2V7H6ZM19,4H15.5l-1-1h-5l-1,1H5V6H19Z\"\n            fill=\"var(--icon-fill)\" />\n        </svg>\n      </modus-button>\n      <modus-button button-style=\"borderless\" size=\"small\" aria-label=\"Edit\" title=\"Edit\" color=\"primary\" disabled id=\"edit\">\n        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n          <path d=\"M0,0H24V24H0Z\" fill=\"none\" />\n          <path\n            d=\"M3,17.25V21H6.75L17.81,9.94,14.06,6.19ZM20.71,7.04a1,1,0,0,0,0-1.41L18.37,3.29a1,1,0,0,0-1.41,0L15.13,5.12l3.75,3.75,1.83-1.83Z\"\n            fill=\"var(--icon-fill)\" />\n        </svg>\n      </modus-button>\n      <modus-button button-style=\"borderless\" size=\"small\" aria-label=\"Copy\" title=\"Copy\" color=\"primary\" disabled id=\"copy\">\n        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n          <path d=\"M0,0H24V24H0Z\" fill=\"none\" />\n          <path\n            d=\"M16,1H4A2.006,2.006,0,0,0,2,3V17H4V3H16Zm3,4H8A2.006,2.006,0,0,0,6,7V21a2.006,2.006,0,0,0,2,2H19a2.006,2.006,0,0,0,2-2V7A2.006,2.006,0,0,0,19,5Zm0,16H8V7H19Z\"\n            fill=\"var(--icon-fill)\" />\n        </svg>\n      </modus-button>\n      <modus-button button-style=\"borderless\" size=\"small\" aria-label=\"Drag\" title=\"Drag\" color=\"primary\" disabled id=\"drag\">\n        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n          <path\n            d=\"M11,18a2,2,0,1,1-2-2A2.006,2.006,0,0,1,11,18ZM9,10a2,2,0,1,0,2,2A2.006,2.006,0,0,0,9,10ZM9,4a2,2,0,1,0,2,2A2.006,2.006,0,0,0,9,4Zm6,4a2,2,0,1,0-2-2A2.006,2.006,0,0,0,15,8Zm0,2a2,2,0,1,0,2,2A2.006,2.006,0,0,0,15,10Zm0,6a2,2,0,1,0,2,2A2.006,2.006,0,0,0,15,16Z\"\n            fill=\"var(--icon-fill)\" />\n        </svg>\n      </modus-button>\n      <modus-button\n        button-style=\"borderless\"\n        size=\"small\"\n        aria-label=\"Expand\"\n        title=\"Expand\"\n        color=\"primary\"\n        disabled\n        id=\"expand\">\n        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n          <path d=\"M0,0H24V24H0Z\" fill=\"rgba(0,0,0,0)\" />\n          <path\n            d=\"M12,5.83,15.17,9l1.41-1.41L12,3,7.41,7.59,8.83,9Zm0,12.34L8.83,15,7.42,16.41,12,21l4.59-4.59L15.17,15Z\"\n            fill=\"var(--icon-fill)\" /></svg\n      ></modus-button>\n      <modus-button\n        button-style=\"borderless\"\n        size=\"small\"\n        aria-label=\"Collapse\"\n        title=\"Collapse\"\n        color=\"primary\"\n        disabled\n        style=\"display: none\"\n        id=\"collapse\">\n        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n          <path d=\"M0,0H24V24H0Z\" fill=\"none\" />\n          <path\n            d=\"M7.41,18.59,8.83,20,12,16.83,15.17,20l1.41-1.41L12,14ZM16.59,5.41,15.17,4,12,7.17,8.83,4,7.41,5.41,12,10Z\"\n            fill=\"var(--icon-fill)\" />\n        </svg>\n      </modus-button>\n    </div>\n    <modus-tree-view\n      enable-reordering=${enableReordering}\n      borderless=${borderless ? 'true' : 'false'}\n      checkbox-selection=${checkboxSelection ? 'true' : 'false'}\n      disable-tabbing=${disableTabbing ? 'true' : 'false'}\n      multi-checkbox-selection=${multiCheckboxSelection ? 'true' : 'false'}\n      multi-selection=${multiSelection ? 'true' : 'false'}\n      size=${size}>\n      <modus-tree-view-item node-Id=\"1\" label=\"Inbox\">\n        <modus-tree-view-item node-Id=\"2\" label=\"Personal\"></modus-tree-view-item>\n        <modus-tree-view-item node-Id=\"3\" label=\"Work\"></modus-tree-view-item>\n        <modus-tree-view-item node-Id=\"4\" label=\"Social\"></modus-tree-view-item>\n        <modus-tree-view-item node-Id=\"5\" label=\"More ...\"></modus-tree-view-item>\n      </modus-tree-view-item>\n      <modus-tree-view-item node-Id=\"6\" label=\"Archived\">\n        <modus-tree-view-item node-Id=\"7\" is-last-child=${isLastChild} label=\"Folder1\">\n          <modus-tree-view-item node-Id=\"8\" label=\"File1\"></modus-tree-view-item>\n          <modus-tree-view-item node-Id=\"9\" is-last-child=${isLastChild} label=\"File3\"></modus-tree-view-item>\n        </modus-tree-view-item>\n      </modus-tree-view-item>\n    </modus-tree-view>\n  </div>\n  ${ActionBarScript()}\n`;\nconst ActionBarScript = () => {\n  const tag = document.createElement('script');\n  tag.innerHTML = `\n  function actionBarScript() {\n    const container = document.querySelector(\"div[id='tree-with-action-bar']\");\n\n    // Workaround for storybook running script twice\n    if(container.getAttribute(\"data-script\")) return;\n    else container.setAttribute(\"data-script\", true);\n\n    const root =  container.querySelector(\"modus-tree-view\");\n    const addButton =  container.querySelector(\"modus-button[id='add']\");\n    const removeButton =  container.querySelector(\"modus-button[id='remove']\");\n    const editButton =  container.querySelector(\"modus-button[id='edit']\");\n    const copyButton =  container.querySelector(\"modus-button[id='copy']\");\n    const expandAllButton =  container.querySelector(\"modus-button[id='expand']\");\n    const collapseAllButton =  container.querySelector(\"modus-button[id='collapse']\");\n    const dragButton =  container.querySelector(\"modus-button[id='drag']\");\n\n    const disableButtons = (disable) =>\n    {\n      removeButton.disabled = disable;\n      copyButton.disabled = disable;\n      editButton.disabled = disable;\n    }\n    const getChildren = (element) => {\n      const children = element.querySelectorAll('modus-tree-view-item');\n      if (!children) return [];\n      return Array.from(children)\n        .reduce((r, c) => {\n          r.push(\n            c,\n            ...getChildren(c)\n          );\n          return r;\n        }, []);\n    }\n    const getItems = () => new Map( Array.from(root.querySelectorAll('modus-tree-view-item')).map(i => [i.nodeId, i.label]));\n    const querySelect = (itemId) => container.querySelector(\"modus-tree-view-item[node-id='\"+ itemId + \"']\");\n\n    addButton.disabled = false;\n    dragButton.disabled = false;\n    expandAllButton.disabled = false;\n    collapseAllButton.disabled = false;\n\n    container.addEventListener(\"itemClick\", () => {\n      if(root.selectedItems.length > 0){\n        disableButtons(false);\n      }\n      else\n      {\n        disableButtons(true);\n      }\n    });\n\n    addButton.addEventListener(\"buttonClick\", () => {\n      const nodeId =  container.querySelectorAll('modus-tree-view-item').length + 1;\n      const selectedItems = root.selectedItems;\n      if (nodeId) {\n        const selectedItemId = selectedItems && selectedItems.length > 0 ? selectedItems[0] : null;\n        const selectedItemElement = querySelect(selectedItemId);\n        const selectedItemParent = selectedItemElement?.parentElement;\n        const newNode = document.createElement('modus-tree-view-item');\n        newNode.nodeId = nodeId;\n        newNode.editable = true;\n        const insertParent = selectedItemParent || root;\n        const insertBeforeElement = selectedItemElement || root.firstElementChild;\n        (insertParent).insertBefore(newNode, insertBeforeElement);\n      }\n    });\n\n    removeButton.addEventListener(\"buttonClick\", () => {\n      const selectedItems = root.selectedItems;\n      selectedItems?.forEach((i) => {\n        const selectedItemElement = querySelect(i);\n        const selectedItemParent = selectedItemElement?.parentElement;\n        if(selectedItemElement){\n          selectedItemParent.removeChild(selectedItemElement);\n        }\n      });\n\n      if(!Array.from(getItems()).length){\n        container.querySelectorAll(\"modus-button\").forEach(b => b.disabled = true);\n      }\n      else disableButtons(true);\n    });\n\n    editButton.addEventListener(\"buttonClick\", () => {\n      const selectedItems = root.selectedItems;\n        const selectedItemId = selectedItems && selectedItems.length > 0 ? selectedItems[0] : null;\n        const selectedItemElement = querySelect(selectedItemId);\n        selectedItemElement.editable = true;\n    });\n\n    copyButton.addEventListener(\"buttonClick\", () => {\n      const nodeId = container.querySelectorAll('modus-tree-view-item').length + 1;\n      const selectedItems = root.selectedItems;\n        const selectedItemId = selectedItems && selectedItems.length > 0 ? selectedItems[0] : null;\n        const selectedItemElement =  querySelect(selectedItemId);\n        if(selectedItemElement){\n          const newNode = selectedItemElement.cloneNode(true);\n          newNode.nodeId = nodeId;\n          newNode.editable = true;\n          newNode.label = \"Copy of \" + selectedItemElement.label;\n\n          let count = nodeId + 1;\n          getChildren(newNode).forEach(c => {\n            c.nodeId = count;\n            count ++;\n          });\n\n          (selectedItemElement.parentElement || root).insertBefore(newNode, selectedItemElement);\n        }\n\n    });\n\n    expandAllButton.addEventListener(\"buttonClick\", () => {\n      root.expandedItems= Array.from(getItems().keys());\n      expandAllButton.style.display=\"none\";\n      collapseAllButton.style.display= \"inline-block\";\n    });\n\n    collapseAllButton.addEventListener(\"buttonClick\", () => {\n      root.expandedItems= [];\n      collapseAllButton.style.display=\"none\";\n      expandAllButton.style.display= \"inline-block\";\n    });\n\n    dragButton.addEventListener(\"buttonClick\", () => {\n      root.enableReordering = !root.enableReordering;\n    });\n  }\n    actionBarScript();\n  `;\n\n  return tag;\n};\n\nexport const CustomActionBar = ActionBarTemplate.bind({});\nCustomActionBar.args = { ...Default.args };\n\nconst FilterTemplate = ({\n  borderless,\n  enableReordering,\n  checkboxSelection,\n  multiCheckboxSelection,\n  multiSelection,\n  disableTabbing,\n  size,\n  isLastChild,\n}) => html`\n  <div id=\"tree-with-filter\" style=\"display: flex; flex-direction: column; width: 400px;\">\n    <modus-text-input\n      id=\"filter\"\n      size=\"large\"\n      placeholder=\"Search\"\n      type=\"search\"\n      disabled=\"true\"\n      include-search-icon></modus-text-input>\n    <modus-tree-view\n      enable-reordering=${enableReordering}\n      borderless=${borderless ? 'true' : 'false'}\n      checkbox-selection=${checkboxSelection ? 'true' : 'false'}\n      disable-tabbing=${disableTabbing ? 'true' : 'false'}\n      multi-checkbox-selection=${multiCheckboxSelection ? 'true' : 'false'}\n      multi-selection=${multiSelection ? 'true' : 'false'}\n      size=${size}>\n      <modus-tree-view-item node-Id=\"1\">\n        <div slot=\"label\">Inbox</div>\n        <modus-tree-view-item node-Id=\"2\">\n          <div slot=\"label\">Personal</div>\n        </modus-tree-view-item>\n        <modus-tree-view-item node-Id=\"5\">\n          <div slot=\"label\">More ...</div>\n        </modus-tree-view-item>\n      </modus-tree-view-item>\n      <modus-tree-view-item node-Id=\"6\">\n        <div slot=\"label\">Archived</div>\n        <modus-tree-view-item is-last-child=${isLastChild} node-Id=\"7\">\n          <div slot=\"label\">Folder1</div>\n          <modus-tree-view-item node-Id=\"8\">\n            <div slot=\"label\">File1</div>\n          </modus-tree-view-item>\n          <modus-tree-view-item is-last-child=${isLastChild} node-Id=\"11\">\n            <div slot=\"label\">File2</div>\n          </modus-tree-view-item>\n        </modus-tree-view-item>\n      </modus-tree-view-item>\n    </modus-tree-view>\n  </div>\n  ${FilterScript()}\n`;\n\nconst FilterScript = () => {\n  const tag = document.createElement('script');\n  tag.innerHTML = `\n    function filterScript() {\n      const container = document.querySelector(\"div[id='tree-with-filter']\");\n\n      // Workaround for storybook running script twice\n      if(container.getAttribute(\"data-script\")) return;\n      else container.setAttribute(\"data-script\", true);\n\n      const root =  container.querySelector('modus-tree-view');\n      let items = new Map();\n      container.querySelectorAll('modus-tree-view-item').forEach(element => {\n        items.set(element.nodeId, element.querySelector(\"div[slot='label']\").innerHTML);\n      });\n      root.expandedItems = Array.from(items.keys());\n\n\n      const filter =  container.querySelector(\"modus-text-input[id='filter']\");\n      filter.disabled = false;\n      filter.addEventListener(\"valueChange\", (e) => {\n        const searchText  = e.detail;\n\n        if(searchText){\n          const searchResult = [...items]\n            .filter(([key, value]) => {\n              return value.toLowerCase().indexOf(searchText) > -1\n            })\n            .map(([key, value]) => key);\n\n          const getParents = (e) => {\n            if(e.parentNode && e.parentNode.nodeId) return [e.parentNode, ...getParents(e.parentNode)];\n            return [];\n          }\n\n\n          items.forEach((value, key) => {\n            const element = container.querySelector(\"modus-tree-view-item[node-id='\" + key+\"']\")\n            element.expanded = true;\n\n            if(searchResult.includes(key)){\n              element.querySelector(\"div[slot='label']\").style.color=\"#0063a3\";\n              element.style.display=\"block\";\n\n              getParents(element).forEach(e => {\n                e.style.display=\"block\";\n              });\n            }\n            else{\n              element.querySelector(\"div[slot='label']\").style.color = undefined;\n              element.style.display= \"none\";\n            }\n          });\n        }\n        else{\n          items.forEach((value, key) => {\n            const element = container.querySelector(\"modus-tree-view-item[node-id='\" + key+\"']\")\n              element.querySelector(\"div[slot='label']\").style.color = \"\";\n              element.style.display=\"block\";\n              element.expanded = false;\n          });\n        }\n      });\n    }\n    filterScript();\n  `;\n\n  return tag;\n};\n\nexport const CustomFilter = FilterTemplate.bind({});\nCustomFilter.args = { ...Default.args };\n\nconst WithItemActionBarTemplate = ({\n  borderless,\n  enableReordering,\n  checkboxSelection,\n  multiCheckboxSelection,\n  multiSelection,\n  size,\n  rowActions,\n}) => html`\n  <div style=\"display: flex; flex-direction: column; width: 400px;\">\n    <modus-tree-view\n      style=\"width:400px;\"\n      enable-reordering=${enableReordering}\n      borderless=${borderless}\n      checkbox-selection=${checkboxSelection}\n      checked-items=\"false\"\n      expanded-items=\"false\"\n      multi-checkbox-selection=${multiCheckboxSelection}\n      multi-selection=${multiSelection}\n      selected-items=\"false\"\n      size=${size}>\n      <modus-tree-view-item node-id=\"1\" label=\"Inbox\" .actions=${rowActions}></modus-tree-view-item>\n    </modus-tree-view>\n  </div>\n`;\n\nexport const WithActionBar = WithItemActionBarTemplate.bind({});\nWithActionBar.args = {\n  ...Default.args,\n  rowActions: [\n    { id: 'export', icon: 'export', label: 'Export' },\n    { id: 'history', icon: 'history', label: 'History' },\n    { id: 'edit', icon: 'pencil', label: 'Edit' },\n    { id: 'delete', icon: 'delete', label: 'Delete' },\n  ],\n};\n",
    "storybook": {
      "examples": [
        "<modus-tree-view-item node-Id=\"2\" label=\"Personal\"></modus-tree-view-item>",
        "<modus-tree-view-item node-Id=\"3\" label=\"Work\"></modus-tree-view-item>",
        "<modus-tree-view-item node-Id=\"4\" label=\"Social\"></modus-tree-view-item>",
        "<modus-tree-view-item node-Id=\"5\" label=\"More ...\"></modus-tree-view-item>",
        "<modus-tree-view-item node-Id=\"8\" label=\"File1\"></modus-tree-view-item>"
      ],
      "variants": [],
      "prop_usage": {
        "style": [
          "width:400px;",
          "display: flex; flex-direction: column; width: 400px;",
          "borderless",
          "display: none"
        ],
        "Id": [
          "1",
          "2",
          "3",
          "4",
          "5",
          "6",
          "7",
          "8",
          "9",
          "10",
          "11",
          "12"
        ],
        "label": [
          "Inbox",
          "Personal",
          "Work",
          "Social",
          "More ...",
          "Archived",
          "Folder1",
          "File1",
          "Folder2",
          "File2",
          "File3",
          "Spam",
          "Add",
          "Remove",
          "Edit",
          "Copy",
          "Drag",
          "Expand",
          "Collapse"
        ],
        "slot": [
          "itemIcon",
          "label"
        ],
        "fill": [
          "currentColor",
          "none",
          "var(--icon-fill)",
          "rgba(0,0,0,0)"
        ],
        "height": [
          "16",
          "24"
        ],
        "width": [
          "16",
          "24"
        ],
        "viewBox": [
          "0 0 32 32",
          "0 0 24 24"
        ],
        "d": [
          "M28.79 12.39A1 1 0 0 0 28 12h-2V9c0-.55-.45-1-1-1h-9.59l-1.7-1.71C13.52 6.11 13.27 6 13 6H4c-.55 0-1 .45-1 1v17c0 .04.02.07.02.11.01.05.02.11.04.16.02.09.06.17.1.25.02.03.02.06.05.09.01.01.03.02.04.03.07.08.15.14.23.19.04.03.06.05.1.07.13.06.27.1.42.1h21c.13 0 .25-.03.36-.07.04-.02.07-.04.1-.06.07-.04.14-.08.2-.13.03-.03.06-.06.09-.1.05-.05.09-.11.12-.18a.31.31 0 0 0 .06-.13c.01-.02.03-.04.03-.07l3-11c.09-.3.02-.62-.17-.87zM5 8h7.59l1.7 1.71c.19.18.44.29.71.29h9v2H7c-.45 0-.85.3-.96.74L5 16.53V8z",
          "M0,0H24V24H0Z",
          "M19,13H13v6H11V13H5V11h6V5h2v6h6Z",
          "M6,19a2.006,2.006,0,0,0,2,2h8a2.006,2.006,0,0,0,2-2V7H6ZM19,4H15.5l-1-1h-5l-1,1H5V6H19Z",
          "M3,17.25V21H6.75L17.81,9.94,14.06,6.19ZM20.71,7.04a1,1,0,0,0,0-1.41L18.37,3.29a1,1,0,0,0-1.41,0L15.13,5.12l3.75,3.75,1.83-1.83Z",
          "M16,1H4A2.006,2.006,0,0,0,2,3V17H4V3H16Zm3,4H8A2.006,2.006,0,0,0,6,7V21a2.006,2.006,0,0,0,2,2H19a2.006,2.006,0,0,0,2-2V7A2.006,2.006,0,0,0,19,5Zm0,16H8V7H19Z",
          "M11,18a2,2,0,1,1-2-2A2.006,2.006,0,0,1,11,18ZM9,10a2,2,0,1,0,2,2A2.006,2.006,0,0,0,9,10ZM9,4a2,2,0,1,0,2,2A2.006,2.006,0,0,0,9,4Zm6,4a2,2,0,1,0-2-2A2.006,2.006,0,0,0,15,8Zm0,2a2,2,0,1,0,2,2A2.006,2.006,0,0,0,15,10Zm0,6a2,2,0,1,0,2,2A2.006,2.006,0,0,0,15,16Z",
          "M12,5.83,15.17,9l1.41-1.41L12,3,7.41,7.59,8.83,9Zm0,12.34L8.83,15,7.42,16.41,12,21l4.59-4.59L15.17,15Z",
          "M7.41,18.59,8.83,20,12,16.83,15.17,20l1.41-1.41L12,14ZM16.59,5.41,15.17,4,12,7.17,8.83,4,7.41,5.41,12,10Z"
        ],
        "id": [
          "tree-with-action-bar",
          "add",
          "remove",
          "edit",
          "copy",
          "drag",
          "expand",
          "collapse",
          "tree-with-filter",
          "filter",
          "1"
        ],
        "class": [
          "toolbar"
        ],
        "title": [
          "Add",
          "Remove",
          "Edit",
          "Copy",
          "Drag",
          "Expand",
          "Collapse"
        ],
        "size": [
          "small",
          "large"
        ],
        "color": [
          "primary",
          "#0063a3"
        ],
        "display": [
          "none",
          "block"
        ],
        "placeholder": [
          "Search"
        ],
        "type": [
          "search"
        ],
        "disabled": [
          "true"
        ],
        "items": [
          "false"
        ]
      }
    },
    "tag_name": "modus-content-tree"
  },
  "modus-data-table": {
    "props": [],
    "events": [
      "cellLinkClick",
      "rowDoubleClick",
      "selection",
      "sort",
      "rowActionClick"
    ],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-data-table-storybook-docs.mdx ---\n\nimport { Story } from '@storybook/blocks';\nimport * as DataTable from './modus-data-table.stories.tsx';\n\n# Data Table\n\n<modus-alert type=\"warning\" message=\"This component will be deprecated soon and replaced by a new Table component!\"> Check our open <a href=\"https://github.com/trimble-oss/modus-web-components/issues?q=is%3Aopen+is%3Aissue+label%3Atable+\" target=\"_blank\" rel=\"noopener\">GitHub issues</a>.</modus-alert>\n\n---\n\n[Modus Data Table](https://modus.trimble.com/components/tables/) web components are wrappers around the HTML table element.\nThey organize information in a way that\u2019s easy to scan, so that users can look for patterns and insights.\nThey are referenced using the `<modus-data-table>` custom HTML element.\n\n## Overview\n\n- [Implementation Details](#implementation-details)\n- [Inputs](#inputs)\n- [Sorting](#sorting)\n- [Selection](#selection)\n- [Display](#display)\n- [Row Actions](#row-actions)\n- [Cell Types](#cell-types)\n- [Types](#types)\n- [Properties](#properties)\n- [Events](#events)\n\n---\n\n### Default\n\n<Story of={DataTable.Default} />\n\n```html\n<div style=\"width: 500px\">\n  <modus-data-table />\n</div>\n<script>\n  document.querySelector('modus-data-table').columns = ['Name', 'Age', 'Contacted'];\n  document.querySelector('modus-data-table').data = [\n    ['John', 25, false],\n    ['Jane', 26, false],\n    ['Joe', 27, true],\n  ];\n</script>\n```\n\n### Implementation Details\n\n- The table `columns` property accepts an array of strings, or an array of objects.\n  - Defining the columns with objects allows you to define extra properties on the column/column cells.\n- The table `data` property accepts either a 2D array of primitive types (`string`, `number`, or `boolean`) or an array of objects.\n  - Note: the objects in `data` get their property names mapped to each column `id`.\n- The table needs a unique `id` for each column that maps to each cell in that column. If it is not provided, the table will generate a unique id for each column.\n\n### Inputs\n\nRefer to the **Default** example above to see how to define simple `columns` and `data` in the table.\n\nTo define columns and data in the table _using objects_:\n\n```html\n<modus-data-table />\n<script>\n  document.querySelector('modus-data-table').columns = [\n    { display: 'Name', id: 'name', width: '50%' },\n    { display: 'Age', id: 'age', align: 'right' },\n    { display: 'Contacted', id: 'contacted' },\n  ];\n\n  const john = { name: 'John', age: 25, contacted: false };\n  const jane = { name: 'Jane', age: 26, contacted: false };\n  const joe = { name: 'Joe', age: 27, contacted: true };\n  document.querySelector('modus-data-table').data = [john, jane, joe];\n</script>\n```\n\n### Sorting\n\n- The table uses a tri-state for its sorting:\n  - `none`: no sorting is applied\n  - `asc`: ascending sort\n  - `desc`: descending sort\n- The table sorting options can be set with the optional `sortOptions` property. The property accepts a `ModusDataTableSortOptions` object.\n  - The object defines whether the table can be sorted on header click, and if the sort is done on the client or server-side.\n- If the table is sortable, it will output the `sort` event on header click. This event's detail is a `ModusDataTableSortEvent` object.\n- If the table's `serverSide` sort option is `false`, it will sort the columns on the client-side. Otherwise, it is up to the consumer to update the table's `data` property with the sorted data.\n\n### Selection\n\n- The `TRow` object has two optional properties that are used for selection:\n  - `_id`: The row's unique id. Output in the event detail on row selection.\n  - `_selected`: Whether the row is selected. You can set this to change selection state with code.\n- The `selectionOptions` property accepts a `ModusDataTableSelectionOptions` object.\n  - The options define whether the table rows can be selected, and if the selection uses a checkbox column.\n- When a selection changes, the `selection` event fires detailing the currently selected rows' IDs.\n\n### Display\n\n- The table's display can be configured with the `displayOptions` prop. The property accepts a `ModusDataTableDisplayOptions` object:\n  - `borderless`: Whether the table has a border. Defaults to true.\n  - `cellBorderless`: Whether the table cells have a border. Default to true.\n  - `rowStripe`: Whether the table rows have a stripe. Defaults to false.\n  - `size`: The table's size. Defaults to 'large'.\n\n### Row Actions\n\n- The table's `rowActions` can be set to give each table row a context menu.\n- When a row action is clicked, a `ModusDataTableRowActionClickEvent` is fired with the relevant `actionId`, and `rowId`.\n  - Each row action takes an `_id` (which will be emitted in the event detail), and a `display` object that sets the `text` and optional `icon`.\n    ```ts\n    document.querySelector('modus-data-table').rowActions = [\n      {\n        _id: '0',\n        display: {\n          text: 'Delete',\n          icon: 'delete',\n        },\n      },\n      {\n        _id: '1',\n        display: {\n          text: 'Edit',\n        },\n      },\n    ];\n    ```\n\n### Cell Types\n\n- The Data Table accepts `number`, `string`, `booleans`, `ModusDataTableCellBadge` and `ModusDataTableCellLink` as data.\n  - `ModusDataTableCellBadge` displays a Modus Badge in the center of the cell. You must pass `badge` as the data's `_type` property. This cell type accepts all properties to configure a Modus Badge (see Types below).\n    ```ts\n    const data = [{ badgeColumnId: { _type: 'badge', text: 'Some badge text' } }];\n    ```\n  - `ModusDataTableCellLink` displays a Link in the cell. You must pass `link` as the data's `_type` property, similarly to the badge above. This cell type accepts `display` and `url` (see Types below).\n    ```ts\n    const data = [\n      {\n        linkColumnId: {\n          _type: 'link',\n          display: 'Some link text',\n          url: 'https://www.google.com',\n        },\n      },\n    ];\n    ```\n\n### Types\n\n```ts\ntype TCell = number | string | boolean | ModusDataTableCellBadge | ModusDataTableCellLink;\ntype TRow = {\n  [key: string]: TCell;\n} & {\n  _id?: string;\n  _selected?: boolean;\n};\n\ninterface TColumn {\n  align?: 'left' | 'right';\n  display: string;\n  id?: string;\n  readonly?: boolean;\n  width?: string;\n}\n\ninterface ModusDataTableCellBadge {\n  _type: 'badge'; // Used internally to identify the type of cell. Does not set the badge's type.\n  color?: 'danger' | 'dark' | 'primary' | 'secondary' | 'success' | 'tertiary' | 'warning';\n  text: string;\n  type?: 'counter' | 'default' | 'text';\n}\n\ninterface ModusDataTableCellLink {\n  _type: 'link';\n  display: string;\n  url: string;\n}\n\ninterface ModusDataTableSort {\n  columnId: string;\n  direction: 'asc' | 'desc' | 'none';\n}\n\ninterface ModusDataTableSortEvent extends ModusDataTableSort {}\ninterface ModusDataTableRowActionClickEvent {\n  actionId: string;\n  rowId: string;\n}\n\ninterface ModusDataTableDisplayOptions {\n  animateRowActionsDropdown?: boolean;\n  borderless?: boolean;\n  cellBorderless?: boolean;\n  rowStripe?: boolean;\n  size?: 'small' | 'large';\n}\n\ninterface ModusDataTableRowAction {\n  _id: string;\n  display: {\n    icon?: string;\n    text: string;\n  };\n}\n\ninterface ModusDataTableSelectionOptions {\n  canSelect: boolean;\n  checkboxSelection: boolean;\n}\n\ninterface ModusDataTableSortOptions {\n  canSort: boolean;\n  serverSide: boolean;\n}\n```\n\n### Properties\n\n| Property               | Attribute | Description                                | Type                             | Default                                                                                                         |\n| ---------------------- | --------- | ------------------------------------------ | -------------------------------- | --------------------------------------------------------------------------------------------------------------- |\n| `columns` _(required)_ | --        |                                            | `TColumn[], string[]`            | `undefined`                                                                                                     |\n| `data` _(required)_    | --        |                                            | `TCell[][], TRow[]`              | `undefined`                                                                                                     |\n| `displayOptions`       | --        | Options for data table display.            | `ModusDataTableDisplayOptions`   | `{ animateRowActionsDropdown: false, borderless: true, cellBorderless: true, rowStripe: false, size: 'large' }` |\n| `rowActions`           | --        | Actions that can be performed on each row. | `ModusDataTableRowAction[]`      | `[]`                                                                                                            |\n| `selectionOptions`     | --        | Options for data table item selection.     | `ModusDataTableSelectionOptions` | `{ canSelect: false, checkboxSelection: false, }`                                                               |\n| `sortOptions`          | --        | Options for data table column sort.        | `ModusDataTableSortOptions`      | `{ canSort: false, serverSide: false, }`                                                                        |\n\n### Events\n\n| Event            | Description                                       | Type                                                |\n| ---------------- | ------------------------------------------------- | --------------------------------------------------- |\n| `cellLinkClick`  | An event that fires on cell link click.           | `CustomEvent<ModusDataTableCellLink>`               |\n| `rowActionClick` | An event that fires when a row action is clicked. | `CustomEvent<{ actionId: string; rowId: string; }>` |\n| `rowDoubleClick` | An event that fires on row double click.          | `CustomEvent<string>`                               |\n| `selection`      | An event that fires on selection change.          | `CustomEvent<string[]>`                             |\n| `sort`           | An event that fires on column sort.               | `CustomEvent<ModusDataTableSortEvent>`              |\n",
    "storybook_content": "\n\n--- modus-data-table.stories.tsx ---\n\nimport { html } from 'lit-html';\n// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-data-table-storybook-docs.mdx';\nimport { withActions } from '@storybook/addon-actions/decorator';\n\nexport default {\n  title: 'Components/Data Table',\n  argTypes: {},\n  parameters: {\n    controls: { disable: true, expanded: true, sort: 'alpha' },\n    actions: {\n      handles: ['cellLinkClick', 'rowDoubleClick', 'selection', 'sort', 'rowActionClick'],\n    },\n    docs: {\n      inlineStories: false,\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n    },\n  },\n  decorators: [withActions],\n};\n\nexport const Default = () => html`\n  <div style=\"width: 800px\">\n    <modus-data-table />\n  </div>\n  ${setDataTable()}\n`;\n\nexport const RowActions = () => html`\n  <div style=\"width: 800px\">\n    <modus-data-table />\n  </div>\n  ${setDataTableRowActions()}\n`;\n\n// The <script> tag cannot be used in the MDX file, so we use this method to\n// set the data table data for the default story.\nconst setDataTable = () => {\n  const tag = document.createElement('script');\n  tag.innerHTML = `\n    document.querySelector('modus-data-table').columns = [{ display: 'Name', width: '33%'}, { display: 'Age', width: '33%' }, { display: 'Contacted', width: '33%' }];\n    document.querySelector('modus-data-table').data = [['John', 25, false], ['Jane', 26, false], ['Joe', 27, true]];\n  `;\n\n  return tag;\n};\n\nconst setDataTableRowActions = () => {\n  const tag = document.createElement('script');\n  tag.innerHTML = `\n    document.querySelector('modus-data-table').columns = [\n      { display: 'Name', width: '100px' },\n      { display: 'Age', align: 'right', width: '34px' },\n      { display: 'Status', align: 'center' },\n      { display: 'Email' }\n    ];\n    document.querySelector('modus-data-table').data = [\n      {\n        _id: '0',\n        name: 'Joe',\n        age: 27,\n        status: {\n          _type: 'badge',\n          text: 'Complete'\n        },\n        email: {\n          _type: 'link',\n          display: 'joe@example.com',\n          url: 'mailto:joe@example.com',\n        },\n      },\n      {\n        _id: '1',\n        name: 'Jane',\n        age: 34,\n        status: {\n          _type: 'badge',\n          text: 'Complete'\n        },\n        email: {\n          _type: 'link',\n          display: 'jane@example.com',\n          url: 'mailto:jane@example.com',\n        },\n      },\n      {\n        _id: '2',\n        name: 'William',\n        age: 28,\n        status: {\n          _type: 'badge',\n          text: 'Incomplete',\n          color: 'warning'\n        },\n        email: {\n          _type: 'link',\n          display: 'william@example.com',\n          url: 'mailto:william@example.com',\n        },\n      },\n    ];\n    document.querySelector('modus-data-table').sortOptions = { canSort: true, serverSide: false };\n    document.querySelector('modus-data-table').selectionOptions = { canSelect: true, checkboxSelection: true };\n    document.querySelector('modus-data-table').rowActions = [\n      {\n        _id: '0',\n        display: {\n          text: 'Delete',\n          icon: 'delete'\n        }\n      }\n    ];\n  `;\n\n  return tag;\n};\n",
    "storybook": {
      "examples": [
        "<modus-data-table />",
        "<modus-data-table />",
        "\n  <div style=\"width: 800px\">\n    <modus-data-table />\n  </div>\n  ${setDataTable()}\n",
        "\n  <div style=\"width: 800px\">\n    <modus-data-table />\n  </div>\n  ${setDataTableRowActions()}\n"
      ],
      "variants": [],
      "prop_usage": {
        "style": [
          "width: 800px"
        ]
      }
    },
    "tag_name": "modus-data-table"
  },
  "modus-date-input": {
    "props": [
      {
        "name": "ariaLabel",
        "description": "/** (optional) Regular expression to allow characters while typing the input.\n   */\n  @Prop({ mutable: true }) allowedCharsRegex: RegExp | string;\n\n  /** (optional) The input's aria-label. */",
        "type": "string | null"
      },
      {
        "name": "autoFocusInput",
        "description": "/** (optional) Regular expression to allow characters while typing the input.\n   */\n  @Prop({ mutable: true }) allowedCharsRegex: RegExp | string;\n\n  /** (optional) The input's aria-label. */",
        "type": "boolean"
      },
      {
        "name": "disabled",
        "description": "/** (optional) Regular expression to allow characters while typing the input.\n   */\n  @Prop({ mutable: true }) allowedCharsRegex: RegExp | string;\n\n  /** (optional) The input's aria-label. */",
        "type": "boolean"
      },
      {
        "name": "disableValidation",
        "description": "/** (optional) Regular expression to allow characters while typing the input.\n   */\n  @Prop({ mutable: true }) allowedCharsRegex: RegExp | string;\n\n  /** (optional) The input's aria-label. */",
        "type": "boolean"
      },
      {
        "name": "errorText",
        "description": "/** (optional) Regular expression to allow characters while typing the input.\n   */\n  @Prop({ mutable: true }) allowedCharsRegex: RegExp | string;\n\n  /** (optional) The input's aria-label. */",
        "type": "string"
      },
      {
        "name": "fillerDate",
        "description": "/** (optional) Regular expression to allow characters while typing the input.\n   */\n  @Prop({ mutable: true }) allowedCharsRegex: RegExp | string;\n\n  /** (optional) The input's aria-label. */",
        "type": "string"
      },
      {
        "name": "altFormats",
        "description": "/** (optional) Regular expression to allow characters while typing the input.\n   */\n  @Prop({ mutable: true }) allowedCharsRegex: RegExp | string;\n\n  /** (optional) The input's aria-label. */",
        "type": "string"
      },
      {
        "name": "helperText",
        "description": "/** (optional) Regular expression to allow characters while typing the input.\n   */\n  @Prop({ mutable: true }) allowedCharsRegex: RegExp | string;\n\n  /** (optional) The input's aria-label. */",
        "type": "string"
      },
      {
        "name": "label",
        "description": "/** (optional) Regular expression to allow characters while typing the input.\n   */\n  @Prop({ mutable: true }) allowedCharsRegex: RegExp | string;\n\n  /** (optional) The input's aria-label. */",
        "type": "string"
      },
      {
        "name": "placeholder",
        "description": "/** (optional) Regular expression to allow characters while typing the input.\n   */\n  @Prop({ mutable: true }) allowedCharsRegex: RegExp | string;\n\n  /** (optional) The input's aria-label. */",
        "type": "string"
      },
      {
        "name": "readOnly",
        "description": "/** (optional) Regular expression to allow characters while typing the input.\n   */\n  @Prop({ mutable: true }) allowedCharsRegex: RegExp | string;\n\n  /** (optional) The input's aria-label. */",
        "type": "boolean"
      },
      {
        "name": "required",
        "description": "/** (optional) Regular expression to allow characters while typing the input.\n   */\n  @Prop({ mutable: true }) allowedCharsRegex: RegExp | string;\n\n  /** (optional) The input's aria-label. */",
        "type": "boolean"
      },
      {
        "name": "showCalendarIcon",
        "description": "/** (optional) Regular expression to allow characters while typing the input.\n   */\n  @Prop({ mutable: true }) allowedCharsRegex: RegExp | string;\n\n  /** (optional) The input's aria-label. */",
        "type": "boolean"
      },
      {
        "name": "size",
        "description": "/** (optional) Regular expression to allow characters while typing the input.\n   */\n  @Prop({ mutable: true }) allowedCharsRegex: RegExp | string;\n\n  /** (optional) The input's aria-label. */",
        "type": "'medium' | 'large'"
      },
      {
        "name": "type",
        "description": "/** (optional) Regular expression to allow characters while typing the input.\n   */\n  @Prop({ mutable: true }) allowedCharsRegex: RegExp | string;\n\n  /** (optional) The input's aria-label. */",
        "type": "ModusDateInputType"
      },
      {
        "name": "validText",
        "description": "/** (optional) Regular expression to allow characters while typing the input.\n   */\n  @Prop({ mutable: true }) allowedCharsRegex: RegExp | string;\n\n  /** (optional) The input's aria-label. */",
        "type": "string"
      },
      {
        "name": "min",
        "description": "/** (optional) Regular expression to allow characters while typing the input.\n   */\n  @Prop({ mutable: true }) allowedCharsRegex: RegExp | string;\n\n  /** (optional) The input's aria-label. */",
        "type": "string"
      },
      {
        "name": "max",
        "description": "/** (optional) Regular expression to allow characters while typing the input.\n   */\n  @Prop({ mutable: true }) allowedCharsRegex: RegExp | string;\n\n  /** (optional) The input's aria-label. */",
        "type": "string"
      }
    ],
    "events": [
      "calendarIconClicked",
      "dateInputBlur",
      "valueChange",
      "valueError"
    ],
    "slots": [],
    "default_values": {},
    "documentation": "",
    "storybook_content": "",
    "storybook": {
      "examples": [],
      "variants": [],
      "prop_usage": {}
    },
    "tag_name": "modus-date-input"
  },
  "modus-date-picker": {
    "props": [
      {
        "name": "label",
        "description": "/** (optional) Label for the field. */",
        "type": "string"
      },
      {
        "name": "position",
        "description": "/** (optional) Label for the field. */",
        "type": "Placement | 'auto' | 'auto-start' | 'auto-end'"
      },
      {
        "name": "isDateEnabled",
        "description": "/** (optional) Label for the field. */",
        "type": "(dateIsoString: string)"
      }
    ],
    "events": [],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-date-picker-storybook-docs.mdx ---\n\nimport { Story } from '@storybook/blocks';\nimport * as DatePicker from './modus-date-picker.stories.tsx';\n\n# Date Input\n\n---\n\nModus Date Input web component is a wrapper around native `<input type=\"text\">` element used to type the date. It is referenced using the `<modus-date-input>` custom HTML element.\n\nThis component can be wrapped by a [Modus Date Picker](https://modus.trimble.com/components/web/date-time-picker) which is referenced by `<modus-date-picker>` to pick a date or a date range from the calendar view.\n\n#### Implementation details\n\n- Modus Date Input accepts input in any format following the formatting rules.\n- To use a calendar view for the date selection, Modus Date Input components must be wrapped by a `<modus-date-picker>` and the `type` must be specified. The prop `type` represents whether the date field is a start/end date or simple date (default).\n- A calendar icon appears automatically when a Modus Date Input is wrapped by `<modus-date-picker>` and clicking on the icon opens the calendar view with the current date highlighted.\n- The header of the calendar view displays up and down arrows allowing for navigation to another year. Left and right arrows change the month.\n\n#### Validation\n\nModus Date Input has a default validation which is triggered on a blur event and it can validate for invalid date inputs and invalid date range incase start and end dates are used inside `<modus-date-picker>`.\n\nDefault validation can also be disabled and use the props `errorText`, `invalid` to control the error state.\n\n### Default\n\n<Story of={DatePicker.Default} />\n\n```html\n<modus-date-input\n  helper-text=\"mmm dd, yyyy\"\n  label=\"Single date\"\n  allowed-chars-regex=\"[\\d\\/]\"\n  format=\"mmm dd, yyyy\"\n  value=\"2022-12-22\"></modus-date-input>\n```\n\n### Custom date format\n\nA custom date format can be set using the prop `format` as shown in the example. The displayed date format will differ from the actual `value` because the `value` is always parsed to ISO8601 'yyyy-mm-dd'.\n\nIf you want to support a few alternative date formats then you can set the prop `alt-formats` with a few formats separated by a `|` symbol separator. If you input a valid date for any of the alternative formats then it will be accepted by the component and converted to the main format specified in the `format` prop.\n\n<modus-date-input label=\"Formatted date\"\n  helper-text=\"yyyy-mm\"\n  format=\"yyyy-mm\"\n  alt-formats=\"yyyy mmm|yy.mm\"\n  value=\"2022-12-22\"></modus-date-input>\n\n```html\n<modus-date-input\n  label=\"Formatted date\"\n  helper-text=\"yyyy-mm\"\n  allowed-chars-regex=\"[\\d-]\"\n  format=\"yyyy-mm\"\n  alt-formats=\"yyyy mmm|yy.mm\"\n  value=\"2022-12-22\"></modus-date-input>\n```\n\n### Date Range with picker\n\n<Story of={DatePicker.DateRange} />\n\n```html\n<modus-date-picker label=\"Select date range\">\n  <modus-date-input\n    type=\"start\"\n    label=\"Start\"\n    format=\"dd-mm-yyyy\"\n    helper-text=\"dd-mm-yyyy\"\n    allowed-chars-regex=\"[\\d-]\"\n    show-calendar-icon=\"true\"\n    value=\"2022-12-22\"></modus-date-input>\n\n  <modus-date-input\n    type=\"end\"\n    label=\"End\"\n    format=\"dd-mm-yyyy\"\n    helper-text=\"dd-mm-yyyy\"\n    allowed-chars-regex=\"[\\d-]\"\n    show-calendar-icon=\"true\"\n    value=\"2022-12-22\"></modus-date-input>\n</modus-date-picker>\n```\n\n### Formatting Rules\n\nEach character as shown in the table below can be used for representing the date format and any character can be used as a separator except for those in regular expressions.\n\n| Character | Description                     | Example     |\n| --------- | ------------------------------- | ----------- |\n| `d`       | Date without a leading zero     | 1 - 31      |\n| `dd`      | Date with a leading zero        | 01 - 31     |\n| `m`       | Month without a leading zero    | 1 - 12      |\n| `mm`      | Month with a leading zero       | 01 - 12     |\n| `mmm`     | Three letter month abbreviation | Feb         |\n| `mmmm`    | Full month name                 | February    |\n| `yy`      | Year in two digits              | 00 - 99     |\n| `yyyy`    | Full Year with four digits      | 0000 - 9999 |\n\n### Properties\n\n##### Modus Date Input\n\n| Property            | Attribute            | Description                                                                                                                                                                                                         | Type                           | Default        |\n| ------------------- | -------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------ | -------------- |\n| `allowedCharsRegex` | --                   | (optional) Regular expression to allow characters while typing the input.                                                                                                                                           | `RegExp \\| string`             | `undefined`    |\n| `ariaLabel`         | `aria-label`         | (optional) The input's aria-label.                                                                                                                                                                                  | `string`                       | `undefined`    |\n| `autoFocusInput`    | `auto-focus-input`   | (optional) Sets autofocus on the input.                                                                                                                                                                             | `boolean`                      | `undefined`    |\n| `disableValidation` | `disable-validation` | (optional) Disables default validation for the date input.                                                                                                                                                          | `boolean`                      | `undefined`    |\n| `disabled`          | `disabled`           | (optional) Whether the input is disabled.                                                                                                                                                                           | `boolean`                      | `undefined`    |\n| `errorText`         | `error-text`         | (optional) Custom error text displayed for the input.                                                                                                                                                               | `string`                       | `undefined`    |\n| `fillerDate`        | `filler-date`        | (optional) Filler date is used as fillers for parts not in the display format when constructing a full date string, for 'value'. It must be in the ISO String format YYYY-MM-DD. Default is `{current year}-01-01`. | `string`                       | `undefined`    |\n| `format`            | `format`             | Format string for the date input. Default 'mm/dd/yyyy'. Use 'm','mm' for month, 'd','dd' for date and 'yy','yyyy' for year with any separator that is not a regular expression.                                     | `string`                       | `'mm/dd/yyyy'` |\n| `helperText`        | `helper-text`        | (optional) Custom helper text displayed below the input.                                                                                                                                                            | `any`                          | `undefined`    |\n| `label`             | `label`              | (optional) The input's label.                                                                                                                                                                                       | `string`                       | `undefined`    |\n| `max`               | `max`                | (optional) The maximum date allowed. The date is formatted according to ISO8601 'yyyy-mm-dd'.                                                                                                                       | `string`                       | `undefined`    |\n| `min`               | `min`                | (optional) The minimum date allowed. The date is formatted according to ISO8601 'yyyy-mm-dd'.                                                                                                                       | `string`                       | `undefined`    |\n| `placeholder`       | `placeholder`        | (optional) The input's placeholder text.                                                                                                                                                                            | `string`                       | `undefined`    |\n| `readOnly`          | `read-only`          | (optional) Whether the input's content is read-only                                                                                                                                                                 | `boolean`                      | `undefined`    |\n| `required`          | `required`           | (optional) Whether the input is required.                                                                                                                                                                           | `boolean`                      | `undefined`    |\n| `showCalendarIcon`  | `show-calendar-icon` | (optional) Show a calendar icon. Note: Clicking on this icon will only emit an event `calendarIconClicked`.                                                                                                         | `boolean`                      | `undefined`    |\n| `size`              | `size`               | (optional) The input's size.                                                                                                                                                                                        | `\"large\" \\| \"medium\"`          | `'medium'`     |\n| `type`              | `type`               | (optional) Denotes what type of date and the types are 'start','end','single'. Required when using `modus-date-picker`.                                                                                             | `\"end\" \\| \"single\" \\| \"start\"` | `'single'`     |\n| `validText`         | `valid-text`         | (optional) The input's valid state text.                                                                                                                                                                            | `string`                       | `undefined`    |\n| `value`             | `value`              | (optional) A string representing the date entered in the input. The date is formatted according to ISO8601 'yyyy-mm-dd'. The displayed date format will differ from the 'value'.                                    | `string`                       | `undefined`    |\n\n##### Modus Date Picker\n\n| Property   | Attribute  | Description                                    | Type                                                                                                                                                                                                        | Default        |\n| ---------- | ---------- | ---------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------- |\n| `label`    | `label`    | (optional) Label for the field.                | `string`                                                                                                                                                                                                    | `undefined`    |\n| `position` | `position` | (optional) The position of the calendar popup. | `\"auto\" \\| \"auto-start\" \\| \"auto-end\" \\| \"top-start\" \\| \"top-end\" \\| \"bottom-start\" \\| \"bottom-end\" \\| \"right-start\" \\| \"right-end\" \\| \"left-start\" \\| \"left-end\" \\| \"top\" \\| \"left\" \\| \"bottom\" \\| \"right\" | `bottom-start` |\n\n### DOM Events\n\n| Event                 | Description                                      | Type                                      |\n| --------------------- | ------------------------------------------------ | ----------------------------------------- |\n| `calendarIconClicked` | An event that fires on calendar icon click.      | `CustomEvent<ModusDateInputEventDetails>` |\n| `dateInputBlur`       | An event that fires on input value out of focus. | `CustomEvent<ModusDateInputEventDetails>` |\n| `valueChange`         | An event that fires on input value change.       | `CustomEvent<ModusDateInputEventDetails>` |\n\n### Methods\n\n##### Modus Date Input\n\n| Method name  | Description        | Parameter | Return          |\n| ------------ | ------------------ | --------- | --------------- |\n| `focusInput` | Focus the input    |           | `Promise<void>` |\n| `validate`   | Validate the input |           | `Promise<void>` |\n\n### Accessibility\n\n- Every element in Modus Date Input is accessible through keyboard. Use <kbd>Tab</kbd> key and `Shift + Tab` key to interact with the Date Input field and the calendar view.\n- Date Input gets an `aria-label` provided by the `aria-label` property input.\n- It is recommended to pass `aria-label` when there is no label used so the input is accessible to screen readers.\n- Date Input gets an `aria-disabled` provided by the `disabled` property input.\n- Date Input gets an `aria-placeholder` provided by the `placeholder` property input.\n- Date Input gets an `aria-invalid` from `invalid` property input.\n- Date Input gets an `aria-readonly` from `readonly` property input.\n- Date Input gets an `aria-required` from `required` property input.\n",
    "storybook_content": "\n\n--- modus-date-picker.stories.tsx ---\n\nimport { html } from 'lit-html';\n// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-date-picker-storybook-docs.mdx';\nimport { withActions } from '@storybook/addon-actions/decorator';\n\nexport default {\n  title: 'User Inputs/Date Picker',\n  argTypes: {\n    allowedCharsRegex: {\n      name: 'allowed-chars-regex',\n      description: 'Regular expression to allow characters while typing the input.',\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    altFormats: {\n      name: 'alt-formats',\n      description: 'Alternative formats string for the date input split by | separator.',\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    ariaLabel: {\n      name: 'aria-label',\n      description: \"The input's aria-label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    autoFocusInput: {\n      name: 'auto-focus-input',\n      description: 'Sets autofocus for the input',\n      table: {\n        type: { summary: 'boolean' },\n      },\n    },\n    position: {\n      name: 'position',\n      options: [\n        'auto',\n        'auto-start',\n        'auto-end',\n        'top-start',\n        'top-end',\n        'bottom-start',\n        'bottom-end',\n        'right-start',\n        'right-end',\n        'left-start',\n        'left-end',\n        'top',\n        'left',\n        'bottom',\n        'right',\n      ],\n      type: 'select',\n      description: 'The placement of the calendar popup',\n      table: {\n        defaultValue: { summary: 'bottom-start' },\n        type: {\n          summary:\n            \"'auto' | 'auto-start' | 'auto-end' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end' | 'top' | 'left' | 'bottom' | 'right'\",\n        },\n      },\n    },\n    disabled: {\n      description: 'Whether the date input is disabled',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    disableValidation: {\n      name: 'disable-validation',\n      description: 'Disables default validation for the date input',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    errorText: {\n      name: 'error-text',\n      description: \"The input's error text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    format: {\n      name: 'format',\n      description: \"Format string for the date input. Default 'mm/dd/yyyy'\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    helperText: {\n      name: 'helper-text',\n      description: \"The input's helper text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    label: {\n      description: \"The input's label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    max: {\n      description: \"The maximum date allowed. The input string should be ISO8601 'yyyy-mm-dd'.\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    min: {\n      description: \"The minimum date allowed. The input string should be ISO8601 'yyyy-mm-dd'.\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    placeholder: {\n      description: \"The input's placeholder text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    readOnly: {\n      name: 'read-only',\n      description: 'Whether the input is read-only',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    required: {\n      description: 'Whether the input is required',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    showCalendarIcon: {\n      name: 'show-calendar-icon',\n      description: 'Show a calendar icon.',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    size: {\n      options: ['medium', 'large'],\n      type: 'select',\n      description: 'The size of the input',\n      table: {\n        defaultValue: { summary: \"'medium'\" },\n        type: { summary: \"'medium' | 'large'\" },\n      },\n    },\n    validText: {\n      name: 'valid-text',\n      description: \"The input's valid text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    value: {\n      description: \"A string representing the date entered in the input. The input string should be ISO8601 'yyyy-mm-dd'.\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n  },\n  parameters: {\n    actions: {\n      handles: ['valueChange', 'dateInputBlur', 'calendarIconClicked'],\n    },\n    controls: { expanded: true, sort: 'requiredFirst' },\n    docs: {\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n    },\n  },\n  decorators: [withActions],\n};\n\nconst defaultArgs = {\n  ariaLabel: '',\n  allowedCharsRegex: '[\\\\d\\\\/]',\n  altFormats: '',\n  autoFocusInput: true,\n  disableValidation: false,\n  disabled: false,\n  errorText: '',\n  format: 'mm/dd/yyyy',\n  helperText: 'mm/dd/yyyy',\n  label: 'Date',\n  min: '',\n  max: '',\n  placeholder: '',\n  readOnly: false,\n  required: false,\n  showCalendarIcon: false,\n  size: 'medium',\n  validText: '',\n  value: '2022-12-22',\n};\n\nconst DefaultTemplate = ({\n  ariaLabel,\n  allowedCharsRegex,\n  altFormats,\n  autoFocusInput,\n  disableValidation,\n  disabled,\n  errorText,\n  format,\n  helperText,\n  label,\n  min,\n  max,\n  placeholder,\n  readOnly,\n  required,\n  showCalendarIcon,\n  size,\n  validText,\n  value,\n}) => html`\n  <modus-date-input\n    allowed-chars-regex=${allowedCharsRegex}\n    alt-formats=${altFormats}\n    aria-label=${ariaLabel}\n    auto-focus-input=${autoFocusInput}\n    disable-validation=${disableValidation}\n    ?disabled=${disabled}\n    error-text=${errorText}\n    format=${format}\n    helper-text=${helperText}\n    label=${label}\n    min=${min}\n    max=${max}\n    placeholder=${placeholder}\n    read-only=${readOnly}\n    ?required=${required}\n    size=${size}\n    show-calendar-icon=${showCalendarIcon}\n    valid-text=${validText}\n    value=${value}></modus-date-input>\n`;\n\nexport const Default = DefaultTemplate.bind({});\nDefault.args = {\n  ...defaultArgs,\n  format: 'mmm dd, yyyy',\n  allowedCharsRegex: '.',\n  helperText: 'mmm dd, yyyy',\n  ...{ label: 'Single Date' },\n};\n\nconst DateRangeTemplate = ({\n  ariaLabel,\n  allowedCharsRegex,\n  altFormats,\n  autoFocusInput,\n  disableValidation,\n  disabled,\n  errorText,\n  format,\n  min,\n  position,\n  max,\n  helperText,\n  placeholder,\n  readOnly,\n  required,\n  showCalendarIcon,\n  size,\n  validText,\n  value,\n}) => html`\n  <modus-date-picker label=\"Select date range\" position=${position}>\n    <modus-date-input\n      allowed-chars-regex=${allowedCharsRegex}\n      alt-formats=${altFormats}\n      aria-label=${ariaLabel}\n      auto-focus-input=${autoFocusInput}\n      disable-validation=${disableValidation}\n      ?disabled=${disabled}\n      error-text=${errorText}\n      format=${format}\n      min=${min}\n      max=${max}\n      helper-text=${helperText}\n      type=\"start\"\n      label=\"Start\"\n      placeholder=${placeholder}\n      read-only=${readOnly}\n      ?required=${required}\n      size=${size}\n      show-calendar-icon=${showCalendarIcon}\n      valid-text=${validText}\n      value=${value}></modus-date-input>\n\n    <modus-date-input\n      allowed-chars-regex=${allowedCharsRegex}\n      alt-formats=${altFormats}\n      aria-label=${ariaLabel}\n      auto-focus-input=${autoFocusInput}\n      disable-validation=${disableValidation}\n      ?disabled=${disabled}\n      error-text=${errorText}\n      format=${format}\n      min=${min}\n      max=${max}\n      helper-text=${helperText}\n      type=\"end\"\n      label=\"End\"\n      placeholder=${placeholder}\n      read-only=${readOnly}\n      ?required=${required}\n      size=${size}\n      show-calendar-icon=${showCalendarIcon}\n      valid-text=${validText}\n      value=${value}></modus-date-input>\n  </modus-date-picker>\n`;\nexport const DateRange = DateRangeTemplate.bind({});\nDateRange.args = {\n  ...defaultArgs,\n  ...{\n    showCalendarIcon: true,\n    format: 'dd-mm-yyyy',\n    helperText: 'dd-mm-yyyy',\n    allowedCharsRegex: '[\\\\d-]',\n  },\n};\n\nconst DefaultWithPickerTemplate = ({\n  ariaLabel,\n  allowedCharsRegex,\n  altFormats,\n  autoFocusInput,\n  position,\n  disableValidation,\n  disabled,\n  errorText,\n  format,\n  helperText,\n  label,\n  min,\n  max,\n  placeholder,\n  readOnly,\n  required,\n  showCalendarIcon,\n  size,\n  validText,\n  value,\n  isDateEnabled,\n}) => {\n  setTimeout(() => {\n    isDateEnabledLoading = false;\n  }, 4000);\n  return html`\n    <modus-date-picker .isDateEnabled=${isDateEnabled} position=${position}>\n      <modus-date-input\n        allowed-chars-regex=${allowedCharsRegex}\n        aria-label=${ariaLabel}\n        alt-formats=${altFormats}\n        auto-focus-input=${autoFocusInput}\n        disable-validation=${disableValidation}\n        ?disabled=${disabled}\n        error-text=${errorText}\n        format=${format}\n        helper-text=${helperText}\n        label=${label}\n        min=${min}\n        max=${max}\n        placeholder=${placeholder}\n        read-only=${readOnly}\n        ?required=${required}\n        size=${size}\n        show-calendar-icon=${showCalendarIcon}\n        valid-text=${validText}\n        value=${value}></modus-date-input>\n    </modus-date-picker>\n  `;\n};\n\nexport const DefaultWithPicker = DefaultWithPickerTemplate.bind({});\n// Uncomment and pass in as isDateEnabled below to test isDateEnabled functionality\n// const isWeekend = (isoString: string) => {\n//   const date = new Date(isoString);\n//   const isWeekend  = date.getDay() === 0 || date.getDay() === 6;\n//   return isWeekend;\n// }\n\nDefaultWithPicker.args = {\n  ...defaultArgs,\n  position: 'bottom-start',\n  showCalendarIcon: true,\n  min: '2022-12-02',\n  max: '2022-12-30',\n  format: 'mmm dd, yyyy',\n  allowedCharsRegex: '.',\n  helperText: 'mmm dd, yyyy',\n  label: 'Single Date',\n};\n",
    "storybook": {
      "examples": [
        "<modus-date-input\n    allowed-chars-regex=${allowedCharsRegex}\n    alt-formats=${altFormats}\n    aria-label=${ariaLabel}\n    auto-focus-input=${autoFocusInput}\n    disable-validation=${disableValidation}\n    ?disabled=${disabled}\n    error-text=${errorText}\n    format=${format}\n    helper-text=${helperText}\n    label=${label}\n    min=${min}\n    max=${max}\n    placeholder=${placeholder}\n    read-only=${readOnly}\n    ?required=${required}\n    size=${size}\n    show-calendar-icon=${showCalendarIcon}\n    valid-text=${validText}\n    value=${value}></modus-date-input>",
        "<modus-date-input\n      allowed-chars-regex=${allowedCharsRegex}\n      alt-formats=${altFormats}\n      aria-label=${ariaLabel}\n      auto-focus-input=${autoFocusInput}\n      disable-validation=${disableValidation}\n      ?disabled=${disabled}\n      error-text=${errorText}\n      format=${format}\n      min=${min}\n      max=${max}\n      helper-text=${helperText}\n      type=\"start\"\n      label=\"Start\"\n      placeholder=${placeholder}\n      read-only=${readOnly}\n      ?required=${required}\n      size=${size}\n      show-calendar-icon=${showCalendarIcon}\n      valid-text=${validText}\n      value=${value}></modus-date-input>",
        "<modus-date-input\n      allowed-chars-regex=${allowedCharsRegex}\n      alt-formats=${altFormats}\n      aria-label=${ariaLabel}\n      auto-focus-input=${autoFocusInput}\n      disable-validation=${disableValidation}\n      ?disabled=${disabled}\n      error-text=${errorText}\n      format=${format}\n      min=${min}\n      max=${max}\n      helper-text=${helperText}\n      type=\"end\"\n      label=\"End\"\n      placeholder=${placeholder}\n      read-only=${readOnly}\n      ?required=${required}\n      size=${size}\n      show-calendar-icon=${showCalendarIcon}\n      valid-text=${validText}\n      value=${value}></modus-date-input>",
        "<modus-date-input\n        allowed-chars-regex=${allowedCharsRegex}\n        aria-label=${ariaLabel}\n        alt-formats=${altFormats}\n        auto-focus-input=${autoFocusInput}\n        disable-validation=${disableValidation}\n        ?disabled=${disabled}\n        error-text=${errorText}\n        format=${format}\n        helper-text=${helperText}\n        label=${label}\n        min=${min}\n        max=${max}\n        placeholder=${placeholder}\n        read-only=${readOnly}\n        ?required=${required}\n        size=${size}\n        show-calendar-icon=${showCalendarIcon}\n        valid-text=${validText}\n        value=${value}></modus-date-input>",
        "\n  <modus-date-input\n    allowed-chars-regex=${allowedCharsRegex}\n    alt-formats=${altFormats}\n    aria-label=${ariaLabel}\n    auto-focus-input=${autoFocusInput}\n    disable-validation=${disableValidation}\n    ?disabled=${disabled}\n    error-text=${errorText}\n    format=${format}\n    helper-text=${helperText}\n    label=${label}\n    min=${min}\n    max=${max}\n    placeholder=${placeholder}\n    read-only=${readOnly}\n    ?required=${required}\n    size=${size}\n    show-calendar-icon=${showCalendarIcon}\n    valid-text=${validText}\n    value=${value}></modus-date-input>\n"
      ],
      "variants": [],
      "prop_usage": {
        "label": [
          "Select date range",
          "Start",
          "End"
        ],
        "type": [
          "start",
          "end"
        ]
      }
    },
    "tag_name": "modus-date-picker"
  },
  "modus-dropdown": {
    "props": [
      {
        "name": "ariaLabel",
        "description": "/** Reference to host HTML element. */\n  @Element() el: HTMLElement;\n\n  /** Whether to apply list opening animation. */",
        "type": "string | null"
      },
      {
        "name": "customPlacement",
        "description": "/** Reference to host HTML element. */\n  @Element() el: HTMLElement;\n\n  /** Whether to apply list opening animation. */",
        "type": "{\n    top?: number"
      },
      {
        "name": "disabled",
        "description": "/** Reference to host HTML element. */\n  @Element() el: HTMLElement;\n\n  /** Whether to apply list opening animation. */",
        "type": "boolean"
      },
      {
        "name": "placement",
        "description": "/** Reference to host HTML element. */\n  @Element() el: HTMLElement;\n\n  /** Whether to apply list opening animation. */",
        "type": "'top' | 'right' | 'bottom' | 'left'"
      },
      {
        "name": "toggleElementId",
        "description": "/** Reference to host HTML element. */\n  @Element() el: HTMLElement;\n\n  /** Whether to apply list opening animation. */",
        "type": "string"
      }
    ],
    "events": [
      "dropdownClose"
    ],
    "slots": [
      "dropdownToggle",
      "dropdownList"
    ],
    "default_values": {},
    "documentation": "\n\n--- modus-dropdown-storybook-docs.mdx ---\n\n# Dropdown\n\n---\n\n[Modus Dropdown](https://modus.trimble.com/components/web/dropdowns/) web components are wrappers around 2 elements rendered in HTML slot elements. The dropdown links a toggle element to a list element. Clicking the toggle element shows/hides the list element. While clicking the list element or anywhere else on the page hides the list element. They are referenced using the `<modus-dropdown>` custom HTML element.\n\n#### Implementation Details\n\n- The toggle-element-id property is required and must match the id of the element you expect to toggle the list.\n- 2 slots are provided named 'dropdownToggle' and 'dropdownList'.\n- The dropdownList slot was built to work with the `<modus-list>` and `<modus-list-item>` elements. The item size property should be set to 'condensed'.\n- The list will show 5 condensed items before adding a vertical scroll.\n\n### Default\n\n<modus-dropdown toggle-element-id=\"toggleElement\">\n  <modus-button id=\"toggleElement\" slot=\"dropdownToggle\" show-caret=\"true\">\n    Dropdown\n  </modus-button>\n  <modus-list slot=\"dropdownList\">\n    <modus-list-item size=\"condensed\" borderless>\n      Item 1\n    </modus-list-item>\n    <modus-list-item size=\"condensed\" borderless>\n      Item 2\n    </modus-list-item>\n    <modus-list-item size=\"condensed\" borderless>\n      Item 3\n    </modus-list-item>\n  </modus-list>\n</modus-dropdown>\n\n```html\n<modus-dropdown toggle-element-id=\"toggleElement\">\n  <modus-button id=\"toggleElement\" slot=\"dropdownToggle\" show-caret=\"true\">Dropdown</modus-button>\n  <modus-list slot=\"dropdownList\">\n    <modus-list-item size=\"condensed\" borderless>Item 1</modus-list-item>\n    <modus-list-item size=\"condensed\" borderless>Item 2</modus-list-item>\n    <modus-list-item size=\"condensed\" borderless>Item 3</modus-list-item>\n  </modus-list>\n</modus-dropdown>\n```\n\n### Properties\n\n| Property                 | Attribute                   | Description                                                                                      | Type                                                                | Default     |\n| ------------------------ | --------------------------- | ------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------- | ----------- |\n| `animateList`            | `animate-list`              | Whether to apply list opening animation.                                                         | `boolean`                                                           | `false`     |\n| `ariaLabel`              | `aria-label`                | (optional) The dropdown's `aria-label`. (Not recommended)                                        | `string`                                                            | `undefined` |\n| `borderRadius`           | `border-radius`             | (optional) The border radius of the dropdown list.                                               | `string`                                                            | `'0'`       |\n| `customPlacement`        | --                          | (optional) Determines custom dropdown placement offset.                                          | `{ top?: number; right?: number; bottom?: number; left?: number; }` | `undefined` |\n| `disabled`               | `disabled`                  | (optional) Disables the dropdown.                                                                | `boolean`                                                           | `undefined` |\n| `disableCloseOnSelect`   | `disable-close-on-select`   | (optional) Prevents the dropdown from closing when an option is selected.                        | `boolean`                                                           | `false`     |\n| `placement`              | `placement`                 | (optional) The placement of the dropdown in related to the toggleElement.                        | `\"bottom\", \"left\", \"right\", \"top\"`                                  | `'bottom'`  |\n| `showDropdownListBorder` | `show-dropdown-list-border` | (optional) Whether to show the dropdown list's border.                                           | `boolean`                                                           | `true`      |\n| `toggleElementId`        | `toggle-element-id`         | (required) The element id that the list renders near and that triggers the toggling of the list. | `string`                                                            | `undefined` |\n\n### Events\n\n| Event           | Description                            | Type               |\n| --------------- | -------------------------------------- | ------------------ |\n| `dropdownClose` | An event that fires on dropdown close. | `CustomEvent<any>` |\n\n### Accessibility\n\n- When the Dropdown Toggle has focus, <kbd>Enter</kbd> toggles the dropdown.\n",
    "storybook_content": "\n\n--- modus-dropdown.stories.tsx ---\n\n// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-dropdown-storybook-docs.mdx';\nimport { html } from 'lit-html';\nimport { withActions } from '@storybook/addon-actions/decorator';\n\nexport default {\n  title: 'Components/Dropdown',\n  argTypes: {\n    animateList: {\n      name: 'animate-list',\n      description: 'Whether the dropdown list should animate',\n      table: {\n        type: { summary: 'boolean' },\n        defaultValue: { summary: false },\n      },\n    },\n    ariaLabel: {\n      name: 'aria-label',\n      description: \"The dropdowns's aria-label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    borderRadius: {\n      name: 'border-radius',\n      description: 'The border radius of the dropdown list.',\n      table: {\n        type: { summary: 'string' },\n      },\n      type: { required: false },\n    },\n    customPlacement: {\n      name: 'custom-placement',\n      description: 'Determines custom dropdown placement offset.',\n      table: {\n        type: { summary: '{ top?: number; right?: number; bottom?: number; left?: number; }' },\n      },\n      type: { required: false },\n    },\n    disabled: {\n      name: 'disabled',\n      description: 'Whether the dropdown is disabled',\n      table: {\n        type: { summary: 'boolean' },\n        defaultValue: { summary: false },\n      },\n    },\n    disableCloseOnSelect: {\n      name: 'disable-close-on-select',\n      description: 'Prevents the dropdown from closing when an option is selected.',\n      table: {\n        type: { summary: 'boolean' },\n        defaultValue: { summary: false },\n      },\n    },\n    placement: {\n      name: 'placement',\n      description: 'The placement of the dropdown in relation to the toggleElement.',\n      options: ['top', 'right', 'bottom', 'left'],\n      type: 'select',\n      table: {\n        type: { summary: `'top' | 'right' | 'bottom' | 'left'` },\n\n        defaultValue: { summary: 'bottom' },\n      },\n    },\n    showDropdownListBorder: {\n      name: 'show-dropdown-list-border',\n      description: 'Whether to show the dropdown list border',\n      table: {\n        type: {\n          summary: 'boolean',\n        },\n        defaultValue: { summary: true },\n      },\n    },\n  },\n  parameters: {\n    actions: {\n      handles: ['dropdownClose'],\n    },\n    docs: {\n      page: docs,\n    },\n    controls: { expanded: true, sort: 'requiredFirst' },\n    options: {\n      isToolshown: true,\n    },\n  },\n  decorators: [withActions],\n};\n\nconst DefaultTemplate = ({\n  animateList,\n  ariaLabel,\n  borderRadius,\n  customPlacement,\n  disableCloseOnSelect,\n  disabled,\n  placement,\n  showDropdownListBorder,\n}) => html`\n  <modus-dropdown\n    animate-list=${animateList}\n    aria-label=${ariaLabel}\n    border-radius=${borderRadius}\n    disabled=${disabled}\n    disable-close-on-select=${disableCloseOnSelect}\n    placement=${placement}\n    show-dropdown-list-border=${showDropdownListBorder}\n    toggle-element-id=\"toggleElement\">\n    <modus-button id=\"toggleElement\" slot=\"dropdownToggle\" show-caret=\"true\">Dropdown</modus-button>\n    <modus-list slot=\"dropdownList\">\n      <modus-list-item size=\"condensed\" borderless>Item 1</modus-list-item>\n      <modus-list-item size=\"condensed\" borderless>Item 2</modus-list-item>\n      <modus-list-item size=\"condensed\" borderless>Item 3</modus-list-item>\n    </modus-list>\n  </modus-dropdown>\n  ${initializeCustomPlacement(customPlacement)}\n`;\nexport const Default = DefaultTemplate.bind({});\nDefault.args = {\n  animateList: false,\n  ariaLabel: '',\n  borderRadius: '0',\n  customPlacement: { top: 0, right: 0, bottom: 0, left: 0 },\n  disabled: false,\n  disableCloseOnSelect: false,\n  placement: 'bottom',\n  showDropdownListBorder: true,\n};\n\nconst WithManyItemsTemplate = ({\n  animateList,\n  ariaLabel,\n  borderRadius,\n  customPlacement,\n  disabled,\n  disableCloseOnSelect,\n  placement,\n  showDropdownListBorder,\n}) => html`\n  <modus-dropdown\n    animate-list=${animateList}\n    aria-label=${ariaLabel}\n    border-radius=${borderRadius}\n    disabled=${disabled}\n    disable-close-on-select=${disableCloseOnSelect}\n    placement=${placement}\n    show-dropdown-list-border=${showDropdownListBorder}\n    toggle-element-id=\"toggleElement\">\n    <modus-button id=\"toggleElement\" slot=\"dropdownToggle\" show-caret=\"true\">Dropdown</modus-button>\n    <modus-list slot=\"dropdownList\">\n      <modus-list-item size=\"condensed\" borderless>Item 1</modus-list-item>\n      <modus-list-item size=\"condensed\" borderless>Item 2</modus-list-item>\n      <modus-list-item size=\"condensed\" borderless>Item 3</modus-list-item>\n      <modus-list-item size=\"condensed\" borderless>Item 4</modus-list-item>\n      <modus-list-item size=\"condensed\" borderless>Item 5</modus-list-item>\n      <modus-list-item size=\"condensed\" borderless>Item 6</modus-list-item>\n      <modus-list-item size=\"condensed\" borderless>Item 7</modus-list-item>\n      <modus-list-item size=\"condensed\" borderless>Item 8</modus-list-item>\n      <modus-list-item size=\"condensed\" borderless>Item 9</modus-list-item>\n      <modus-list-item size=\"condensed\" borderless>Item 10</modus-list-item>\n    </modus-list>\n  </modus-dropdown>\n  ${initializeCustomPlacement(customPlacement)}\n`;\nexport const WithManyItems = WithManyItemsTemplate.bind({});\nWithManyItems.args = {\n  animateList: false,\n  ariaLabel: '',\n  borderRadius: '0',\n  customPlacement: { top: 0, right: 0, bottom: 0, left: 0 },\n  disabled: false,\n  disableCloseOnSelect: false,\n  placement: 'bottom',\n  showDropdownListBorder: true,\n};\n\nfunction initializeCustomPlacement(customPlacement) {\n  const tag = document.createElement('script');\n  tag.innerHTML = `\n  var modusDropdown = document.querySelector('modus-dropdown');\n  modusDropdown.customPlacement = ${JSON.stringify(customPlacement)};\n  `;\n  return tag;\n}\n",
    "storybook": {
      "examples": [
        "<modus-button id=\"toggleElement\" slot=\"dropdownToggle\" show-caret=\"true\">Dropdown</modus-button>",
        "<modus-list-item size=\"condensed\" borderless>Item 1</modus-list-item>",
        "<modus-list-item size=\"condensed\" borderless>Item 2</modus-list-item>",
        "<modus-list-item size=\"condensed\" borderless>Item 3</modus-list-item>",
        "<modus-button id=\"toggleElement\" slot=\"dropdownToggle\" show-caret=\"true\">Dropdown</modus-button>"
      ],
      "variants": [],
      "prop_usage": {
        "id": [
          "toggleElement"
        ],
        "slot": [
          "dropdownToggle",
          "dropdownList"
        ],
        "caret": [
          "true"
        ],
        "size": [
          "condensed"
        ]
      }
    },
    "tag_name": "modus-dropdown"
  },
  "modus-file-dropzone": {
    "props": [
      {
        "name": "acceptFileTypes",
        "description": "/** (optional) The dropzone's accepted file types */",
        "type": "string"
      },
      {
        "name": "ariaLabel",
        "description": "/** (optional) The dropzone's accepted file types */",
        "type": "string | null"
      },
      {
        "name": "description",
        "description": "/** (optional) The dropzone's accepted file types */",
        "type": "string"
      },
      {
        "name": "dropzoneHeight",
        "description": "/** (optional) The dropzone's accepted file types */",
        "type": "string"
      },
      {
        "name": "dropzoneWidth",
        "description": "/** (optional) The dropzone's accepted file types */",
        "type": "string"
      },
      {
        "name": "label",
        "description": "/** (optional) The dropzone's accepted file types */",
        "type": "string"
      },
      {
        "name": "maxFileCount",
        "description": "/** (optional) The dropzone's accepted file types */",
        "type": "number"
      },
      {
        "name": "maxFileNameLength",
        "description": "/** (optional) The dropzone's accepted file types */",
        "type": "number"
      },
      {
        "name": "maxTotalFileSizeBytes",
        "description": "/** (optional) The dropzone's accepted file types */",
        "type": "number"
      }
    ],
    "events": [
      "files"
    ],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-file-dropzone-storybook-docs.mdx ---\n\nimport { Anchor } from '@storybook/addon-docs';\n\n# File Dropzone\n\n---\n\nThe [Modus File Dropzone](https://modus.trimble.com/components/file-upload-dropzone/) web component allows users to upload content from their computer or device into the application by dragging a file (or files) into a target zone.\nThey are referenced using the `<modus-file-dropzone>` tag.\n\n#### Implementation Details\n\n- The File Dropzone component provides the consumer a styled file picker. The dropzone does not provide functionality outside of selecting and holding files. This allows the consumer to use the component in a variety of scenarios, displaying and adding files how they'd like.\n- There are multiple component methods available: `addFile`, `getError`, `getFiles`, and `removeFile`. Since the component does not provide interaction outside of file selecting, the consumer can use these to control the dropzone in code.\n- The `files` event fires when a file has been added or removed. It contains the file(s) along with the current error value. These values can be accessed by array deconstruction respectively on the `event.detail`.\n  - If the error value returned is `null`, there is not an error. The possible error values are: `'maxFileCount'`, `'maxFileNameLength'`, and `'maxTotalFileSize'`.\n- When error state is triggered reset button will be displayed to clear the error state.\n  - The reset button will clear the error state and remove all files from the dropzone.\n- The `accept-file-types` property allows you to define the file types that are allowed to be uploaded in the dropzone.\n  - You can specify file types using common MIME types (e.g., `image/*` for any image). You can also specify multiple types by separating them with commas.\n  - For detailed information on valid file type specifiers, see the [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/accept#unique_file_type_specifiers).\n\n<Anchor storyId=\"components-file-dropzone--default\" />\n\n### Default\n\n<modus-file-dropzone\n  aria-Label=\"dropzone\"\n  description=\"File dropzone description\"\n  dropzone-Height=\"175px\"\n  dropzone-Width=\"400px\"\n  label=\"Dropzone Label\"\n  multiple=\"false\">\n</modus-file-dropzone>\n\n```html\n<modus-file-dropzone\n  aria-Label=\"dropzone\"\n  description=\"File dropzone description\"\n  dropzone-Height=\"175px\"\n  dropzone-Width=\"400px\"\n  label=\"Dropzone Label\"\n  multiple=\"false\">\n</modus-file-dropzone>\n\n<script>\n  document.querySelector('modus-file-dropzone').addEventListener('files', (event) => {\n    const [files, error] = event.detail;\n    console.log(files);\n    console.log(error);\n  });\n</script>\n```\n\n## Properties\n\n| Property                      | Attribute                        | Description                                                                   | Type      | Default                                  |\n| ----------------------------- | -------------------------------- | ----------------------------------------------------------------------------- | --------- | ---------------------------------------- |\n| `acceptfiletypes`             | `accept-file-types`              | (optional) The dropzone's accepted file types.                                | `string`  | `undefined`                              |\n| `ariaLabel`                   | `aria-label`                     | (optional) The dropzone's aria-label.                                         | `string`  | `undefined`                              |\n| `disabled`                    | `disabled`                       | (optional) Disables the dropzone.                                             | `boolean` | `undefined`                              |\n| `description`                 | `description`                    | (optional) The dropzone's description text.                                   | `string`  | `undefined`                              |\n| `dropzoneHeight`              | `dropzone-height`                | (optional) The dropzone's height.                                             | `string`  | `undefined`                              |\n| `dropzoneWidth`               | `dropzone-width`                 | (optional) The dropzone's width.                                              | `string`  | `undefined`                              |\n| `fileDraggedOverInstructions` | `file-dragged-over-instructions` | (optional) The dropzone's instruction text when a file is being dragged over. | `string`  | `'Drag files here.'`                     |\n| `includeStateIcon`            | `include-state-icon`             | (optional) Whether to include the upload icon.                                | `boolean` | `true`                                   |\n| `instructions`                | `instructions`                   | (optional) The dropzone's instruction text.                                   | `string`  | `'Drag files here or browse to upload.'` |\n| `label`                       | `label`                          | (optional) The dropzone's label text.                                         | `string`  | `undefined`                              |\n| `maxFileCount`                | `max-file-count`                 | (optional) The dropzone's max file count.                                     | `number`  | `undefined`                              |\n| `maxFileNameLength`           | `max-file-name-length`           | (optional) The dropzone's max file name length of each file.                  | `number`  | `undefined`                              |\n| `maxTotalFileSizeBytes`       | `max-total-file-size-bytes`      | (optional) The dropzone's max total file size.                                | `number`  | `undefined`                              |\n| `multiple`                    | `multiple`                       | (optional) Whether multiple files can be uploaded.                            | `boolean` | `true`                                   |\n\n## Events\n\n| Event   | Description                                                                                                                          | Type                            |\n| ------- | ------------------------------------------------------------------------------------------------------------------------------------ | ------------------------------- |\n| `files` | An event that fires when files have been added or removed, regardless of whether they're valid. Returns the files and current error. | `CustomEvent<[File[], string]>` |\n\n## Methods\n\n| Method name  | Description                     | Parameter          | Return                  |\n| ------------ | ------------------------------- | ------------------ | ----------------------- |\n| `addFile`    | Add a file to the dropzone      | `file: File`       | `Promise<void>`         |\n| `getError`   | Get the dropzone's error        |                    | `Promise<string\\|null>` |\n| `getFiles`   | Get the dropzone's files        |                    | `Promise<File[]>`       |\n| `removeFile` | Remove a file from the dropzone | `fileName: string` | `Promise<void>`         |\n\n### Accessibility\n\n- File Dropzone has `role` of `button`.\n- When File Dropzone is focused, clicking <kbd>Enter</kbd> opens the file picker.\n",
    "storybook_content": "\n\n--- modus-file-dropzone.stories.tsx ---\n\nimport { html } from 'lit-html';\n// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-file-dropzone-storybook-docs.mdx';\nimport { withActions } from '@storybook/addon-actions/decorator';\n\nexport default {\n  title: 'Components/File Dropzone',\n  argTypes: {\n    acceptFileTypes: {\n      name: 'accept-file-types',\n      description: \"The dropzone's accepted file types\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    ariaLabel: {\n      name: 'aria-label',\n      description: \"The dropzone's aria-label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    disabled: {\n      name: 'disabled',\n      description: 'Whether the dropzone is disabled',\n      table: {\n        type: { summary: 'boolean' },\n      },\n    },\n    description: {\n      name: 'description',\n      description: \"The dropzone's description\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    dropzoneHeight: {\n      name: 'dropzone-height',\n      description: \"The dropzone's height\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    dropzoneWidth: {\n      name: 'dropzone-width',\n      description: \"The dropzone's width\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    fileDraggedOverInstructions: {\n      name: 'file-dragged-over-instructions',\n      description: \"The dropzone's instruction text when a file is being dragged over.'\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    includeStateIcon: {\n      name: 'include-state-icon',\n      description: 'Whether to include the state icon',\n      table: {\n        type: { summary: 'boolean' },\n      },\n    },\n    instructions: {\n      name: 'instructions',\n      description: \"The dropzone's instruction text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    label: {\n      name: 'label',\n      description: \"The dropzone's label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    maxFileCount: {\n      name: 'max-file-count',\n      description: \"The dropzone's max file count\",\n      table: {\n        type: { summary: 'number' },\n      },\n    },\n    maxFileNameLength: {\n      name: 'max-file-name-length',\n      description: \"The dropzone's max file name length\",\n      table: {\n        type: { summary: 'number' },\n      },\n    },\n    maxTotalFileSizeBytes: {\n      name: 'max-total-file-size-bytes',\n      description: \"The dropzone's max total file size bytes\",\n      table: {\n        type: { summary: 'number' },\n      },\n    },\n    multiple: {\n      name: 'multiple',\n      description: 'Whether multiple files are allowed',\n      table: {\n        type: { summary: 'boolean' },\n      },\n    },\n  },\n  parameters: {\n    controls: { expanded: true, sort: 'alpha' },\n    actions: {\n      handles: ['buttonClick'],\n    },\n    docs: {\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n    },\n  },\n  decorators: [withActions],\n};\n\nexport const Default = ({\n  acceptFileTypes,\n  ariaLabel,\n  disabled,\n  description,\n  dropzoneHeight,\n  dropzoneWidth,\n  fileDraggedOverInstructions,\n  includeStateIcon,\n  instructions,\n  label,\n  maxFileCount,\n  maxFileNameLength,\n  maxTotalFileSizeBytes,\n  multiple,\n}) => html`\n  <modus-file-dropzone\n    accept-file-types=${acceptFileTypes}\n    aria-label=${ariaLabel}\n    ?disabled=${disabled}\n    description=${description}\n    dropzone-height=${dropzoneHeight}\n    dropzone-width=${dropzoneWidth}\n    file-dragged-over-instructions=${fileDraggedOverInstructions}\n    include-state-icon=${includeStateIcon}\n    instructions=${instructions}\n    label=${label}\n    max-file-count=${maxFileCount}\n    max-file-name-length=${maxFileNameLength}\n    max-total-file-size-bytes=${maxTotalFileSizeBytes}\n    multiple=${multiple}>\n  </modus-file-dropzone>\n`;\nDefault.args = {\n  acceptFileTypes: '.doc,.docx',\n  ariaLabel: 'dropzone',\n  disabled: false,\n  description: 'File dropzone description',\n  dropzoneHeight: '200px',\n  dropzoneWidth: '500px',\n  fileDraggedOverInstructions: 'Drag files here.',\n  includeStateIcon: true,\n  instructions: 'Drag files here or browse to upload.',\n  label: 'Dropzone Label',\n  maxFileCount: '4',\n  maxFileNameLength: '20',\n  maxTotalFileSizeBytes: '1000000',\n  multiple: true,\n};\n",
    "storybook": {
      "examples": [
        "<modus-file-dropzone\n    accept-file-types=${acceptFileTypes}\n    aria-label=${ariaLabel}\n    ?disabled=${disabled}\n    description=${description}\n    dropzone-height=${dropzoneHeight}\n    dropzone-width=${dropzoneWidth}\n    file-dragged-over-instructions=${fileDraggedOverInstructions}\n    include-state-icon=${includeStateIcon}\n    instructions=${instructions}\n    label=${label}\n    max-file-count=${maxFileCount}\n    max-file-name-length=${maxFileNameLength}\n    max-total-file-size-bytes=${maxTotalFileSizeBytes}\n    multiple=${multiple}>\n  </modus-file-dropzone>",
        "\n  <modus-file-dropzone\n    accept-file-types=${acceptFileTypes}\n    aria-label=${ariaLabel}\n    ?disabled=${disabled}\n    description=${description}\n    dropzone-height=${dropzoneHeight}\n    dropzone-width=${dropzoneWidth}\n    file-dragged-over-instructions=${fileDraggedOverInstructions}\n    include-state-icon=${includeStateIcon}\n    instructions=${instructions}\n    label=${label}\n    max-file-count=${maxFileCount}\n    max-file-name-length=${maxFileNameLength}\n    max-total-file-size-bytes=${maxTotalFileSizeBytes}\n    multiple=${multiple}>\n  </modus-file-dropzone>\n"
      ],
      "variants": [],
      "prop_usage": {}
    },
    "tag_name": "modus-file-dropzone"
  },
  "modus-icons": {
    "props": [
      {
        "name": "name",
        "description": "/** The name of the icon */",
        "type": "ModusIconName | null"
      }
    ],
    "events": [],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-icons-storybook-docs.mdx ---\n\n# Icons\n\n---\n\n[Modus Icon](https://modus-icons.trimble.com/modus-solid/) is a wrapper for the Modus Icons (Solid style). It is referenced using the `<modus-icon>` custom HTML element.\n\n### Default\n\n<modus-icon name=\"sun\" color=\"black\" size=\"50\"></modus-icon>\n<modus-icon name=\"sun\" color=\"black\" size=\"40\"></modus-icon>\n<modus-icon name=\"sun\" color=\"black\" size=\"25\"></modus-icon>\n<modus-icon name=\"sun\" color=\"black\" size=\"15\"></modus-icon>\n\n```html\n<modus-icon name=\"sun\" color=\"black\" size=\"50\"></modus-icon>\n<modus-icon name=\"sun\" color=\"black\" size=\"40\"></modus-icon>\n<modus-icon name=\"sun\" color=\"black\" size=\"25\"></modus-icon>\n<modus-icon name=\"sun\" color=\"black\" size=\"15\"></modus-icon>\n```\n\n### Types\n\n```ts\ntype ModusIconName = /* View https://modus-icons.trimble.com/modus-solid/ for a full list of names */\n```\n\n### Properties\n\n| Property | Attribute | Description                      | Type            | Default     |\n| -------- | --------- | -------------------------------- | --------------- | ----------- |\n| `color`  | `color`   | (optional) The color of the Icon | `string`        | `undefined` |\n| `name`   | `name`    | The name of the icon             | `ModusIconName` | `undefined` |\n| `size`   | `size`    | (optional) The size of the Icon  | `string`        | `'16'`      |\n\n### DOM Events\n\n| Name        | Description                    | Emits |\n| ----------- | ------------------------------ | ----- |\n| `iconClick` | Fires when the icon is clicked |       |\n",
    "storybook_content": "\n\n--- modus-icons.stories.tsx ---\n\n// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-icons-storybook-docs.mdx';\nimport { html } from 'lit-html';\nimport { MODUS_ICON_NAMES } from '../../../../src/icons/ModusIconUtilities';\nimport { withActions } from '@storybook/addon-actions/decorator';\n\nexport default {\n  title: 'Components/Icons',\n  argTypes: {\n    name: {\n      name: 'name',\n      type: 'select',\n      table: {\n        type: { summary: `${MODUS_ICON_NAMES.map((name) => `\"${name}\"`).join('|')}` },\n      },\n      description: 'The name of the icon',\n      options: MODUS_ICON_NAMES,\n    },\n    size: {\n      description: 'The size of the icon',\n      table: {\n        defaultValue: { summary: `'16'` },\n        type: { summary: 'string' },\n      },\n    },\n    color: {\n      description: 'The color of the icon',\n      table: {\n        defaultValue: { summary: `'#6A6976'` },\n        type: { summary: 'string' },\n      },\n    },\n  },\n  parameters: {\n    docs: {\n      page: docs,\n    },\n    actions: {\n      handles: ['iconClick'],\n    },\n    controls: { expanded: true, sort: 'alpha' },\n    options: {\n      isToolshown: true,\n    },\n  },\n  decorators: [withActions],\n};\n\nconst StyledIcon = `\n  align-items: center;\n  border-radius: 4px;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  min-width: 100px;\n  outline: 1px dashed;\n  padding: 10px;\n`;\n\nconst StyledContent = `\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  gap: 10px;\n`;\n\nconst DefaultTemplateArgs = {\n  name: 'calendar',\n  size: 16,\n  color: '#6A6976',\n};\n\nconst Template = ({ name, size, color }) => html`\n  <div style=\"${StyledContent}\">\n    <div style=\"${StyledIcon}\">\n      <modus-icon name=\"${name}\" size=\"${size}\" color=\"${color}\"></modus-icon>\n      <small>${name}</small>\n    </div>\n  </div>\n`;\n\nexport const Default = Template.bind({});\nDefault.args = DefaultTemplateArgs;\n",
    "storybook": {
      "examples": [
        "<modus-icon name=\"${name}\" size=\"${size}\" color=\"${color}\"></modus-icon>",
        "\n  <div style=\"${StyledContent}\">\n    <div style=\"${StyledIcon}\">\n      <modus-icon name=\"${name}\" size=\"${size}\" color=\"${color}\"></modus-icon>\n      <small>${name}</small>\n    </div>\n  </div>\n"
      ],
      "variants": [],
      "prop_usage": {
        "style": [
          "${StyledContent}",
          "${StyledIcon}"
        ],
        "name": [
          "${name}"
        ],
        "size": [
          "${size}"
        ],
        "color": [
          "${color}"
        ]
      }
    },
    "tag_name": "modus-icons"
  },
  "modus-list": {
    "props": [],
    "events": [],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-list-storybook-docs.mdx ---\n\n# List\n\n---\n\n[Modus List](https://modus.trimble.com/components/lists/) web components are wrappers around native `<modus-list-item>` custom HTML elements. They are referenced using the `<modus-list>` custom HTML element.\n\nThe `<modus-list-item>` utilizes the slot element, allowing you to render your own HTML in the component.\n\n#### Implementation Details\n\n- To support a wide variety of selection methods (single, multi, etc) it is up to the implementation to control which items are selected.\n- If `sub-text` is provided, it shows below the slot dynamically\n\n### Default\n\n<modus-list>\n  <modus-list-item size=\"condensed\">Condensed</modus-list-item>\n  <modus-list-item selected size=\"condensed\">\n    Condensed & Selected\n  </modus-list-item>\n  <modus-list-item>Default</modus-list-item>\n  <modus-list-item selected>Selected</modus-list-item>\n  <modus-list-item disabled>Disabled</modus-list-item>\n  <modus-list-item size=\"large\">Large</modus-list-item>\n  <modus-list-item selected size=\"large\">\n    Large & Selected\n  </modus-list-item>\n  <modus-list-item borderless>Borderless</modus-list-item>\n</modus-list>\n\n```html\n<modus-list>\n  <modus-list-item size=\"condensed\">Condensed</modus-list-item>\n  <modus-list-item selected size=\"condensed\">Condensed & Selected</modus-list-item>\n  <modus-list-item wrap-sub-text=\"true\" sub-text=\"default\">Default</modus-list-item>\n  <modus-list-item selected>Selected</modus-list-item>\n  <modus-list-item disabled>Disabled</modus-list-item>\n  <modus-list-item size=\"large\">Large</modus-list-item>\n  <modus-list-item selected size=\"large\">Large & Selected</modus-list-item>\n  <modus-list-item borderless>Borderless</modus-list-item>\n</modus-list>\n```\n\n### Properties\n\n##### Modus List Item\n\n| Property      | Attribute       | Description                                                                            | Type                                   | Default      |\n| ------------- | --------------- | -------------------------------------------------------------------------------------- | -------------------------------------- | ------------ |\n| `borderless`  | `borderless`    | (optional) Whether the list item has a border or not                                   | `boolean`                              | `undefined`  |\n| `disabled`    | `disabled`      | (optional) Disables the list item                                                      | `boolean`                              | `undefined`  |\n| `iconColor`   | `icon-color`    | (optional) change color of left icon                                                   | `string`                               | `undefined`  |\n| `leftIcon`    | `left-icon`     | (optional) Takes the icon name and shows the icon aligned to the left of the list item | `string`                               | `undefined`  |\n| `selected`    | `selected`      | (optional) The selected state of the list item                                         | `boolean`                              | `undefined`  |\n| `size`        | `size`          | (optional) The size of list item                                                       | `\"condensed\" \\| \"large\" \\| \"standard\"` | `'standard'` |\n| `subText`     | `sub-text`      | (optional) Whether to show Subtext below the Slot content or not                       | `string`                               | `undefined`  |\n| `type`        | `type`          | (optional) The type of list item                                                       | `string`                               | `'standard'` |\n| `wrapSubText` | `wrap-sub-text` | (optional) Whether to wrap the sub text.                                               | `boolean`                              | `true`       |\n\n### DOM Events\n\n##### Modus List Item\n\n| Event       | Description                            | Type               |\n| ----------- | -------------------------------------- | ------------------ |\n| `itemClick` | An event that fires on list item click | `CustomEvent<any>` |\n\n### Methods\n\n##### Modus List Item\n\n| Method name | Description         | Parameter       | Return          |\n| ----------- | ------------------- | --------------- | --------------- |\n| `focusItem` | Focus the list item | `Promise<void>` | `Promise<void>` |\n\n### Shadow Parts\n\n| Part           | Description                                                              |\n| -------------- | ------------------------------------------------------------------------ |\n| `\"list-items\"` | To apply a custom style to the `ul` element in `modus-list`'s shadow DOM |\n",
    "storybook_content": "\n\n--- modus-list.stories.tsx ---\n\n// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-list-storybook-docs.mdx';\nimport { html } from 'lit-html';\n\nexport default {\n  title: 'Components/List',\n  argTypes: {\n    subText: {\n      description: 'set the sub-text for the list-item',\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    wrapSubText: {\n      description: 'whether to wrap the sub text',\n      table: {\n        type: { summary: 'boolean' },\n      },\n    },\n    leftIcon: {\n      description: 'set the left icon for the list-item',\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    iconColor: {\n      description: 'set the color of the left icon',\n      table: {\n        defaultValue: { summary: `'#6A6976'` },\n        type: { summary: 'string' },\n      },\n    },\n  },\n  parameters: {\n    docs: {\n      page: docs,\n    },\n    controls: {\n      expanded: true,\n    },\n    options: {\n      isToolshown: true,\n    },\n  },\n};\n\nconst Template = ({ subText, wrapSubText, leftIcon, iconColor }) => html`\n  <modus-list>\n    <modus-list-item wrap-sub-text=${wrapSubText} sub-text=${subText} left-icon=${leftIcon} icon-color=${iconColor}\n      >Default</modus-list-item\n    >\n    <modus-list-item selected>Selected</modus-list-item>\n    <modus-list-item disabled>Disabled</modus-list-item>\n  </modus-list>\n`;\nexport const Default = Template.bind({});\n\nDefault.args = {\n  subText: 'default',\n  wrapSubText: true,\n  leftIcon: '',\n  iconColor: '#6A6976',\n};\n",
    "storybook": {
      "examples": [
        "<modus-list-item wrap-sub-text=${wrapSubText} sub-text=${subText} left-icon=${leftIcon} icon-color=${iconColor}\n      >Default</modus-list-item\n    >",
        "<modus-list-item selected>Selected</modus-list-item>",
        "<modus-list-item disabled>Disabled</modus-list-item>",
        "\n  <modus-list>\n    <modus-list-item wrap-sub-text=${wrapSubText} sub-text=${subText} left-icon=${leftIcon} icon-color=${iconColor}\n      >Default</modus-list-item\n    >\n    <modus-list-item selected>Selected</modus-list-item>\n    <modus-list-item disabled>Disabled</modus-list-item>\n  </modus-list>\n"
      ],
      "variants": [],
      "prop_usage": {}
    },
    "tag_name": "modus-list"
  },
  "modus-list-item": {
    "props": [
      {
        "name": "borderless",
        "description": "/** (optional) Whether the list item has a border or not */",
        "type": "boolean"
      },
      {
        "name": "disabled",
        "description": "/** (optional) Whether the list item has a border or not */",
        "type": "boolean"
      },
      {
        "name": "selected",
        "description": "/** (optional) Whether the list item has a border or not */",
        "type": "boolean"
      },
      {
        "name": "leftIcon",
        "description": "/** (optional) Whether the list item has a border or not */",
        "type": "string"
      },
      {
        "name": "size",
        "description": "/** (optional) Whether the list item has a border or not */",
        "type": "'condensed' | 'large' | 'standard'"
      },
      {
        "name": "subText",
        "description": "/** (optional) Whether the list item has a border or not */",
        "type": "string"
      },
      {
        "name": "wrapSubText",
        "description": "/** (optional) Whether the list item has a border or not */",
        "type": "true | false"
      },
      {
        "name": "iconColor",
        "description": "/** (optional) Whether the list item has a border or not */",
        "type": "string"
      }
    ],
    "events": [
      "itemClick"
    ],
    "slots": [],
    "default_values": {},
    "documentation": "",
    "storybook_content": "",
    "storybook": {
      "examples": [],
      "variants": [],
      "prop_usage": {}
    },
    "tag_name": "modus-list-item"
  },
  "modus-message": {
    "props": [
      {
        "name": "ariaLabel",
        "description": "/** (optional) The message's aria-label. */",
        "type": "string | null"
      }
    ],
    "events": [],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-message-storybook-docs.mdx ---\n\nimport { Anchor } from '@storybook/addon-docs';\n\n# Message\n\n---\n\n[Modus Message](https://modus.trimble.com/components/web/messages/) web components are referenced using the `<modus-message>` custom HTML element.\n\n<Anchor storyId=\"components-message--default\" />\n\n### Default\n\n<modus-message type=\"info\">Info message.</modus-message>\n\n<Anchor storyId=\"components-message--question\" />\n\n### Question\n\n<modus-message type=\"question\">Question message?</modus-message>\n\n```html\n<modus-message type=\"info\">Info message.</modus-message> <modus-message type=\"question\">Question message?</modus-message>\n```\n\n### Properties\n\n| Property    | Attribute    | Description                          | Type                 | Default     |\n| ----------- | ------------ | ------------------------------------ | -------------------- | ----------- |\n| `ariaLabel` | `aria-label` | (optional) The message's aria-label. | `string`             | `undefined` |\n| `icon`      | `icon`       | (optional) The message's icon.       | `string`             | `undefined` |\n| `type`      | `type`       | (optional) The message's type.       | `\"info\", \"question\"` | `'info'`    |\n\n### Accessibility\n\n- Message has `role` of `note`.\n- Message gets an `aria-label` provided by the `aria-label` property input.\n",
    "storybook_content": "\n\n--- modus-message.stories.tsx ---\n\n// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-message-storybook-docs.mdx';\nimport { html } from 'lit-html';\n\nexport default {\n  title: 'Components/Message',\n  argTypes: {\n    ariaLabel: {\n      name: 'aria-label',\n      description: \"The message's aria-label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    icon: {\n      name: 'icon',\n      description: \"The message's icon\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    type: {\n      options: ['info', 'question'],\n      type: 'select',\n      description: 'The type of the message',\n      table: {\n        defaultValue: { summary: `'info'` },\n        type: { summary: `'info' | 'question'` },\n      },\n    },\n  },\n  parameters: {\n    controls: { expanded: true, sort: 'requiredFirst' },\n    docs: {\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n    },\n  },\n};\n\nexport const Default = ({ ariaLabel, icon, type }) => html`\n  <modus-message aria-label=${ariaLabel} icon=${icon} type=${type}> Info (Default) </modus-message>\n`;\nDefault.args = { ariaLabel: '', icon: '', type: 'info' };\n\nexport const Question = ({ ariaLabel, icon, type }) => html`\n  <modus-message aria-label=${ariaLabel} icon=${icon} type=${type}> Question </modus-message>\n`;\nQuestion.args = { ariaLabel: '', icon: '', type: 'question' };\n",
    "storybook": {
      "examples": [
        "<modus-message aria-label=${ariaLabel} icon=${icon} type=${type}> Info (Default) </modus-message>",
        "<modus-message aria-label=${ariaLabel} icon=${icon} type=${type}> Question </modus-message>",
        "\n  <modus-message aria-label=${ariaLabel} icon=${icon} type=${type}> Info (Default) </modus-message>\n",
        "\n  <modus-message aria-label=${ariaLabel} icon=${icon} type=${type}> Question </modus-message>\n"
      ],
      "variants": [],
      "prop_usage": {}
    },
    "tag_name": "modus-message"
  },
  "modus-modal": {
    "props": [],
    "events": [],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-modal-storybook-docs.mdx ---\n\nimport { Story } from '@storybook/blocks';\nimport * as Modal from './modus-modal.stories';\n\n# Modal\n\n---\n\n[Modus Dialog](https://modus.trimble.com/components/web/modals/) web components interrupt workflows when user interaction is required. They are referenced using the `<modus-modal>` custom HTML element.\n\nThis modal component uses the slot element to render the content and the slot `footerContent` to render custom footer content.\n\nWhen designing a custom footer, it is highly recommended to use button progressions from, structural and color progression. Use only one button progression in a single product, for example, `primary` button should be followed by a `secondary` button or `tertiary` button not the outline buttons. For more guidelines refer to [Modus Styleguide](https://modus.trimble.com/components/web/modals/styles/).\n\n### Default\n\n<Story of={Modal.Default} />\n\n```html\n<modus-button id=\"btn-modal\" color=\"primary\">Open modal</modus-button>\n<modus-modal\n  header-text=\"Modal title\"\n  primary-button-text=\"Save changes\"\n  secondary-button-text=\"Sweet!\"\n  primary-button-aria-label=\"Save changes\"\n  secondary-button-aria-label=\"Sweet\">\n  <p>Woo-hoo, you're reading this text in a modal!</p>\n</modus-modal>\n\n<script>\n  document.querySelector('#btn-modal').addEventListener('buttonClick', () => {\n    document.querySelector('modus-modal').open();\n  });\n\n  document.querySelector('modus-modal').addEventListener('closed', () => {\n    // Timeout is a workaround for Stencil Web Component not capturing the state updates quick enough when another component is immediately focussed\n    setTimeout(() => {\n      document.querySelector('#btn-modal').focusButton();\n    }, 100);\n  });\n</script>\n```\n\n### Custom footer\n\n<Story of={Modal.CustomFooter} />\n\n```html\n<modus-button id=\"btn-modal\" color=\"primary\">Open modal</modus-button>\n<modus-modal>\n  <p>\n    A dialog or a modal is a window overlaid on the primary window. It interrupts the user and requires an action. It\n    disables the main content until the user explicitly interacts with the modal dialog.\n  </p>\n  <div\n    style=\"align-items: center;\n    display: flex;\n    justify-content: flex-end; gap: 8px; height:100%;\"\n    slot=\"footerContent\">\n    <modus-button color=\"tertiary\">Cancel</modus-button>\n    <modus-button color=\"secondary\">Check later</modus-button>\n    <modus-button color=\"primary\">Approve</modus-button>\n  </div>\n</modus-modal>\n\n<script>\n  document.querySelector('#btn-modal').addEventListener('buttonClick', () => {\n    document.querySelector('modus-modal').open();\n  });\n\n  document.querySelector('modus-modal').addEventListener('closed', () => {\n    // Timeout is a workaround for Stencil Web Component not capturing the state updates quick enough when another component is immediately focussed\n    setTimeout(() => {\n      document.querySelector('#btn-modal').focusButton();\n    }, 100);\n  });\n</script>\n```\n\n### Properties\n\n| Property                   | Attribute                     | Description                                                                                                                           | Type                   | Default     |\n| -------------------------- | ----------------------------- | ------------------------------------------------------------------------------------------------------------------------------------- | ---------------------- | ----------- |\n| `ariaLabel`                | `aria-label`                  | (optional) The modal's aria-label.                                                                                                    | `string`               | `undefined` |\n| `backdrop`                 | `backdrop`                    | (optional) The modal's backdrop. Specify 'static' for a backdrop that doesn't close the modal when clicked outside the modal content. | \"static\" \\| \"default\"` | `'default'` |\n| `fullscreen`               | `fullscreen`                  | (optional) The modal's full screen view.                                                                                              | `boolean`              | `false`     |\n| `headerText`               | `header-text`                 | (optional) The modal's primary button text.                                                                                           | `string`               | `undefined` |\n| `primaryButtonAriaLabel`   | `primary-button-aria-label`   | (optional) The modal's primary button aria-label.                                                                                     | `string`               | `undefined` |\n| `primaryButtonDisabled`    | `primary-button-disabled`     | (optional) Disable primary button.                                                                                                    | `boolean`              | `undefined` |\n| `primaryButtonText`        | `primary-button-text`         | (optional) The modal's primary button text.                                                                                           | `string`               | `undefined` |\n| `secondaryButtonAriaLabel` | `secondary-button-aria-label` | (optional) The modal's secondary button aria-label.                                                                                   | `string`               | `undefined` |\n| `secondaryButtonDisabled`  | `secondary-button-disabled`   | (optional) Disable secondary button.                                                                                                  | `boolean`              | `undefined` |\n| `secondaryButtonText`      | `secondary-button-text`       | (optional) The modal's secondary button text.                                                                                         | `string`               | `undefined` |\n| `showFullscreenToggle`     | `show-fullscreen-toggle`      | (optional) Show full screen toggle.                                                                                                   | `boolean`              | `false`     |\n| `zIndex`                   | `z-index`                     | (optional) The modal's z-index.                                                                                                       | `string`               | `'1'`       |\n\n### Events\n\n| Event                  | Description                                    | Type               |\n| ---------------------- | ---------------------------------------------- | ------------------ |\n| `closed`               | An event that fires on modal close.            | `CustomEvent<any>` |\n| `opened`               | An event that fires on modal open.             | `CustomEvent<any>` |\n| `primaryButtonClick`   | An event that fires on primary button click.   | `CustomEvent<any>` |\n| `secondaryButtonClick` | An event that fires on secondary button click. | `CustomEvent<any>` |\n\n### Methods\n\n| Method name | Description      | Parameter | Return          |\n| ----------- | ---------------- | --------- | --------------- |\n| `close`     | Closes the Modal |           | `Promise<void>` |\n| `open`      | Opens the Modal  |           | `Promise<void>` |\n\n### Slots\n\n| Slot              | Description                      |\n| ----------------- | -------------------------------- |\n| `\"footerContent\"` | Slot for a custom footer content |\n\n### Accessibility\n\n- Modal has `role` of `dialog`.\n- Modal gets `aria-hidden` set to whether Modal is closed.\n- When Primary button has focus, <kbd>Enter</kbd> emits `primaryButtonClick` event.\n- When Secondary button has focus, <kbd>Enter</kbd> emits `secondaryButtonClick` event.\n- When the Modal is open, tabbing can be performed only on the focussable elements inside Modal. Note: Pressing <kbd>Shift</kbd> + <kbd>Tab</kbd> on Modal Header cannot go back to Modal Footer.\n- Pressing <kbd>Escape</kbd> key closes the Modal and emits `close` event.\n- To customize footer, slot option is provided and referenced by `slot='footer'`.\n",
    "storybook_content": "\n\n--- modus-modal.stories.tsx ---\n\n// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-modal-storybook-docs.mdx';\nimport { html } from 'lit-html';\nimport { withActions } from '@storybook/addon-actions/decorator';\n\nexport default {\n  title: 'Components/Modal',\n  argTypes: {\n    ariaLabel: {\n      name: 'aria-label',\n      description: \"The modal's aria-label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    headerText: {\n      name: 'headerText',\n      description: \"The modal's primary button text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    primaryButtonAriaLabel: {\n      name: 'primaryButtonAriaLabel',\n      description: \"The modal's primary button aria-label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    primaryButtonDisabled: {\n      name: 'primaryButtonDisabled',\n      description: 'Disable primary button',\n      table: {\n        type: { summary: 'boolean' },\n      },\n    },\n    primaryButtonText: {\n      name: 'primaryButtonText',\n      description: \"The modal's primary button text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    secondaryButtonAriaLabel: {\n      name: 'secondaryButtonAriaLabel',\n      description: \"The modal's secondary button aria-label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    secondaryButtonDisabled: {\n      name: 'secondaryButtonDisabled',\n      description: 'Disable secondary button',\n      table: {\n        type: { summary: 'boolean' },\n      },\n    },\n    secondaryButtonText: {\n      name: 'secondaryButtonText',\n      description: \"The modal's secondary button text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    zIndex: {\n      name: 'zIndex',\n      description: \"The modal's z-index\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    backdrop: {\n      name: 'backdrop',\n      description: \"The modal's backdrop\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    fullscreen: {\n      name: 'fullscreen',\n      description: \"The modal's full screen view.\",\n      table: {\n        type: { summary: 'boolean' },\n      },\n    },\n    showFullscreenToggle: {\n      name: 'showFullscreenToggle',\n      description: 'Show full screen toggle',\n      table: {\n        type: { summary: 'boolean' },\n      },\n    },\n  },\n  parameters: {\n    actions: {\n      handles: ['closed', 'primaryButtonClick', 'secondaryButtonClick', 'buttonClick'],\n    },\n    docs: {\n      inlineStories: false,\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n    },\n    controls: { expanded: true, sort: 'requiredFirst' },\n    viewMode: 'docs',\n  },\n  decorators: [withActions],\n};\n\nconst Template = ({\n  ariaLabel,\n  headerText,\n  primaryButtonAriaLabel,\n  primaryButtonDisabled,\n  primaryButtonText,\n  secondaryButtonAriaLabel,\n  secondaryButtonDisabled,\n  secondaryButtonText,\n  zIndex,\n  backdrop,\n  fullscreen,\n  showFullscreenToggle,\n}) => html`\n  <modus-button id=\"btn-modal\" color=\"primary\">Open modal</modus-button>\n  <modus-modal\n    aria-label=${ariaLabel}\n    header-text=${headerText}\n    primary-button-aria-label=${primaryButtonAriaLabel}\n    primary-button-disabled=${primaryButtonDisabled}\n    primary-button-text=${primaryButtonText}\n    secondary-button-aria-label=${secondaryButtonAriaLabel}\n    secondary-button-disabled=${secondaryButtonDisabled}\n    secondary-button-text=${secondaryButtonText}\n    z-index=${zIndex}\n    backdrop=${backdrop}\n    fullscreen=${fullscreen}\n    show-fullscreen-toggle=${showFullscreenToggle}>\n    <p>Woo-hoo, you're reading this text in a modal!</p>\n  </modus-modal>\n  ${setScript()}\n`;\nexport const Default = Template.bind({});\nDefault.args = {\n  ariaLabel: '',\n  headerText: 'Modal title',\n  primaryButtonAriaLabel: 'Save changes',\n  primaryButtonDisabled: false,\n  primaryButtonText: 'Save changes',\n  secondaryButtonAriaLabel: 'Sweet',\n  secondaryButtonDisabled: false,\n  secondaryButtonText: 'Sweet',\n  zIndex: '1',\n  backdrop: 'default',\n  fullscreen: false,\n  showFullscreenToggle: false,\n};\n\nconst CustomFooterTemplate = ({ ariaLabel, headerText, zIndex, backdrop, fullscreen, showFullscreenToggle }) => html`\n  <modus-button id=\"btn-modal-footer\" color=\"primary\">Open modal</modus-button>\n  <modus-modal\n    id=\"modal-footer\"\n    aria-label=${ariaLabel}\n    header-text=${headerText}\n    z-index=${zIndex}\n    backdrop=${backdrop}\n    fullscreen=${fullscreen}\n    show-fullscreen-toggle=${showFullscreenToggle}>\n    <p>\n      A dialog or a modal is a window overlaid on the primary window. It interrupts the user and requires an action. It\n      disables the main content until the user explicitly interacts with the modal dialog.\n    </p>\n    <div\n      style=\"align-items: center;\n    display: flex;\n    justify-content: flex-end; gap: 8px; height:100%;\"\n      slot=\"footerContent\">\n      <modus-button color=\"tertiary\">Cancel</modus-button>\n      <modus-button color=\"secondary\">Check later</modus-button>\n      <modus-button color=\"primary\">Approve</modus-button>\n    </div>\n  </modus-modal>\n  ${setFooterScript()}\n`;\nexport const CustomFooter = CustomFooterTemplate.bind({});\nCustomFooter.args = {\n  ariaLabel: '',\n  headerText: 'Modal title',\n  zIndex: '1',\n  backdrop: 'default',\n  fullscreen: false,\n  showFullscreenToggle: false,\n};\n\nconst setScript = () => {\n  const tag = document.createElement('script');\n  tag.innerHTML = `\n    document.querySelector('#btn-modal').addEventListener('buttonClick', () => {\n      document.querySelector('modus-modal').open();\n    });\n\n    document.querySelector('modus-modal').addEventListener('closed', () => {\n      // Timeout is a workaround for Stencil Web Component not capturing the state updates quick enough when another component is immediately focussed\n      setTimeout(() => {\n        document.querySelector('#btn-modal').focusButton();\n      }, 100);\n    });\n  `;\n\n  return tag;\n};\nconst setFooterScript = () => {\n  const tag = document.createElement('script');\n  tag.innerHTML = `\n    document.querySelector('#btn-modal-footer').addEventListener('buttonClick', () => {\n      document.querySelector('#modal-footer').open();\n    });\n\n    document.querySelector('#modal-footer').addEventListener('closed', () => {\n      // Timeout is a workaround for Stencil Web Component not capturing the state updates quick enough when another component is immediately focussed\n      setTimeout(() => {\n        document.querySelector('#btn-modal-footer').focusButton();\n      }, 100);\n    });\n  `;\n\n  return tag;\n};\n",
    "storybook": {
      "examples": [
        "<modus-button id=\"btn-modal\" color=\"primary\">Open modal</modus-button>",
        "<modus-button id=\"btn-modal-footer\" color=\"primary\">Open modal</modus-button>",
        "<modus-button color=\"tertiary\">Cancel</modus-button>",
        "<modus-button color=\"secondary\">Check later</modus-button>",
        "<modus-button color=\"primary\">Approve</modus-button>"
      ],
      "variants": [],
      "prop_usage": {
        "id": [
          "btn-modal",
          "btn-modal-footer",
          "modal-footer"
        ],
        "color": [
          "primary",
          "tertiary",
          "secondary"
        ],
        "style": [
          "align-items: center;\n    display: flex;\n    justify-content: flex-end; gap: 8px; height:100%;"
        ],
        "slot": [
          "footerContent"
        ]
      }
    },
    "tag_name": "modus-modal"
  },
  "modus-navbar": {
    "props": [
      {
        "name": "apps",
        "description": "/**\n * @slot main - Renders custom main menu content\n * @slot notifications - Renders custom notifications content\n */\n\n@Component({\n  tag: 'modus-navbar',\n  styleUrl: 'modus-navbar.scss',\n  shadow: true,\n})\nexport class ModusNavbar {\n  @Element() element: HTMLElement;\n\n  /** (optional) The navbar's aria-label. */",
        "type": "ModusNavbarApp[]"
      },
      {
        "name": "enableSearchOverlay",
        "description": "/**\n * @slot main - Renders custom main menu content\n * @slot notifications - Renders custom notifications content\n */\n\n@Component({\n  tag: 'modus-navbar',\n  styleUrl: 'modus-navbar.scss',\n  shadow: true,\n})\nexport class ModusNavbar {\n  @Element() element: HTMLElement;\n\n  /** (optional) The navbar's aria-label. */",
        "type": "boolean"
      },
      {
        "name": "logoOptions",
        "description": "/**\n * @slot main - Renders custom main menu content\n * @slot notifications - Renders custom notifications content\n */\n\n@Component({\n  tag: 'modus-navbar',\n  styleUrl: 'modus-navbar.scss',\n  shadow: true,\n})\nexport class ModusNavbar {\n  @Element() element: HTMLElement;\n\n  /** (optional) The navbar's aria-label. */",
        "type": "ModusNavbarLogoOptions"
      },
      {
        "name": "dropdownOptions",
        "description": "/**\n * @slot main - Renders custom main menu content\n * @slot notifications - Renders custom notifications content\n */\n\n@Component({\n  tag: 'modus-navbar',\n  styleUrl: 'modus-navbar.scss',\n  shadow: true,\n})\nexport class ModusNavbar {\n  @Element() element: HTMLElement;\n\n  /** (optional) The navbar's aria-label. */",
        "type": "ModusNavbarDropdownOptions"
      },
      {
        "name": "selectedDropdownItem",
        "description": "/**\n * @slot main - Renders custom main menu content\n * @slot notifications - Renders custom notifications content\n */\n\n@Component({\n  tag: 'modus-navbar',\n  styleUrl: 'modus-navbar.scss',\n  shadow: true,\n})\nexport class ModusNavbar {\n  @Element() element: HTMLElement;\n\n  /** (optional) The navbar's aria-label. */",
        "type": "ModusNavbarDropdownItem"
      },
      {
        "name": "reverse",
        "description": "/**\n * @slot main - Renders custom main menu content\n * @slot notifications - Renders custom notifications content\n */\n\n@Component({\n  tag: 'modus-navbar',\n  styleUrl: 'modus-navbar.scss',\n  shadow: true,\n})\nexport class ModusNavbar {\n  @Element() element: HTMLElement;\n\n  /** (optional) The navbar's aria-label. */",
        "type": "boolean"
      },
      {
        "name": "searchTooltip",
        "description": "/**\n * @slot main - Renders custom main menu content\n * @slot notifications - Renders custom notifications content\n */\n\n@Component({\n  tag: 'modus-navbar',\n  styleUrl: 'modus-navbar.scss',\n  shadow: true,\n})\nexport class ModusNavbar {\n  @Element() element: HTMLElement;\n\n  /** (optional) The navbar's aria-label. */",
        "type": "ModusNavbarTooltip"
      },
      {
        "name": "showAppsMenu",
        "description": "/**\n * @slot main - Renders custom main menu content\n * @slot notifications - Renders custom notifications content\n */\n\n@Component({\n  tag: 'modus-navbar',\n  styleUrl: 'modus-navbar.scss',\n  shadow: true,\n})\nexport class ModusNavbar {\n  @Element() element: HTMLElement;\n\n  /** (optional) The navbar's aria-label. */",
        "type": "boolean"
      },
      {
        "name": "showMainMenu",
        "description": "/**\n * @slot main - Renders custom main menu content\n * @slot notifications - Renders custom notifications content\n */\n\n@Component({\n  tag: 'modus-navbar',\n  styleUrl: 'modus-navbar.scss',\n  shadow: true,\n})\nexport class ModusNavbar {\n  @Element() element: HTMLElement;\n\n  /** (optional) The navbar's aria-label. */",
        "type": "boolean"
      },
      {
        "name": "showNotifications",
        "description": "/**\n * @slot main - Renders custom main menu content\n * @slot notifications - Renders custom notifications content\n */\n\n@Component({\n  tag: 'modus-navbar',\n  styleUrl: 'modus-navbar.scss',\n  shadow: true,\n})\nexport class ModusNavbar {\n  @Element() element: HTMLElement;\n\n  /** (optional) The navbar's aria-label. */",
        "type": "boolean"
      },
      {
        "name": "notificationCount",
        "description": "/**\n * @slot main - Renders custom main menu content\n * @slot notifications - Renders custom notifications content\n */\n\n@Component({\n  tag: 'modus-navbar',\n  styleUrl: 'modus-navbar.scss',\n  shadow: true,\n})\nexport class ModusNavbar {\n  @Element() element: HTMLElement;\n\n  /** (optional) The navbar's aria-label. */",
        "type": "number"
      },
      {
        "name": "showPendoPlaceholder",
        "description": "/**\n * @slot main - Renders custom main menu content\n * @slot notifications - Renders custom notifications content\n */\n\n@Component({\n  tag: 'modus-navbar',\n  styleUrl: 'modus-navbar.scss',\n  shadow: true,\n})\nexport class ModusNavbar {\n  @Element() element: HTMLElement;\n\n  /** (optional) The navbar's aria-label. */",
        "type": "boolean"
      },
      {
        "name": "showSearch",
        "description": "/**\n * @slot main - Renders custom main menu content\n * @slot notifications - Renders custom notifications content\n */\n\n@Component({\n  tag: 'modus-navbar',\n  styleUrl: 'modus-navbar.scss',\n  shadow: true,\n})\nexport class ModusNavbar {\n  @Element() element: HTMLElement;\n\n  /** (optional) The navbar's aria-label. */",
        "type": "boolean"
      },
      {
        "name": "showShadow",
        "description": "/**\n * @slot main - Renders custom main menu content\n * @slot notifications - Renders custom notifications content\n */\n\n@Component({\n  tag: 'modus-navbar',\n  styleUrl: 'modus-navbar.scss',\n  shadow: true,\n})\nexport class ModusNavbar {\n  @Element() element: HTMLElement;\n\n  /** (optional) The navbar's aria-label. */",
        "type": "boolean"
      },
      {
        "name": "showHelp",
        "description": "/**\n * @slot main - Renders custom main menu content\n * @slot notifications - Renders custom notifications content\n */\n\n@Component({\n  tag: 'modus-navbar',\n  styleUrl: 'modus-navbar.scss',\n  shadow: true,\n})\nexport class ModusNavbar {\n  @Element() element: HTMLElement;\n\n  /** (optional) The navbar's aria-label. */",
        "type": "boolean"
      },
      {
        "name": "helpTooltip",
        "description": "/**\n * @slot main - Renders custom main menu content\n * @slot notifications - Renders custom notifications content\n */\n\n@Component({\n  tag: 'modus-navbar',\n  styleUrl: 'modus-navbar.scss',\n  shadow: true,\n})\nexport class ModusNavbar {\n  @Element() element: HTMLElement;\n\n  /** (optional) The navbar's aria-label. */",
        "type": "ModusNavbarTooltip"
      },
      {
        "name": "helpUrl",
        "description": "/**\n * @slot main - Renders custom main menu content\n * @slot notifications - Renders custom notifications content\n */\n\n@Component({\n  tag: 'modus-navbar',\n  styleUrl: 'modus-navbar.scss',\n  shadow: true,\n})\nexport class ModusNavbar {\n  @Element() element: HTMLElement;\n\n  /** (optional) The navbar's aria-label. */",
        "type": "string"
      },
      {
        "name": "variant",
        "description": "/**\n * @slot main - Renders custom main menu content\n * @slot notifications - Renders custom notifications content\n */\n\n@Component({\n  tag: 'modus-navbar',\n  styleUrl: 'modus-navbar.scss',\n  shadow: true,\n})\nexport class ModusNavbar {\n  @Element() element: HTMLElement;\n\n  /** (optional) The navbar's aria-label. */",
        "type": "'default' | 'blue'"
      }
    ],
    "events": [
      "appsMenuOpen",
      "appsMenuAppOpen",
      "buttonClick",
      "helpOpen",
      "dropdownItemSelect",
      "mainMenuClick",
      "notificationsMenuOpen",
      "productLogoClick",
      "profileMenuLinkClick",
      "profileMenuOpen",
      "profileMenuSignOutClick",
      "searchChange",
      "searchMenuClick"
    ],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-navbar-storybook-docs.mdx ---\n\nimport { Story } from '@storybook/blocks';\nimport * as Navbar from './modus-navbar.stories.tsx';\n\n# Navbar\n\n---\n\n[Modus Navbar](https://modus.trimble.com/components/web/navbars/) web components are the header of all Trimble applications. They are referenced using the `<modus-navbar>` custom HTML element.\n\nThis component utilizes the slot element, allowing you to render your own HTML in the help and notification menus.\n\n#### Implementation Details\n\n- The only required navigation items are the product logo and the user menu. The rest are hidden by default.\n- If a profile menu avatarUrl is provided it will take rendering preference over initials.\n  - If the provided avatarUrl fails to load, initials will be used as a fallback.\n- If the profile menu signOutText is provided, a sign out button with the provided text will be rendered else the sign out button will be rendered with the text \"Sign out\".\n- If `buttons` are provided, Navbar creates the icon buttons dynamically\n  - The `slot` allows rendering custom HTML on button click by linking the slot name with button id.\n- If a `show-search` with `enable-search-overlay` set as true then search overly will open on search button click, if enable-search-overlay set to false then search button emit the event for client.\n- The `slot` allows rendering custom HTML by linking the slot name with `profileMenu` id under the links.\n\n### Default\n\n<Story of={Navbar.Default} />\n\n```html\n<modus-navbar id=\"working\" show-apps-menu show-help show-main-menu>\n  <div slot=\"main\" style=\"height:300px;\">Render your own main menu.</div>\n  <div slot=\"addMenu\">Render your own add menu.</div>\n  <div slot=\"notificationMenu\">Render your own notification menu.</div>\n  <div slot=\"profileMenu\">Render your own profile menu content.</div>\n</modus-navbar>\n\n<script>\n  const element = document.querySelector('modus-navbar');\n  element.apps = [\n    {\n      description: 'The One Trimble Design System',\n      logoUrl: 'https://modus.trimble.com/favicon.svg',\n      name: 'Trimble Modus',\n      url: 'https://modus.trimble.com/',\n    },\n  ];\n  element.logoOptions = {\n    primary: {\n      url: 'https://modus-bootstrap.trimble.com/img/trimble-logo-rev.svg',\n      height: 24,\n    },\n    secondary: { url: 'https://modus.trimble.com/favicon.svg', height: 24 },\n  };\n  element.dropdownOptions = {\n    ariaLabel: 'Project dropdown',\n    defaultValue: '2',\n    items: [\n      { text: 'Project 1', value: '1' },\n      { text: 'Project 2', value: '2' },\n      { text: 'Project 3', value: '3' },\n    ],\n  };\n  element.profileMenuOptions = {\n    avatarUrl: '...',\n    email: 'modus_user@trimble.com',\n    initials: 'MU',\n    signOutText: 'Sign out',\n    username: 'Modus User',\n    links: [\n      {\n        id: 'link1',\n        display: 'Link 1',\n        icon: 'moon',\n      },\n      {\n        id: 'link2',\n        display: 'Link 2',\n        icon: 'sun',\n      },\n    ],\n  };\n</script>\n```\n\n### Failed Avatar (Initials Fallback)\n\n<Story of={Navbar.FailedAvatar} />\n\n```html\n<modus-navbar id=\"broken\" show-apps-menu show-help show-main-menu show-notifications>\n  <div slot=\"main\" style=\"height:300px;\">Render your own main menu.</div>\n  <div slot=\"notifications\">Render your own notifications.</div>\n</modus-navbar>\n\n<script>\n  const element = document.querySelector('modus-navbar');\n  element.apps = [\n    {\n      description: 'The One Trimble Design System',\n      logoUrl: 'https://modus.trimble.com/favicon.svg',\n      name: 'Trimble Modus',\n      url: 'https://modus.trimble.com/',\n    },\n  ];\n  element.logoOptions = {\n    primary: {\n      url: 'https://modus-bootstrap.trimble.com/img/trimble-logo-rev.svg',\n      height: 24,\n    },\n    secondary: { url: 'https://modus.trimble.com/favicon.svg', height: 24 },\n  };\n  element.profileMenuOptions = {\n    avatarUrl: 'https://avatar.example.com/broken-image-link.png',\n    email: 'modus_user@trimble.com',\n    initials: 'MU',\n    signOutText: 'Sign out',\n    username: 'Modus User',\n  };\n</script>\n```\n\n### Navbar with Optional Features\n\nAdd optional features to the navbar.\n\n<Story of={Navbar.WithOptionalFeatures} />\n\n```html\n<modus-navbar id=\"with-optional-features\" show-apps-menu show-help show-main-menu show-notifications>\n  <div slot=\"main\" style=\"height:300px;\">Render your own main menu.</div>\n  <div slot=\"notifications\">Render your own notifications.</div>\n</modus-navbar>\n\n<script>\n  const element = document.querySelector('modus-navbar');\n  element.apps = [\n    {\n      description: 'The One Trimble Design System',\n      logoUrl: 'https://modus.trimble.com/favicon.svg',\n      name: 'Trimble Modus',\n      url: 'https://modus.trimble.com/',\n    },\n  ];\n  element.logoOptions = {\n    primary: {\n      url: 'https://modus-bootstrap.trimble.com/img/trimble-logo-rev.svg',\n      height: 24,\n    },\n    secondary: { url: 'https://modus.trimble.com/favicon.svg', height: 24 },\n  };\n\n  const items = [\n    { text: 'Project 1', value: '1' },\n    { text: 'Project 2', value: '2' },\n    { text: 'Project 3', value: '3' },\n  ];\n  element.dropdownOptions = {\n    ariaLabel: 'Project dropdown',\n    items,\n  };\n  element.selectedDropdownItem = items[1];\n\n  element.profileMenuOptions = {\n    avatarUrl: 'https://avatar.example.com/broken-image-link.png',\n    email: 'modus_user@trimble.com',\n    initials: 'MU',\n    signOutText: 'Sign out',\n    username: 'Modus User',\n  };\n</script>\n```\n\n### Blue Navbar\n\nUse the `variant` prop to choose a blue background navbar.\n\n<Story of={Navbar.BlueNavbar} />\n\n```html\n<modus-navbar id=\"blue-theme\" show-apps-menu show-help show-main-menu show-notifications variant=\"blue\">\n  <div slot=\"main\" style=\"height:300px;\">Render your own main menu.</div>\n  <div slot=\"notifications\">Render your own notifications.</div>\n</modus-navbar>\n\n<script>\n  const element = document.querySelector('modus-navbar');\n  element.apps = [\n    {\n      description: 'The One Trimble Design System',\n      logoUrl: 'https://modus.trimble.com/favicon.svg',\n      name: 'Trimble Modus',\n      url: 'https://modus.trimble.com/',\n    },\n  ];\n  element.logoOptions = {\n    primary: {\n      url: 'https://modus-bootstrap.trimble.com/img/trimble-logo-rev.svg',\n      height: 24,\n    },\n    secondary: { url: 'https://modus.trimble.com/favicon.svg', height: 24 },\n  };\n  element.profileMenuOptions = {\n    avatarUrl: 'https://avatar.example.com/broken-image-link.png',\n    email: 'modus_user@trimble.com',\n    initials: 'MU',\n    signOutText: 'Sign out',\n    username: 'Modus User',\n  };\n</script>\n```\n\n### Types\n\n```ts\ninterface ModusNavbarApp {\n  description?: string;\n  logoUrl: string;\n  name: string;\n  url: string;\n  category?: string;\n  showCategory?: boolean;\n}\n\ninterface ModusNavbarProfileMenuLink {\n  display: string;\n  id: string;\n  icon?: string;\n}\n\ninterface ModusNavbarLogo {\n  alt?: string;\n  url: string;\n  height?: string;\n}\n\ninterface ModusNavbarLogoOptions {\n  primary?: ModusNavbarLogo;\n  secondary?: ModusNavbarLogo;\n  clickable?: boolean;\n}\n\ninterface ModusNavbarTooltip {\n  text: string;\n  ariaLabel?: string;\n}\n\ninterface ModusProfileMenuOptions {\n  avatarUrl?: string;\n  email?: string;\n  initials?: string;\n  signOutText?: string;\n  links?: ModusNavbarProfileMenuLink[];\n  username: string;\n  tooltip: ModusNavbarTooltip;\n}\n\ninterface ModusNavbarButton {\n  id: string;\n  icon: string;\n  orderIndex: number;\n  hideMenu?: boolean;\n  tooltip?: ModusNavbarTooltip;\n}\n\nexport interface ModusNavbarDropdownItem {\n  text: string;\n  value: string;\n}\n\nexport interface ModusNavbarDropdownOptions {\n  ariaLabel: string;\n  items: ModusNavbarDropdownItem[];\n}\n```\n\n### Properties\n\n| Property               | Attribute                | Description                                                                                                                                                                             | Type                         | Default     |\n| ---------------------- | ------------------------ | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------- | ----------- |\n| `apps`                 | --                       | (optional) The apps to render in the apps menu.                                                                                                                                         | `ModusNavbarApp[]`           | `undefined` |\n| `navAriaLabel`         | `nav-aria-label`         | (optional) The navbar's aria-label.                                                                                                                                                     | `string`                     | `undefined` |\n| `buttons`              | --                       | (optional) The buttons to render in the Navbar.                                                                                                                                         | `ModusNavbarButton[]`        | `undefined` |\n| `notificationCount`    | `notification-count`     | (optional) To add the counter value to the notification icon.                                                                                                                           | `number`                     | `undefined` |\n| `enableSearchOverlay`  | `enable-search-overlay`  | (optional) Whether to show search overlay or not.                                                                                                                                       | `boolean`                    | `undefined` |\n| `helpTooltip`          | --                       | (optional) Help tooltip.                                                                                                                                                                | `ModusNavbarTooltip`         | `undefined` |\n| `helpUrl`              | `help-url`               | (optional) Help URL.                                                                                                                                                                    | `string`                     | `undefined` |\n| `logoOptions`          | --                       | (optional) Set the primary logo to display when the screen size is greater than 576 pixels, and the secondary logo to display when the screen size is less than or equal to 576 pixels. | `ModusNavbarLogoOptions`     | `undefined` |\n| `dropdownOptions`      | --                       | (optional) Renders a modus dropdown in the Navbar.                                                                                                                                      | `ModusNavbarDropdownOptions` | `undefined` |\n| `selectedDropdownItem` | --                       | (optional) The selected dropdown item.                                                                                                                                                  | `ModusNavbarDropdownItem`    | `undefined` |\n| `profileMenuOptions`   | --                       | (required) Profile menu options.                                                                                                                                                        | `ModusProfileMenuOptions`    | `undefined` |\n| `reverse`              | `reverse`                | (optional) Whether to display the navbar items in reverse order.                                                                                                                        | `boolean`                    | `undefined` |\n| `searchTooltip`        | --                       | (optional) Search tooltip.                                                                                                                                                              | `ModusNavbarTooltip`         | `undefined` |\n| `showAppsMenu`         | `show-apps-menu`         | (optional) Whether to show the apps menu.                                                                                                                                               | `boolean`                    | `undefined` |\n| `showHelp`             | `show-help`              | (optional) Whether to show help.                                                                                                                                                        | `boolean`                    | `undefined` |\n| `showMainMenu`         | `show-main-menu`         | (optional) Whether to show the main menu.                                                                                                                                               | `boolean`                    | `undefined` |\n| `showNotifications`    | `show-notifications`     | (optional) Whether to show notifications.                                                                                                                                               | `boolean`                    | `undefined` |\n| `showPendoPlaceholder` | `show-pendo-placeholder` | (optional) Whether to show the placeholder for Pendo.                                                                                                                                   | `boolean`                    | `undefined` |\n| `showProfile`          | `show-profile`           | (optional) Whether to show the profile.                                                                                                                                                 | `boolean`                    | `true`      |\n| `showSearch`           | `show-search`            | (optional) Whether to show search.                                                                                                                                                      | `boolean`                    | `undefined` |\n| `showShadow`           | `show-shadow`            | (optional) Whether to show a shadow under the navbar.                                                                                                                                   | `boolean`                    | `undefined` |\n| `variant`              | `variant`                | (optional) Color variants for NavBar.                                                                                                                                                   | `\"blue\" \\| \"default\"`        | `'default'` |\n\n### DOM Events\n\n| Event                     | Description                                                             | Type                                                      |\n| ------------------------- | ----------------------------------------------------------------------- | --------------------------------------------------------- |\n| `appsMenuAppOpen`         | An event that fires when an apps menu app opens.                        | `CustomEvent<ModusNavbarApp>`                             |\n| `appsMenuOpen`            | An event that fires when the apps menu opens.                           | `CustomEvent<void>`                                       |\n| `buttonClick`             | An event that fires when a button in the custom button list is clicked. | `CustomEvent<string>`                                     |\n| `dropdownItemSelect`      | An event that fires when a dropdown item is selected.                   | `CustomEvent<ModusNavbarDropdownItem>`                    |\n| `helpOpen`                | An event that fires when the help link opens.                           | `CustomEvent<void>`                                       |\n| `mainMenuClick`           | An event that fires on main menu click.                                 | `CustomEvent<KeyboardEvent>` or `CustomEvent<MouseEvent>` |\n| `notificationsMenuOpen`   | An event that fires when the notifications menu opens.                  | `CustomEvent<void>`                                       |\n| `productLogoClick`        | An event that fires on product logo click.                              | `CustomEvent<MouseEvent>`                                 |\n| `profileMenuLinkClick`    | An event that fires on profile menu link click.                         | `CustomEvent<string>`                                     |\n| `profileMenuOpen`         | An event that fires when the profile menu opens.                        | `CustomEvent<void>`                                       |\n| `profileMenuSignOutClick` | An event that fires on profile menu sign out click.                     | `CustomEvent<KeyboardEvent>` or `CustomEvent<MouseEvent>` |\n| `searchChange`            | An event that fires on search value change.                             | `CustomEvent<string>`                                     |\n| `searchMenuClick`         | An event that fires on search button click.                             | `CustomEvent<void>`                                       |\n\n### Methods\n\n<section>\n  <table>\n    <thead>\n      <tr>\n        <th>Name</th>\n        <th>Description</th>\n        <th>Returns</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td>hideMainMenu</td>\n        <td>Hides the main menu</td>\n        <td>void</td>\n      </tr>\n    </tbody>\n  </table>\n</section>\n\n### Accessibility\n\n- When Main Menu has focus, <kbd>Enter</kbd> toggles it.\n- When Notifications Menu has focus, <kbd>Enter</kbd> toggles it.\n- When Apps Menu has focus, <kbd>Enter</kbd> toggles it.\n- When User Menu has focus, <kbd>Enter</kbd> toggles it.\n",
    "storybook_content": "\n\n--- modus-navbar.stories.tsx ---\n\n// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-navbar-storybook-docs.mdx';\nimport { html } from 'lit-html';\nimport { withActions } from '@storybook/addon-actions/decorator';\n\nexport default {\n  title: 'Components/Navbar',\n  argTypes: {\n    enableSearchOverlay: {\n      name: 'enable-search-overlay',\n      description: 'Whether to show search overlay or not.',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    navAriaLabel: {\n      name: 'nav-aria-label',\n      description: \"The navbar's aria-label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    showHelp: {\n      name: 'show-help',\n      description: 'Toggle the help button',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    showProfile: {\n      name: 'show-profile',\n      description: 'Toggle the profile',\n      table: {\n        defaultValue: { summary: true },\n        type: { summary: 'boolean' },\n      },\n    },\n    showSearch: {\n      name: 'show-search',\n      description: 'Toggle the search button',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    profileMenuOptions: {\n      name: 'profile-menu-options',\n      description: 'Set the options for profile menu',\n      table: {\n        type: { summary: 'ModusProfileMenuOptions' },\n      },\n    },\n    buttons: {\n      name: 'buttons',\n      description: 'To add icon buttons dynamically to the Navbar, create an array of ModusNavbarButton.',\n      table: {\n        type: { summary: 'ModusNavbarButton[]' },\n      },\n    },\n    searchTooltip: {\n      name: 'search-tooltip ',\n      description: 'To add the search tooltip text and ariaLabel',\n      table: {\n        type: { summary: 'ModusNavbarTooltip' },\n      },\n    },\n    helpTooltip: {\n      name: 'help-tooltip ',\n      description: 'To add the help icon tooltip text and ariaLabel',\n      table: {\n        type: { summary: 'ModusNavbarTooltip' },\n      },\n    },\n    notificationCount: {\n      name: 'notification-count',\n      description: 'To add the counter value to the notification icon',\n      table: {\n        type: { summary: 'number' },\n      },\n    },\n  },\n  parameters: {\n    actions: {\n      handles: ['searchMenuClick', 'buttonClick', 'productLogoClick', 'helpOpen', 'profileMenuSignOutClick'],\n    },\n    controls: { expanded: true, sort: 'requiredFirst' },\n    docs: {\n      page: docs,\n      inlineStories: true,\n    },\n    options: {\n      isToolshown: true,\n    },\n    viewMode: 'docs',\n  },\n  decorators: [withActions],\n};\n\nconst workingAvatarUrl =\n  'https://images-wixmp-ed30a86b8c4ca887773594c2.wixmp.com/f/0e738c17-7f3c-422e-8225-f8c782b08626/d9pordj-43d4aa59-54b0-46a1-a568-e36dd691cf27.png?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1cm46YXBwOjdlMGQxODg5ODIyNjQzNzNhNWYwZDQxNWVhMGQyNmUwIiwiaXNzIjoidXJuOmFwcDo3ZTBkMTg4OTgyMjY0MzczYTVmMGQ0MTVlYTBkMjZlMCIsIm9iaiI6W1t7InBhdGgiOiJcL2ZcLzBlNzM4YzE3LTdmM2MtNDIyZS04MjI1LWY4Yzc4MmIwODYyNlwvZDlwb3Jkai00M2Q0YWE1OS01NGIwLTQ2YTEtYTU2OC1lMzZkZDY5MWNmMjcucG5nIn1dXSwiYXVkIjpbInVybjpzZXJ2aWNlOmZpbGUuZG93bmxvYWQiXX0.xvDk9KFIUAx0yAG3BPamDfRqmWUX6zwR4WVW40GjsoY';\nconst failingAvatarUrl = 'https://avatar.example.com/broken-image-link.png';\nconst defaultPrimaryLogo = 'https://modus.trimble.com/img/trimble-logo.svg';\nconst defaultSecondaryLogo = 'https://modus.trimble.com/favicon.svg';\nconst primaryAlt = 'Trimble Modus Logo';\nconst secondaryAlt = 'Trimble Modus Icon';\nconst defaultLogo = {\n  primary: {\n    url: defaultPrimaryLogo,\n    alt: primaryAlt,\n  },\n  secondary: {\n    url: defaultSecondaryLogo,\n    alt: secondaryAlt,\n  },\n};\nconst blueLogo = {\n  primary: {\n    url: 'https://modus-bootstrap.trimble.com/img/trimble-logo-rev.svg',\n    alt: 'Trimble Modus Logo',\n  },\n  secondary: {\n    url: 'https://modus-bootstrap.trimble.com/img/trimble-icon-rev.svg',\n    alt: 'Trimble Modus Icon',\n  },\n};\nconst defaultApps = [\n  {\n    description: 'The One Trimble Design System',\n    logoUrl: 'https://modus.trimble.com/favicon.svg',\n    name: 'Trimble Modus',\n    url: 'https://modus.trimble.com/',\n  },\n];\n\nconst Template = ({\n  buttons,\n  notificationCount,\n  enableSearchOverlay,\n  helpTooltip,\n  navAriaLabel,\n  profileMenuOptions,\n  searchTooltip,\n  showHelp,\n  showProfile,\n  showSearch,\n}) => html`\n  <modus-navbar\n    enable-search-overlay=${enableSearchOverlay}\n    nav-aria-label=${navAriaLabel}\n    show-apps-menu\n    show-help=${showHelp}\n    show-main-menu\n    show-profile=${showProfile}\n    show-search=${showSearch}\n    notification-count=${notificationCount}\n    show-notifications\n    .apps=${defaultApps}\n    .buttons=${buttons}\n    .helpTooltip=${helpTooltip}\n    .logoOptions=${defaultLogo}\n    .profileMenuOptions=${profileMenuOptions}\n    .searchTooltip=${searchTooltip}>\n    <div slot=\"main\" style=\"height:300px;\">Render your own main menu.</div>\n\n    <modus-list slot=\"addMenu\">\n      <modus-list-item>Menu Item 1</modus-list-item>\n      <modus-list-item>Menu Item 2</modus-list-item>\n    </modus-list>\n\n    <div slot=\"notificationMenu\">Render your own notification menu.</div>\n    <div slot=\"profileMenu\">Render your own profile menu content.</div>\n  </modus-navbar>\n`;\n\nexport const Default = Template.bind({});\nDefault.args = {\n  enableSearchOverlay: false,\n  helpTooltip: undefined,\n  navAriaLabel: 'Default',\n  profileMenuOptions: {\n    avatarUrl: workingAvatarUrl,\n    email: 'modus_user@trimble.com',\n    initials: 'MU',\n    signOutText: 'Sign out',\n    username: 'Modus User',\n    links: [\n      {\n        id: 'link1',\n        display: 'Link 1',\n        icon: 'moon',\n      },\n      {\n        id: 'link2',\n        display: 'Link 2',\n        icon: 'sun',\n      },\n    ],\n    tooltip: {\n      text: 'User Profile Menu',\n    },\n  },\n  searchTooltip: undefined,\n  showHelp: false,\n  showProfile: true,\n  showSearch: false,\n  notificationCount: 0,\n};\n\nconst FailedToLoadAvatarTemplate = ({\n  buttons,\n  notificationCount,\n  enableSearchOverlay,\n  helpTooltip,\n  navAriaLabel,\n  profileMenuOptions,\n  searchTooltip,\n  showHelp,\n  showProfile,\n  showSearch,\n}) => html`\n  <modus-navbar\n    enable-search-overlay=${enableSearchOverlay}\n    nav-aria-label=${navAriaLabel}\n    show-apps-menu\n    show-help=${showHelp}\n    show-help\n    show-main-menu\n    show-notifications\n    notification-count=${notificationCount}\n    show-profile=${showProfile}\n    show-search=${showSearch}\n    .apps=${defaultApps}\n    .buttons=${buttons}\n    .helpTooltip=${helpTooltip}\n    .logoOptions=${defaultLogo}\n    .profileMenuOptions=${profileMenuOptions}\n    .searchTooltip=${searchTooltip}>\n    <div slot=\"main\" style=\"height:300px;\">Render your own main menu.</div>\n    <div slot=\"notifications\">Render your own notifications.</div>\n  </modus-navbar>\n`;\n\nexport const FailedAvatar = FailedToLoadAvatarTemplate.bind({});\nFailedAvatar.args = {\n  buttons: [],\n  enableSearchOverlay: false,\n  helpTooltip: undefined,\n  navAriaLabel: 'Failed Avatar',\n  profileMenuOptions: {\n    avatarUrl: failingAvatarUrl,\n    email: 'modus_user@trimble.com',\n    initials: 'MU',\n    signOutText: 'Sign out',\n    username: 'Modus User',\n  },\n  searchTooltip: undefined,\n  showHelp: false,\n  showProfile: true,\n  showSearch: false,\n  notificationCount: 0,\n};\n\nconst BlueTemplate = ({\n  buttons,\n  notificationCount,\n  enableSearchOverlay,\n  helpTooltip,\n  navAriaLabel,\n  profileMenuOptions,\n  searchTooltip,\n  showHelp,\n  showProfile,\n  showSearch,\n}) => html`\n  <modus-navbar\n    enable-search-overlay=${enableSearchOverlay}\n    nav-aria-label=${navAriaLabel}\n    show-apps-menu\n    show-help=${showHelp}\n    show-help\n    show-main-menu\n    show-notifications\n    notification-count=${notificationCount}\n    show-profile=${showProfile}\n    show-search=${showSearch}\n    variant=\"blue\"\n    .apps=${defaultApps}\n    .buttons=${buttons}\n    .helpTooltip=${helpTooltip}\n    .logoOptions=${blueLogo}\n    .profileMenuOptions=${profileMenuOptions}\n    .searchTooltip=${searchTooltip}>\n    <div slot=\"main\" style=\"height:300px;\">Render your own main menu.</div>\n    <div slot=\"notifications\">Render your own notifications.</div>\n  </modus-navbar>\n`;\n\nexport const BlueNavbar = BlueTemplate.bind({});\nBlueNavbar.args = {\n  buttons: [],\n  enableSearchOverlay: false,\n  helpTooltip: undefined,\n  navAriaLabel: 'Blue navbar',\n  profileMenuOptions: {\n    avatarUrl: workingAvatarUrl,\n    email: 'modus_user@trimble.com',\n    initials: 'MU',\n    signOutText: 'Sign out',\n    username: 'Modus User',\n  },\n  searchTooltip: undefined,\n  showHelp: false,\n  showProfile: true,\n  showSearch: false,\n  notificationCount: 0,\n};\n\nconst items = [\n  { text: 'Project 1', value: '1' },\n  { text: 'Project 2', value: '2' },\n  { text: 'Project 3', value: '3' },\n];\nconst dropdownOptions = {\n  ariaLabel: 'Project dropdown',\n  items,\n};\n\nconst WithOptionalFeaturesTemplate = ({\n  buttons,\n  notificationCount,\n  enableSearchOverlay,\n  helpTooltip,\n  navAriaLabel,\n  profileMenuOptions,\n  searchTooltip,\n  showHelp,\n  showProfile,\n  showSearch,\n}) => html`\n  <modus-navbar\n    enable-search-overlay=${enableSearchOverlay}\n    nav-aria-label=${navAriaLabel}\n    show-apps-menu\n    show-help=${showHelp}\n    show-main-menu\n    show-profile=${showProfile}\n    show-search=${showSearch}\n    notification-count=${notificationCount}\n    show-notifications\n    .apps=${defaultApps}\n    .buttons=${buttons}\n    .helpTooltip=${helpTooltip}\n    .logoOptions=${defaultLogo}\n    .dropdownOptions=${dropdownOptions}\n    .selectedDropdownItem=${items[1]}\n    .profileMenuOptions=${profileMenuOptions}\n    .searchTooltip=${searchTooltip}>\n    <div slot=\"main\" style=\"height:300px;\">Render your own main menu.</div>\n\n    <modus-list slot=\"addMenu\">\n      <modus-list-item>Menu Item 1</modus-list-item>\n      <modus-list-item>Menu Item 2</modus-list-item>\n    </modus-list>\n\n    <div slot=\"notificationMenu\">Render your own notification menu.</div>\n    <div slot=\"profileMenu\">Render your own profile menu content.</div>\n  </modus-navbar>\n`;\n\nexport const WithOptionalFeatures = WithOptionalFeaturesTemplate.bind({});\nWithOptionalFeatures.args = {\n  enableSearchOverlay: false,\n  helpTooltip: undefined,\n  navAriaLabel: 'Default',\n  profileMenuOptions: {\n    avatarUrl: workingAvatarUrl,\n    email: 'modus_user@trimble.com',\n    initials: 'MU',\n    signOutText: 'Sign out',\n    username: 'Modus User',\n    links: [\n      {\n        id: 'link1',\n        display: 'Link 1',\n        icon: 'moon',\n      },\n      {\n        id: 'link2',\n        display: 'Link 2',\n        icon: 'sun',\n      },\n    ],\n    tooltip: {\n      text: 'User Profile Menu',\n    },\n  },\n  searchTooltip: undefined,\n  showHelp: false,\n  showProfile: true,\n  showSearch: false,\n  notificationCount: 0,\n};\n",
    "storybook": {
      "examples": [
        "<modus-list-item>Menu Item 1</modus-list-item>",
        "<modus-list-item>Menu Item 2</modus-list-item>",
        "<modus-list-item>Menu Item 1</modus-list-item>",
        "<modus-list-item>Menu Item 2</modus-list-item>",
        "\n  <modus-navbar\n    enable-search-overlay=${enableSearchOverlay}\n    nav-aria-label=${navAriaLabel}\n    show-apps-menu\n    show-help=${showHelp}\n    show-main-menu\n    show-profile=${showProfile}\n    show-search=${showSearch}\n    notification-count=${notificationCount}\n    show-notifications\n    .apps=${defaultApps}\n    .buttons=${buttons}\n    .helpTooltip=${helpTooltip}\n    .logoOptions=${defaultLogo}\n    .profileMenuOptions=${profileMenuOptions}\n    .searchTooltip=${searchTooltip}>\n    <div slot=\"main\" style=\"height:300px;\">Render your own main menu.</div>\n\n    <modus-list slot=\"addMenu\">\n      <modus-list-item>Menu Item 1</modus-list-item>\n      <modus-list-item>Menu Item 2</modus-list-item>\n    </modus-list>\n\n    <div slot=\"notificationMenu\">Render your own notification menu.</div>\n    <div slot=\"profileMenu\">Render your own profile menu content.</div>\n  </modus-navbar>\n"
      ],
      "variants": [
        "blue"
      ],
      "prop_usage": {
        "slot": [
          "main",
          "addMenu",
          "notificationMenu",
          "profileMenu",
          "notifications"
        ],
        "style": [
          "height:300px;"
        ],
        "variant": [
          "blue"
        ]
      }
    },
    "tag_name": "modus-navbar"
  },
  "modus-number-input": {
    "props": [
      {
        "name": "ariaLabel",
        "description": "/** Displayed only when the input is not focused. */\n  @State() formattedValue = this.getFormattedValue();\n\n  /** (optional) The input's aria-label. */",
        "type": "string | null"
      },
      {
        "name": "currency",
        "description": "/** Displayed only when the input is not focused. */\n  @State() formattedValue = this.getFormattedValue();\n\n  /** (optional) The input's aria-label. */",
        "type": "string"
      },
      {
        "name": "disabled",
        "description": "/** Displayed only when the input is not focused. */\n  @State() formattedValue = this.getFormattedValue();\n\n  /** (optional) The input's aria-label. */",
        "type": "boolean"
      },
      {
        "name": "errorText",
        "description": "/** Displayed only when the input is not focused. */\n  @State() formattedValue = this.getFormattedValue();\n\n  /** (optional) The input's aria-label. */",
        "type": "string"
      },
      {
        "name": "helperText",
        "description": "/** Displayed only when the input is not focused. */\n  @State() formattedValue = this.getFormattedValue();\n\n  /** (optional) The input's aria-label. */",
        "type": "string"
      },
      {
        "name": "label",
        "description": "/** Displayed only when the input is not focused. */\n  @State() formattedValue = this.getFormattedValue();\n\n  /** (optional) The input's aria-label. */",
        "type": "string"
      },
      {
        "name": "locale",
        "description": "/** Displayed only when the input is not focused. */\n  @State() formattedValue = this.getFormattedValue();\n\n  /** (optional) The input's aria-label. */",
        "type": "string"
      },
      {
        "name": "maxValue",
        "description": "/** Displayed only when the input is not focused. */\n  @State() formattedValue = this.getFormattedValue();\n\n  /** (optional) The input's aria-label. */",
        "type": "number"
      },
      {
        "name": "minValue",
        "description": "/** Displayed only when the input is not focused. */\n  @State() formattedValue = this.getFormattedValue();\n\n  /** (optional) The input's aria-label. */",
        "type": "number"
      },
      {
        "name": "placeholder",
        "description": "/** Displayed only when the input is not focused. */\n  @State() formattedValue = this.getFormattedValue();\n\n  /** (optional) The input's aria-label. */",
        "type": "string"
      },
      {
        "name": "readOnly",
        "description": "/** Displayed only when the input is not focused. */\n  @State() formattedValue = this.getFormattedValue();\n\n  /** (optional) The input's aria-label. */",
        "type": "boolean"
      },
      {
        "name": "required",
        "description": "/** Displayed only when the input is not focused. */\n  @State() formattedValue = this.getFormattedValue();\n\n  /** (optional) The input's aria-label. */",
        "type": "boolean"
      },
      {
        "name": "size",
        "description": "/** Displayed only when the input is not focused. */\n  @State() formattedValue = this.getFormattedValue();\n\n  /** (optional) The input's aria-label. */",
        "type": "'medium' | 'large'"
      },
      {
        "name": "step",
        "description": "/** Displayed only when the input is not focused. */\n  @State() formattedValue = this.getFormattedValue();\n\n  /** (optional) The input's aria-label. */",
        "type": "number"
      },
      {
        "name": "textAlign",
        "description": "/** Displayed only when the input is not focused. */\n  @State() formattedValue = this.getFormattedValue();\n\n  /** (optional) The input's aria-label. */",
        "type": "'left' | 'right'"
      },
      {
        "name": "validText",
        "description": "/** Displayed only when the input is not focused. */\n  @State() formattedValue = this.getFormattedValue();\n\n  /** (optional) The input's aria-label. */",
        "type": "string"
      }
    ],
    "events": [
      "valueChange"
    ],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-number-input-storybook-docs.mdx ---\n\n# Number Input\n\n---\n\n[Modus Number Input](https://modus.trimble.com/components/inputs/) web components are wrappers around native `<input type=\"number\">` elements. They are referenced using the `<modus-number-input>` custom HTML element.\n\nThis component is compatible with Angular reactive forms. This can be achieved through the implementation of a simple directive.\n\n### Default\n\n<modus-number-input label=\"Number Input Demo 1\" placeholder=\"Placeholder\" required=\"true\"></modus-number-input><br />\n<modus-number-input disabled=\"true\" label=\"Number Input Demo 2\" placeholder=\"Placeholder\" required=\"true\"></modus-number-input><br />\n<modus-number-input helper-text=\"Helper demo\" label=\"Number Input Demo 3\" placeholder=\"Placeholder\"></modus-number-input><br />\n<modus-number-input error-text=\"Error demo\" label=\"Number Input Demo 4\" placeholder=\"Placeholder\"></modus-number-input><br />\n<modus-number-input valid-text=\"Valid demo\" label=\"Number Input Demo 5\" placeholder=\"Placeholder\"></modus-number-input><br />\n<modus-number-input label=\"Text Input Demo 6\" placeholder=\"Placeholder\" size=\"large\" value=\"100\"></modus-number-input>\n\n```html\n<modus-number-input label=\"Number Input Demo 1\" placeholder=\"Placeholder\" required=\"true\"></modus-number-input>\n<modus-number-input\n  disabled=\"true\"\n  label=\"Number Input Demo 2\"\n  placeholder=\"Placeholder\"\n  required=\"true\"></modus-number-input>\n<modus-number-input helper-text=\"Helper demo\" label=\"Number Input Demo 3\" placeholder=\"Placeholder\"></modus-number-input>\n<modus-number-input error-text=\"Error demo\" label=\"Number Input Demo 4\" placeholder=\"Placeholder\"></modus-number-input>\n<modus-number-input valid-text=\"Valid demo\" label=\"Number Input Demo 5\" placeholder=\"Placeholder\"></modus-number-input>\n<modus-number-input label=\"Text Input Demo 6\" placeholder=\"Placeholder\" size=\"large\" value=\"100\"></modus-number-input>\n```\n\n### Currency and Locale\n\nThe number Input uses Intl.NumberFormat to format the value based on the currency and locale provided.\n\n- Follow the currency codes from [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) for the `currency` property.\n- Follow the locale codes from [BCP 47](https://tools.ietf.org/html/bcp47) for the `locale` property.\n\n<modus-number-input label=\"With Currency\" currency=\"USD\" placeholder=\"Placeholder\" value=\"2400\" ></modus-number-input><br />\n<modus-number-input label=\"With Locale\" locale=\"en-IN\" placeholder=\"Placeholder\"  value=\"2400\" ></modus-number-input><br />\n\n```html\n<modus-number-input label=\"With Currency\" currency=\"USD\" placeholder=\"Placeholder\" value=\"2400\"></modus-number-input>\n<modus-number-input label=\"With Locale\" locale=\"en-IN\" placeholder=\"Placeholder\" value=\"2400\"></modus-number-input>\n```\n\n### Properties\n\n| Property      | Attribute     | Description                                          | Type                  | Default     |\n| ------------- | ------------- | ---------------------------------------------------- | --------------------- | ----------- |\n| `ariaLabel`   | `aria-label`  | (optional) The input's aria-label.                   | `string`              | `undefined` |\n| `currency`    | `currency`    | (optional) The input's currency.                     | `string`              | `''`        |\n| `locale`      | `locale`      | (optional) The input's locale                        | `string`              | `undefined` |\n| `disabled`    | `disabled`    | (optional) Whether the input is disabled.            | `boolean`             | `undefined` |\n| `errorText`   | `error-text`  | (optional) The input's error state text.             | `string`              | `undefined` |\n| `helperText`  | `helper-text` | (optional) The input's helper text displayed below.  | `string`              | `undefined` |\n| `label`       | `label`       | (optional) The input's label.                        | `string`              | `undefined` |\n| `maxValue`    | `max-value`   | (optional) The input's maximum value.                | `number`              | `undefined` |\n| `minValue`    | `min-value`   | (optional) The input's minimum value.                | `number`              | `undefined` |\n| `placeholder` | `placeholder` | (optional) The input's placeholder text.             | `string`              | `undefined` |\n| `readOnly`    | `read-only`   | (optional) Whether the input's content is read-only. | `boolean`             | `undefined` |\n| `required`    | `required`    | (optional) Whether the input is required.            | `boolean`             | `undefined` |\n| `size`        | `size`        | (optional) The input's size.                         | `\"large\" \\| \"medium\"` | `'medium'`  |\n| `step`        | `step`        | (optional) The input's step.                         | `number`              | `undefined` |\n| `textAlign`   | `text-align`  | (optional) The input's text alignment.               | `\"left\" \\| \"right\"`   | `'left'`    |\n| `validText`   | `valid-text`  | (optional) The input's valid state text.             | `string`              | `undefined` |\n| `value`       | `value`       | (optional) The input's value.                        | `string`              | `undefined` |\n\n### DOM Events\n\n| Event         | Description                                | Type                  |\n| ------------- | ------------------------------------------ | --------------------- |\n| `valueChange` | An event that fires on input value change. | `CustomEvent<string>` |\n\n### Methods\n\n| Method name  | Description     | Parameter | Return          |\n| ------------ | --------------- | --------- | --------------- |\n| `focusInput` | Focus the input |           | `Promise<void>` |\n\n### Accessibility\n\n- Number Input gets an `aria-label` provided by the `aria-label` property input.\n- It is recommended to pass `aria-label` when there is no label used so the input is accessible to screen readers.\n- Number Input gets an `aria-disabled` set to whether Number Input is disabled.\n- Number Input gets an `aria-placeholder` provided by the `placeholder` property input.\n- Number Input gets an `aria-invalid` set to whether Number Input is invalid.\n- Number Input gets an `aria-readonly` set to whether Number Input is readonly.\n- Number Input gets an `aria-required` set to whether Number Input is required.\n- Number Input gets a `aria-valuemax` provided by the `max-value` property input.\n- Number Input gets a `aria-valuemin` provided by the `min-value` property input.\n- Number Input gets a `aria-valuenow` set to Number Input's current value.\n",
    "storybook_content": "\n\n--- modus-number-input.stories.tsx ---\n\n// modus-number-input.stories.tsx\n\n// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-number-input-storybook-docs.mdx';\nimport { html } from 'lit-html';\nimport { withActions } from '@storybook/addon-actions/decorator';\n\nexport default {\n  title: 'User Inputs/Number Input',\n  argTypes: {\n    ariaLabel: {\n      name: 'aria-label',\n      description: \"The number input's aria-label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    currency: {\n      name: 'currency',\n      description:\n        'The currency symbol.\\nNote: Follow the currency codes from [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) for the `currencySymbol` property.\\n',\n      table: {\n        type: { summary: 'string' },\n        defaultValue: { summary: \"''\" },\n      },\n    },\n    locale: {\n      name: 'locale',\n      description:\n        'The locale of the selected currency. Note: Follow the locale codes from [BCP 47](https://tools.ietf.org/html/bcp47) for the `locale` property.',\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    disabled: {\n      description: 'Whether the number input is disabled',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    errorText: {\n      name: 'error-text',\n      description: \"The number input's error text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    helperText: {\n      name: 'helper-text',\n      description: \"The number input's helper text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    label: {\n      description: \"The number input's label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    maxValue: {\n      name: 'max-value',\n      description: \"The number input's maximum value\",\n      table: {\n        type: { summary: 'number' },\n      },\n    },\n    minValue: {\n      name: 'min-value',\n      description: \"The number input's minimum value\",\n      table: {\n        type: { summary: 'number' },\n      },\n    },\n    placeholder: {\n      description: \"The number input's placeholder text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    readOnly: {\n      name: 'read-only',\n      description: 'Whether the number input is read-only',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    required: {\n      description: 'Whether the number input is required',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    size: {\n      options: ['medium', 'large'],\n      type: 'select',\n      description: 'The size of the number input',\n      table: {\n        defaultValue: { summary: `'medium'` },\n        type: { summary: `'large' | 'medium'` },\n      },\n    },\n    step: {\n      description: \"The number input's step\",\n      table: {\n        type: { summary: 'number' },\n      },\n    },\n    textAlign: {\n      name: 'text-align',\n      options: ['left', 'right'],\n      type: 'select',\n      description: 'text alignment for the number input.',\n      table: {\n        defaultValue: { summary: \"'left'\" },\n        type: {\n          summary: \"'left' | 'right'\",\n        },\n      },\n    },\n    validText: {\n      name: 'valid-text',\n      description: \"The number input's valid text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    value: {\n      description: \"The number input's value\",\n      table: {\n        type: { summary: 'number' },\n      },\n    },\n  },\n  parameters: {\n    actions: {\n      handles: ['valueChange'],\n    },\n    controls: { expanded: true, sort: 'requiredFirst' },\n    docs: {\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n    },\n  },\n  decorators: [withActions],\n};\n\nconst Template = ({\n  ariaLabel,\n  currency,\n  locale,\n  disabled,\n  errorText,\n  helperText,\n  label,\n  maxValue,\n  minValue,\n  placeholder,\n  readOnly,\n  required,\n  size,\n  step,\n  textAlign,\n  validText,\n  value,\n}) => html`\n  <modus-number-input\n    aria-label=${ariaLabel}\n    currency=${currency}\n    locale=${locale}\n    ?disabled=${disabled}\n    error-text=${errorText}\n    helper-text=${helperText}\n    label=${label}\n    max-value=${maxValue}\n    min-value=${minValue}\n    placeholder=${placeholder}\n    ?read-only=${readOnly}\n    ?required=${required}\n    size=${size}\n    step=${step}\n    text-align=${textAlign}\n    valid-text=${validText}\n    value=${value}></modus-number-input>\n`;\n\nexport const Default = Template.bind({});\nDefault.args = {\n  ariaLabel: '',\n  currency: '',\n  locale: '',\n  disabled: false,\n  errorText: '',\n  helperText: '',\n  label: 'Number Input',\n  maxValue: 100000,\n  minValue: 0,\n  placeholder: '',\n  readOnly: false,\n  required: false,\n  size: 'medium',\n  step: 1,\n  textAlign: 'left',\n  validText: '',\n  value: 100000,\n};\n",
    "storybook": {
      "examples": [
        "<modus-number-input\n    aria-label=${ariaLabel}\n    currency=${currency}\n    locale=${locale}\n    ?disabled=${disabled}\n    error-text=${errorText}\n    helper-text=${helperText}\n    label=${label}\n    max-value=${maxValue}\n    min-value=${minValue}\n    placeholder=${placeholder}\n    ?read-only=${readOnly}\n    ?required=${required}\n    size=${size}\n    step=${step}\n    text-align=${textAlign}\n    valid-text=${validText}\n    value=${value}></modus-number-input>",
        "\n  <modus-number-input\n    aria-label=${ariaLabel}\n    currency=${currency}\n    locale=${locale}\n    ?disabled=${disabled}\n    error-text=${errorText}\n    helper-text=${helperText}\n    label=${label}\n    max-value=${maxValue}\n    min-value=${minValue}\n    placeholder=${placeholder}\n    ?read-only=${readOnly}\n    ?required=${required}\n    size=${size}\n    step=${step}\n    text-align=${textAlign}\n    valid-text=${validText}\n    value=${value}></modus-number-input>\n"
      ],
      "variants": [],
      "prop_usage": {}
    },
    "tag_name": "modus-number-input"
  },
  "modus-pagination": {
    "props": [
      {
        "name": "ariaLabel",
        "description": "",
        "type": "string | null"
      },
      {
        "name": "maxPage",
        "description": "",
        "type": "number"
      },
      {
        "name": "minPage",
        "description": "",
        "type": "number"
      },
      {
        "name": "size",
        "description": "",
        "type": "'large' | 'medium' | 'small'"
      }
    ],
    "events": [
      "pageChange"
    ],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-pagination-storybook-docs.mdx ---\n\nimport { Anchor } from '@storybook/addon-docs';\n\n# Pagination\n\n---\n\n[Modus Pagination](https://modus.trimble.com/components/web/pagination/) web components are referenced using the `<modus-pagination>` custom HTML element.\n\n<Anchor storyId=\"components-pagination--default\" />\n\n### Default\n\n<modus-pagination active-page=\"8\" max-page=\"32\" min-page=\"1\" size=\"medium\"></modus-pagination>\n\n<Anchor storyId=\"components-pagination--large\" />\n\n### Large\n\n<modus-pagination active-page=\"8\" max-page=\"32\" min-page=\"1\" size=\"large\"></modus-pagination>\n\n<Anchor storyId=\"components-pagination--small\" />\n\n### Small\n\n<modus-pagination active-page=\"8\" max-page=\"32\" min-page=\"1\" size=\"small\"></modus-pagination>\n\n### Previous and Next Text Controls\n\n<modus-pagination active-page=\"8\" max-page=\"32\" min-page=\"1\" size=\"medium\" prev-page-button-text=\"Prev\" next-page-button-text=\"Next\"></modus-pagination>\n\n```html\n<modus-pagination active-page=\"8\" max-page=\"32\" min-page=\"1\" size=\"medium\"></modus-pagination>\n<modus-pagination active-page=\"8\" max-page=\"32\" min-page=\"1\" size=\"large\"></modus-pagination>\n<modus-pagination active-page=\"8\" max-page=\"32\" min-page=\"1\" size=\"small\"></modus-pagination>\n<modus-pagination\n  active-page=\"8\"\n  max-page=\"32\"\n  min-page=\"1\"\n  prev-page-button-text=\"Prev\"\n  next-page-button-text=\"Next\"\n  size=\"medium\"></modus-pagination>\n```\n\n## Properties\n\n| Property             | Attribute               | Description                                                                         | Type                         | Default     |\n| -------------------- | ----------------------- | ----------------------------------------------------------------------------------- | ---------------------------- | ----------- |\n| `activePage`         | `active-page`           | The pagination's active page                                                        | `number`                     | `1`         |\n| `ariaLabel`          | `aria-label`            | The pagination's aria-label                                                         | `string`                     | `undefined` |\n| `maxPage`            | `max-page`              | The pagination's maximum page                                                       | `number`                     | `undefined` |\n| `minPage`            | `min-page`              | The pagination's minimum page                                                       | `number`                     | `undefined` |\n| `nextPageButtonText` | `next-page-button-text` | (Optional) The previous page button text. If not set, an icon control will be used. | `string`                     | `undefined` |\n| `prevPageButtonText` | `prev-page-button-text` | (Optional) The next page button text. If not set, an icon control will be used.     | `string`                     | `undefined` |\n| `size`               | `size`                  | The pagination's size                                                               | `\"large\", \"medium\", \"small\"` | `'medium'`  |\n\n### DOM Events\n\n<section>\n  <table>\n    <thead>\n      <tr>\n        <th>Name</th>\n        <th>Description</th>\n        <th>Emits</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td>pageChange</td>\n        <td>Fires on page change</td>\n        <td>The current page</td>\n      </tr>\n    </tbody>\n  </table>\n</section>\n\n### Accessibility\n\n- Pagination gets an `aria-label` provided by the `aria-label` property input.\n- When Left Chevron has focus, <kbd>Enter</kbd> goes back a page, and emits the `pageChange` event.\n- When Right Chevron has focus, <kbd>Enter</kbd> goes forward a page, and emits the `pageChange` event.\n",
    "storybook_content": "\n\n--- modus-pagination.stories.tsx ---\n\n// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-pagination-storybook-docs.mdx';\nimport { html } from 'lit-html';\nimport { withActions } from '@storybook/addon-actions/decorator';\n\nexport default {\n  title: 'Components/Pagination',\n  argTypes: {\n    activePage: {\n      name: 'active-page',\n      description: \"The pagination's active page\",\n      table: {\n        type: { summary: 'number' },\n      },\n      type: { required: true },\n    },\n    ariaLabel: {\n      name: 'aria-label',\n      description: \"The pagination's aria-label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    maxPage: {\n      name: 'max-page',\n      description: \"The pagination's maximum page\",\n      table: {\n        type: { summary: 'number' },\n      },\n      type: { required: true },\n    },\n    minPage: {\n      name: 'min-page',\n      description: \"The pagination's minimum page\",\n      table: {\n        type: { summary: 'number' },\n      },\n      type: { required: true },\n    },\n    prevPageButtonText: {\n      name: 'prev-page-button-text',\n      description: 'The previous page button text. If not set, an icon control will be used.',\n      table: {\n        type: { summary: 'string' },\n      },\n      type: { required: false },\n    },\n    nextPageButtonText: {\n      name: 'next-page-button-text',\n      description: 'The next page button text. If not set, an icon control will be used.',\n      table: {\n        type: { summary: 'string' },\n      },\n      type: { required: false },\n    },\n    size: {\n      options: ['small', 'medium', 'large'],\n      type: 'select',\n      description: 'The size of the pagination',\n      table: {\n        defaultValue: { summary: `'medium'` },\n        type: { summary: `'small' | 'medium' | 'large'` },\n      },\n    },\n  },\n  parameters: {\n    controls: { expanded: true, sort: 'requiredFirst' },\n    actions: {\n      handles: ['pageChange'],\n    },\n    docs: {\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n    },\n  },\n  decorators: [withActions],\n};\n\nexport const Default = ({ activePage, ariaLabel, maxPage, minPage, prevPageButtonText, nextPageButtonText, size }) => html`\n  <modus-pagination\n    active-page=${activePage}\n    aria-label=${ariaLabel}\n    max-page=${maxPage}\n    min-page=${minPage}\n    prev-page-button-text=${prevPageButtonText}\n    next-page-button-text=${nextPageButtonText}\n    size=${size}>\n    Default\n  </modus-pagination>\n`;\nDefault.args = {\n  activePage: '4',\n  ariaLabel: '',\n  maxPage: '100',\n  minPage: '1',\n  prevPageButtonText: '',\n  nextPageButtonText: '',\n  size: 'medium',\n};\n\nexport const Large = ({ activePage, ariaLabel, maxPage, minPage, prevPageButtonText, nextPageButtonText, size }) => html`\n  <modus-pagination\n    active-page=${activePage}\n    aria-label=${ariaLabel}\n    max-page=${maxPage}\n    min-page=${minPage}\n    prev-page-button-text=${prevPageButtonText}\n    next-page-button-text=${nextPageButtonText}\n    size=${size}>\n    Large\n  </modus-pagination>\n`;\nLarge.args = {\n  activePage: '4',\n  ariaLabel: '',\n  maxPage: '100',\n  minPage: '1',\n  prevPageButtonText: '',\n  nextPageButtonText: '',\n  size: 'large',\n};\n\nexport const Small = ({ activePage, ariaLabel, maxPage, minPage, prevPageButtonText, nextPageButtonText, size }) => html`\n  <modus-pagination\n    active-page=${activePage}\n    aria-label=${ariaLabel}\n    max-page=${maxPage}\n    min-page=${minPage}\n    prev-page-button-text=${prevPageButtonText}\n    next-page-button-text=${nextPageButtonText}\n    size=${size}>\n    Small\n  </modus-pagination>\n`;\nSmall.args = {\n  activePage: '4',\n  ariaLabel: '',\n  maxPage: '100',\n  minPage: '1',\n  prevPageButtonText: '',\n  nextPageButtonText: '',\n  size: 'small',\n};\n\nexport const PrevNextTextButton = ({\n  activePage,\n  ariaLabel,\n  maxPage,\n  minPage,\n  prevPageButtonText,\n  nextPageButtonText,\n  size,\n}) => html`\n  <modus-pagination\n    active-page=${activePage}\n    aria-label=${ariaLabel}\n    max-page=${maxPage}\n    min-page=${minPage}\n    prev-page-button-text=${prevPageButtonText}\n    next-page-button-text=${nextPageButtonText}\n    size=${size}>\n  </modus-pagination>\n`;\nPrevNextTextButton.args = {\n  activePage: '4',\n  ariaLabel: '',\n  maxPage: '100',\n  minPage: '1',\n  prevPageButtonText: 'Prev',\n  nextPageButtonText: 'Next',\n  size: 'medium',\n};\n",
    "storybook": {
      "examples": [
        "<modus-pagination\n    active-page=${activePage}\n    aria-label=${ariaLabel}\n    max-page=${maxPage}\n    min-page=${minPage}\n    prev-page-button-text=${prevPageButtonText}\n    next-page-button-text=${nextPageButtonText}\n    size=${size}>\n    Default\n  </modus-pagination>",
        "<modus-pagination\n    active-page=${activePage}\n    aria-label=${ariaLabel}\n    max-page=${maxPage}\n    min-page=${minPage}\n    prev-page-button-text=${prevPageButtonText}\n    next-page-button-text=${nextPageButtonText}\n    size=${size}>\n    Large\n  </modus-pagination>",
        "<modus-pagination\n    active-page=${activePage}\n    aria-label=${ariaLabel}\n    max-page=${maxPage}\n    min-page=${minPage}\n    prev-page-button-text=${prevPageButtonText}\n    next-page-button-text=${nextPageButtonText}\n    size=${size}>\n    Small\n  </modus-pagination>",
        "<modus-pagination\n    active-page=${activePage}\n    aria-label=${ariaLabel}\n    max-page=${maxPage}\n    min-page=${minPage}\n    prev-page-button-text=${prevPageButtonText}\n    next-page-button-text=${nextPageButtonText}\n    size=${size}>\n  </modus-pagination>",
        "\n  <modus-pagination\n    active-page=${activePage}\n    aria-label=${ariaLabel}\n    max-page=${maxPage}\n    min-page=${minPage}\n    prev-page-button-text=${prevPageButtonText}\n    next-page-button-text=${nextPageButtonText}\n    size=${size}>\n    Default\n  </modus-pagination>\n"
      ],
      "variants": [],
      "prop_usage": {}
    },
    "tag_name": "modus-pagination"
  },
  "modus-progress-bar": {
    "props": [
      {
        "name": "ariaLabel",
        "description": "/** (optional) The progress bar's aria-label. */",
        "type": "string | null"
      },
      {
        "name": "backgroundColor",
        "description": "/** (optional) The progress bar's aria-label. */",
        "type": "string"
      },
      {
        "name": "color",
        "description": "/** (optional) The progress bar's aria-label. */",
        "type": "string"
      },
      {
        "name": "mode",
        "description": "/** (optional) The progress bar's aria-label. */",
        "type": "'determinate' | 'indeterminate'"
      },
      {
        "name": "size",
        "description": "/** (optional) The progress bar's aria-label. */",
        "type": "'default' | 'small' | 'compact'"
      },
      {
        "name": "text",
        "description": "/** (optional) The progress bar's aria-label. */",
        "type": "string"
      },
      {
        "name": "textColor",
        "description": "/** (optional) The progress bar's aria-label. */",
        "type": "string"
      }
    ],
    "events": [],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-progress-bar-storybook-docs.mdx ---\n\nimport { Anchor } from '@storybook/addon-docs';\n\n# Progress Bar\n\n---\n\n[Modus Progress Bar](https://modus.trimble.com/components/web/progress-bars/) web components display the completion progress of a task. They are referenced using the `<modus-progress-bar>` custom HTML element.\n\n### Default\n\n<div>\n  <modus-progress-bar value=\"3\" max-value=\"4\" min-value=\"0\" text=\"75%\"></modus-progress-bar>\n</div>\n\n<Anchor storyId=\"components-progress-bar--default\" />\n\n### Small\n\n<div>\n  <modus-progress-bar value=\"3\" max-value=\"4\" min-value=\"0\" size=\"small\"></modus-progress-bar>\n</div>\n\n<Anchor storyId=\"components-progress-bar--small\" />\n\n### Compact\n\n<div>\n  <modus-progress-bar value=\"3\" max-value=\"4\" min-value=\"0\" size=\"compact\"></modus-progress-bar>\n</div>\n\n### Indeterminate\n\n<div>\n  <modus-progress-bar mode=\"indeterminate\"></modus-progress-bar>\n</div>\n\n<Anchor storyId=\"components-progress-bar--compact\" />\n\n```html\n<modus-progress-bar value=\"3\" max-value=\"4\" min-value=\"0\" text=\"75%\"></modus-progress-bar>\n<modus-progress-bar value=\"3\" max-value=\"4\" min-value=\"0\" size=\"small\"></modus-progress-bar>\n<modus-progress-bar value=\"3\" max-value=\"4\" min-value=\"0\" size=\"compact\"></modus-progress-bar>\n<modus-progress-bar mode=\"indeterminate\"></modus-progress-bar>\n```\n\n### Properties\n\n| Name               | Description                   | Type                                | Default Value                | Required |\n| ------------------ | ----------------------------- | ----------------------------------- | ---------------------------- | -------- |\n| `aria-label`       | The progress bar's aria-label | `string`                            |                              |          |\n| `background-color` | The bar's background color    | `string`                            | `#FFFFFF` (Trimble White)    |          |\n| `color`            | The bar's color               | `string`                            | `#005F9E` (Trimble Blue Mid) |          |\n| `max-value`        | The maximum value             | `number`                            | `100`                        |          |\n| `mode`             | The progress bar's mode       | `'determinate'`, `'indeterminate'`  | `determinate`                |          |\n| `min-value `       | The minimum value             | `number`                            | `0`                          |          |\n| `size`             | The size of the bar           | `'default'`, `'small'`, `'compact'` | `default`                    |          |\n| `text`             | The text displayed on the bar | `string`                            |                              |          |\n| `text-color`       | The text color                | `string`                            | `#FFFFFF` (Trimble White)    |          |\n| `value`            | The progress value            | `number`                            | `0`                          |          |\n\n### Accessibility\n\n- Progress Bar has `role` of `progressbar`.\n- Progress Bar gets an `aria-label` provided by the `aria-label` property input.\n- Progress Bar gets an `aria-maxvalue` provided by the `max-value` property input.\n- Progress Bar gets an `aria-minvalue` provided by the `min-value` property input.\n- Progress Bar gets an `aria-valuenow` set to the current value.\n- Progress Bar in `indeterminate` mode has `aria-valuetext`,`aria-maxvalue` and `aria-minvalue` set to `null`.\n",
    "storybook_content": "\n\n--- modus-progress-bar.stories.tsx ---\n\n// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-progress-bar-storybook-docs.mdx';\nimport { html } from 'lit-html';\n\nexport default {\n  title: 'Components/Progress Bar',\n  argTypes: {\n    ariaLabel: {\n      name: 'aria-label',\n      description: \"The progress bar's aria-label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    backgroundColor: {\n      name: 'background-color',\n      description: \"The progress bar's background-color\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    color: {\n      description: \"The progress bar's color\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    maxValue: {\n      name: 'max-value',\n      description: \"The progress bar's maximum value\",\n      table: {\n        defaultValue: { summary: 100 },\n        type: { summary: 'number' },\n      },\n    },\n    mode: {\n      name: 'mode',\n      options: ['determinate', 'indeterminate'],\n      type: 'select',\n      description: \"The progress bar's mode\",\n      table: {\n        defaultValue: { summary: 'determinate' },\n        type: { summary: \"'determinate' | 'indeterminate'\" },\n      },\n    },\n    minValue: {\n      name: 'min-value',\n      description: \"The progress bar's minimum value\",\n      table: {\n        defaultValue: { summary: 0 },\n        type: { summary: 'number' },\n      },\n    },\n    size: {\n      options: ['default', 'small', 'compact'],\n      type: 'select',\n      description: \"The progress bar's size\",\n      table: {\n        defaultValue: { summary: 'default' },\n        type: { summary: `'default' | 'small' | 'compact'` },\n      },\n    },\n    text: {\n      description: \"The progress bar's text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    textColor: {\n      name: 'text-color',\n      description: \"The progress bar's text color\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    value: {\n      description: \"The progress bar's value\",\n      table: {\n        defaultValue: { summary: 0 },\n        type: { summary: 'number' },\n      },\n    },\n  },\n  parameters: {\n    controls: { expanded: true, sort: 'requiredFirst' },\n    docs: {\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n    },\n  },\n};\n\nconst Template = ({ ariaLabel, backgroundColor, color, maxValue, minValue, mode, size, text, textColor, value }) => html`\n  <modus-progress-bar\n    aria-label=${ariaLabel}\n    background-color=${backgroundColor}\n    color=${color}\n    max-value=${maxValue}\n    mode=${mode}\n    min-value=${minValue}\n    size=${size}\n    text=${text}\n    text-color=${textColor}\n    value=${value}>\n  </modus-progress-bar>\n`;\n\nexport const Default = Template.bind({});\nDefault.args = {\n  ariaLabel: 'progress bar',\n  backgroundColor: '',\n  color: '',\n  maxValue: 100,\n  mode: 'determinate',\n  minValue: 0,\n  size: 'default',\n  text: 'Some progress!',\n  textColor: '',\n  value: 50,\n};\n\nexport const Small = Template.bind({});\nSmall.args = {\n  ariaLabel: 'progress bar',\n  backgroundColor: '',\n  color: '',\n  maxValue: 100,\n  mode: 'determinate',\n  minValue: 0,\n  size: 'small',\n  text: '',\n  textColor: '',\n  value: 50,\n};\n\nexport const Compact = Template.bind({});\nCompact.args = {\n  ariaLabel: 'progress bar',\n  backgroundColor: '',\n  color: '',\n  maxValue: 100,\n  mode: 'determinate',\n  minValue: 0,\n  size: 'compact',\n  text: '',\n  textColor: '',\n  value: 50,\n};\n\nexport const Indeterminate = Template.bind({});\nIndeterminate.args = {\n  ariaLabel: 'progress bar',\n  backgroundColor: '',\n  color: '',\n  maxValue: 100,\n  mode: 'indeterminate',\n  minValue: 0,\n  size: 'default',\n  text: 'Indeterminate progress!',\n  textColor: '',\n  value: 50,\n};\n",
    "storybook": {
      "examples": [
        "<modus-progress-bar\n    aria-label=${ariaLabel}\n    background-color=${backgroundColor}\n    color=${color}\n    max-value=${maxValue}\n    mode=${mode}\n    min-value=${minValue}\n    size=${size}\n    text=${text}\n    text-color=${textColor}\n    value=${value}>\n  </modus-progress-bar>",
        "\n  <modus-progress-bar\n    aria-label=${ariaLabel}\n    background-color=${backgroundColor}\n    color=${color}\n    max-value=${maxValue}\n    mode=${mode}\n    min-value=${minValue}\n    size=${size}\n    text=${text}\n    text-color=${textColor}\n    value=${value}>\n  </modus-progress-bar>\n"
      ],
      "variants": [],
      "prop_usage": {}
    },
    "tag_name": "modus-progress-bar"
  },
  "modus-radio-group": {
    "props": [],
    "events": [],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-radio-group-storybook-docs.mdx ---\n\nimport { Story } from '@storybook/blocks';\nimport * as RadioGroup from './modus-radio-group.stories.tsx';\n\n# Radio Group\n\n---\n\n[Modus Radio Group](https://modus.trimble.com/components/radio-buttons/) web components are wrappers around native `<modus-radio-button>` custom HTML elements. They are referenced using the `<modus-radio-group>` custom HTML element.\n\nA TypeScript typing has been provided named RadioButton defined as:\n\n```ts\n{\n  checked?: boolean;\n  disabled?: boolean;\n  id: string;\n  label: string;\n}\n```\n\n### Default\n\n<Story of={RadioGroup.Default} height={'150px'} />\n\n```html\n<modus-radio-group checked-id=\"1\" name=\"my-group\"></modus-radio-group>\n\n<script>\n  const modusRadioGroup = document.querySelector('modus-radio-group');\n  modusRadioGroup.radioButtons = [\n    {\n      id: '0',\n      label: 'Radio 1',\n    },\n    {\n      id: '1',\n      checked: true,\n      label: 'Radio 2',\n    },\n    {\n      id: '2',\n      label: 'Radio 3',\n    },\n  ];\n</script>\n```\n\n### Properties\n\n| Name           | Description                                                                                                                                                                          | Type            | Options          | Default Value | Required |\n| -------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | --------------- | ---------------- | ------------- | -------- |\n| `checked-id`   | The id of the checked radio button                                                                                                                                                   | `string`        |                  |               | \u2714       |\n| `name`         | The [name](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/radio#defining_a_radio_group) of the radio group. Used to group individual radio elements into one group. | `string`        |                  |               | \u2714       |\n| `radioButtons` | The radio buttons                                                                                                                                                                    | `RadioButton[]` |                  |               | \u2714       |\n| `aria-label`   | The radio group's aria-label                                                                                                                                                         | `string`        |                  |               |          |\n| `size`         | The radio group's size                                                                                                                                                               | `string`        | \"small\",\"medium\" | \"medium\"      |          |\n\n### DOM Events\n\n| Name          | Description                 | Emits                              |\n| ------------- | --------------------------- | ---------------------------------- |\n| `buttonClick` | Fires on radio button click | The currently checked radio button |\n\n### Accessibility\n\n- When a Radio Button has focus, <kbd>Enter</kbd> selects it, and emits `buttonClick` event.\n",
    "storybook_content": "\n\n--- modus-radio-group.stories.tsx ---\n\n// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-radio-group-storybook-docs.mdx';\nimport { html } from 'lit-html';\nimport { withActions } from '@storybook/addon-actions/decorator';\n\nexport default {\n  title: 'User Inputs/Radio Group',\n  argTypes: {\n    ariaLabel: {\n      name: 'aria-label',\n      description: \"The radio group's aria-label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    disabled: {\n      description: 'If true, the radio group is disabled',\n      type: 'boolean',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    name: {\n      description: 'The radio button group name. Used to group individual radio elements into one group.',\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    size: {\n      options: ['small', 'medium'],\n      type: 'select',\n      description: 'The size of the radio group',\n      table: {\n        defaultValue: { summary: `'medium'` },\n        type: { summary: 'string' },\n      },\n    },\n  },\n  parameters: {\n    actions: {\n      handles: ['buttonClick'],\n    },\n    controls: { expanded: true },\n    docs: {\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n    },\n  },\n  decorators: [withActions],\n};\n\nconst Template = ({ ariaLabel, disabled, name, size }) => html`\n  <modus-radio-group aria-label=${ariaLabel} ?disabled=${disabled} name=${name} size=${size}></modus-radio-group>\n  ${setRadioGroup()}\n`;\n\nexport const Default = Template.bind({});\nDefault.args = {\n  ariaLabel: '',\n  disabled: false,\n  name: '',\n  size: 'medium',\n};\nconst setRadioGroup = () => {\n  const tag = document.createElement('script');\n  tag.innerHTML = `\n    document.querySelector('modus-radio-group').radioButtons = [\n      {\n        id: '0',\n        label: 'Radio 1',\n      },\n      {\n        checked: true,\n        id: '1',\n        label: 'Radio 2',\n      },\n      {\n        id: '2',\n        label: 'Radio 3'\n      }\n    ];\n  `;\n\n  return tag;\n};\n",
    "storybook": {
      "examples": [
        "<modus-radio-group aria-label=${ariaLabel} ?disabled=${disabled} name=${name} size=${size}></modus-radio-group>",
        "\n  <modus-radio-group aria-label=${ariaLabel} ?disabled=${disabled} name=${name} size=${size}></modus-radio-group>\n  ${setRadioGroup()}\n"
      ],
      "variants": [],
      "prop_usage": {}
    },
    "tag_name": "modus-radio-group"
  },
  "modus-select": {
    "props": [
      {
        "name": "ariaLabel",
        "description": "/** (optional) The select's aria-label. */",
        "type": "string | null"
      },
      {
        "name": "disabled",
        "description": "/** (optional) The select's aria-label. */",
        "type": "boolean"
      },
      {
        "name": "errorText",
        "description": "/** (optional) The select's aria-label. */",
        "type": "string"
      },
      {
        "name": "helperText",
        "description": "/** (optional) The select's aria-label. */",
        "type": "string"
      },
      {
        "name": "label",
        "description": "/** (optional) The select's aria-label. */",
        "type": "string"
      },
      {
        "name": "options",
        "description": "/** (optional) The select's aria-label. */",
        "type": "unknown[]"
      },
      {
        "name": "optionsDisplayProp",
        "description": "/** (optional) The select's aria-label. */",
        "type": "string"
      },
      {
        "name": "required",
        "description": "/** (optional) The select's aria-label. */",
        "type": "boolean"
      },
      {
        "name": "size",
        "description": "/** (optional) The select's aria-label. */",
        "type": "'medium' | 'large'"
      },
      {
        "name": "validText",
        "description": "/** (optional) The select's aria-label. */",
        "type": "string"
      },
      {
        "name": "value",
        "description": "/** (optional) The select's aria-label. */",
        "type": "unknown"
      }
    ],
    "events": [
      "valueChange",
      "inputBlur"
    ],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-select-storybook-docs.mdx ---\n\nimport { Story } from '@storybook/blocks';\nimport * as Select from './modus-select.stories';\n\n# Select\n\n---\n\n[Modus Select](https://modus.trimble.com/components/inputs/) web components are replacements for native `<select>` elements. They are referenced using the `<modus-select>` custom HTML element.\n\nThis component is compatible with Angular reactive forms. This can be achieved through the implementation of a simple directive.\n\n### Default\n\n<Story of={Select.Default} />\n\n```html\n<!-- Without preset value -->\n<modus-select id=\"select-demo-1\" label=\"Select Demo 1\" options-display-prop=\"display\"></modus-select><br />\n\n<!-- Disabled with helper text and preset value -->\n<modus-select\n  id=\"select-demo-2\"\n  disabled\n  helper-text=\"Helper demo\"\n  label=\"Select Demo 2\"\n  options-display-prop=\"display\"></modus-select\n><br />\n\n<!-- Error -->\n<modus-select error-text=\"Error demo\" label=\"Select Demo 3\"></modus-select><br />\n\n<!-- Valid -->\n<modus-select label=\"Select Demo 4\" valid-text=\"Valid demo\"></modus-select><br />\n\n<!-- Large select -->\n<modus-select id=\"select-demo-5\" label=\"Select Demo 5\" size=\"large\" options-display-prop=\"display\"></modus-select><br />\n\n<!-- Custom Placeholder -->\n<modus-select\n  id=\"select-demo-6\"\n  label=\"Custom Placeholder\"\n  placeholder=\"Custom Placeholder\"\n  options-display-prop=\"display\"></modus-select\n><br />\n\n<script>\n  const options = [{ display: 'Option 1' }, { display: 'Option 2' }, { display: 'Option 3' }];\n\n  const select1 = document.querySelector('#select-demo-1');\n  select1.options = options;\n  select1.value = options[0];\n  select1.addEventListener('valueChange', function handleValueChange(e) {\n    const selectedOption = e.detail;\n    select1.value = selectedOption.display;\n  });\n\n  const select2 = document.querySelector('#select-demo-2');\n  select2.options = options;\n  select2.value = options[1];\n  select2.addEventListener('valueChange', function handleValueChange(e) {\n    const selectedOption = e.detail;\n    select2.value = selectedOption.display;\n  });\n\n  const select5 = document.querySelector('#select-demo-5');\n  select5.options = options;\n  select5.value = options[2];\n  select5.addEventListener('valueChange', function handleValueChange(e) {\n    const selectedOption = e.detail;\n    select5.value = selectedOption.display;\n  });\n\n  const select6 = document.querySelector('#select-demo-6');\n  select6.options = options;\n  select6.addEventListener('valueChange', function handleValueChange(e) {\n    const selectedOption = e.detail;\n    select6.value = selectedOption.display;\n  });\n</script>\n```\n\n## Properties\n\n| Property             | Attribute              | Description                                          | Type        | Default         |\n| -------------------- | ---------------------- | ---------------------------------------------------- | ----------- | --------------- |\n| `ariaLabel`          | `aria-label`           | (optional) The select's aria-label.                  | `string`    | `undefined`     |\n| `disabled`           | `disabled`             | (optional) Whether the input is disabled.            | `boolean`   | `undefined`     |\n| `errorText`          | `error-text`           | (optional) The input's error text.                   | `string`    | `undefined`     |\n| `helperText`         | `helper-text`          | (optional) The input's helper text.                  | `string`    | `undefined`     |\n| `label`              | `label`                | (optional) The input label.                          | `string`    | `undefined`     |\n| `options`            | --                     | The options for the dropdown list.                   | `unknown[]` | `[]`            |\n| `optionsDisplayProp` | `options-display-prop` | The options property to render in the dropdown list. | `string`    | `undefined`     |\n| `placeholder`        | `placeholder`          | (optional) The input's placeholder.                  | `string`    | `Please Select` |\n| `required`           | `required`             | (optional) Whether the input is required.            | `boolean`   | `undefined`     |\n| `size`               | `size`                 | (optional) The input's size.                         | `\"large\"    | \"medium\"`       |\n| `validText`          | `valid-text`           | (optional) The input's valid text.                   | `string`    | `undefined`     |\n| `value`              | --                     | (optional) The input value.                          | `unknown`   | `undefined`     |\n\n### DOM Events\n\n| Name          | Description           | Emits                            |\n| ------------- | --------------------- | -------------------------------- |\n| `valueChange` | Fires on value change | The value of the selected option |\n\n### Methods\n\n| Method name  | Description     | Parameter | Return          |\n| ------------ | --------------- | --------- | --------------- |\n| `focusInput` | Focus the input |           | `Promise<void>` |\n\n### Accessibility\n\n- Select has `role` of `listbox`.\n- Select gets an `aria-label` provided by the `aria-label` property input.\n- It is recommended to pass `aria-label` when there is no label used so the input is accessible to screen readers.\n- Select gets an `aria-disabled` set to whether Select is disabled.\n- Select gets an `aria-required` set to whether the Select is required.\n- When Select has focus:\n  - <kbd>Enter</kbd> opens the option list.\n  - **ArrowUp**, **ArrowDown** navigate the list.\n  - <kbd>Enter</kbd> selects an item from the list.\n- Select Items get:\n  - An `aria-label` set to the display value.\n  - An `aria-selected` set to whether the item is selected.\n",
    "storybook_content": "\n\n--- modus-select.stories.tsx ---\n\n// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-select-storybook-docs.mdx';\nimport { html } from 'lit-html';\nimport { withActions } from '@storybook/addon-actions/decorator';\n\nexport default {\n  title: 'User Inputs/Select',\n  parameters: {\n    docs: {\n      inlineStories: false,\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n    },\n    controls: {\n      disable: true,\n    },\n    viewMode: 'docs',\n    actions: {\n      handles: ['valueChange'],\n    },\n  },\n  decorators: [withActions],\n};\n\nconst Template = () => html`\n  <modus-select id=\"select-demo-1\" label=\"Select Demo 1\" options-display-prop=\"display\"></modus-select><br />\n  <modus-select\n    disabled\n    helper-text=\"Helper demo\"\n    id=\"select-demo-2\"\n    label=\"Select Demo 2\"\n    options-display-prop=\"display\"></modus-select\n  ><br />\n  <modus-select error-text=\"Error demo\" label=\"Select Demo 3\"></modus-select><br />\n  <modus-select label=\"Select Demo 4\" valid-text=\"Valid demo\"></modus-select><br />\n  <modus-select id=\"select-demo-5\" label=\"Select Demo 5\" size=\"large\" options-display-prop=\"display\"></modus-select><br />\n  <modus-select\n    id=\"select-demo-6\"\n    label=\"Custom Placeholder\"\n    placeholder=\"Custom Placeholder\"\n    options-display-prop=\"display\"></modus-select\n  ><br />\n  ${setSelects()}\n`;\n\nexport const Default = Template.bind({});\n\nconst setSelects = () => {\n  const tag = document.createElement('script');\n  tag.innerHTML = `\n      const options = [\n        { display: 'Option 1' },\n        { display: 'Option 2' },\n        { display: 'Option 3' },\n      ];\n\n      const select1 = document.querySelector('#select-demo-1');\n      select1.options = options;\n      select1.value = options[0];\n\n      const select2 = document.querySelector('#select-demo-2');\n      select2.options = options;\n      select2.value = options[1];\n\n      const select5 = document.querySelector('#select-demo-5');\n      select5.options = options;\n      select5.value = options[2];\n\n      const select6 = document.querySelector('#select-demo-6');\n      select6.options = options;\n      select6.addEventListener('valueChange', function handleValueChange(e) {\n         const selectedOption = e.detail;\n         select6.value = selectedOption.display;\n      });\n  `;\n\n  return tag;\n};\n",
    "storybook": {
      "examples": [
        "<modus-select id=\"select-demo-1\" label=\"Select Demo 1\" options-display-prop=\"display\"></modus-select>",
        "<modus-select\n    disabled\n    helper-text=\"Helper demo\"\n    id=\"select-demo-2\"\n    label=\"Select Demo 2\"\n    options-display-prop=\"display\"></modus-select\n  >",
        "<modus-select error-text=\"Error demo\" label=\"Select Demo 3\"></modus-select>",
        "<modus-select label=\"Select Demo 4\" valid-text=\"Valid demo\"></modus-select>",
        "<modus-select id=\"select-demo-5\" label=\"Select Demo 5\" size=\"large\" options-display-prop=\"display\"></modus-select>"
      ],
      "variants": [],
      "prop_usage": {
        "id": [
          "select-demo-1",
          "select-demo-2",
          "select-demo-5",
          "select-demo-6"
        ],
        "label": [
          "Select Demo 1",
          "Select Demo 2",
          "Select Demo 3",
          "Select Demo 4",
          "Select Demo 5",
          "Custom Placeholder"
        ],
        "prop": [
          "display"
        ],
        "text": [
          "Helper demo",
          "Error demo",
          "Valid demo"
        ],
        "size": [
          "large"
        ],
        "placeholder": [
          "Custom Placeholder"
        ]
      }
    },
    "tag_name": "modus-select"
  },
  "modus-sentiment-scale": {
    "props": [],
    "events": [],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-sentiment-scale-storybook-docs.mdx ---\n\n# Modus Sentiment Scale\n\n---\n\nThe Modus Sentiment Scale component offers a configurable sentiment scale for users to choose a sentiment from predefined options. This component supports both smiley and thumb icon types and are are referenced using the `<modus-sentiment-scale>` custom HTML element.\n\nUsers can navigate the sentiment scale using the <kbd>Tab</kbd> & <kbd>Shift</kbd>+<kbd>Tab</kbd> keys. Pressing the <kbd>Enter</kbd> key will toggle the selection.\n\n## Usage\n\n### Thumbs\n\n<modus-sentiment-scale type=\"thumbs\"></modus-sentiment-scale>\n\n```html\n<modus-sentiment-scale type=\"thumbs\"></modus-sentiment-scale>\n\n<script>\n  const sentimentScale = document.querySelector('modus-sentiment-scale');\n  sentimentScale.addEventListener('sentimentSelection', (event) => {\n    console.log('Sentiment selected:', event.detail);\n  });\n</script>\n```\n\n### Smileys\n\n<modus-sentiment-scale type=\"smileys\"></modus-sentiment-scale>\n\n```html\n<modus-sentiment-scale type=\"smileys\"></modus-sentiment-scale>\n\n<script>\n  const sentimentScale = document.querySelector('modus-sentiment-scale');\n  sentimentScale.addEventListener('sentimentSelection', (event) => {\n    console.log('Sentiment selected:', event.detail);\n  });\n</script>\n```\n\n### Properties\n\n| Property    | Attribute    | Description                                         | Type                            | Options             | Default | Required |\n| ----------- | ------------ | --------------------------------------------------- | ------------------------------- | ------------------- | ------- | -------- |\n| `ariaLabel` | `aria-label` | (optional) The button's aria-label.                 | `string`                        |                     |         |          |\n| `type`      | `type`       | The type of icons to be displayed.                  | `SMILEY_ICONS` \\| `THUMB_ICONS` | `smileys`, `thumbs` |         | Yes      |\n| `disabled`  | `disabled`   | (optional) Whether the sentiment scale is disabled. | `boolean`                       |                     | `false` |          |\n\n### Types\n\n| Types   | Values                                                                                                                   |\n| ------- | ------------------------------------------------------------------------------------------------------------------------ |\n| smileys | `thumbs-up`, `thumbs-down`                                                                                               |\n| thumbs  | `smiley-satisfied`, `smiley-dissatisfied`, `smiley-somewhat-dissatisfied`, `smiley-neutral`, `smiley-somewhat-satisfied` |\n\n### Events\n\n| Events               | Description                         | Detail                  |\n| -------------------- | ----------------------------------- | ----------------------- |\n| `sentimentSelection` | Fires when a sentiment is selected. | The selected sentiment. |\n",
    "storybook_content": "\n\n--- modus-sentiment-scale.stories.tsx ---\n\n// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-sentiment-scale-storybook-docs.mdx';\nimport { html } from 'lit-html';\nimport { withActions } from '@storybook/addon-actions/decorator';\n\n//changed\nexport default {\n  title: 'Components/Sentiment Scale',\n  argTypes: {\n    ariaLabel: {\n      name: 'aria-label',\n      description: \"The Sentiment Scale's aria-label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    iconsType: {\n      name: 'type',\n      options: ['smileys', 'thumbs'],\n      type: 'select',\n    },\n    disabled: {\n      description: 'Whether the sentiment-scale is disabled',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n  },\n  parameters: {\n    docs: {\n      page: docs,\n    },\n    actions: {\n      handles: ['sentimentSelection'],\n    },\n    controls: {\n      expanded: true,\n    },\n    options: {\n      isToolshown: true,\n    },\n  },\n  decorators: [withActions],\n};\n\nconst Template = ({ ariaLabel, iconsType, disabled }) => html`\n  <modus-sentiment-scale aria-label=${ariaLabel} type=\"${iconsType}\" ?disabled=\"${disabled}\"></modus-sentiment-scale>\n`;\nexport const Default = Template.bind({});\nDefault.args = {\n  ariaLabel: '',\n  iconsType: 'smileys',\n  disabled: false,\n};\n",
    "storybook": {
      "examples": [
        "<modus-sentiment-scale aria-label=${ariaLabel} type=\"${iconsType}\" ?disabled=\"${disabled}\"></modus-sentiment-scale>",
        "\n  <modus-sentiment-scale aria-label=${ariaLabel} type=\"${iconsType}\" ?disabled=\"${disabled}\"></modus-sentiment-scale>\n"
      ],
      "variants": [],
      "prop_usage": {
        "type": [
          "${iconsType}"
        ],
        "disabled": [
          "${disabled}"
        ]
      }
    },
    "tag_name": "modus-sentiment-scale"
  },
  "modus-side-navigation": {
    "props": [],
    "events": [],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-side-navigation-storybook-docs.mdx ---\n\nimport { Story } from '@storybook/blocks';\nimport * as SideNavigation from './modus-side-navigation.stories.tsx';\n\n# Modus Side Navigation\n\n---\n\n[Modus Side Navigation](https://modus.trimble.com/components/web/side-navigation/) is a collapsible side content of the site\u2019s pages. It is located alongside the page\u2019s primary content. The component is designed to add side content to a fullscreen application. It is activated through the \u201chamburger\u201d menu in the [Navbar](https://modus-web-components.trimble.com/?path=/docs/components-navbar--default).\n\n#### Implementation Details\n\n- There are two ways to add a Modus Side Navigation, either use the tags `modus-side-navigation` for root and `modus-side-navigation-item` for menu items or pass an object array for the prop `data`.\n- For modus side navigation to maintain state `modus-side-navigation-item` tag requires `id` which should be a unique identifier.\n- The `expanded` prop on `modus-side-navigation` controls the expanded state of all the side navigation menu items.\n- The width of the panel in an expanded state can be set using `maxWidth` prop.\n- The prop `label` on `modus-side-navigation-item` is used for menu text and a `modus-side-navigation-item` can be manually selected using `selected` prop.\n\n### Accessibility\n\nEvery menu item is accessible through keyboard. <kbd>Tab</kbd> key and `Down Arrow` key moves focus to the next menu item. `Shift + Tab` key and `Up Arrow` moves focus to the previous menu item. Pressing `Enter` key either opens the folder or selects the item.\n\n### Basic Modus Side Navigation\n\nA basic Modus Side Navigation with only item selection and keyboard navigation features can be designed as show in the example below.\n\n<Story of={SideNavigation.Default} />\n\n```html\n<div id=\"defaultTemplate\">\n  <div\n    style=\"width: 100%;align-items: center;height: 56px;box-shadow: 0 0 2px var(--modus-secondary)!important; margin-top: 50px;\">\n    <modus-navbar id=\"navbar\" show-apps-menu show-help show-main-menu show-notifications> </modus-navbar>\n  </div>\n\n  <div\n    id=\"container\"\n    style=\"display:flex; min-height:500px; overflow-y: auto; position: relative;box-shadow: 0 0 2px var(--modus-secondary)!important;\">\n    <modus-side-navigation max-width=\"300px\" id=\"sideNav\" target-content=\"#defaultTemplate #panelcontent\">\n      <modus-side-navigation-item id=\"home-menu\" label=\"Home page\">\n        <modus-icon name=\"home\" size=\"24\" slot=\"menu-icon\"></modus-icon>\n      </modus-side-navigation-item>\n      <modus-side-navigation-item id=\"usage-menu\" label=\"Usage\">\n        <modus-icon name=\"flowchart\" size=\"24\" slot=\"menu-icon\"></modus-icon>\n      </modus-side-navigation-item>\n      <modus-side-navigation-item id=\"styles-menu\" label=\"Styles\">\n        <modus-icon name=\"bar_graph_line\" size=\"24\" slot=\"menu-icon\"></modus-icon>\n      </modus-side-navigation-item>\n      <modus-side-navigation-item id=\"accessibility-menu\" label=\"Accessibility\">\n        <modus-icon name=\"screen\" size=\"24\" slot=\"menu-icon\"></modus-icon>\n      </modus-side-navigation-item>\n    </modus-side-navigation>\n\n    <div id=\"panelcontent\" style=\"padding:10px;\">\n      <div id=\"overview\">\n        <p>\n          The side navigation of an application provides context through accessible menu options and positions a consistent\n          component to connect to various pages in the application.\n        </p>\n        <p>\n          The side navigation is a collapsible side content of the site\u2019s pages. It is located alongside the page\u2019s primary\n          content. The component is designed to add side content to a fullscreen application. It is activated through the\n          \u201chamburger\u201d menu in the Navbar.\n        </p>\n      </div>\n    </div>\n  </div>\n</div>\n\n<script>\n  document.querySelector('#navbar').logoOptions = {\n    primary: {\n      url: 'https://modus.trimble.com/img/trimble-logo.svg',\n    },\n  };\n  document.querySelector('#navbar').profileMenuOptions = {\n    avatarUrl: 'https://avatar.example.com/broken-image-link.png',\n    email: 'modus_user@trimble.com',\n    initials: 'MU',\n    username: 'Modus User',\n  };\n\n  function addEventHandlers() {\n    document.addEventListener('mainMenuClick', (e) => {\n      const panel = document.querySelector('modus-side-navigation');\n      panel.expanded = !panel.expanded;\n    });\n\n    Array.from(document.querySelectorAll('modus-side-navigation-item')).forEach((c) => {\n      c.addEventListener('sideNavItemClicked', function callbackfn(e) {\n        if (e.detail.selected) {\n          const panel = document.querySelector('#panelcontent');\n          document.querySelector('#sidenav-content-title')?.remove();\n          const el = document.createElement('h3');\n          el.id = 'sidenav-content-title';\n          el.innerHTML = document.querySelector('#' + e.detail.id)?.label || 'Home page';\n          panel.insertBefore(el, document.querySelector('#overview'));\n        }\n      });\n    });\n  }\n\n  addEventHandlers();\n</script>\n```\n\n### Modus Side Navigation with `data` prop\n\nFor side navigation with multiple levels, `data` prop can be used to pass the details of parents and its children.\n\n#### Modus Side Navigation Types\n\nModus side navigation can be configured to overlay the page's content or push the page's content. Specifying the selector for the page's content will enable the side navigation to set the necessary paddings and margins.\n\nUse the prop `mode` to choose whether to overlay or push and use the prop `target-content` to set the page's content selector. Listening to event `sideNavExpand` can also be used as an alternative to set the paddings and margins.\n\n#### Modus Side Navigation Blue Theme\n\nModus side navigation uses CSS variables for theming ex:`--modus-side-navigation-bg: #fff;`, it can be leveraged to apply a blue theme too as shown in the example below.\n\n<Story of={SideNavigation.SideNavigationWithData} />\n\n```html\n<div id=\"dataTemplate\">\n  <modus-switch id=\"switch-theme\" label=\"Enable blue theme\"></modus-switch>\n  <br />\n  <modus-switch id=\"switch-mode\" label=\"Enable Push Side Navigation\"></modus-switch>\n  <div\n    style=\"width: 100%;align-items: center;height: 56px;box-shadow: 0 0 2px var(--modus-secondary)!important; margin-top: 10px;\">\n    <modus-navbar id=\"navbar\" show-apps-menu show-help show-main-menu show-notifications> </modus-navbar>\n  </div>\n\n  <div\n    id=\"container\"\n    style=\"display:flex; min-height:500px; overflow-y: auto; position: relative;box-shadow: 0 0 2px var(--modus-secondary)!important;\">\n    <modus-side-navigation max-width=\"300px\" id=\"sideNav\" target-content=\"#dataTemplate #panelcontent\" mode=\"overlay\">\n    </modus-side-navigation>\n\n    <div id=\"panelcontent\" style=\"padding:10px; transition: all 0.25s linear 0s;\">\n      <div id=\"overview\">\n        <p>\n          The side navigation of an application provides context through accessible menu options and positions a consistent\n          component to connect to various pages in the application.\n        </p>\n        <p>\n          The side navigation is a collapsible side content of the site\u2019s pages. It is located alongside the page\u2019s primary\n          content. The component is designed to add side content to a fullscreen application. It is activated through the\n          \u201chamburger\u201d menu in the Navbar.\n        </p>\n      </div>\n    </div>\n  </div>\n</div>\n\n<script>\n  document.querySelector('#navbar').logoOptions = {\n    primary: {\n      url: 'https://modus.trimble.com/img/trimble-logo.svg',\n    },\n  };\n  document.querySelector('#navbar').profileMenuOptions = {\n    avatarUrl: 'https://avatar.example.com/broken-image-link.png',\n    email: 'modus_user@trimble.com',\n    initials: 'MU',\n    username: 'Modus User',\n  };\n\n  const homeIcon = 'home';\n  const usageIcon = 'flowchart';\n  const stylesIcon = 'bar_graph_line';\n  const accessibilityIcon = 'screen';\n\n  const selectionHandler = (e) => {\n    if (e.detail) {\n      const panel = document.querySelector('#panelcontent');\n      document.querySelector('#sidenav-content-title')?.remove();\n      const el = document.createElement('h3');\n      el.id = 'sidenav-content-title';\n      el.innerHTML = e.target?.label || 'Home page';\n      panel.insertBefore(el, document.querySelector('#overview'));\n    }\n  };\n\n  const blueTheme = `--modus-side-navigation-link-color:#ffffff;--modus-side-navigation-bg:#0e416c;--modus-side-navigation-item-color:#ffffff;--modus-side-navigation-item-active-bg:#217cbb;--modus-side-navigation-item-hover-bg:#0063a3;--modus-side-navigation-item-icon-color:#ffffff;--modus-side-navigation-item-chevron-color:#ffffff;--modus-side-navigation-item-icon-filter:invert(100%) sepia(0%) saturate(24%) hue-rotate(114deg) brightness(108%) contrast(108%);`;\n\n  function initialize() {\n    const sidenav = document.querySelector('modus-side-navigation');\n    sidenav.data = [\n      {\n        id: 'home-menu',\n        menuIcon: homeIcon,\n        label: 'Home page 1',\n        children: [\n          {\n            id: 'home-menu-2',\n            menuIcon: homeIcon,\n            label: 'Home page 2',\n            onSideNavItemClicked: selectionHandler,\n          },\n          {\n            id: 'usage-menu-2',\n            children: [\n              {\n                id: 'home-menu-3',\n                menuIcon: homeIcon,\n                label: 'Home page 3',\n                onSideNavItemClicked: selectionHandler,\n              },\n            ],\n            menuIcon: usageIcon,\n            label: 'Usage page 2',\n          },\n        ],\n      },\n      {\n        id: 'usage-menu',\n        menuIcon: usageIcon,\n        label: 'Usage page 1',\n        onSideNavItemClicked: selectionHandler,\n      },\n      {\n        id: 'styles-menu',\n        menuIcon: stylesIcon,\n        label: 'Styles page 1',\n        onSideNavItemClicked: selectionHandler,\n      },\n      {\n        id: 'accessibility-menu',\n        menuIcon: accessibilityIcon,\n        label: 'Accessibility page 1',\n        onSideNavItemClicked: selectionHandler,\n      },\n    ];\n  }\n\n  function addEventHandlers() {\n    document.addEventListener('mainMenuClick', (e) => {\n      executeListener(e, () => {\n        const panel = document.querySelector('modus-side-navigation');\n        panel.expanded = !panel.expanded;\n      });\n    });\n\n    document.querySelector('#switch-theme').addEventListener('switchClick', (e) => {\n      const sidenav = document.querySelector('modus-side-navigation');\n      if (e.detail) {\n        sidenav.style = blueTheme;\n      } else sidenav.style = '';\n    });\n\n    document.querySelector('#switch-mode').addEventListener('switchClick', (e) => {\n      const sidenav = document.querySelector('modus-side-navigation');\n      sidenav.mode = sidenav.mode === 'push' ? 'overlay' : 'push';\n    });\n  }\n\n  initialize();\n  addEventHandlers();\n</script>\n```\n\n### Modus Side Navigation with `Header` prop\n\nThe `isHeader` property enables a dropdown menu in side navigation items when set to true and configured with menu items. This allows dynamic updates to the menu, navigation, or other interactive features.\n\n```html\n<div id=\"dataTemplate\">\n  <modus-switch id=\"switch-theme\" label=\"Enable blue theme\"></modus-switch>\n  <br />\n  <modus-switch id=\"switch-mode\" label=\"Enable Push Side Navigation\"></modus-switch>\n  <div\n    style=\"width: 100%;align-items: center;height: 56px;box-shadow: 0 0 2px var(--modus-secondary)!important; margin-top: 10px;\">\n    <modus-navbar id=\"navbar\" show-apps-menu show-help show-main-menu show-notifications> </modus-navbar>\n  </div>\n\n  <div\n    id=\"container\"\n    style=\"display:flex; min-height:500px; overflow-y: auto; position: relative;box-shadow: 0 0 2px var(--modus-secondary)!important;\">\n    <modus-side-navigation max-width=\"300px\" id=\"sideNav\" target-content=\"#dataTemplate #panelcontent\" mode=\"overlay\">\n    </modus-side-navigation>\n\n    <div id=\"panelcontent\" style=\"padding: 10px; transition: all 0.25s linear 0s\">\n      <div id=\"overview\">\n        <p>\n          The side navigation of an application provides context through accessible menu options and positions a consistent\n          component to connect to various pages in the application.\n        </p>\n        <p>\n          The side navigation is a collapsible side content of the site\u2019s pages. It is located alongside the page\u2019s primary\n          content. The component is designed to add side content to a fullscreen application. It is activated through the\n          \u201chamburger\u201d menu in the Navbar.\n        </p>\n      </div>\n    </div>\n  </div>\n</div>\n\n<script>\n  document.querySelector('#navbar').logoOptions = {\n    primary: {\n      url: 'https://modus.trimble.com/img/trimble-logo.svg',\n    },\n  };\n  document.querySelector('#navbar').profileMenuOptions = {\n    avatarUrl: 'https://avatar.example.com/broken-image-link.png',\n    email: 'modus_user@trimble.com',\n    initials: 'MU',\n    username: 'Modus User',\n  };\n\n  const homeIcon = 'home';\n  const usageIcon = 'flowchart';\n  const stylesIcon = 'bar_graph_line';\n  const accessibilityIcon = 'screen';\n  const sidenav = document.querySelector('modus-side-navigation');\n\n  const selectionHandler = (e) => {\n    if (e.detail) {\n      if (e.detail.selected) {\n        const panel = document.querySelector('#panelcontent');\n        document.querySelector('#sidenav-content-title')?.remove();\n        const el = document.createElement('h3');\n        el.id = 'sidenav-content-title';\n        const selectedItem = e.target.data?.find((item) => item.id === e.detail.id);\n        if (selectedItem) {\n          el.innerHTML = selectedItem.label || 'Home Page';\n        }\n        panel.insertBefore(el, document.querySelector('#overview'));\n      }\n    }\n  };\n\n  function getLabel(newItems) {\n    sidenav.data = [\n      {\n        id: 'Home',\n        menuIcon: homeIcon,\n        label: 'Home',\n        isHeader: {\n          enabled: true,\n          items: [\n            {\n              id: 'Home',\n              label: 'Home',\n              icon: 'home',\n            },\n            {\n              id: 'Charts',\n              label: 'Charts',\n              icon: 'bar_graph',\n            },\n            {\n              id: 'Maps',\n              label: 'Maps',\n              icon: 'location_arrow',\n            },\n          ],\n        },\n        onSideNavItemHeaderClicked: selectionHeaderHandler,\n      },\n      {\n        id: 'usage-menu',\n        menuIcon: newItems[0].icon,\n        label: newItems[0].label,\n        onSideNavItemClicked: selectionHandler,\n      },\n      {\n        id: 'styles-menu',\n        menuIcon: newItems[1].icon,\n        label: newItems[1].label,\n        onSideNavItemClicked: selectionHandler,\n      },\n    ];\n  }\n\n  const selectionHeaderHandler = (e) => {\n    const headerLabel = e.detail.id;\n    let newItems = [];\n\n    if (headerLabel === 'Charts') {\n      newItems = [\n        { label: 'Bar graph square', icon: 'bar_graph_square' },\n        { label: 'Gantt chart', icon: 'gantt_chart' },\n      ];\n      getLabel(newItems);\n\n      const simulatedEvent = {\n        detail: { selected: true, id: 'Charts' },\n        target: { data: [{ id: 'Charts', label: 'Charts' }] },\n      };\n      selectionHandler(simulatedEvent);\n    } else if (headerLabel === 'Maps') {\n      newItems = [\n        { label: 'World', icon: 'web' },\n        { label: 'Region', icon: 'map_poi' },\n      ];\n      getLabel(newItems);\n\n      const simulatedEvent = {\n        detail: { selected: true, id: 'Maps' },\n        target: { data: [{ id: 'Maps', label: 'Maps' }] },\n      };\n      selectionHandler(simulatedEvent);\n    } else {\n      initialize();\n\n      const simulatedEvent = {\n        detail: { selected: true, id: 'Home' },\n        target: { data: [{ id: 'Home', label: 'Home' }] },\n      };\n      selectionHandler(simulatedEvent);\n    }\n  };\n\n  const blueTheme = `--modus-side-navigation-link-color:#ffffff;--modus-side-navigation-bg:#0e416c;--modus-side-navigation-item-color:#ffffff;--modus-side-navigation-item-active-bg:#217cbb;--modus-side-navigation-item-hover-bg:#0063a3;--modus-side-navigation-item-icon-color:#ffffff;--modus-side-navigation-item-chevron-color:#ffffff;--modus-side-navigation-item-icon-filter:invert(100%) sepia(0%) saturate(24%) hue-rotate(114deg) brightness(108%) contrast(108%);`;\n\n  function initialize() {\n    sidenav.data = [\n      {\n        id: 'Home',\n        menuIcon: homeIcon,\n        label: 'Home',\n        isHeader: {\n          enabled: true,\n          items: [\n            {\n              id: 'Home',\n              label: 'Home',\n              icon: 'home',\n            },\n            {\n              id: 'Charts',\n              label: 'Charts',\n              icon: 'bar_graph',\n            },\n            {\n              id: 'Maps',\n              label: 'Maps',\n              icon: 'location_arrow',\n            },\n          ],\n        },\n        onSideNavItemHeaderClicked: selectionHeaderHandler,\n      },\n      {\n        id: 'usage-menu',\n        menuIcon: usageIcon,\n        label: 'Usage page',\n        onSideNavItemClicked: selectionHandler,\n      },\n      {\n        id: 'styles-menu',\n        menuIcon: stylesIcon,\n        label: 'Styles page',\n        onSideNavItemClicked: selectionHandler,\n      },\n    ];\n  }\n\n  function addEventHandlers() {\n    document.addEventListener('mainMenuClick', (e) => {\n      const panel = document.querySelector('modus-side-navigation');\n      panel.expanded = !panel.expanded;\n    });\n\n    document.querySelector('#switch-theme').addEventListener('switchClick', (e) => {\n      const sidenav = document.querySelector('modus-side-navigation');\n      if (e.detail) {\n        sidenav.style = blueTheme;\n      } else sidenav.style = '';\n    });\n\n    document.querySelector('#switch-mode').addEventListener('switchClick', (e) => {\n      const sidenav = document.querySelector('modus-side-navigation');\n      sidenav.mode = sidenav.mode === 'push' ? 'overlay' : 'push';\n    });\n  }\n\n  initialize();\n  addEventHandlers();\n  sidenav.addEventListener('sideNavItemHeaderClicked', selectionHeaderHandler);\n  sidenav.addEventListener('sideNavItemClicked', selectionHandler);\n</script>\n```\n\n### Properties\n\n#### Modus Side Navigation\n\n| Property                 | Attribute                   | Description                                                                                                                               | Type                            | Default     |\n| ------------------------ | --------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------- | ----------- |\n| `collapseOnClickOutside` | `collapse-on-click-outside` | (optional) To choose whether to collapse the panel when clicked outside.                                                                  | `boolean`                       | `true`      |\n| `data`                   | --                          | (optional) Data property to create the items.                                                                                             | `ModusSideNavigationItemInfo[]` | `undefined` |\n| `expanded`               | `expanded`                  | (optional) The expanded state of side navigation panel and items.                                                                         | `boolean`                       | `false`     |\n| `maxWidth`               | `max-width`                 | (optional) Maximum width of the side navigation panel in an expanded state.                                                               | `string`                        | `'256px'`   |\n| `mode`                   | `mode`                      | Mode to make side navigation either overlay or push the content for the selector specified in `targetContent`                             | `\"overlay\" \\| \"push\"`           | `'overlay'` |\n| `targetContent`          | `target-content`            | (optional) Specify the selector for the page's content for which paddings and margins will be set by side navigation based on the `mode`. | `string`                        | `undefined` |\n\n## Events\n\n| Event           | Description                                                     | Type                   |\n| --------------- | --------------------------------------------------------------- | ---------------------- |\n| `sideNavExpand` | An event that fires on side navigation panel collapse & expand. | `CustomEvent<boolean>` |\n\n#### Modus Side Navigation Item\n\n| Property           | Attribute           | Description                                                                | Type                            | Default                         |\n| ------------------ | ------------------- | -------------------------------------------------------------------------- | ------------------------------- | ------------------------------- |\n| `id`               | `id`                | Unique identifier for a side navigation panel item.                        | `string`                        |                                 |\n| `disableSelection` | `disable-selection` | (optional) Disables item selection.                                        | `boolean`                       | `false`                         |\n| `disabled`         | `disabled`          | (optional) The disabled state of side navigation panel item.               | `boolean`                       | `false`                         |\n| `expanded`         | `expanded`          | (optional) The expanded state of side navigation panel item.               | `boolean`                       | `false`                         |\n| `label`            | `label`             | (optional) Label for the item and the tooltip message.                     | `string`                        | `undefined`                     |\n| `menuIcon`         | `menu-icon`         | (optional) A built-in menu icon string or a image url.                     | `string`                        | `undefined`                     |\n| `selected`         | `selected`          | (optional) The selected state of side navigation panel item.               | `boolean`                       | `false`                         |\n| `showExpandIcon`   | `show-expand-icon`  | (optional) Shows the expand icon.                                          | `boolean`                       | `false`                         |\n| `isHeader`         | `isHeader`          | (optional) To enable the header dropdown feature of side navigation panel. | `ModusHeaderNavigationItemInfo` | `{ enabled: false, items: [] }` |\n\n## Events\n\n| Event                      | Description                                                           | Type                                              |\n| -------------------------- | --------------------------------------------------------------------- | ------------------------------------------------- |\n| `sideNavItemClicked`       | An event that fires when mouse click or `Enter` key press on an item. | `CustomEvent<{ id: string; selected: boolean; }>` |\n| `sideNavItemFocus`         | An event that fires when an item is in focus.                         | `CustomEvent<{ id: string; }>`                    |\n| `sideNavItemHeaderClicked` | An event that fires when an item in header dropdown item is selected. | `CustomEvent<{ id: string; selected: boolean }>`  |\n\n## Types\n\n```ts\ntype ModusHeaderNavigationItemInfo{\n  isEnabled : boolean,\n  items: string[];\n};\n```\n",
    "storybook_content": "\n\n--- modus-side-navigation.stories.tsx ---\n\n// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-side-navigation-storybook-docs.mdx';\nimport { html } from 'lit-html';\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { useEffect } from '@storybook/preview-api';\n\nexport default {\n  title: 'Components/Side Navigation',\n  argTypes: {\n    collapseOnClickOutside: {\n      name: 'collapse-on-click-outside',\n      description: 'To choose whether to collapse the panel when clicked outside',\n      table: {\n        type: { summary: 'boolean' },\n      },\n    },\n    data: {\n      description: 'Data property to create the side navigation items',\n      table: {\n        type: { summary: 'ModusSideNavigationItemInfo' },\n      },\n    },\n    maxWidth: {\n      name: 'max-width',\n      description: 'Maximum width of the side navigation panel in an expanded state',\n      table: {\n        defaultValue: { summary: '256px' },\n        type: { summary: 'string' },\n      },\n    },\n    mode: {\n      options: ['overlay', 'push'],\n      type: 'select',\n      description:\n        'Mode to make side navigation either overlay or push the content for the selector specified in `targetContent`',\n      table: {\n        defaultValue: { summary: `'overlay'` },\n        type: {\n          summary: `'overlay' | 'push'`,\n        },\n      },\n    },\n    expanded: {\n      description: 'The expanded state of side navigation panel and items',\n      table: {\n        type: { summary: 'boolean' },\n      },\n    },\n    isHeader: {\n      name: 'is-header',\n      description: 'To enable header dropdown feature',\n      table: {\n        type: { summary: 'ModusHeaderNavigationItemInfo' },\n      },\n    },\n    targetContent: {\n      name: 'target-content',\n      description:\n        \"Specify the selector for the page's content for which paddings and margins will be set by side navigation based on the `mode`\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n  },\n  parameters: {\n    docs: {\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n    },\n    actions: {\n      handles: ['sideNavExpand', 'sideNavItemClicked', 'mainMenuClick', 'sideNavItemFocus', 'sideNavItemHeaderClicked'],\n    },\n    controls: { expanded: true, sort: 'requiredFirst' },\n    viewMode: 'docs',\n  },\n  decorators: [\n    withActions,\n    (Story) => {\n      useEffect(() => {\n        const handleHelpOpen = () => {\n          const panel = document.querySelector('modus-side-navigation');\n          if (panel) {\n            const isExpanded = panel.getAttribute('expanded') === 'true';\n            panel.setAttribute('expanded', (!isExpanded).toString());\n          }\n        };\n        const blueTheme = `--modus-side-navigation-link-color:#ffffff;--modus-side-navigation-bg:#0e416c;--modus-side-navigation-item-color:#ffffff;--modus-side-navigation-item-active-bg:#217cbb;--modus-side-navigation-item-hover-bg:#0063a3;--modus-side-navigation-item-icon-color:#ffffff;--modus-side-navigation-item-chevron-color:#ffffff;--modus-side-navigation-item-icon-filter:invert(100%) sepia(0%) saturate(24%) hue-rotate(114deg) brightness(108%) contrast(108%);`;\n        const sideNav = document.querySelector('modus-side-navigation');\n        const switchTheme = () => {\n          const switchTheme = document.querySelector('#switch-theme');\n          if (switchTheme.checked) {\n            sideNav.style = blueTheme;\n          } else {\n            sideNav.style = '';\n          }\n        };\n        const switchMode = () => {\n          const switchMode = document.querySelector('#switch-mode');\n\n          if (switchMode.checked) {\n            sideNav.mode = sideNav.mode === 'push' ? 'overlay' : 'push';\n          }\n        };\n        document.addEventListener('switchClick', switchMode);\n        document.addEventListener('switchClick', switchTheme);\n        document.addEventListener('mainMenuClick', handleHelpOpen);\n\n        Array.from(document.querySelectorAll('modus-side-navigation-item')).forEach((item) => {\n          item.addEventListener('sideNavItemClicked', (e) => {\n            executeListener(e, () => {\n              const panel = document.querySelector('#panelcontent');\n              document.querySelector('#sidenav-content-title')?.remove();\n              const el = document.createElement('h3');\n              el.id = 'sidenav-content-title';\n              el.innerHTML = document.querySelector(`#${e.detail.id}`)?.label || 'Home page';\n              panel.insertBefore(el, document.querySelector('#overview'));\n            });\n          });\n        });\n\n        const initialize = () => {\n          const sidenav = document.querySelector('#dataTemplate #sideNav');\n          sidenav.data = [\n            {\n              id: 'home-menu',\n              menuIcon: 'home',\n              label: 'Home page 1',\n              children: [\n                {\n                  id: 'home-menu-2',\n                  menuIcon: 'home',\n                  label: 'Home page 2',\n                  onSideNavItemClicked: (e) => {\n                    executeListener(e, () => {\n                      if (e.detail) {\n                        const panel = document.querySelector('#panelcontent');\n                        document.querySelector('#sidenav-content-title')?.remove();\n                        const el = document.createElement('h3');\n                        el.id = 'sidenav-content-title';\n                        el.innerHTML = e.target?.label || 'Home page';\n                        panel.insertBefore(el, document.querySelector('#overview'));\n                      }\n                    });\n                  },\n                },\n                {\n                  id: 'usage-menu-2',\n                  children: [\n                    {\n                      id: 'home-menu-3',\n                      menuIcon: 'home',\n                      label: 'Home page 3',\n                      onSideNavItemClicked: (e) => {\n                        executeListener(e, () => {\n                          if (e.detail) {\n                            const panel = document.querySelector('#panelcontent');\n                            document.querySelector('#sidenav-content-title')?.remove();\n                            const el = document.createElement('h3');\n                            el.id = 'sidenav-content-title';\n                            el.innerHTML = e.target?.label || 'Home page';\n                            panel.insertBefore(el, document.querySelector('#overview'));\n                          }\n                        });\n                      },\n                    },\n                  ],\n                  menuIcon: 'flowchart',\n                  label: 'Usage page 2',\n                },\n              ],\n            },\n            {\n              id: 'usage-menu',\n              menuIcon: 'flowchart',\n              label: 'Usage page 1',\n              onSideNavItemClicked: (e) => {\n                executeListener(e, () => {\n                  if (e.detail) {\n                    const panel = document.querySelector('#panelcontent');\n                    document.querySelector('#sidenav-content-title')?.remove();\n                    const el = document.createElement('h3');\n                    el.id = 'sidenav-content-title';\n                    el.innerHTML = e.target?.label || 'Home page';\n                    panel.insertBefore(el, document.querySelector('#overview'));\n                  }\n                });\n              },\n            },\n            {\n              id: 'styles-menu',\n              menuIcon: 'bar_graph_line',\n              label: 'Styles page 1',\n              onSideNavItemClicked: (e) => {\n                executeListener(e, () => {\n                  if (e.detail) {\n                    const panel = document.querySelector('#panelcontent');\n                    document.querySelector('#sidenav-content-title')?.remove();\n                    const el = document.createElement('h3');\n                    el.id = 'sidenav-content-title';\n                    el.innerHTML = e.target?.label || 'Home page';\n                    panel.insertBefore(el, document.querySelector('#overview'));\n                  }\n                });\n              },\n            },\n            {\n              id: 'accessibility-menu',\n              menuIcon: 'screen',\n              label: 'Accessibility page 1',\n              onSideNavItemClicked: (e) => {\n                executeListener(e, () => {\n                  if (e.detail) {\n                    const panel = document.querySelector('#panelcontent');\n                    document.querySelector('#sidenav-content-title')?.remove();\n                    const el = document.createElement('h3');\n                    el.id = 'sidenav-content-title';\n                    el.innerHTML = e.target?.label || 'Home page';\n                    panel.insertBefore(el, document.querySelector('#overview'));\n                  }\n                });\n              },\n            },\n          ];\n        };\n        const sidenav = document.querySelector('#dataTemplate #sideNav');\n        if (sidenav) {\n          initialize();\n        }\n        return () => {\n          document.removeEventListener('switchClick', switchMode);\n          document.removeEventListener('switchClick', switchTheme);\n          document.removeEventListener('mainMenuClick', handleHelpOpen);\n          document.removeEventListener('mainMenuClick', handleHelpOpen);\n          Array.from(document.querySelectorAll('modus-side-navigation-item')).forEach((item) => {\n            item.removeEventListener('sideNavItemClicked', handleHelpOpen);\n          });\n        };\n      }, []);\n      return Story();\n    },\n  ],\n};\n\nconst DefaultTemplate = ({ collapseOnClickOutside, maxWidth, mode, expanded, targetContent }) => html`\n  <div id=\"defaultTemplate\">\n    <div\n      style=\"width: 100%; align-items: center; height: 56px; box-shadow: 0 0 2px var(--modus-secondary)!important; margin-top: 50px;\">\n      <modus-navbar id=\"navbar\" show-apps-menu show-help show-main-menu show-notifications> </modus-navbar>\n    </div>\n\n    <div\n      id=\"container\"\n      style=\"display: flex; min-height: 500px; overflow-y: auto; position: relative; box-shadow: 0 0 2px var(--modus-secondary)!important;\">\n      <modus-side-navigation\n        max-width=${maxWidth}\n        id=\"sideNav\"\n        collapse-on-click-outside=${collapseOnClickOutside}\n        mode=${mode}\n        expanded=${expanded}\n        target-content=${targetContent}>\n        <modus-side-navigation-item id=\"home-menu\" label=\"Home page\">\n          <modus-icon name=\"home\" size=\"24\" slot=\"menu-icon\"></modus-icon>\n        </modus-side-navigation-item>\n        <modus-side-navigation-item id=\"usage-menu\" label=\"Usage\">\n          <modus-icon name=\"flowchart\" size=\"24\" slot=\"menu-icon\"></modus-icon>\n        </modus-side-navigation-item>\n        <modus-side-navigation-item id=\"styles-menu\" label=\"Styles\">\n          <modus-icon name=\"bar_graph_line\" size=\"24\" slot=\"menu-icon\"></modus-icon>\n        </modus-side-navigation-item>\n        <modus-side-navigation-item id=\"accessibility-menu\" label=\"Accessibility\">\n          <modus-icon name=\"screen\" size=\"24\" slot=\"menu-icon\"></modus-icon>\n        </modus-side-navigation-item>\n      </modus-side-navigation>\n\n      <div id=\"panelcontent\" style=\"padding: 10px;\">\n        <div id=\"overview\">\n          <p>\n            The side navigation of an application provides context through accessible menu options and positions a consistent\n            component to connect to various pages in the application.\n          </p>\n          <p>\n            The side navigation is a collapsible side content of the site\u2019s pages. It is located alongside the page\u2019s primary\n            content. The component is designed to add side content to a fullscreen application. It is activated through the\n            \u201chamburger\u201d menu in the Navbar.\n          </p>\n        </div>\n      </div>\n    </div>\n  </div>\n`;\nexport const Default = DefaultTemplate.bind({});\nDefault.args = {\n  collapseOnClickOutside: true,\n  maxWidth: '300px',\n  mode: 'overlay',\n  expanded: false,\n  targetContent: '#defaultTemplate #panelcontent',\n};\n\nconst SideNavigationWithDataTemplate = ({ collapseOnClickOutside, maxWidth, mode, expanded, targetContent }) => html`\n  <div id=\"dataTemplate\">\n    <modus-switch id=\"switch-theme\" label=\"Enable blue theme\"></modus-switch>\n    <br />\n    <modus-switch id=\"switch-mode\" label=\"Enable Push Side Navigation\"></modus-switch>\n    <div\n      style=\"width: 100%;align-items: center;height: 56px;box-shadow: 0 0 2px var(--modus-secondary)!important; margin-top: 10px;\">\n      <modus-navbar id=\"navbar\" show-apps-menu show-help show-main-menu show-notifications> </modus-navbar>\n    </div>\n\n    <div\n      id=\"container\"\n      style=\"display:flex; min-height:500px; overflow-y: auto; position: relative;box-shadow: 0 0 2px var(--modus-secondary)!important;\">\n      <modus-side-navigation\n        max-width=${maxWidth}\n        id=\"sideNav\"\n        collapse-on-click-outside=${collapseOnClickOutside}\n        mode=${mode}\n        expanded=${expanded}\n        target-content=${targetContent}>\n      </modus-side-navigation>\n\n      <div id=\"panelcontent\" style=\"padding:10px; transition: all 0.25s linear 0s;\">\n        <div id=\"overview\">\n          <p>\n            The side navigation of an application provides context through accessible menu options and positions a consistent\n            component to connect to various pages in the application.\n          </p>\n          <p>\n            The side navigation is a collapsible side content of the site\u2019s pages. It is located alongside the page\u2019s primary\n            content. The component is designed to add side content to a fullscreen application. It is activated through the\n            \u201chamburger\u201d menu in the Navbar.\n          </p>\n        </div>\n      </div>\n    </div>\n  </div>\n`;\n\nexport const SideNavigationWithData = (args) => {\n  const { collapseOnClickOutside, maxWidth, mode, expanded, targetContent } = args;\n\n  // Decorator pattern applied here to dynamically configure the component properties\n  return SideNavigationWithDataTemplate({\n    collapseOnClickOutside,\n    maxWidth: maxWidth || '300px', // Defaulting to '300px' if not provided\n    mode: mode || 'overlay', // Default to 'overlay' mode if not provided\n    expanded: expanded !== undefined ? expanded : true, // Default to expanded if not provided\n    targetContent: targetContent || '#dataTemplate #panelcontent', // Default target content selector\n  });\n};\n\nSideNavigationWithData.args = {\n  collapseOnClickOutside: true,\n  maxWidth: '300px',\n  mode: 'overlay',\n  expanded: true,\n  targetContent: '#dataTemplate #panelcontent',\n};\n\nexport const SideNavigationWithHeader = (args) => {\n  const { isHeader, maxWidth, mode, expanded, targetContent, collapseOnClickOutside } = args;\n\n  return html`\n    <div id=\"dataTemplateWithHeader\">\n      <modus-switch id=\"switch-theme\" label=\"Enable blue theme\"></modus-switch>\n      <br />\n      <modus-switch id=\"switch-mode\" label=\"Enable Push Side Navigation\"></modus-switch>\n      <div\n        style=\"width: 100%;align-items: center;height: 56px;box-shadow: 0 0 2px var(--modus-secondary)!important; margin-top: 10px;\">\n        <modus-navbar id=\"navbarWithHeader\" show-apps-menu show-help show-main-menu show-notifications> </modus-navbar>\n      </div>\n\n      <div\n        id=\"container\"\n        style=\"display:flex; min-height:500px; overflow-y: auto; position: relative;box-shadow: 0 0 2px var(--modus-secondary)!important;\">\n        <modus-side-navigation\n          max-width=${maxWidth}\n          id=\"sideNavWithHeader\"\n          target-content=${targetContent}\n          collapse-on-click-outside=${collapseOnClickOutside}\n          mode=\"overlay\"\n          mode=${mode}\n          expanded=${expanded}\n          isHeader=${JSON.stringify(isHeader)}>\n        </modus-side-navigation>\n        <div id=\"panelcontent\" style=\"padding:10px; transition: all 0.25s linear 0s\">\n          <div id=\"overview\">\n            <p>\n              The side navigation of an application provides context through accessible menu options and positions a\n              consistent component to connect to various pages in the application.\n            </p>\n            <p>\n              The side navigation is a collapsible side content of the site\u2019s pages. It is located alongside the page\u2019s\n              primary content. The component is designed to add side content to a fullscreen application. It is activated\n              through the \u201chamburger\u201d menu in the Navbar.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    ${sideNavWithHeaderScript()}\n  `;\n};\n\nSideNavigationWithHeader.args = {\n  collapseOnClickOutside: true,\n  maxWidth: '300px',\n  mode: 'overlay',\n  expanded: true,\n  targetContent: '#dataTemplateWithHeader #panelcontent',\n};\n\nconst sideNavWithHeaderScript = () => {\n  // Check if the script is already added to prevent duplicate execution\n  if (document.querySelector('#sideNavWithHeaderScript')) return;\n\n  const script = document.createElement('script');\n  script.id = 'sideNavWithHeaderScript'; // Add an ID for tracking\n  script.innerHTML = `\n  (function () {\n    const homeIcon = 'home';\n    const usageIcon = 'flowchart';\n    const stylesIcon = 'bar_graph_line';\n    const sideNavHeader = document.querySelector('modus-side-navigation');\n\n    const selectionHandler = (e) => {\n      if (e.detail && e.detail.selected) {\n        const panel = document.querySelector('#panelcontent');\n        document.querySelector('#sidenav-content-title')?.remove();\n        const el = document.createElement('h3');\n        el.id = 'sidenav-content-title';\n        const selectedItem = e.target.data?.find((item) => item.id === e.detail.id);\n        el.innerHTML = selectedItem?.label || 'Home Page';\n        panel.insertBefore(el, document.querySelector('#overview'));\n      }\n    };\n\n    function getLabel(newItems) {\n      sideNavHeader.data = [\n        {\n          id: 'Home',\n          menuIcon: homeIcon,\n          label: 'Home',\n          isHeader: {\n            enabled: true,\n            items: [\n              {\n                id: 'Home',\n                label: 'Home',\n                icon: 'home',\n              },\n              {\n                id: 'Charts',\n                label: 'Charts',\n                icon: 'bar_graph',\n              },\n              {\n                id: 'Maps',\n                label: 'Maps',\n                icon: 'location_arrow',\n              },\n            ],\n          },\n          onSideNavItemHeaderClicked: selectionHeaderHandler,\n        },\n        {\n          id: 'usage-menu',\n          menuIcon: newItems[0].icon,\n          label: newItems[0].label,\n          onSideNavItemClicked: selectionHandler,\n        },\n        {\n          id: 'styles-menu',\n          menuIcon: newItems[1].icon,\n          label: newItems[1].label,\n          onSideNavItemClicked: selectionHandler,\n        },\n      ];\n    }\n\n    const selectionHeaderHandler = (e) => {\n      const headerLabel = e.detail.id;\n      let newItems = [];\n\n      if (headerLabel === 'Charts') {\n        newItems = [\n          { label: 'Bar graph square', icon: 'bar_graph_square' },\n          { label: 'Gantt chart', icon: 'gantt_chart' },\n        ];\n        getLabel(newItems);\n\n        const simulatedEvent = {\n          detail: { selected: true, id: 'Charts' },\n          target: { data: [{ id: 'Charts', label: 'Charts' }] },\n        };\n        selectionHandler(simulatedEvent);\n      } else if (headerLabel === 'Maps') {\n        newItems = [\n          { label: 'World', icon: 'web' },\n          { label: 'Region', icon: 'map_poi' },\n        ];\n        getLabel(newItems);\n\n        const simulatedEvent = {\n          detail: { selected: true, id: 'Maps' },\n          target: { data: [{ id: 'Maps', label: 'Maps' }] },\n        };\n        selectionHandler(simulatedEvent);\n      } else {\n        initialize();\n\n        const simulatedEvent = {\n          detail: { selected: true, id: 'Home' },\n          target: { data: [{ id: 'Home', label: 'Home' }] },\n        };\n        selectionHandler(simulatedEvent);\n      }\n    };\n\n    function initialize() {\n      sideNavHeader.data = [\n        {\n          id: 'Home',\n          menuIcon: homeIcon,\n          label: 'Home',\n          isHeader: {\n            enabled: true,\n            items: [\n              {\n                id: 'Home',\n                label: 'Home',\n                icon: 'home',\n              },\n              {\n                id: 'Charts',\n                label: 'Charts',\n                icon: 'bar_graph',\n              },\n              {\n                id: 'Maps',\n                label: 'Maps',\n                icon: 'location_arrow',\n              },\n            ],\n          },\n          onSideNavItemHeaderClicked: selectionHeaderHandler,\n        },\n        {\n          id: 'usage-menu',\n          menuIcon: usageIcon,\n          label: 'Usage page',\n          onSideNavItemClicked: selectionHandler,\n        },\n        {\n          id: 'styles-menu',\n          menuIcon: stylesIcon,\n          label: 'Styles page',\n          onSideNavItemClicked: selectionHandler,\n        },\n      ];\n    }\n    initialize();\n    sideNavHeader.addEventListener('sideNavItemHeaderClicked', selectionHeaderHandler);\n    sideNavHeader.addEventListener('sideNavItemClicked', selectionHandler);\n  })();\n\n  `;\n  return script;\n};\n",
    "storybook": {
      "examples": [
        "<modus-navbar id=\"navbar\" show-apps-menu show-help show-main-menu show-notifications> </modus-navbar>",
        "<modus-icon name=\"home\" size=\"24\" slot=\"menu-icon\"></modus-icon>",
        "<modus-icon name=\"flowchart\" size=\"24\" slot=\"menu-icon\"></modus-icon>",
        "<modus-icon name=\"bar_graph_line\" size=\"24\" slot=\"menu-icon\"></modus-icon>",
        "<modus-icon name=\"screen\" size=\"24\" slot=\"menu-icon\"></modus-icon>"
      ],
      "variants": [],
      "prop_usage": {
        "id": [
          "defaultTemplate",
          "navbar",
          "container",
          "sideNav",
          "home-menu",
          "usage-menu",
          "styles-menu",
          "accessibility-menu",
          "panelcontent",
          "overview",
          "dataTemplate",
          "switch-theme",
          "switch-mode",
          "dataTemplateWithHeader",
          "navbarWithHeader",
          "sideNavWithHeader"
        ],
        "style": [
          "width: 100%; align-items: center; height: 56px; box-shadow: 0 0 2px var(--modus-secondary)!important; margin-top: 50px;",
          "display: flex; min-height: 500px; overflow-y: auto; position: relative; box-shadow: 0 0 2px var(--modus-secondary)!important;",
          "padding: 10px;",
          "width: 100%;align-items: center;height: 56px;box-shadow: 0 0 2px var(--modus-secondary)!important; margin-top: 10px;",
          "display:flex; min-height:500px; overflow-y: auto; position: relative;box-shadow: 0 0 2px var(--modus-secondary)!important;",
          "padding:10px; transition: all 0.25s linear 0s;",
          "padding:10px; transition: all 0.25s linear 0s"
        ],
        "label": [
          "Home page",
          "Usage",
          "Styles",
          "Accessibility",
          "Enable blue theme",
          "Enable Push Side Navigation"
        ],
        "name": [
          "home",
          "flowchart",
          "bar_graph_line",
          "screen"
        ],
        "size": [
          "24"
        ],
        "slot": [
          "menu-icon"
        ],
        "mode": [
          "overlay"
        ]
      }
    },
    "tag_name": "modus-side-navigation"
  },
  "modus-slider": {
    "props": [
      {
        "name": "ariaLabel",
        "description": "/** (optional) The slider's aria-label. */",
        "type": "string | null"
      },
      {
        "name": "label",
        "description": "/** (optional) The slider's aria-label. */",
        "type": "string"
      }
    ],
    "events": [
      "valueChange",
      "valueInput"
    ],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-slider-storybook-docs.mdx ---\n\n# Slider\n\n---\n\n[Modus Slider](https://modus.trimble.com/components/sliders/) web components are referenced using the `<modus-slider>` custom HTML element.\n\n### Default\n\n<modus-slider label=\"Slider\"></modus-slider>\n\n<br />\n\n<modus-slider disabled label=\"Disabled slider\"></modus-slider>\n\n```html\n<modus-slider label=\"Slider\"></modus-slider> <modus-slider disabled label=\"Disabled slider\"></modus-slider>\n```\n\n### Properties\n\n| Name         | Description                    | Type      | Options | Default Value | Required |\n| ------------ | ------------------------------ | --------- | ------- | ------------- | -------- |\n| `aria-label` | The slider's aria-label        | `string`  |         |               |          |\n| `disabled`   | Whether the slider is disabled | `boolean` |         | false         |          |\n| `label`      | The slider's label             | `string`  |         |               |          |\n| `max-value`  | The slider's maximum value     | `number`  |         |               |          |\n| `min-value`  | The slider's minimum value     | `number`  |         |               |          |\n| `value`      | The slider's value             | `number`  |         |               |          |\n\n### DOM Events\n\n| Name          | Description           | Emits              |\n| ------------- | --------------------- | ------------------ |\n| `valueChange` | Fires on value change | The slider's value |\n| `valueInput`  | Fires on value input  | The input value    |\n\n### Accessibility\n\n- Slider must be provided with either a `label` or an `aria-label` - but not both.\n",
    "storybook_content": "\n\n--- modus-slider.stories.tsx ---\n\n// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-slider-storybook-docs.mdx';\nimport { html } from 'lit-html';\nimport { withActions } from '@storybook/addon-actions/decorator';\n\nexport default {\n  title: 'Components/Slider',\n  argTypes: {\n    ariaLabel: {\n      name: 'aria-label',\n      description: \"The slider's aria-label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    disabled: {\n      description: 'Whether the slider is disabled',\n      table: {\n        type: { summary: 'boolean' },\n      },\n    },\n    label: {\n      description: \"The slider's label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    maxValue: {\n      name: 'max-value',\n      description: \"The slider's maximum value\",\n      table: {\n        defaultValue: { summary: 100 },\n        type: { summary: 'number' },\n      },\n    },\n    minValue: {\n      name: 'min-value',\n      description: \"The slider's minimum value\",\n      table: {\n        defaultValue: { summary: 0 },\n        type: { summary: 'number' },\n      },\n    },\n    value: {\n      description: \"The slider's value\",\n      table: {\n        defaultValue: { summary: 0 },\n        type: { summary: 'number' },\n      },\n    },\n  },\n  parameters: {\n    actions: {\n      handles: ['valueChange', 'valueInput'],\n    },\n    controls: { expanded: true, sort: 'requiredFirst' },\n    docs: {\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n    },\n  },\n  decorators: [withActions],\n};\n\nconst Template = ({ ariaLabel, disabled, label, maxValue, minValue, value }) => html`\n  <modus-slider\n    aria-label=${ariaLabel}\n    ?disabled=${disabled}\n    label=${label}\n    max-value=${maxValue}\n    min-value=${minValue}\n    value=${value}>\n  </modus-slider>\n`;\n\nexport const Default = Template.bind({});\nDefault.args = {\n  ariaLabel: '',\n  disabled: false,\n  label: 'Label',\n  maxValue: 100,\n  minValue: 0,\n  value: 50,\n};\n",
    "storybook": {
      "examples": [
        "<modus-slider\n    aria-label=${ariaLabel}\n    ?disabled=${disabled}\n    label=${label}\n    max-value=${maxValue}\n    min-value=${minValue}\n    value=${value}>\n  </modus-slider>",
        "\n  <modus-slider\n    aria-label=${ariaLabel}\n    ?disabled=${disabled}\n    label=${label}\n    max-value=${maxValue}\n    min-value=${minValue}\n    value=${value}>\n  </modus-slider>\n"
      ],
      "variants": [],
      "prop_usage": {}
    },
    "tag_name": "modus-slider"
  },
  "modus-spinner": {
    "props": [],
    "events": [],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-spinner-storybook-docs.mdx ---\n\n# Spinner\n\n---\n\n[Modus Spinner](https://modus.trimble.com/components/spinners/) web components indicate progress by showing a loading state. They are referenced using the `<modus-spinner>` custom HTML element.\n\n### Default\n\n<modus-spinner></modus-spinner>\n\n<modus-spinner color=\"secondary\"></modus-spinner>\n\n<modus-spinner color=\"tertiary\"></modus-spinner>\n\n```html\n<!-- Spinner -->\n<modus-spinner></modus-spinner>\n\n<modus-spinner color=\"secondary\"></modus-spinner>\n\n<modus-spinner color=\"tertiary\"></modus-spinner>\n```\n\n### Properties\n\n| Name    | Description                                                                                                     | Type     | Options | Default Value | Required |\n| ------- | --------------------------------------------------------------------------------------------------------------- | -------- | ------- | ------------- | -------- |\n| `color` | The color of the spinner. It can be a custom color or one of the variants - `primary`, `secondary`, `tertiary`. | `string` |         | `primary`     |          |\n| `size`  | The size of the spinner                                                                                         | `string` |         | `2rem`        |          |\n\n### Accessibility\n\n- Spinner has an `aria-busy` attribute that is set to `true`.\n",
    "storybook_content": "\n\n--- modus-spinner.stories.tsx ---\n\nimport { html } from 'lit-html';\n// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-spinner-storybook-docs.mdx';\n\nexport default {\n  title: 'Components/Spinner',\n  argTypes: {\n    color: {\n      description: 'The color of the spinner',\n      table: {\n        type: { summary: 'color' },\n      },\n    },\n    size: {\n      description: 'The size of the spinner',\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n  },\n  parameters: {\n    controls: { expanded: true },\n    docs: {\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n    },\n  },\n};\n\nexport const Default = ({ color, size }) => html` <modus-spinner color=${color} size=${size}> </modus-spinner> `;\nDefault.args = {\n  color: '#005F9E',\n  size: '2rem',\n};\n",
    "storybook": {
      "examples": [
        "<modus-spinner color=${color} size=${size}> </modus-spinner>",
        " <modus-spinner color=${color} size=${size}> </modus-spinner> "
      ],
      "variants": [],
      "prop_usage": {}
    },
    "tag_name": "modus-spinner"
  },
  "modus-switch": {
    "props": [
      {
        "name": "ariaLabel",
        "description": "/** (optional) The switch's aria-label. */",
        "type": "string | null"
      },
      {
        "name": "disabled",
        "description": "/** (optional) The switch's aria-label. */",
        "type": "boolean"
      },
      {
        "name": "label",
        "description": "/** (optional) The switch's aria-label. */",
        "type": "string"
      }
    ],
    "events": [
      "switchClick"
    ],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-switch-storybook-docs.mdx ---\n\nimport { Anchor } from '@storybook/addon-docs';\n\n# Switch\n\n---\n\n[Modus Switch](https://modus.trimble.com/components/web/switches/) web components are referenced using the `<modus-switch>` custom HTML element.\n\n<Anchor storyId=\"components-switch--medium\" />\n\n### Medium\n\n<modus-switch label=\"Medium\"></modus-switch>\n\n<Anchor storyId=\"components-switch--checked\" />\n\n### Small\n\n<modus-switch label=\"Small\" size=\"small\"></modus-switch>\n\n<Anchor storyId=\"components-switch--small\" />\n\n### Checked\n\n<modus-switch checked label=\"Checked\"></modus-switch>\n\n<Anchor storyId=\"components-switch--disabled\" />\n\n### Disabled\n\n<modus-switch disabled label=\"Disabled\"></modus-switch>\n\n```html\n<modus-switch label=\"medium\"></modus-switch>\n<modus-switch label=\"small\" size=\"small\"></modus-switch>\n<modus-switch checked label=\"Checked\"></modus-switch>\n<modus-switch disabled label=\"Disabled\"></modus-switch>\n```\n\n### Properties\n\n## Properties\n\n| Property    | Attribute    | Description                                | Type                 | Default     |\n| ----------- | ------------ | ------------------------------------------ | -------------------- | ----------- |\n| `ariaLabel` | `aria-label` | (optional) The switch's aria-label.        | `string`             | `undefined` |\n| `checked`   | `checked`    | (optional) Whether the switch is checked.  | `boolean`            | `undefined` |\n| `disabled`  | `disabled`   | (optional) Whether the switch is disabled. | `boolean`            | `undefined` |\n| `label`     | `label`      | (optional) The switch label.               | `string`             | `undefined` |\n| `size`      | `size`       | (optional) The size of the radiobutton.    | `\"medium\" , \"small\"` | `'medium'`  |\n\n### DOM Events\n\n<section>\n  <table>\n    <thead>\n      <tr>\n        <th>Name</th>\n        <th>Description</th>\n        <th>Emits</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td>switchClick</td>\n        <td>Fires on switch click</td>\n        <td>boolean</td>\n      </tr>\n    </tbody>\n  </table>\n</section>\n\n### Accessibility\n\n- Switch has `role` of `switch`.\n- Switch gets an `aria-checked` set to whether Switch is checked.\n- Switch gets an `aria-label` provided by the `aria-label` property input.\n- Switch gets an `aria-disabled` set to whether Switch is disabled.\n- When Switch has focus, <kbd>Space</kbd> or <kbd>Enter</kbd> toggle it, and emits the `switchClick` event.\n",
    "storybook_content": "\n\n--- modus-switch.stories.tsx ---\n\nimport { html } from 'lit-html';\n// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-switch-storybook-docs.mdx';\nimport { withActions } from '@storybook/addon-actions/decorator';\n\nexport default {\n  title: 'User Inputs/Switch',\n  argTypes: {\n    ariaLabel: {\n      name: 'aria-label',\n      description: \"The switch's aria-label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    checked: {\n      description: 'Whether the switch is checked',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    disabled: {\n      description: 'Whether the switch is disabled',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    label: {\n      description: \"The switch's label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    size: {\n      options: ['small', 'medium'],\n      type: 'select',\n      description: 'The size of the button',\n      table: {\n        defaultValue: { summary: `'medium'` },\n        type: { summary: `'small' | 'medium'` },\n      },\n    },\n  },\n  parameters: {\n    actions: {\n      handles: ['switchClick'],\n    },\n    controls: { expanded: true },\n    docs: {\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n    },\n  },\n  decorators: [withActions],\n};\n\nexport const Medium = ({ ariaLabel, checked, disabled, label, size }) => html`\n  <modus-switch aria-label=${ariaLabel} checked=${checked} ?disabled=${disabled} label=${label} size=${size}> </modus-switch>\n`;\nMedium.args = {\n  ariaLabel: '',\n  checked: false,\n  disabled: false,\n  label: 'Medium',\n  size: 'medium',\n};\n\nexport const Checked = ({ ariaLabel, checked, disabled, label, size }) => html`\n  <modus-switch aria-label=${ariaLabel} checked=${checked} ?disabled=${disabled} label=${label} size=${size}> </modus-switch>\n`;\nChecked.args = {\n  ariaLabel: '',\n  checked: true,\n  disabled: false,\n  label: 'Checked',\n  size: 'medium',\n};\n\nexport const Disabled = ({ ariaLabel, checked, disabled, label, size }) => html`\n  <modus-switch aria-label=${ariaLabel} checked=${checked} ?disabled=${disabled} label=${label} size=${size}> </modus-switch>\n`;\nDisabled.args = {\n  ariaLabel: '',\n  checked: false,\n  disabled: true,\n  label: 'Disabled',\n  size: 'medium',\n};\n",
    "storybook": {
      "examples": [
        "<modus-switch aria-label=${ariaLabel} checked=${checked} ?disabled=${disabled} label=${label} size=${size}> </modus-switch>",
        "<modus-switch aria-label=${ariaLabel} checked=${checked} ?disabled=${disabled} label=${label} size=${size}> </modus-switch>",
        "<modus-switch aria-label=${ariaLabel} checked=${checked} ?disabled=${disabled} label=${label} size=${size}> </modus-switch>",
        "\n  <modus-switch aria-label=${ariaLabel} checked=${checked} ?disabled=${disabled} label=${label} size=${size}> </modus-switch>\n",
        "\n  <modus-switch aria-label=${ariaLabel} checked=${checked} ?disabled=${disabled} label=${label} size=${size}> </modus-switch>\n"
      ],
      "variants": [],
      "prop_usage": {}
    },
    "tag_name": "modus-switch"
  },
  "modus-table": {
    "props": [],
    "events": [],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-table-storybook-docs.mdx ---\n\nimport { Story } from '@storybook/addon-docs';\n\n# Table\n\n---\n\n[Modus Table](https://modus.trimble.com/components/tables/) web components are wrappers around the HTML table element. Modus Table is reusable and customizable UI element that can be used to display data in a tabular format. They are referenced using the `<modus-table>` custom HTML element.\n\n## Overview\n\n- [Default](#default)\n- [Hover](#hover)\n- [Custom Cell](#custom-cell)\n- [Borderless](#borderless)\n- [Sorting](#sorting)\n- [Manual Sorting](#manual-sorting)\n- [Custom Sorting](#custom-sorting)\n- [Value Formatter](#value-formatter)\n- [Hyperlink](#hyperlink)\n- [Badge](#badge)\n- [Column Resize](#column-resize)\n- [Column Reorder](#column-reorder)\n- [Pagination](#pagination)\n- [Manual Pagination](#manual-pagination)\n- [Summary Row](#summary-row)\n- [Column Visibility](#column-visibility)\n- [Expandable Rows](#Expandable-rows)\n- [Checkbox Row Selection](#checkbox-row-selection)\n- [Disable selection on certain rows](#disable-selection-on-certain-rows)\n- [Row Actions](#row-actions)\n- [Inline Editing](#inline-editing)\n- [Inline Editing - Autocomplete with Dynamic Filtering](#inline-editing---autocomplete-with-dynamic-filtering)\n- [Inline Editing - Disabling a Cell or Row](#inline-editing---disabling-a-cell-or-row)\n- [Types](#types)\n- [Accessibility](#accessibility)\n- [Properties](#properties)\n- [Events](#events)\n- [Slot](#slot)\n- [Methods](#methods)\n- [Text Wrapping](#text-wrapping)\n- [Upcoming features](#upcoming-features-)\n\n---\n\n### Default\n\nBasic table that outputs data in tabular format after accepting `data` and `column` as input.\n\n<Story id=\"components-table--default\" height={'350px'} />\n\n```html\n  <div style=\"width: 950px\">\n    <modus-table hover=\"false\" sort=\"false\" />\n  </div>\n<script>\n  document.querySelector('modus-table').columns = [\n    {\n      header: 'First Name',\n      accessorKey: 'firstName',\n      id: 'first-name',\n      dataType: 'text',\n    },\n    {\n      header: 'Last Name',\n      accessorKey: 'lastName',\n      id: 'last-name',\n      dataType: 'text',\n    },\n    { header: 'Age', accessorKey: 'age', id: 'age', dataType: 'integer' },\n    {\n      header: 'Visits',\n      accessorKey: 'visits',\n      id: 'visits',\n      dataType: 'integer',\n    },\n    { header: 'Status', accessorKey: 'status', id: 'status', dataType: 'text' },\n    {\n      header: 'Profile Progress',\n      accessorKey: 'progress',\n      id: 'progress',\n      dataType: 'integer',\n    },\n    {\n      header: 'Created At',\n      accessorKey: 'createdAt',\n      id: 'createdAt',\n      dataType: 'date',\n    },\n  ];\n  document.querySelector('modus-table').data = [\n    {\n      firstName: 'Gordon',\n      lastName: 'Lemke',\n      age: 40,\n      visits: 434,\n      progress: 97,\n      status: 'single',\n      createdAt: '2002-11-21T12:48:51.739Z',\n    },\n    {\n      firstName: 'Elliott',\n      lastName: 'Bosco',\n      age: 21,\n      visits: 348,\n      progress: 60,\n      status: 'complicated',\n      createdAt: '2012-02-08T12:14:22.776Z',\n    },\n    {\n      firstName: 'Agnes',\n      lastName: 'Breitenberg',\n      age: 34,\n      visits: 639,\n      progress: 84,\n      status: 'single',\n      createdAt: '1995-04-07T07:24:57.577Z',\n    },\n    {\n      firstName: 'Nicolette',\n      lastName: 'Stamm',\n      age: 13,\n      visits: 518,\n      progress: 28,\n      status: 'relationship',\n      createdAt: '2009-07-28T14:29:51.505Z',\n    },\n  ];\n</script>\n</html>\n```\n\n### Hover\n\nThis displays the highlighted row where the cursor is currently located.\n\n- Hover is disable by default, set `hover` to `true` to enable hover.\n\n### Custom Cell\n\nUsers can input `HTML` data to display any kind of Custom data in the table cells.\n\n- Pass the data in `HTML` format and specify `custom` as the column type.\n\n```html\n<div style=\"width: 950px\">\n  <modus-table hover=\"false\" sort=\"false\" />\n</div>\n<script>\n  document.querySelector('modus-table').columns = [\n    {\n      header: 'First Name',\n      accessorKey: 'firstName',\n      id: 'first-name',\n      dataType: 'text',\n    },\n    {\n      header: 'Last Name',\n      accessorKey: 'lastName',\n      id: 'last-name',\n      dataType: 'text',\n    },\n    { header: 'Age', accessorKey: 'age', id: 'age', dataType: 'integer' },\n    {\n      header: 'Visits',\n      accessorKey: 'visits',\n      id: 'visits',\n      dataType: 'integer',\n    },\n    { header: 'Status', accessorKey: 'status', id: 'status', dataType: 'text' },\n    {\n      header: 'Profile Progress',\n      accessorKey: 'progress',\n      id: 'progress',\n      dataType: 'integer',\n    },\n    {\n      header: 'Created At',\n      accessorKey: 'createdAt',\n      id: 'createdAt',\n      dataType: 'date',\n    },\n    {\n      header: 'Custom',\n      accessorKey: 'custom',\n      id: 'custom',\n      dataType: 'custom',\n    },\n  ];\n  document.querySelector('modus-table').data = [\n    {\n      firstName: 'Gordon',\n      lastName: 'Lemke',\n      age: 40,\n      visits: 434,\n      progress: 97,\n      status: 'single',\n      createdAt: '2002-11-21T12:48:51.739Z',\n      custom: \"<modus-button color='primary'>Custom1</modus-button>\",\n    },\n    {\n      firstName: 'Elliott',\n      lastName: 'Bosco',\n      age: 21,\n      visits: 348,\n      progress: 60,\n      status: 'complicated',\n      createdAt: '2012-02-08T12:14:22.776Z',\n      custom: \"<modus-button color='secondary'>Custom2</modus-button>\",\n    },\n    {\n      firstName: 'Agnes',\n      lastName: 'Breitenberg',\n      age: 34,\n      visits: 639,\n      progress: 84,\n      status: 'single',\n      createdAt: '1995-04-07T07:24:57.577Z',\n      custom: \"<modus-button color='tertiary'>Custom3</modus-button>\",\n    },\n    {\n      firstName: 'Nicolette',\n      lastName: 'Stamm',\n      age: 13,\n      visits: 518,\n      progress: 28,\n      status: 'relationship',\n      createdAt: '2009-07-28T14:29:51.505Z',\n      custom: \"<modus-button color='danger'>Custom4</modus-button>\",\n    },\n  ];\n</script>\n```\n\n### Borderless\n\nTable has two views one with border and another is borderless.\n\n- Table with a border is shown by default. There are three options under `displayOptions`: `borderless` , `cellborderless` and `cellVerticalBorderless`.\n- To eliminate the outer table border, set `borderless` to `true`.\n- Set `cellborderless` to `true` remove the innter table border i.e. for the border for cells.\n- Set `cellVerticalBorderless` to `true` to remove the vertical border for cells. When both `cellborderless` and `cellVerticalBorderless` are set to `true`, `cellBorderless` will take precedence.\n\n### Sorting\n\nUsers can arrange data in a table by sorting it in either ascending or descending order. The sort icon will be visible when enabled.\n\n- Sorting is disabled by default. The way to activate it is to set `sort` to `true`.\n- Every column has sorting turned on by default. Setting `enableSorting` `true` or `false` for a certain column will enable or disable it.\n- When enabled, the sort icon's initial click will sort in ascending order, while its second click will sort in descending order.\n- Set `showSortIconOnHover` to `true` to enable sort on hover as well.\n- A default sorting can be set by setting `defaultSort` with the column `id` and sorting direction.\n\n### Manual Sorting\n\nManual Sorting allows users to handle sorting in server-side mode.\n\n- Manual Sorting can be enabled using the `manualSortingOptions` prop.\n- The `currentSortingState` represents how the data is sorted (column and direction).\n\n### Custom Sorting\n\nCustom sorting allows you to define your own logic for sorting table data.Custom sorting can be implemented by defining a sorting function `sortingFn` and assigning it to the relevant columns in your table configuration.\n\nA custom sorting function receives two arguments: the row values for the column being sorted, and the column id.\n\n```javascript\n\n\nconst myCustomSortingFn(rowA, rowB, columnId) => {\n  return //-1, 0, or 1 - access any row data using rowA.original and rowB.original\n}\n\n\n```\n\nIt should return -1 if the first argument should come before the second, 1 if it should come after, or 0 if they are equal.\n\n```javascript\nconst columns = [\n  {\n    header: () => 'Name',\n    accessorKey: 'name',\n    sortingFn: 'alphanumeric', // use built-in sorting function by name\n  },\n  {\n    header: () => 'Age',\n    accessorKey: 'age',\n    sortingFn: 'myCustomSortingFn', // use custom global sorting function\n  },\n  {\n    header: () => 'Birthday',\n    accessorKey: 'birthday',\n    sortingFn: 'datetime', // recommended for date columns\n  },\n  {\n    header: () => 'Profile',\n    accessorKey: 'profile',\n    // use custom sorting function directly\n    sortingFn: (rowA, rowB, columnId) => {\n      return rowA.original.someProperty - rowB.original.someProperty;\n    },\n  },\n];\n```\n\nCustom Sorting Function\n\n```javascript\nconst myCustomSortingFn: SortingFn<Person> = (rowA, rowB, _columnId) => {\n  const statusA = rowA.original.status\n  const statusB = rowB.original.status\n  const statusOrder = ['single', 'complicated', 'relationship']\n  return statusOrder.indexOf(statusA) - statusOrder.indexOf(statusB)\n}\n\n```\n\nThe `myCustomSortingFn` function sorts rows based on the status property of each row's data. The status property can have one of three values: 'single', 'complicated', or 'relationship'. The function ensures that rows are sorted in the order specified by the statusOrder array.\n\n### Value Formatter\n\nUser can take the data of a cell and apply any string-based formatting logic.\n\n- Need to pass a custom formatter function that returns a string, to the `cell` property on the `columns` array, example, `cell: (props) => formatCurrency(props)`.\n\n```javascript\n// e.g. for currency formatting `cell: (props) => formatCurrency(props)`\nfunction formatCurrency(props) {\n  const value = props.cell.getValue();\n  return '$' + formatNumber(value);\n}\n\n// e.g. for decimal number formatting `cell: (props) =>formatNumber(props)`\nfunction formatNumber(props) {\n  const value = props.cell.getValue();\n  return Number(value)\n    .toFixed(2)\n    .replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\n}\n\n// e.g. for date formatting `cell: (props) => formatDate(props)`\nfunction formatDate(props) {\n  const value = props.cell.getValue();\n  const date = new Date(value);\n  return (\n    (date.getMonth() > 8 ? date.getMonth() + 1 : '0' + (date.getMonth() + 1)) +\n    '/' +\n    (date.getDate() > 9 ? date.getDate() : '0' + date.getDate()) +\n    '/' +\n    date.getFullYear()\n  );\n}\n\n// NOTE: One can use their own custom functions to format data as per their requirements.\n```\n\n### Hyperlink\n\nUser can display hyperlink in a table column.\n\n- Pass the data in `ModusTableCellLink` format and specify `ModusTableColumnDataType.Link` as the column type.\n- `_type: ModusTableColumnDataType.Link` is used to override the column data type in order to display a hyperlink only in a specific cell and not on the entire column.\n- As a link is an object, the default sorting is ineffective. We must pass `sortingFn:'sortForHyperlink'` along with the column information in order to sort a column with the `ModusTableCellLink` datatype or if '\\_type' is used to override the datatype.\n\n### Badge\n\nUser can display badge in a table column.\n\n- Pass the data in `ModusTableCellBadge` format and specify `ModusTableCellBadge.badge` as the column type.\n- As a badge is an object, the default sorting is ineffective. We must pass `sortingFn:'sortForBadge'` along with the column information in order to sort a column with the `ModusTableCellBadge` datatype or if '\\_type' is used to override the datatype.\n\n```html\n<div style=\"width: 950px\">\n   <modus-table column-resize=\"true\" />\n</div>\n <script>\n    document.querySelector('modus-table').columns = [\n      {\n        header: 'First Name',\n        accessorKey: 'firstName',\n        id: 'first-name',\n        dataType: 'text',\n        size: 150,\n        minSize: 80\n      },\n      {\n        header: 'Last Name',\n        accessorKey: 'lastName',\n        id: 'last-name',\n        dataType: 'text',\n        size: 150,\n        minSize: 80\n      },\n      {\n        header: 'Age',\n        accessorKey: 'age',\n        id: 'age',\n        dataType: 'integer',\n        size: 60,\n        minSize: 60\n      },\n      {\n        header: 'Visits',\n        accessorKey: 'visits',\n        id: 'visits',\n        dataType: 'integer',\n        maxSize: 80,\n        minSize: 80,\n        enableResizing: false,\n      },\n      {\n        header: 'Priority',\n        accessorKey: 'priority',\n        id: 'priority',\n        dataType: 'badge',\n        minSize: 80\n      },\n      {\n        header: 'Profile Progress',\n        accessorKey: 'progress',\n        id: 'progress',\n        dataType: 'integer',\n        minSize: 100,\n      },\n      {\n        header: 'Created At',\n        accessorKey: 'createdAt',\n        id: 'createdAt',\n        dataType: 'date',\n        size: 210,\n        minSize: 100,\n      },\n    ];\n    document.querySelector('modus-table').data = [\n      {\n        firstName: 'Gordon',\n        lastName: 'Lemke',\n        age: 40,\n        visits: 434,\n        progress: 97,\n        priority: {\n          size: 'medium',\n          type: 'counter',\n          text: 'Low',\n          color: 'danger'\n        },\n        createdAt: '2002-11-21T12:48:51.739Z',\n      },\n      ...\n    ];\n  </script>\n</html>\n```\n\n### Column Resize\n\nThe column sizing feature allows users to dynamically change the width of all columns by dragging the column headers. When hovering above the dividing line between two columns, there is a visual indicator that shows the column is adjustable.\n\n- By default, the table will get a fixed size by calculating the sum of the sizes of all columns and resizing a column will not impact others.\n- By setting `fullWidth` to true, a column can be resized with table responsiveness and other columns will be adjusted to fit within the confines of the table.\n- Optionally you can specify the width of each column using `size`, `minSize` and `maxSize` to limit the resizing of a column to a specific value.\n\n```html\n<div style=\"width: 950px\">\n   <modus-table column-resize=\"true\" />\n</div>\n <script>\n    document.querySelector('modus-table').columns = [\n      {\n        header: 'First Name',\n        accessorKey: 'firstName',\n        id: 'first-name',\n        dataType: 'text',\n        size: 150,\n        minSize: 80\n      },\n      {\n        header: 'Last Name',\n        accessorKey: 'lastName',\n        id: 'last-name',\n        dataType: 'text',\n        size: 150,\n        minSize: 80\n      },\n      {\n        header: 'Age',\n        accessorKey: 'age',\n        id: 'age',\n        dataType: 'integer',\n        size: 60,\n        minSize: 60\n      },\n      {\n        header: 'Visits',\n        accessorKey: 'visits',\n        id: 'visits',\n        dataType: 'integer',\n        maxSize: 80,\n        minSize: 80,\n        enableResizing: false,\n      },\n      {\n        header: 'Status',\n        accessorKey: 'status',\n        id: 'status',\n        dataType: 'text',\n        minSize: 80\n      },\n      {\n        header: 'Profile Progress',\n        accessorKey: 'progress',\n        id: 'progress',\n        dataType: 'integer',\n        minSize: 100,\n      },\n      {\n        header: 'Created At',\n        accessorKey: 'createdAt',\n        id: 'createdAt',\n        dataType: 'date',\n        size: 210,\n        minSize: 100,\n      },\n    ];\n    document.querySelector('modus-table').data = [\n      {\n        firstName: 'Gordon',\n        lastName: 'Lemke',\n        age: 40,\n        visits: 434,\n        progress: 97,\n        status: 'single',\n        createdAt: '2002-11-21T12:48:51.739Z',\n      },\n      ...\n    ];\n  </script>\n</html>\n```\n\n### Column Reorder\n\nUsers can rearrange the column headers.\n\n- Column reorder is disabled by default. The way to activate it is to set `columnReorder` to `true`.\n\n### Pagination\n\nPagination allows users to navigate between pages\n\n- Modus Table uses `modus-pagination` component to navigate between pages.\n- Pagination can be enabled using the `pagination` prop. The `pageSizeList` takes an array for page size options.\n\n### Manual Pagination\n\nEnabling manual pagination mode for a table allows users to manually paginate rows instead of having the table automatically paginate them. Users will need to pass details such as the current page index, page size, page count, and total record to paginate the rows. This feature is particularly useful when implementing server-side pagination.\n\n- Manual Pagination can be enabled using the `manualPaginationOptions` prop.\n- The `currentPageIndex` takes a number to specify the current page number, indicating which page should appear as selected from the server side.\n- The `currentPageSize` takes a number to specify the current page view number, determining how many records the table will display from the server side.\n- The `pageCount` takes a number to specify the total number of pages, in order to display the corresponding number of pages in the table.\n- The `totalRecords` takes a number to specify the total number of records, in order to display the total count results in the table.\n\n### Summary Row\n\nUser can opt for this summary row, which can be used as footer or a row to view total of column data.\n\n- Summary row is disabled by default. Set `summary-row` to `true` to enable it.\n- Pass any text in `footer` property of `columns` to be display in the summary row.\n- Set `showTotal` as `true` in the `columns` array for the specific column to display the total value that column.\n\n### Column Visibility\n\nA toolbar is used to perform operations like hiding/showing the columns. It is enabled by `toolbar` and is shown above the table. By setting `toolbarOptions.columnsVisibility` a meatball icon appears at the right corner, and clicking on it shows a dropdown menu with columns for selection. Additionally, users can use `slot='groupLeft'` and `slot='groupRight'` to add custom content to the toolbar.\n\n```html\n<div style=\"width: 950px\">\n   <modus-table\n      hover=\"true\"\n      sort=\"true\"\n      column-resize=\"true\"\n      pagination=\"true\"\n      show-sort-icon-hover=\"true\"\n      toolbar=\"true\" />\n</div>\n <script>\n    document.querySelector('modus-table').toolbarOptions = {\n        columnsVisibility: {\n          title: '',\n          requiredColumns: ['first-name'],\n          hiddenColumns: ['last-name']\n        }\n      };\n    document.querySelector('modus-table').columns = [\n      {\n        header: 'First Name',\n        accessorKey: 'firstName',\n        id: 'first-name',\n        dataType: 'text',\n        size: 150,\n        minSize: 80\n      },\n      {\n        header: 'Last Name',\n        accessorKey: 'lastName',\n        id: 'last-name',\n        dataType: 'text',\n        size: 150,\n        minSize: 80\n      },\n      ...\n    ];\n    document.querySelector('modus-table').data = [\n      {\n        firstName: 'Gordon',\n        lastName: 'Lemke',\n        age: 40,\n        visits: 434,\n        progress: 97,\n        status: 'single',\n        createdAt: '2002-11-21T12:48:51.739Z',\n      },\n      ...\n    ];\n  </script>\n</html>\n```\n\n### Expandable Rows\n\nUser can expand rows to display as child/sub row data.\n\n- Expandable row is disabled by default. Set `rowsExpandable` to `true` to enable it.\n- Pass data to `subRows` property in `columns`.\n\n### Checkbox Row Selection\n\nTo select rows, users can use the checkbox provided on each row.The Modus table uses the `rowSelectionOptions` to configure the selection behavior. When the `multiple` setting is set to false, only one row can be selected at a time. However, this can be adjusted to allow multiple row selections by modifying the `rowSelectionOptions`.\n\n- To enable multiple row selection, set `multiple` to `true`.\n- Sub-rows will also be selected if the parent is selected by setting `subRowSelection` to `true`.\n- To load the table with pre selected rows, set preSelectedRows to a list of row ids. **Row ids default to the row index, but can also be set by passing an id value in data.**\n\n### Disable selection on certain rows\n\nUse the `rowSelectionDisabled` prop to disable row selection for specific rows in the table.The `rowSelectionDisabled` prop accepts a function that is called for each row. This function should return a boolean indicating whether the row should have its selection disabled.\n\n```javascript\ndocument.querySelector('modus-table').columns = [\n  {\n    header: 'First Name',\n    accessorKey: 'firstName',\n    id: 'first-name',\n    dataType: 'text',\n  },\n  {\n    header: 'Last Name',\n    accessorKey: 'lastName',\n    id: 'last-name',\n    dataType: 'text',\n  },\n  { header: 'Age', accessorKey: 'age', id: 'age', dataType: 'integer' },\n  {\n    header: 'Visits',\n    accessorKey: 'visits',\n    id: 'visits',\n    dataType: 'integer',\n  },\n  { header: 'Status', accessorKey: 'status', id: 'status', dataType: 'text' },\n  {\n    header: 'Profile Progress',\n    accessorKey: 'progress',\n    id: 'progress',\n    dataType: 'integer',\n  },\n  {\n    header: 'Created At',\n    accessorKey: 'createdAt',\n    id: 'createdAt',\n    dataType: 'date',\n  },\n];\ndocument.querySelector('modus-table').data = [\n  {\n    firstName: 'Gordon',\n    lastName: 'Lemke',\n    age: 40,\n    visits: 434,\n    progress: 97,\n    status: 'active',\n    createdAt: '2002-11-21T12:48:51.739Z',\n  },\n  {\n    firstName: 'Elliott',\n    lastName: 'Bosco',\n    age: 21,\n    visits: 348,\n    progress: 60,\n    status: 'Inactive',\n    createdAt: '2012-02-08T12:14:22.776Z',\n  },\n  {\n    firstName: 'Agnes',\n    lastName: 'Breitenberg',\n    age: 34,\n    visits: 639,\n    progress: 84,\n    status: 'active',\n    createdAt: '1995-04-07T07:24:57.577Z',\n  },\n  {\n    firstName: 'Nicolette',\n    lastName: 'Stamm',\n    age: 13,\n    visits: 518,\n    progress: 28,\n    status: 'Inactive',\n    createdAt: '2009-07-28T14:29:51.505Z',\n  },\n];\n\ndocument.querySelector('modus-table').rowSelectionDisabled = (row) => {\n  // Disable row selection for rows where the status is 'Inactive'\n  return row.original.status === 'Inactive';\n};\n```\n\n### Inline Editing\n\nTo enable Cell Editing for a Column use the `cellEditable` property on the Column object. The component renders a text box by default based on column's `dataType`. To render a select, use the `cellEditorType` property on the Column object. The `cellEditorArgs` property can be used to pass additional arguments to the editor. After editing a cell, the table automatically updates the `data` and emits a `cellValueChanged` event.\nNote: If rows are nested, the table will be able to save the changes up to 2 levels of nested data.\nRefer to the [Accessibility](#accessibility) section for how to use keyboard for inline editing.\n\n```javascript\n {\n    header: 'Status',\n    accessorKey: 'status',\n    id: 'status',\n    dataType: 'text',\n    minSize: 80,\n    cellEditable:true,\n    cellEditorType: 'select',\n    cellEditorArgs: {\n      options:[\n      { display: 'Verified' },\n      { display: 'Pending' },\n      { display: 'Rejected' },\n      ]\n    },\n  },\n  {\n  header: 'Priority',\n  accessorKey: 'priority',\n  id: 'priority',\n  dataType: 'badge',\n  cellEditable: true,\n  cellEditorType: 'autocomplete',\n  cellEditorArgs: {\n    options: [\n      { size: 'medium', type: 'counter', text: 'High', color: 'success' },\n      { size: 'medium', type: 'counter', text: 'Low', color: 'danger' },\n      { size: 'medium', type: 'counter', text: 'Medium', color: 'warning' },\n    ]\n  },\n},\n{\n  header: 'Email',\n  accessorKey: 'email',\n  id: 'email',\n  dataType: 'link',\n  size: 230,\n  minSize: 80,\n  cellEditable: true,\n  cellEditorType: 'autocomplete',\n  cellEditorArgs: {\n    options: [\n      { display: 'Google', url: 'https://www.google.com' },\n      { display: 'Yahoo', url: 'https://www.yahoo.com' },\n      { display: 'Bing', url: 'https://www.bing.com' },\n    ]\n  },\n},\n{\n  header: 'Priority',\n  accessorKey: 'priority',\n  id: 'priority',\n  dataType: 'badge',\n  cellEditable: true,\n  cellEditorType: 'select',\n  cellEditorArgs: {\n    options: [\n      { size: 'medium', type: 'counter', display: 'High', color: 'success' },\n      { size: 'medium', type: 'counter', display: 'Low', color: 'danger' },\n      { size: 'medium', type: 'counter', display: 'Medium', color: 'warning' },\n    ]\n  },\n},\n{\n  header: 'Email',\n  accessorKey: 'email',\n  id: 'email',\n  dataType: 'link',\n  size: 230,\n  minSize: 80,\n  cellEditable: true,\n  cellEditorType: 'select',\n  cellEditorArgs: {\n    options: [\n      { display: 'Google', url: 'https://www.google.com' },\n      { display: 'Yahoo', url: 'https://www.yahoo.com' },\n      { display: 'Bing', url: 'https://www.bing.com' },\n    ]\n  },\n},\n{\n  header: 'Date',\n  accessorKey: 'date',\n  id: 'date',\n  dataType: 'date',\n  cellEditable: true,\n  cellEditorType: 'date',\n},\n\n```\n\n### Inline Editing - Autocomplete with Dynamic Filtering\n\nThis feature extends support for dynamic options within the table's autocomplete editor. Consumers can implement custom/dynamic filtering using the `filterOptions` function, the loading state is handled internally.\n\n```javascript\nconst options = ['Mickey', 'Bugs', 'Homer', 'Fred', 'Daffy'];\nconst dynamicFilterOptions = ['Scooby', 'Tom', 'Jerry'];\n\nconst table = document.querySelector('modus-table');\ntable.columns = [\n  {\n    header: 'First Name',\n    accessorKey: 'firstName',\n    id: 'first-name',\n    dataType: 'text',\n    cellEditable: true,\n    cellEditorType: 'autocomplete', // Autocomplete input type\n    cellEditorArgs: {\n      filterOptions: filterDynamicOptions, // Function to dynamically filter options\n      options: options, // Default options\n    },\n  },\n  {\n    header: 'Status',\n    accessorKey: 'status',\n    id: 'status',\n    dataType: 'text',\n    minSize: 80,\n    cellEditable: true,\n    cellEditorType: 'select',\n    cellEditorArgs: {\n      options: [{ display: 'Verified' }, { display: 'Pending' }, { display: 'Rejected' }],\n    },\n  },\n  {\n    header: 'Priority',\n    accessorKey: 'priority',\n    id: 'priority',\n    dataType: 'badge',\n    cellEditable: true,\n    cellEditorType: 'select',\n    cellEditorArgs: {\n      options: [\n        { size: 'medium', type: 'counter', display: 'High', color: 'success' },\n        { size: 'medium', type: 'counter', display: 'Low', color: 'danger' },\n        { size: 'medium', type: 'counter', display: 'Medium', color: 'warning' },\n      ],\n    },\n  },\n  {\n    header: 'Email',\n    accessorKey: 'email',\n    id: 'email',\n    dataType: 'link',\n    size: 230,\n    minSize: 80,\n    cellEditable: true,\n    cellEditorType: 'select',\n    cellEditorArgs: {\n      options: [\n        { display: 'Google', url: 'https://www.google.com' },\n        { display: 'Yahoo', url: 'https://www.yahoo.com' },\n        { display: 'Bing', url: 'https://www.bing.com' },\n      ],\n    },\n  },\n  {\n    header: 'Date',\n    accessorKey: 'date',\n    id: 'date',\n    dataType: 'date', // Date type column\n    cellEditable: true,\n    cellEditorType: 'date',\n  },\n];\n\ntable.data = [\n  {\n    firstName: 'John',\n    status: 'Verified',\n    email: { display: 'Google', url: 'https://www.google.com' },\n    priority: { size: 'medium', type: 'counter', display: 'High', color: 'success' },\n    date: '2022-01-01',\n  },\n  {\n    firstName: 'Jane',\n    status: 'Pending',\n    email: { display: 'Yahoo', url: 'https://www.yahoo.com' },\n    priority: { size: 'medium', type: 'counter', display: 'Medium', color: 'warning' },\n    date: '2022-02-01',\n  },\n  {\n    firstName: 'Bob',\n    status: 'Rejected',\n    email: { display: 'Bing', url: 'https://www.bing.com' },\n    priority: { size: 'medium', type: 'counter', display: 'Low', color: 'danger' },\n    date: '2022-03-01',\n  },\n];\n\n/**\n * Function to dynamically filter options for the 'autocomplete' editor\n * @param {string} value - The input value to filter the options\n * @returns {Promise<string[]>} - A promise that resolves with the filtered options\n */\nfunction filterDynamicOptions(value) {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      // Filter options based on the input value\n      const filteredOptions = [...options, ...dynamicFilterOptions].filter((option) =>\n        option.toLowerCase().includes(value.toLowerCase())\n      );\n\n      // Resolve the promise with filtered options\n      resolve(filteredOptions);\n    }, 1000); // Simulate API delay\n  });\n}\n```\n\n### Inline Editing - Disabling a Cell or Row\n\nYou can disable specific cells or rows from being edited by using the `isCellDisabled` function in the `cellEditorArgs` property of a column. This function takes the row data as an argument and returns a boolean indicating whether the cell should be disabled.For best results, ensure that this is a pure function it should not produce side effects or rely on external mutable state.\n\n```javascript\n{\n  header: 'Status',\n  accessorKey: 'status',\n  id: 'status',\n  dataType: 'text',\n  cellEditable: true,\n  cellEditorType: 'select',\n  cellEditorArgs: {\n    options: [\n      { display: 'Active' },\n      { display: 'Inactive' },\n      { display: 'Pending' },\n    ],\n    isCellDisabled: (row) => row.status === 'Inactive', // Disable editing for 'Inactive' rows\n  },\n},\n```\n\n### Row Actions\n\nUsers can add actions to rows. These actions will be shown in the first column as icons. A maximum of 4 icons will be shown, including the expand icon for expandable rows, if there more actions are provided, an overflow menu will be shown with a list of the remaining actions displayed as their label.\n\n- Clicking a row action button will emit a rowActionClick with the action id and the row.\n- To disable actions for specific rows, use the isDisabled(row) method.\n\n### Types\n\n```ts\ntype ModusTableRowData = unknown | object | any[];\ntype ModusTableSortingState = ColumnSort {\n    id: string;\n    desc: boolean;\n}[];\ntype ModusTableColumnSort {\n    id: string;\n    desc: boolean;\n};\ntype ModusTableExpandedState = true | Record<string, boolean>;\ntype ModusTablePaginationState = {\n    pageIndex: number;\n    pageSize: number;\n};\ntype ModusTableColumnSizingState = Record<string, number>;\ntype ModusTableColumnVisibilityState = Record<string, boolean>;\ntype ModusTableColumnOrderState =  string[];\ntype ModusTableCellData = CellContext<unknown, unknown>;\ntype ModusTableColumnDataType =\n  | typeof COLUMN_DEF_DATATYPE_TEXT\n  | typeof COLUMN_DEF_DATATYPE_INTEGER\n  | typeof COLUMN_DEF_DATATYPE_LINK;\ntype ModusTableCellEditorType =\n  | typeof CELL_EDIT_TYPE_SELECT\n  | typeof CELL_EDIT_TYPE_TEXT\n  | typeof CELL_EDIT_TYPE_INT\n  | typeof CELL_EDIT_TYPE_AUTOCOMPLETE\n  | typeof CELL_EDIT_TYPE_DATE;\ntype ModusTableCellDateEditorArgs = { format: string; isCellDisabled?: (row: unknown) => boolean  };\ntype ModusTableCellSelectEditorArgs = {\n  options: unknown[];\n  optionsDisplayProp?: string;\n  placeholder?: string;\n  isCellDisabled?: (row: unknown) => boolean;\n};\ntype ModusTableCellAutocompleteEditorArgs = {\n  options: ModusAutocompleteOption[];\n  noResultsFoundText: string;\n  noResultsFoundSubtext: string;\n  showNoResultsFoundMessage: boolean;\n  showOptionsOnFocus: boolean;\n  filterOptions: (value: string) => Promise<ModusAutocompleteOption[] | string[]>;\n};\ntype ModusTableCellEditorArgs = ModusTableCellSelectEditorArgs | ModusTableCellDateEditorArgs;\ntype ModusTableDataUpdaterProps = { rowId: string; accessorKey: string; newValue: string; oldValue?: string };\ntype ModusTableSortingFunction<TData extends RowData> = SortingFnOption<TData> | 'sortForHyperlink' | 'sortForBadge';\n\ninterface ModusTableColumn<TData extends RowData, TValue = unknown> {\n  header: string;\n  accessorKey: string;\n  dataType: ModusTableColumnDataType;\n  id?: string;\n  cell?: ColumnDefTemplate<ModusTableCellData>;\n  footer?: string;\n  enableSorting?: boolean;\n  enableResizing?: boolean;\n  size?: number;\n  minSize?: number;\n  maxSize?: number;\n  showTotal?: boolean;\n  subRows?: ModusTableColumn<TData, TValue>[];\n  sortingFn?: ModusTableSortingFunction<TData>;\n  cellEditable?: boolean;\n  cellEditorType?: ModusTableCellEditorType;\n  cellEditorArgs?: ModusTableCellEditorArgs;\n}\n\ninterface ModusTableDisplayOptions {\n  borderless?: boolean;\n  cellBorderless?: boolean;\n  cellVerticalBorderless?: boolean;\n}\n\ninterface ModusTableToolbarOptions {\n  columnsVisibility?: ModusTableColumnsVisibilityOptions;\n}\n\ninterface ModusTableColumnsVisibilityOptions {\n  title: string;\n  requiredColumns?: string[];\n  hiddenColumns?: string[];\n}\n\ninterface ModusTableCellLink {\n  display: string;\n  url: string;\n  _type?: typeof COLUMN_DEF_DATATYPE_LINK;\n}\n\ninterface ModusTableCellBadge {\n  _type: string;\n  text: string;\n  ariaLabel?: string | null;\n  color?: string;\n  size?: string;\n  type?: string;\n}\n\ninterface ModusTableCellValueChange {\n  row: unknown;\n  accessorKey: string;\n  newValue: string;\n  oldValue?: string;\n  data: unknown[];\n}\n\ninterface ModusTableRowSelectionOptions {\n  multiple?: boolean;\n  subRowSelection?: boolean;\n  preSelectedRows?: string[];\n}\n\ninterface ModusTableRowAction {\n  id: string;\n  icon?: string;\n  label?: string;\n  tooltipText?: string;\n  buttonStyle?: 'borderless' | 'fill' | 'outline';\n  color?: 'danger' |'primary' | 'secondary' | 'tertiary' | 'special'\n  index: number;\n  iconColor?: string;\n  isDisabled?: (row: unknown) => boolean;\n}\n\ninterface ModusTableRowActionConfig {\n  header?: string;\n  width?: number;\n  menuOnly?:boolean;\n}\n\ninterface ModusTableManualPaginationOptions {\n  currentPageIndex: number;\n  currentPageSize: number;\n  pageCount: number;\n  totalRecords: number;\n}\n\ninterface ModusTableManualSortingOptions {\n  currentSortingState: ModusTableSortingState\n}\n\ninterface ModusTableErrors {\n  [rowIndex: number]: {\n    [accessorKey: string]: string;\n  }\n}\n\n```\n\n### Accessibility\n\nUsers can use keyboard navigation to perform different actions.\n\n| Name              | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                   |\n| ----------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Sorting           | The <kbd>Tab</kbd> key is used for navigating between the sort icons, while the <kbd>Enter</kbd> key is used to interact with the icon.                                                                                                                                                                                                                                                                                                                       |\n| Pagination        | Users can change page size and page number using keyboard navigation. The <kbd>Tab</kbd> key brings focus to an element and the Enter key is used to perform an action like selecting a page size and page number.                                                                                                                                                                                                                                            |\n| Column Resize     | Users can select the column for resizing by using the <kbd>Tab</kbd> key, and by pressing the <kbd>Spacebar</kbd> or <kbd>Enter</kbd> key to enable the column resize for the selected column. To resize, use the `left`/`right` MediaKeySession. When the <kbd>Enter</kbd> key is pressed, its position is saved.                                                                                                                                            |\n| Column Reorder    | Users can navigate to the column to be reorder by using the <kbd>Tab</kbd> key. By pressing <kbd>Enter</kbd> key selects the column header, to move to the desired location user can use `left`/`right` keys and the column can be dropped by <kbd>Enter</kbd> key.                                                                                                                                                                                           |\n| Column Visibility | The meatball icon buttom will get focus by using the <kbd>Tab</kbd> key. By pressing <kbd>Enter</kbd> or <kbd>Space</kbd>, a dropdown will be opened; press the <kbd>Escape</kbd> key to close the dropdown. Using `Tab or Shift+Tab` / `ArrowUp or ArrowDown`, column checkboxes/items can get focus to change state by pressing the <kbd>Enter</kbd> or <kbd>Space</kbd>.                                                                                   |\n| Cell Navigation   | Table cells can be navigated using keys like <kbd>Tab</kbd>, `Shift+Tab`, `ArrowUp`, and `ArrowDown`. Additionally, the <kbd>Tab</kbd> key can be used to focus on elements inside a cell.                                                                                                                                                                                                                                                                    |\n| Inline Editing    | When a cell is in focus, pressing the <kbd>Enter</kbd> key will activate the cell editor. The cell's value will be saved either when the focus shifts to another cell or when the <kbd>Enter</kbd> key is pressed again, which will also move the focus to the cell below in the same row. <kbd>Escape</kbd> key reverts the cell value to its original state and closes the editor. Note: Select cell editor saves the value only when the cell loses focus. |\n| Row Selection     | When multiple selection is enabled in the row selection options, users can continuously select or deselect items by using Shift + Arrow Up/Arrow Down. Additionally, if an item is selected and the Shift key is held while selecting another item, it allows for the continuous selection of all items between the two selected items. In the case of expanded items, the `subRowSelection` option should be set to true to support this behavior.           |\n\n## Properties\n\n| Property                  | Attribute                 | Description                                                                                                                                                                                   | Type                                   | Default                                                                                     |\n| ------------------------- | ------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------- | ------------------------------------------------------------------------------------------- |\n| `columnReorder`           | `column-reorder`          | (Optional) To allow column reordering.                                                                                                                                                        | `boolean`                              | `false`                                                                                     |\n| `columnResize`            | `column-resize`           |                                                                                                                                                                                               | `boolean`                              | `false`                                                                                     |\n| `columns` _(required)_    | --                        | (Required) To display headers in the table.                                                                                                                                                   | `ModusTableColumn<unknown, unknown>[]` | `undefined`                                                                                 |\n| `data` _(required)_       | --                        | (Required) To display data in the table.                                                                                                                                                      | `unknown[]`                            | `undefined`                                                                                 |\n| `defaultSort`             | `default-sort`            | (Optional) To control the default column to be used to sort the table.                                                                                                                        | `ModusTableColumnSort`                 | `undefined`                                                                                 |\n| `density`                 | `density`                 | (Optional) To control the density in the table. This is the row height.                                                                                                                       | `\"relaxed\", \"comfortable\", \"compact\"`  | `\"relaxed\"`                                                                                 |\n| `displayOptions`          | --                        | (Optional) To control display options of table.                                                                                                                                               | `ModusTableDisplayOptions`             | `{     borderless: false,     cellBorderless: false,     cellVerticalBorderless:false,   }` |\n| `fullWidth`               | `full-width`              |                                                                                                                                                                                               | `boolean`                              | `false`                                                                                     |\n| `hover`                   | `hover`                   | (Optional) To enable row hover in table.                                                                                                                                                      | `boolean`                              | `false`                                                                                     |\n| `manualPaginationOptions` | --                        | (Optional) To enable manual pagination mode. When enabled, the table will not automatically paginate rows, instead will expect the current page index and other details to be passed.         | `ModusTableManualPaginationOptions`    | `undefined`                                                                                 |\n| `manualSortingOptions`    | --                        | (Optional) To enable manual sorting mode. When enabled, the table will not automatically sort rows, instead will expect the current sorting state (sorted column and direction) to be passed. | `ModusTableManualSortingOptions`       | `undefined`                                                                                 |\n| `maxHeight`               | `max-height`              | (Optional) To display a vertical scrollbar when the height is exceeded.                                                                                                                       | `string`                               | `undefined`                                                                                 |\n| `maxWidth`                | `max-width`               | (Optional) To display a horizontal scrollbar when the width is exceeded.                                                                                                                      | `string`                               | `undefined`                                                                                 |\n| `pageSizeList`            | --                        |                                                                                                                                                                                               | `number[]`                             | `PAGINATION_DEFAULT_SIZES`                                                                  |\n| `pagination`              | `pagination`              |                                                                                                                                                                                               | `boolean`                              | `undefined`                                                                                 |\n| `rowActions`              | --                        | (Optional) Actions that can be performed on each row. A maximum of 4 icons will be shown, including overflow menu and expand icons.                                                           | `ModusTableRowAction[]`                | `[]`                                                                                        |\n| `rowActionsConfig`        | --                        | (Optional) The configuration for the row action's column                                                                                                                                      | `ModusTableRowActionConfig`            | `undefined`                                                                                 |\n| `rowSelection`            | `row-selection`           | (Optional) To display checkbox.                                                                                                                                                               | `boolean`                              | `false`                                                                                     |\n| `rowSelectionOptions`     | --                        | (Optional) To control multiple row selection.                                                                                                                                                 | `ModusTableRowSelectionOptions`        | `{     multiple: false,     subRowSelection: false,   }`                                    |\n| `rowsExpandable`          | `rows-expandable`         | (Optional) To display expanded rows.                                                                                                                                                          | `boolean`                              | `false`                                                                                     |\n| `showSortIconOnHover`     | `show-sort-icon-on-hover` | (Optional) To display sort icon on hover.                                                                                                                                                     | `boolean`                              | `false`                                                                                     |\n| `sort`                    | `sort`                    | (Optional) To sort data in table.                                                                                                                                                             | `boolean`                              | `false`                                                                                     |\n| `summaryRow`              | `summary-row`             | (Optional) To display summary row.                                                                                                                                                            | `boolean`                              | `false`                                                                                     |\n| `toolbar`                 | `toolbar`                 | (Optional) To display a toolbar for the table.                                                                                                                                                | `boolean`                              | `false`                                                                                     |\n| `toolbarOptions`          | --                        | (Optional) To display a toolbar, which allows access to table operations like hiding columns.                                                                                                 | `ModusTableToolbarOptions`             | `null`                                                                                      |\n| `wrapText`                | `wrap-text`               | (Optional) To wrap text that overflows the cell.                                                                                                                                              | `boolean`                              | `false`                                                                                     |\n\n## Events\n\n| Event                    | Description                                           | Type                                                |\n| ------------------------ | ----------------------------------------------------- | --------------------------------------------------- |\n| `cellLinkClick`          | Emits the link that was clicked                       | `CustomEvent<ModusTableCellLink>`                   |\n| `cellValueChange`        | Emits the cell value that was edited                  | `CustomEvent<ModusTableCellValueChange>`            |\n| `columnOrderChange`      | Emits columns in the updated order                    | `CustomEvent<string[]>`                             |\n| `columnSizingChange`     | Emits latest column size                              | `CustomEvent<{ [x: string]: number; }>`             |\n| `columnVisibilityChange` | Emits visibility state of each column                 | `CustomEvent<{ [x: string]: boolean; }>`            |\n| `paginationChange`       | Emits selected page index and size                    | `CustomEvent<PaginationState>`                      |\n| `rowActionClick`         | An event that fires when a row action is clicked.     | `CustomEvent<ModusTableRowActionClick>`             |\n| `rowExpanded`            | Emits expanded state of the columns                   | `CustomEvent<boolean \\| { [x: string]: boolean; }>` |\n| `rowSelectionChange`     | Emits rows selected                                   | `CustomEvent<unknown>`                              |\n| `sortChange`             | Emits column sort order                               | `CustomEvent<ColumnSort[]>`                         |\n| `cellInputValueChange`   | Emits the current cell input value on every keystroke | `CustomEvent<ModusTableCellValueChange>`            |\n\n### Slot\n\nUsers can use this to provide custom elements.\n\n| Slot             | Description                                         |\n| ---------------- | --------------------------------------------------- |\n| `\"customFooter\"` | Slot for custom footer.                             |\n| `\"groupLeft\"`    | Slot for custom toolbar options added to the left.  |\n| `\"groupRight\"`   | Slot for custom toolbar options added to the right. |\n\n### Methods\n\n| Method name              | Description                                 | Parameter                              | Return               |\n| ------------------------ | ------------------------------------------- | -------------------------------------- | -------------------- |\n| `getColumnData`          | Gets data of a particular column.           | `accessorKey: string`                  | `Promise<unknown[]>` |\n| `toggleColumnVisibility` | Decides the Data table column visibility.   | `columnId: string`, `show: boolean`    | `Promise<void>`      |\n| `getEditableCell`        | Handle the editability of a specific cell.  | `rowIndex: string`, `columnId: string` | `Promise<void>`      |\n| `toggleAllRowSelection`  | Selects or deselects all rows in the table. | `select: boolean`                      | `Promise<void>`      |\n\n### Text Wrapping\n\nThis wraps overflowing text of table cell.\n\n- Text wrapping is disable by default, set `wrapText` to `true` to enable wrapping.\n\n## Upcoming features \ud83d\udea7\n\nThere are still additional features that we plan to implement. Some of them:\n\n- Column Filtering\n- Save Filter Preferences\n\nYou can also refer to the [Table Roadmap](https://github.com/orgs/trimble-oss/projects/16/views/19) to track the development status for the above features and some known [issues](https://github.com/trimble-oss/modus-web-components/issues?q=is%3Aopen+is%3Aissue+label%3AQA+label%3Atable).\n",
    "storybook_content": "\n\n--- modus-table.stories.tsx ---\n\nimport { html } from 'lit-html';\n// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-table-storybook-docs.mdx';\nimport { withActions } from '@storybook/addon-actions/decorator';\n\n// Helpers\n// for the data generator makeData function\nfunction range(len) {\n  const arr: number[] = [];\n  for (let i = 0; i < len; i++) {\n    arr.push(i);\n  }\n  return arr;\n}\n\nfunction randomNumber(min, max) {\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\nfunction randomButtonVariant() {\n  const variants = ['danger', 'primary', 'secondary', 'tertiary', 'special'];\n  return variants[randomNumber(0, 5)];\n}\n\nfunction newPerson() {\n  const namesIndex = randomNumber(0, 17);\n  const firstName = Names[namesIndex].split(' ')[0];\n  const lastName = Names[namesIndex].split(' ')[1];\n  const email: string = `${firstName}${lastName}@example.com`.toLowerCase();\n  const randomDate = new Date(randomNumber(1990, 2020), randomNumber(0, 11), randomNumber(1, 30));\n  const formattedDate = `${randomDate.getFullYear()}-${(randomDate.getMonth() + 1).toString().padStart(2, '0')}-${randomDate.getDate().toString().padStart(2, '0')}`;\n  const customCell = `<modus-button color='${randomButtonVariant()}'>Custom ${namesIndex}</modus-button>`;\n  return {\n    firstName,\n    lastName,\n    age: randomNumber(20, 80) * 30,\n    visits: randomNumber(1, 100) * 100,\n    email: { display: email, url: email },\n    progress: randomNumber(1, 100) * 100,\n    status: randomNumber(1, 100) > 66 ? 'Verified' : randomNumber(0, 100) > 33 ? 'Pending' : 'Rejected',\n    createdAt: formattedDate,\n    priority: Priorities[randomNumber(1, 100) > 66 ? 'high' : randomNumber(0, 100) > 33 ? 'medium' : 'low'],\n    custom: customCell,\n  };\n}\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nfunction makeData(...lens): object[] {\n  const makeDataLevel = (depth = 0) => {\n    const len = lens[depth];\n    return range(len).map(() => {\n      return {\n        ...newPerson(),\n        subRows: lens[depth + 1] ? makeDataLevel(depth + 1) : undefined,\n      };\n    });\n  };\n\n  return makeDataLevel();\n}\n\nfunction initializeTable(props) {\n  const {\n    columns,\n    data,\n    pageSizeList,\n    toolbarOptions,\n    displayOptions,\n    rowSelectionOptions,\n    rowActions,\n    rowActionsConfig,\n    manualPaginationOptions,\n    manualSortingOptions,\n    defaultSort,\n    customSort,\n    errors,\n    isInlineEditing,\n  } = props;\n\n  const tag = document.createElement('script');\n  tag.innerHTML = `\n  var modusTable = document.querySelector('modus-table');\n  modusTable.columns = ${JSON.stringify(columns)};\n  modusTable.data = ${JSON.stringify(data)};\n  modusTable.pageSizeList = ${JSON.stringify(pageSizeList)};\n  modusTable.toolbarOptions = ${JSON.stringify(toolbarOptions)};\n  modusTable.displayOptions = ${JSON.stringify(displayOptions)};\n  modusTable.rowSelectionOptions = ${JSON.stringify(rowSelectionOptions)};\n  modusTable.rowActions = ${JSON.stringify(rowActions)};\n  modusTable.rowActionsConfig= ${JSON.stringify(rowActionsConfig)};\n  modusTable.manualPaginationOptions = ${JSON.stringify(manualPaginationOptions)};\n  modusTable.manualSortingOptions = ${JSON.stringify(manualSortingOptions)};\n  modusTable.defaultSort = ${JSON.stringify(defaultSort)};\n  modusTable.customSort = ${JSON.stringify(customSort)};\n  modusTable.errors = ${JSON.stringify(errors)};\n  modusTable.isInlineEditing = ${JSON.stringify(isInlineEditing)};\n\n  var globalData = ${JSON.stringify(data)};\n\n  function sortStatusFn(rowA, rowB, _columnId) {\n    const statusA = rowA.original.status;\n    const statusB = rowB.original.status;\n    const statusOrder = modusTable.customSort;\n    return statusOrder.indexOf(statusA) - statusOrder.indexOf(statusB);\n  }\n\n  function addSortingFn(columns) {\n    return columns.map((col) => (col.accessorKey === 'status' ? { ...col, sortingFn: sortStatusFn } : col));\n  }\n\n  if(!!modusTable.manualSortingOptions){\n    let currentData = globalData;\n    const accessorKey = getAccessortKey(modusTable.columns, modusTable.manualSortingOptions.currentSortingState[0].id);\n    currentData.sort(compareValues(accessorKey, modusTable.manualSortingOptions.currentSortingState[0].desc));\n    if(!!modusTable.manualPaginationOptions){\n      modusTable.data = currentData.slice((modusTable.manualPaginationOptions.currentPageIndex - 1) * modusTable.manualPaginationOptions.currentPageSize,\n        modusTable.manualPaginationOptions.currentPageIndex * modusTable.manualPaginationOptions.currentPageSize);\n    } else {\n      modusTable.data = currentData;\n    }\n  } else if(!!modusTable.manualPaginationOptions){\n    modusTable.data = globalData.slice((modusTable.manualPaginationOptions.currentPageIndex - 1) * modusTable.manualPaginationOptions.currentPageSize,\n      modusTable.manualPaginationOptions.currentPageIndex * modusTable.manualPaginationOptions.currentPageSize);\n  } else if(modusTable.customSort.length > 0){\n    modusTable.columns = addSortingFn(modusTable.columns);\n  } else {\n    modusTable.data = globalData;\n  }\n\n  function compareValues(key, desc) {\n    return function innerSort(a, b) {\n      if (!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) {\n        // property doesn't exist on either object\n        return 0;\n      }\n      let varA = '';\n      let varB = '';\n\n      if (typeof a[key] === 'string'){\n        varA = a[key].toUpperCase();\n      } else if (typeof a[key] === 'object'){\n        varA = a[key].display;\n      } else {\n        varA = a[key];\n      }\n      if (typeof b[key] === 'string'){\n        varB = b[key].toUpperCase();\n      } else if (typeof b[key] === 'object'){\n        varB = b[key].display;\n      } else {\n        varB = b[key];\n      }\n\n      let comparison = 0;\n      if (varA > varB) {\n        comparison = 1;\n      } else if (varA < varB) {\n        comparison = -1;\n      }\n      return (\n        desc ? (comparison * -1) : comparison\n      );\n    };\n  }\n\n  function getAccessortKey(array, id){\n    return array.find((c) => c.id === id)?.accessorKey;\n  }\n\n  modusTable.addEventListener(\n    \"paginationChange\", (ev)=> {\n      if(!!modusTable.manualPaginationOptions){\n        let currentData = ${JSON.stringify(data)};\n        modusTable.manualPaginationOptions = {\n          currentPageIndex : ev.detail.pageIndex + 1,\n          currentPageSize : ev.detail.pageSize,\n          pageCount: Math.ceil( currentData.length / ev.detail.pageSize),\n          totalRecords: currentData.length\n        }\n        if(!!modusTable.manualSortingOptions && modusTable.manualSortingOptions.currentSortingState.length > 0){\n          const accessorKey = getAccessortKey(modusTable.columns, modusTable.manualSortingOptions.currentSortingState[0].id);\n          currentData.sort(compareValues(accessorKey, modusTable.manualSortingOptions.currentSortingState[0].desc));\n        }\n        modusTable.data = currentData.slice((modusTable.manualPaginationOptions.currentPageIndex - 1) * modusTable.manualPaginationOptions.currentPageSize,\n          modusTable.manualPaginationOptions.currentPageIndex * modusTable.manualPaginationOptions.currentPageSize);\n      }\n   });\n\n  modusTable.addEventListener(\n    \"sortChange\", (ev)=> {\n      if(!!modusTable.manualSortingOptions){\n        modusTable.manualSortingOptions = {\n          currentSortingState : ev.detail\n        };\n        let currentData = ${JSON.stringify(data)};\n        if(modusTable.manualSortingOptions.currentSortingState.length > 0) {\n          const accessorKey = getAccessortKey(modusTable.columns, modusTable.manualSortingOptions.currentSortingState[0].id);\n          currentData.sort(compareValues(accessorKey, modusTable.manualSortingOptions.currentSortingState[0].desc));\n        }\n        if(!!modusTable.manualPaginationOptions){\n          modusTable.data = currentData.slice((modusTable.manualPaginationOptions.currentPageIndex - 1) * modusTable.manualPaginationOptions.currentPageSize,\n            modusTable.manualPaginationOptions.currentPageIndex * modusTable.manualPaginationOptions.currentPageSize);\n        } else {\n          modusTable.data = currentData;\n        }\n      }\n  });\n`;\n\n  return tag;\n}\n\nconst Names = [\n  'Mickey Mouse',\n  'Bugs Bunny',\n  'Homer Simpson',\n  'Fred Flintstone',\n  'Sponge Bob',\n  'Daffy Duck',\n  'Charlie Brown',\n  'Scooby Doo',\n  'Tom Cat',\n  'Jerry Mouse',\n  'Mighty Mouse',\n  'Wile E Coyote',\n  'Tweety Bird',\n  'Pink Panther',\n  'Road Runner',\n  'Patrick Star',\n  'Roger Rabbit',\n  'Papa Smurf',\n  'Buzz Lightyear',\n];\n\nconst Priorities = {\n  high: {\n    size: 'medium',\n    type: 'counter',\n    text: 'High',\n    color: 'success',\n  },\n  medium: {\n    size: 'medium',\n    type: 'counter',\n    text: 'Medium',\n    color: 'warning',\n  },\n  low: {\n    size: 'medium',\n    type: 'counter',\n    text: 'Low',\n    color: 'danger',\n  },\n};\n\nconst DefaultColumns = [\n  {\n    header: 'First Name',\n    accessorKey: 'firstName',\n    id: 'first-name',\n    dataType: 'text',\n    size: 150,\n    minSize: 80,\n    footer: 'Total',\n  },\n  {\n    header: 'Last Name',\n    accessorKey: 'lastName',\n    id: 'last-name',\n    dataType: 'text',\n    size: 150,\n    minSize: 80,\n  },\n  {\n    header: 'Age',\n    accessorKey: 'age',\n    id: 'age',\n    dataType: 'integer',\n    size: 80,\n    minSize: 60,\n  },\n  {\n    header: 'Visits',\n    accessorKey: 'visits',\n    id: 'visits',\n    dataType: 'integer',\n    maxSize: 80,\n    showTotal: true,\n    minSize: 80,\n  },\n  {\n    header: 'Email',\n    accessorKey: 'email',\n    id: 'email',\n    dataType: 'link',\n    size: 230,\n    minSize: 80,\n    sortingFn: 'sortForHyperlink',\n  },\n  {\n    header: 'Status',\n    accessorKey: 'status',\n    id: 'status',\n    dataType: 'text',\n  },\n  {\n    header: 'Profile Progress',\n    accessorKey: 'progress',\n    id: 'progress',\n    dataType: 'integer',\n    minSize: 100,\n  },\n  {\n    header: 'Created At',\n    accessorKey: 'createdAt',\n    id: 'createdAt',\n    dataType: 'date',\n    size: 150,\n    minSize: 150,\n  },\n];\n\nconst DefaultArgs = {\n  hover: false,\n  sort: false,\n  sortIconStyle: 'alphabetical',\n  columnResize: false,\n  columnReorder: false,\n  pagination: false,\n  showSortIconOnHover: false,\n  summaryRow: false,\n  fullWidth: false,\n  pageSizeList: [7, 10, 20],\n  toolbar: false,\n  columns: DefaultColumns,\n  data: makeData(5),\n  toolbarOptions: {},\n  displayOptions: {},\n  rowsExpandable: false,\n  maxHeight: '',\n  maxWidth: '',\n  rowActions: [],\n  rowActionsConfig: {},\n  rowSelection: false,\n  rowSelectionOptions: {},\n  wrapText: false,\n  customSort: [],\n};\n\nexport default {\n  title: 'Components/Table',\n  argTypes: {\n    columns: {\n      name: 'columns',\n      description: 'Table header columns',\n      table: {\n        type: { summary: 'ModusTableColumn[]' },\n      },\n      type: { required: true },\n    },\n    data: {\n      name: 'data',\n      description: 'Table data',\n      table: {\n        type: { summary: 'Data[]' },\n      },\n      type: { required: true },\n    },\n    hover: {\n      name: 'hover',\n      description: 'Enables hover on table rows',\n      control: 'boolean',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n      type: { required: false },\n    },\n    sort: {\n      name: 'sort',\n      description: 'Enables sort for table columns',\n      control: 'boolean',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n      type: { required: false },\n    },\n    sortIconStyle: {\n      name: 'sortIconStyle',\n      description: 'Display alphabetical or directional arrow icons when sort is enabled',\n      options: ['alphabetical', 'directional'],\n      type: 'select',\n      table: {\n        defaultValue: { summary: `'alphabetical'` },\n        type: { summary: `'alphabetical', 'directional'` },\n      },\n    },\n    showSortIconOnHover: {\n      name: 'showSortIconOnHover',\n      description: 'Enables sort for table columns and sort icon appears when you hover over a column header',\n      control: 'boolean',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n      type: { required: false },\n    },\n    summaryRow: {\n      name: 'summaryRow',\n      description: 'Enables a summary row as footer',\n      control: 'boolean',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n      type: { required: false },\n    },\n    pagination: {\n      name: 'pagination',\n      description: 'Enable pagination on table data',\n      control: 'boolean',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n      type: { required: false },\n    },\n    columnResize: {\n      name: 'columnResize',\n      description: 'Enables the column resizing for table',\n      control: 'boolean',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n      type: { required: false },\n    },\n    columnReorder: {\n      name: 'columnReorder',\n      description: 'Enables the column reordering for table',\n      control: 'boolean',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n      type: { required: false },\n    },\n    density: {\n      name: 'density',\n      description: 'Manage table density.',\n      options: ['relaxed', 'comfortable', 'compact'],\n      type: 'select',\n      table: {\n        defaultValue: { summary: `'relaxed'` },\n        type: { summary: `'relaxed', 'comfortable', 'compact'` },\n      },\n    },\n    fullWidth: {\n      name: 'fullWidth',\n      description: 'Manage table width.',\n      control: 'boolean',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n      type: { required: false },\n    },\n    toolbar: {\n      name: 'toolbar',\n      description: 'Enables the toolbar.',\n      control: 'boolean',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n      type: { required: false },\n    },\n    toolbarOptions: {\n      name: 'toolbarOptions',\n      description: 'To display toolbar options, which allows access to table operations like hiding columns.',\n      table: {\n        type: { summary: 'ModusTableToolbarOptions' },\n      },\n      type: { required: false },\n    },\n    rowsExpandable: {\n      name: 'rowsExpandable',\n      description: 'Enables expanded rows.',\n      control: 'boolean',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n      type: { required: false },\n    },\n    rowSelection: {\n      name: 'rowSelection',\n      description: 'Enables row selection.',\n      control: 'boolean',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n      type: { required: false },\n    },\n    rowActions: {\n      name: 'rowActions',\n      description: 'Control row actions.',\n      table: {\n        type: { summary: 'ModusTableRowAction[]' },\n      },\n      type: { required: false },\n    },\n    rowActionsConfig: {\n      name: 'rowActionsConfig',\n      description: \"The configuration for the row action's column \",\n      table: {\n        type: { summary: 'ModusTableRowActionConfig' },\n      },\n      type: { required: false },\n    },\n    maxHeight: {\n      name: 'maxHeight',\n      description: 'To display a vertical scrollbar when the height is exceeded.',\n      control: 'string',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'string' },\n      },\n      type: { required: false },\n    },\n    maxWidth: {\n      name: 'maxWidth',\n      description: 'To display a horizontal scrollbar when the width is exceeded.',\n      control: 'string',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'string' },\n      },\n      type: { required: false },\n    },\n    pageSizeList: {\n      name: 'pageSizeList',\n      description: 'To set page size options for the pagination.',\n      table: {\n        type: { summary: 'number[]' },\n      },\n      type: { required: false },\n    },\n    rowSelectionOptions: {\n      name: 'rowSelectionOptions',\n      description: 'To control multiple row selection.',\n      table: {\n        type: { summary: 'ModusTableRowSelectionOptions' },\n      },\n      type: { required: false },\n    },\n    manualPaginationOptions: {\n      name: 'manualPaginationOptions',\n      description: 'To switch to manual pagination mode.',\n      table: {\n        type: { summary: 'ModusTableManualPaginationOptions' },\n      },\n      type: { required: false },\n    },\n    manualSortingOptions: {\n      name: 'manualSortingOptions',\n      description: 'To switch to manual sorting mode.',\n      table: {\n        type: { summary: 'ModusTableManualSortingOptions' },\n      },\n      type: { required: false },\n    },\n    customSort: {\n      name: 'customSorting',\n      description:\n        'This property is for demonstration purposes only and is not available on the component. This demo illustrates how to implement custom sorting for the status column based on a given order.',\n      table: {\n        // type: { summary: 'customSort'},\n      },\n      type: { required: false },\n    },\n    defaultSort: {\n      name: 'defaultSort',\n      description: 'To set the default sorting of the table',\n      table: {\n        type: { summary: 'ModusTableColumnSort' },\n      },\n      type: { required: false },\n    },\n    wrapText: {\n      name: 'wrapText',\n      description: 'To wrap text that overflows the cell',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n      type: { required: false },\n    },\n    errors: {\n      name: 'errors',\n      description: 'To display errors on the table',\n      table: {\n        type: { summary: 'ModusTableErrors' },\n      },\n      type: { required: false },\n    },\n  },\n\n  parameters: {\n    actions: {\n      handles: [\n        'cellValueChange',\n        'cellLinkClick',\n        'columnOrderChange',\n        'columnSizingChange',\n        'columnVisibilityChange',\n        'paginationChange',\n        'rowExpanded',\n        'rowSelectionChange',\n        'rowUpdated',\n        'sortChange',\n        'rowActionClick',\n        'cellInputValueChange',\n      ],\n    },\n    controls: { expanded: true, sort: 'requiredFirst' },\n    docs: {\n      inlineStories: false,\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n      enableShortcuts: false,\n    },\n  },\n  decorators: [withActions],\n};\n\nconst Template = ({\n  hover,\n  sort,\n  sortIconStyle,\n  columnResize,\n  columnReorder,\n  pagination,\n  showSortIconOnHover,\n  summaryRow,\n  fullWidth,\n  pageSizeList,\n  toolbar,\n  columns,\n  data,\n  errors,\n  toolbarOptions,\n  displayOptions,\n  rowsExpandable,\n  maxHeight,\n  maxWidth,\n  rowActions,\n  rowActionsConfig,\n  rowSelection,\n  rowSelectionOptions,\n  manualPaginationOptions,\n  manualSortingOptions,\n  defaultSort,\n  density,\n  wrapText,\n  customSort,\n  isInlineEditing,\n}) => html`\n  <div style=\"width: 950px\">\n    <modus-table\n      hover=\"${hover}\"\n      sort=\"${sort}\"\n      sort-icon-style=\"${sortIconStyle}\"\n      column-resize=\"${columnResize}\"\n      column-reorder=\"${columnReorder}\"\n      density=\"${density}\"\n      pagination=\"${pagination}\"\n      show-sort-icon-on-hover=\"${showSortIconOnHover}\"\n      summary-row=\"${summaryRow}\"\n      full-width=\"${fullWidth}\"\n      toolbar=\"${toolbar}\"\n      rows-expandable=\"${rowsExpandable}\"\n      max-height=\"${maxHeight}\"\n      max-width=\"${maxWidth}\"\n      row-selection=\"${rowSelection}\"\n      wrap-text=\"${wrapText}\" />\n  </div>\n  ${initializeTable({\n    columns,\n    data,\n    pageSizeList,\n    toolbarOptions,\n    displayOptions,\n    rowSelectionOptions,\n    rowActions,\n    rowActionsConfig,\n    manualPaginationOptions,\n    manualSortingOptions,\n    defaultSort,\n    customSort,\n    errors,\n    isInlineEditing,\n  })}\n`;\n\nexport const Default = Template.bind({});\nDefault.args = DefaultArgs;\n\nexport const Hover = Template.bind({});\nHover.args = { ...DefaultArgs, hover: true };\n\nexport const Borderless = Template.bind({});\nBorderless.args = {\n  ...DefaultArgs,\n  displayOptions: {\n    borderless: true,\n    cellBorderless: true,\n    cellVerticalBorderless: true,\n  },\n};\n\nexport const Sorting = Template.bind({});\nSorting.args = { ...DefaultArgs, sort: true };\n\nexport const ManualSorting = Template.bind({});\nManualSorting.args = {\n  ...DefaultArgs,\n  sort: true,\n  manualSortingOptions: {\n    currentSortingState: [\n      {\n        id: 'first-name',\n        desc: false,\n      },\n    ],\n  },\n};\n\nexport const CustomSorting = Template.bind({});\nCustomSorting.args = { ...DefaultArgs, customSort: ['Rejected', 'Verified', 'Pending'], sort: true, data: makeData(5) };\n\nexport const ValueFormatter = ({\n  hover,\n  sort,\n  sortIconStyle,\n  columnResize,\n  pagination,\n  showSortIconOnHover,\n  summaryRow,\n  fullWidth,\n  pageSizeList,\n  toolbar,\n  columnReorder,\n  toolbarOptions,\n  displayOptions,\n  maxHeight,\n  maxWidth,\n  rowSelection,\n  rowSelectionOptions,\n  density,\n  wrapText,\n}) => html`\n  <div style=\"width: 950px\">\n    <modus-table\n      hover=\"${hover}\"\n      sort=\"${sort}\"\n      sort=\"${sortIconStyle}\"\n      column-resize=\"${columnResize}\"\n      density=\"${density}\"\n      pagination=\"${pagination}\"\n      show-sort-icon-on-hover=\"${showSortIconOnHover}\"\n      summary-row=\"${summaryRow}\"\n      full-width=\"${fullWidth}\"\n      column-reorder=\"${columnReorder}\"\n      toolbar=\"${toolbar}\"\n      max-height=\"${maxHeight}\"\n      max-width=\"${maxWidth}\"\n      row-selection=\"${rowSelection}\"\n      wrap-text=\"${wrapText}\" />\n  </div>\n  ${valueFormatterTable(pageSizeList, toolbarOptions, displayOptions, rowSelectionOptions)}\n`;\nValueFormatter.args = {\n  hover: false,\n  sort: false,\n  sortIconStyle: 'alphabetical',\n  columnResize: false,\n  columnReorder: false,\n  pagination: false,\n  showSortIconOnHover: false,\n  summaryRow: false,\n  fullWidth: false,\n  pageSizeList: [7, 10, 20],\n  toolbar: false,\n  toolbarOptions: {},\n  displayOptions: {},\n  maxHeight: '',\n  maxWidth: '',\n  rowSelection: false,\n  rowSelectionOptions: {},\n  wrapText: false,\n};\nconst valueFormatterTable = (pageSizeList, toolbarOptions, displayOptions, rowSelectionOptions) => {\n  const tag = document.createElement('script');\n  tag.innerHTML = `\n   document.querySelector('modus-table').columns = [{ header: 'First Name', accessorKey: 'firstName', id: 'first-name', dataType: 'text' , footer: 'Total', size: 150,minSize: 80}, { header: 'Last Name', accessorKey: 'lastName', id: 'last-name', dataType: 'text', size: 150,minSize: 80}, { header: 'Age', accessorKey: 'age', id: 'age', dataType: 'integer', showTotal: true, size: 100,minSize: 60 }, { header: 'Amount', accessorKey: 'amount', id: 'amount', dataType: 'integer',size: 150,minSize: 80, cell: (props) => { return '$' + Number(props.cell.getValue()).toFixed(2).replace(/\\\\d(?=(\\\\d{3})+\\\\.)/g, '$&,') }, }, { header: 'Status', accessorKey: 'status', id: 'status', dataType: 'text', minSize: 80}, { header: 'Profile Progress', accessorKey: 'progress', id: 'progress', dataType: 'integer',minSize: 100, cell: (props) => { return  Number(props.cell.getValue()).toFixed(2).replace(/\\\\d(?=(\\\\d{3})+\\\\.)/g, '$&,') }, }, { header: 'Created At', accessorKey: 'createdAt', id: 'createdAt', dataType: 'text', cell: (props) => { const date = new Date(props.cell.getValue()); return ((date.getMonth() > 8) ? (date.getMonth() + 1) : ('0' + (date.getMonth() + 1))) + '/' + ((date.getDate() > 9) ? date.getDate() : ('0' + date.getDate())) + '/' + date.getFullYear(); }, }];\n   document.querySelector('modus-table').data = [{ \"firstName\": \"Chaim\", \"lastName\": \"Lubowitz\", \"age\": 30, \"amount\": 330160, \"progress\": 99, \"status\": \"single\", \"createdAt\": \"2002-11-19T12:48:51.739Z\" }, { \"firstName\": \"Vicky\", \"lastName\": \"Lehner\", \"age\": 2, \"amount\": 41900, \"progress\": 36, \"status\": \"single\", \"createdAt\": \"2003-10-02T12:48:51.739Z\" }, { \"firstName\": \"Nellie\", \"lastName\": \"Leuschke\", \"age\": 15, \"amount\": 883112, \"progress\": 68, \"status\": \"single\", \"createdAt\": \"2004-09-21T12:48:51.739Z\" }, { \"firstName\": \"Judy\", \"lastName\": \"Ritchie\", \"age\": 3, \"amount\": 900293, \"progress\": 10, \"status\": \"relationship\", \"createdAt\": \"2005-08-11T12:48:51.739Z\" }, { \"firstName\": \"Hertha\", \"lastName\": \"Bradtke\", \"age\": 19, \"amount\": 112116, \"progress\": 87, \"status\": \"relationship\", \"createdAt\": \"2006-07-13T12:48:51.739Z\" }];\n\n   document.querySelector('modus-table').pageSizeList = ${JSON.stringify(pageSizeList)};\n  document.querySelector('modus-table').toolbarOptions = ${JSON.stringify(toolbarOptions)};\n  document.querySelector('modus-table').displayOptions = ${JSON.stringify(displayOptions)};\n  document.querySelector('modus-table').rowSelectionOptions = ${JSON.stringify(rowSelectionOptions)};\n  `;\n  return tag;\n};\n\nexport const Hyperlink = Template.bind({});\nHyperlink.args = { ...DefaultArgs, columns: DefaultColumns, data: makeData(7) };\n\nexport const CustomCell = Template.bind({});\nCustomCell.args = {\n  ...DefaultArgs,\n  columns: [\n    ...DefaultColumns.slice(0, DefaultColumns.length - 1),\n    {\n      header: 'Custom Cell',\n      accessorKey: 'custom',\n      id: 'custom',\n      dataType: 'custom',\n    },\n  ],\n  data: makeData(7),\n};\n\nexport const Badge = Template.bind({});\nBadge.args = {\n  ...DefaultArgs,\n  columns: [\n    ...DefaultColumns.slice(0, DefaultColumns.length - 2),\n    {\n      header: 'Priority',\n      accessorKey: 'priority',\n      sortingFn: 'sortForBadge',\n      id: 'priority',\n      dataType: 'badge',\n      maxSize: 100,\n    },\n    ...DefaultColumns.slice(DefaultColumns.length - 1),\n  ],\n  data: makeData(7),\n};\n\nexport const ColumnResize = Template.bind({});\nColumnResize.args = { ...DefaultArgs, columnResize: true };\n\nexport const Pagination = Template.bind({});\nPagination.args = { ...DefaultArgs, pagination: true, data: makeData(50), pageSizeList: [5, 10, 50] };\n\nexport const ManualPagination = Template.bind({});\nManualPagination.args = {\n  ...DefaultArgs,\n  pagination: true,\n  data: makeData(50),\n  manualPaginationOptions: {\n    currentPageIndex: 1,\n    currentPageSize: 5,\n    pageCount: 10,\n    totalRecords: 50,\n  },\n  pageSizeList: [5, 10, 50],\n};\n\nexport const SummaryRow = Template.bind({});\nSummaryRow.args = { ...DefaultArgs, summaryRow: true };\n\nexport const ColumnVisibility = Template.bind({});\nColumnVisibility.args = {\n  ...DefaultArgs,\n  toolbarOptions: {\n    columnsVisibility: {\n      title: '',\n      requiredColumns: ['age', 'visits'],\n      hiddenColumns: ['progress', 'createdAt'],\n    },\n  },\n  toolbar: true,\n};\n\nexport const ColumnReorder = Template.bind({});\nColumnReorder.args = { ...DefaultArgs, columnReorder: true };\n\nexport const ExpandableRows = Template.bind({});\nExpandableRows.args = { ...DefaultArgs, rowsExpandable: true, data: makeData(7, 4, 3, 2, 1), fullWidth: true };\n\nexport const CheckboxRowSelection = Template.bind({});\nCheckboxRowSelection.args = {\n  ...DefaultArgs,\n  rowSelection: true,\n  rowSelectionOptions: {\n    multiple: true,\n    subRowSelection: true,\n    preSelectedRows: undefined,\n  },\n  data: makeData(7),\n};\n\nconst DefaultColumnsWithPriority = [\n  ...DefaultColumns,\n  {\n    header: 'Priority',\n    accessorKey: 'priority',\n    sortingFn: 'sortForBadge',\n    id: 'priority',\n    dataType: 'badge',\n    maxSize: 100,\n  },\n];\nconst EditableColumns = DefaultColumnsWithPriority.map((col) => {\n  if (col.accessorKey === 'status') {\n    return {\n      ...col,\n      cellEditable: true,\n      cellEditorType: 'select',\n      cellEditorArgs: {\n        options: [{ display: 'Verified' }, { display: 'Pending' }, { display: 'Rejected' }],\n      },\n    };\n  }\n  if (col.accessorKey === 'firstName') {\n    const nameOptions = Names.map((name) => name.split(' ')[0]);\n    return {\n      ...col,\n      cellEditable: true,\n      cellEditorType: 'autocomplete',\n      cellEditorArgs: {\n        options: nameOptions,\n      },\n    };\n  }\n  if (col.accessorKey === 'email') {\n    const emailOptions = Names.map((name) => ({\n      display: `${name.split(' ')[0]}${name.split(' ')[1]}@example.com`,\n      url: `${name.split(' ')[0]}${name.split(' ')[1]}@example.com`,\n    }));\n    return {\n      ...col,\n      cellEditable: true,\n      cellEditorType: 'autocomplete',\n      cellEditorArgs: {\n        options: emailOptions,\n      },\n    };\n  }\n  if (col.accessorKey === 'priority') {\n    return {\n      ...col,\n      cellEditable: true,\n      cellEditorType: 'select',\n      cellEditorArgs: {\n        options: [\n          { display: 'Low', type: 'counter', color: 'danger', size: 'medium' },\n          { display: 'Medium', type: 'counter', color: 'primary', size: 'medium' },\n          { display: 'High', type: 'counter', color: 'success', size: 'medium' },\n        ],\n      },\n    };\n  }\n  if (col.accessorKey === 'createdAt') {\n    return {\n      ...col,\n      cellEditable: true,\n      cellEditorType: 'date',\n      cellEditorArgs: {\n        format: 'yyyy-mm-dd',\n      },\n    };\n  } else return { ...col, cellEditable: true };\n});\nexport const InlineEditing = Template.bind({});\nInlineEditing.args = { ...DefaultArgs, columns: EditableColumns, data: makeData(7), errors: {}, isInlineEditing: true };\n\nexport const LargeDataset = Template.bind({});\n\nLargeDataset.args = {\n  ...DefaultArgs,\n  columns: EditableColumns,\n  data: makeData(10000, 1, 1),\n  pagination: true,\n  pageSizeList: [5, 10, 50],\n  sort: true,\n  hover: true,\n  rowsExpandable: true,\n  summaryRow: true,\n  columnReorder: true,\n  columnResize: true,\n  toolbar: true,\n  toolbarOptions: {\n    columnsVisibility: {\n      title: '',\n      requiredColumns: ['age', 'visits'],\n    },\n  },\n  rowSelection: true,\n  rowSelectionOptions: {\n    multiple: true,\n    subRowSelection: true,\n  },\n};\n\nexport const RowActions = Template.bind({});\nRowActions.args = {\n  ...DefaultArgs,\n  rowActionsConfig: {\n    header: 'Row Actions Column',\n    width: 160,\n    menuOnly: false,\n  },\n  rowActions: [\n    {\n      id: '1',\n      label: 'Add',\n      tooltipText: 'Add',\n      index: 0,\n    },\n\n    {\n      id: '2',\n      icon: 'calendar',\n      label: 'calendar',\n      tooltipText: 'Calendar',\n      index: 1,\n    },\n\n    {\n      id: '3',\n      icon: 'cancel_circle',\n      label: 'Cancel',\n      tooltipText: 'Cancel',\n      index: 2,\n    },\n    {\n      id: '4',\n      index: 3,\n      icon: 'add',\n      label: 'Add',\n      tooltipText: 'Add',\n    },\n    {\n      id: '5',\n      index: 4,\n      icon: 'delete',\n      label: 'Delete',\n      tooltipText: 'Delete',\n    },\n  ],\n  data: makeData(7),\n  fullWidth: true,\n};\n\nexport const WrapText = Template.bind({});\nWrapText.args = {\n  ...DefaultArgs,\n  data: [\n    {\n      ...newPerson(),\n      lastName: 'This is an example of long text',\n    },\n    ...makeData(4),\n  ],\n  wrapText: true,\n};\n",
    "storybook": {
      "examples": [
        "<modus-button color='${randomButtonVariant()}'>Custom ${namesIndex}</modus-button>",
        "<modus-table\n      hover=\"${hover}\"\n      sort=\"${sort}\"\n      sort-icon-style=\"${sortIconStyle}\"\n      column-resize=\"${columnResize}\"\n      column-reorder=\"${columnReorder}\"\n      density=\"${density}\"\n      pagination=\"${pagination}\"\n      show-sort-icon-on-hover=\"${showSortIconOnHover}\"\n      summary-row=\"${summaryRow}\"\n      full-width=\"${fullWidth}\"\n      toolbar=\"${toolbar}\"\n      rows-expandable=\"${rowsExpandable}\"\n      max-height=\"${maxHeight}\"\n      max-width=\"${maxWidth}\"\n      row-selection=\"${rowSelection}\"\n      wrap-text=\"${wrapText}\" />",
        "<modus-table\n      hover=\"${hover}\"\n      sort=\"${sort}\"\n      sort=\"${sortIconStyle}\"\n      column-resize=\"${columnResize}\"\n      density=\"${density}\"\n      pagination=\"${pagination}\"\n      show-sort-icon-on-hover=\"${showSortIconOnHover}\"\n      summary-row=\"${summaryRow}\"\n      full-width=\"${fullWidth}\"\n      column-reorder=\"${columnReorder}\"\n      toolbar=\"${toolbar}\"\n      max-height=\"${maxHeight}\"\n      max-width=\"${maxWidth}\"\n      row-selection=\"${rowSelection}\"\n      wrap-text=\"${wrapText}\" />",
        "<modus-button color='${randomButtonVariant()}'>Custom ${namesIndex}</modus-button>",
        "\n  <div style=\"width: 950px\">\n    <modus-table\n      hover=\"${hover}\"\n      sort=\"${sort}\"\n      sort-icon-style=\"${sortIconStyle}\"\n      column-resize=\"${columnResize}\"\n      column-reorder=\"${columnReorder}\"\n      density=\"${density}\"\n      pagination=\"${pagination}\"\n      show-sort-icon-on-hover=\"${showSortIconOnHover}\"\n      summary-row=\"${summaryRow}\"\n      full-width=\"${fullWidth}\"\n      toolbar=\"${toolbar}\"\n      rows-expandable=\"${rowsExpandable}\"\n      max-height=\"${maxHeight}\"\n      max-width=\"${maxWidth}\"\n      row-selection=\"${rowSelection}\"\n      wrap-text=\"${wrapText}\" />\n  </div>\n  ${initializeTable({\n    columns,\n    data,\n    pageSizeList,\n    toolbarOptions,\n    displayOptions,\n    rowSelectionOptions,\n    rowActions,\n    rowActionsConfig,\n    manualPaginationOptions,\n    manualSortingOptions,\n    defaultSort,\n    customSort,\n    errors,\n    isInlineEditing,\n  })}\n"
      ],
      "variants": [],
      "prop_usage": {
        "color": [
          "${randomButtonVariant()}"
        ],
        "style": [
          "width: 950px",
          "${sortIconStyle}"
        ],
        "hover": [
          "${hover}",
          "${showSortIconOnHover}"
        ],
        "sort": [
          "${sort}",
          "${sortIconStyle}"
        ],
        "resize": [
          "${columnResize}"
        ],
        "reorder": [
          "${columnReorder}"
        ],
        "density": [
          "${density}"
        ],
        "pagination": [
          "${pagination}"
        ],
        "row": [
          "${summaryRow}"
        ],
        "width": [
          "${fullWidth}",
          "${maxWidth}"
        ],
        "toolbar": [
          "${toolbar}"
        ],
        "expandable": [
          "${rowsExpandable}"
        ],
        "height": [
          "${maxHeight}"
        ],
        "selection": [
          "${rowSelection}"
        ],
        "text": [
          "${wrapText}"
        ]
      }
    },
    "tag_name": "modus-table"
  },
  "modus-tabs": {
    "props": [
      {
        "name": "ariaLabel",
        "description": "",
        "type": "string | null"
      },
      {
        "name": "size",
        "description": "",
        "type": "'medium' | 'small'"
      }
    ],
    "events": [
      "tabChange"
    ],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-tabs-storybook-docs.mdx ---\n\nimport { Story } from '@storybook/blocks';\nimport * as Tabs from './modus-tabs.stories.tsx';\n\n# Tabs\n\n---\n\n[Modus Tabs](https://modus.trimble.com/components/tabs/) web components are referenced using the `<modus-tabs>` custom HTML element.\n\nA new TypeScript typing has been provided named Tab defined as:\n\n```ts\n{\n  active?: boolean;\n  iconOnly?: string;\n  id: string;\n  label?: string;\n  leftIcon?: string;\n  rightIcon?: string;\n}\n```\n\n### Default\n\n<Story id=\"components-tabs--default\" height={'125px'} />\n\n### Small\n\n<Story of={Tabs.Small} height={'125px'} />\n\n```html\n<modus-tabs></modus-tabs>\n<modus-tabs size=\"small\"></modus-tabs>\n\n<script>\n  const modusTabs = document.querySelector('modus-tabs');\n  modusTabs.tabs = [\n    {\n      id: 0,\n      label: 'Tab 1',\n    },\n    {\n      active: true,\n      id: 1,\n      label: 'Tab 2',\n    },\n    {\n      id: 'tab-3',\n      label: 'Tab 3',\n      leftIcon: 'sun',\n    },\n    {\n      id: 'tab-4',\n      label: 'Tab 4',\n      rightIcon: 'moon',\n    },\n    {\n      id: 'tab-5',\n      label: 'Tab 5',\n      leftIcon: 'sun',\n      rightIcon: 'moon',\n    },\n    {\n      id: 'tab-6',\n      iconOnly: 'settings',\n    },\n  ];\n</script>\n```\n\n### Properties\n\n| Name         | Description          | Type      | Options           | Default Value | Required |\n| ------------ | -------------------- | --------- | ----------------- | ------------- | -------- |\n| `tabs`       | The tabs' tabs       | `Tab[]`   |                   |               | \u2714       |\n| `aria-label` | The tabs' aria-label | `string`  |                   |               |          |\n| `size`       | The tabs' size       | `string`  | 'medium', 'small' | 'medium'      |          |\n| `full-width` | The tabs' width      | `boolean` | true, false       | false         |          |\n\n### DOM Events\n\n| Name        | Description         | Emits           |\n| ----------- | ------------------- | --------------- |\n| `tabChange` | Fires on tab change | The current tab |\n\n### Accessibility\n\n- Tabs gets an `aria-label` provided by the `aria-label` property input.\n- When a Tab has focus, <kbd>Enter</kbd> activates the Tab, and emits the `tabChange` event.\n- Set `full-width` on `true` for Tab component in order to make it resizable inside a parent.\n",
    "storybook_content": "\n\n--- modus-tabs.stories.tsx ---\n\n// @ts-ignore: JSX/MDX with Stencil\nimport { html } from 'lit-html';\nimport docs from './modus-tabs-storybook-docs.mdx';\nimport { withActions } from '@storybook/addon-actions/decorator';\n\nexport default {\n  title: 'Components/Tabs',\n  argTypes: {\n    size: {\n      name: 'size',\n      description: 'Sets the size of the tabs',\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n  },\n  parameters: {\n    actions: {\n      handles: ['tabChange'],\n    },\n    docs: {\n      inlineStories: false,\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n    },\n    controls: {\n      disable: false,\n    },\n    viewMode: 'docs',\n  },\n  decorators: [withActions],\n};\n\nconst Template = ({ size }) => html`\n  <modus-tabs id=\"medium-tabs\" size=${size}></modus-tabs>\n  ${setMediumTabs()}\n`;\nconst SmallTemplate = ({ size }) => html`\n  <modus-tabs id=\"small-tabs\" size=${size}></modus-tabs>\n  ${setSmallTabs()}\n`;\nexport const Default = Template.bind({});\nDefault.args = {\n  size: 'medium',\n};\n\nexport const Small = SmallTemplate.bind({});\nSmall.args = {\n  size: 'small',\n};\n\nconst setMediumTabs = () => {\n  const tag = document.createElement('script');\n  tag.innerHTML = `\n    document.querySelector('#medium-tabs').tabs = [\n      {\n        id: 0,\n        label: 'Tab 1'\n      },\n      {\n        active: true,\n        id: 1,\n        label: 'Tab 2'\n      },\n      {\n        id: 'tab-3',\n        label: 'Tab 3',\n        leftIcon: 'sun',\n      },\n      {\n        id: 'tab-4',\n        label: 'Tab 4',\n        rightIcon: 'moon',\n      },\n      {\n        id: 'tab-5',\n        label: 'Tab 5',\n        leftIcon: 'sun',\n        rightIcon: 'moon',\n      },\n      {\n        id: 'tab-6',\n        iconOnly: 'settings',\n      }\n    ];\n  `;\n\n  return tag;\n};\nconst setSmallTabs = () => {\n  const tag = document.createElement('script');\n  tag.innerHTML = `\n    document.querySelector('#small-tabs').tabs = [\n      {\n        id: 0,\n        label: 'Tab 1'\n      },\n      {\n        active: true,\n        id: 1,\n        label: 'Tab 2'\n      },\n      {\n        id: 'tab-3',\n        label: 'Tab 3',\n        leftIcon: 'sun',\n      },\n      {\n        id: 'tab-4',\n        label: 'Tab 4',\n        rightIcon: 'moon',\n      },\n      {\n        id: 'tab-5',\n        label: 'Tab 5',\n        leftIcon: 'sun',\n        rightIcon: 'moon',\n      },\n      {\n        id: 'tab-6',\n        iconOnly: 'settings',\n      }\n    ];\n  `;\n\n  return tag;\n};\n",
    "storybook": {
      "examples": [
        "<modus-tabs id=\"medium-tabs\" size=${size}></modus-tabs>",
        "<modus-tabs id=\"small-tabs\" size=${size}></modus-tabs>",
        "\n  <modus-tabs id=\"medium-tabs\" size=${size}></modus-tabs>\n  ${setMediumTabs()}\n",
        "\n  <modus-tabs id=\"small-tabs\" size=${size}></modus-tabs>\n  ${setSmallTabs()}\n"
      ],
      "variants": [],
      "prop_usage": {
        "id": [
          "medium-tabs",
          "small-tabs"
        ]
      }
    },
    "tag_name": "modus-tabs"
  },
  "modus-text-input": {
    "props": [
      {
        "name": "ariaLabel",
        "description": "/** (optional) The input's aria-label. */",
        "type": "string | null"
      },
      {
        "name": "autocapitalize",
        "description": "/** (optional) The input's aria-label. */",
        "type": "string"
      },
      {
        "name": "autocorrect",
        "description": "/** (optional) The input's aria-label. */",
        "type": "boolean | 'off' | 'on'"
      },
      {
        "name": "autocomplete",
        "description": "/** (optional) The input's aria-label. */",
        "type": "string | null"
      },
      {
        "name": "autoFocusInput",
        "description": "/** (optional) The input's aria-label. */",
        "type": "boolean"
      },
      {
        "name": "disabled",
        "description": "/** (optional) The input's aria-label. */",
        "type": "boolean"
      },
      {
        "name": "enterkeyhint",
        "description": "/** (optional) The input's aria-label. */",
        "type": "'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send'"
      },
      {
        "name": "errorText",
        "description": "/** (optional) The input's aria-label. */",
        "type": "string"
      },
      {
        "name": "helperText",
        "description": "/** (optional) The input's aria-label. */",
        "type": "string"
      },
      {
        "name": "includeErrorIcon",
        "description": "/** (optional) The input's aria-label. */",
        "type": "boolean"
      },
      {
        "name": "includeSearchIcon",
        "description": "/** (optional) The input's aria-label. */",
        "type": "boolean"
      },
      {
        "name": "inputmode",
        "description": "/** (optional) The input's aria-label. */",
        "type": "'decimal' | 'email' | 'numeric' | 'search' | 'tel' | 'text' | 'url'"
      },
      {
        "name": "label",
        "description": "/** (optional) The input's aria-label. */",
        "type": "string"
      },
      {
        "name": "maxLength",
        "description": "/** (optional) The input's aria-label. */",
        "type": "number"
      },
      {
        "name": "minLength",
        "description": "/** (optional) The input's aria-label. */",
        "type": "number"
      },
      {
        "name": "pattern",
        "description": "/** (optional) The input's aria-label. */",
        "type": "string"
      },
      {
        "name": "placeholder",
        "description": "/** (optional) The input's aria-label. */",
        "type": "string"
      },
      {
        "name": "readOnly",
        "description": "/** (optional) The input's aria-label. */",
        "type": "boolean"
      },
      {
        "name": "required",
        "description": "/** (optional) The input's aria-label. */",
        "type": "boolean"
      },
      {
        "name": "size",
        "description": "/** (optional) The input's aria-label. */",
        "type": "'medium' | 'large'"
      },
      {
        "name": "spellcheck",
        "description": "/** (optional) The input's aria-label. */",
        "type": "boolean"
      },
      {
        "name": "textAlign",
        "description": "/** (optional) The input's aria-label. */",
        "type": "'left' | 'right'"
      },
      {
        "name": "type",
        "description": "/** (optional) The input's aria-label. */",
        "type": "'email' | 'password' | 'search' | 'text' | 'tel' | 'url'"
      },
      {
        "name": "validText",
        "description": "/** (optional) The input's aria-label. */",
        "type": "string"
      },
      {
        "name": "name",
        "description": "/** (optional) The input's aria-label. */",
        "type": "string"
      }
    ],
    "events": [
      "valueChange"
    ],
    "slots": [],
    "default_values": {
      "type": "text"
    },
    "documentation": "\n\n--- modus-text-input-storybook-docs.mdx ---\n\n# Text Input\n\n---\n\n[Modus Text](https://modus.trimble.com/components/inputs/) Input web components are wrappers around native `<input type=\"text\">` elements. They are referenced using the `<modus-text-input>` custom HTML element.\n\nThis component is compatible with Angular reactive forms. This can be achieved through the implementation of a simple directive.\n\n### Default\n\n<modus-text-input label=\"Text Input (Search Icon)\" placeholder=\"Placeholder\" include-search-icon required></modus-text-input>\n\n<modus-text-input label=\"Text Input (Search Icon & Disabled)\" include-search-icon disabled></modus-text-input>\n\n<modus-text-input label=\"Text Input (Search Icon & Helper Text)\" placeholder=\"Placeholder\" value=\"Value\" helper-text=\"Helper Demo\" include-search-icon required></modus-text-input>\n\n<modus-text-input label=\"Text Input (Error)\" placeholder=\"Placeholder\" value=\"Value\" error-text=\"Error Demo\"></modus-text-input>\n\n<modus-text-input label=\"Text Input (Valid)\" placeholder=\"Placeholder\" value=\"Value\" valid-text=\"Valid Demo\"></modus-text-input>\n\n<modus-text-input label=\"Text Input (Large & Helper Text)\" placeholder=\"Placeholder\" value=\"Value\" size=\"large\" helper-text=\"Your username must be 8-20 characters long, contain letters and numbers, and must not contain spaces\"></modus-text-input>\n\n<modus-text-input label=\"Text Input (Clearable)\" placeholder=\"Placeholder\" value=\"Value\" clearable=\"true\"></modus-text-input>\n\n<modus-text-input label=\"Text Input (Password)\" placeholder=\"Password\" type=\"password\"></modus-text-input>\n\n```html\n<modus-text-input label=\"Text Input (Search Icon)\" placeholder=\"Placeholder\" include-search-icon required></modus-text-input>\n<modus-text-input label=\"Text Input (Search Icon & Disabled)\" include-search-icon disabled></modus-text-input>\n<modus-text-input\n  label=\"Text Input (Search Icon & Helper Text)\"\n  placeholder=\"Placeholder\"\n  value=\"Value\"\n  helper-text=\"Helper Demo\"\n  include-search-icon\n  required></modus-text-input>\n<modus-text-input\n  label=\"Text Input (Error)\"\n  placeholder=\"Placeholder\"\n  value=\"Value\"\n  error-text=\"Error Demo\"></modus-text-input>\n<modus-text-input\n  label=\"Text Input (Valid)\"\n  placeholder=\"Placeholder\"\n  value=\"Value\"\n  valid-text=\"Valid Demo\"></modus-text-input>\n<modus-text-input\n  label=\"Text Input (Large & Helper Text)\"\n  placeholder=\"Placeholder\"\n  value=\"Value\"\n  size=\"large\"\n  helper-text=\"Your username must be 8-20 characters long, contain letters and numbers, and must not contain spaces\"></modus-text-input>\n<modus-text-input label=\"Text Input (Clearable)\" placeholder=\"Placeholder\" value=\"Value\" clearable=\"true\"></modus-text-input>\n<modus-text-input label=\"Text Input (Password)\" placeholder=\"Password\" type=\"password\"></modus-text-input>\n```\n\n### Properties\n\n| Property                    | Attribute                      | Description                                                                                               | Type                                                             | Default     |\n| --------------------------- | ------------------------------ | --------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ----------- |\n| `ariaLabel`                 | `aria-label`                   | (optional) The input's aria-label.                                                                        | `string`                                                         | `undefined` |\n| `autoFocusInput`            | `auto-focus-input`             | (optional) Sets autofocus on the input.                                                                   | `boolean`                                                        | `undefined` |\n| `autocapitalize`            | `autocapitalize`               | (optional) Capitalization behavior when using a non-traditional keyboard (e.g. microphone, touch screen). | `\"none\", \"off\", \"sentences\", \"on\", \"words\", \"characters\"`        | `undefined` |\n| `autocorrect `              | `autocorrect`                  | (optional) Whether to activate automatic correction while the user is editing this field in Safari.       | `boolean, \"off\", \"on\"`                                           | `undefined` |\n| `autocomplete`              | `autocomplete`                 | (optional) Sets autocomplete on the input.                                                                | `string`                                                         | `undefined` |\n| `clearable`                 | `clearable`                    | (optional) Whether the input has a clear button.                                                          | `boolean`                                                        | `false`     |\n| `disabled`                  | `disabled`                     | (optional) Whether the input is disabled.                                                                 | `boolean`                                                        | `undefined` |\n| `enterkeyhint`              | `enterkeyhint`                 | (optional) Which action label to present for the enter key on virtual keyboards.                          | `\"enter\", \"done\", \"go\", \"next\", \"previous\", \"search\", \"send\"`    | `undefined` |\n| `errorText`                 | `error-text`                   | (optional) The input's error state text.                                                                  | `string`                                                         | `undefined` |\n| `helperText`                | `helper-text`                  | (optional) The input's helper text displayed below the input.                                             | `string`                                                         | `undefined` |\n| `includeErrorIcon`          | `include-error-icon`           | (optional) Whether the error icon is included.                                                            | `boolean`                                                        | `undefined` |\n| `includePasswordTextToggle` | `include-password-text-toggle` | (optional) Whether the password text toggle icon is included.                                             | `boolean`                                                        | `true`      |\n| `includeSearchIcon`         | `include-search-icon`          | (optional) Whether the search icon is included.                                                           | `boolean`                                                        | `undefined` |\n| `inputmode`                 | `inputmode`                    | (optional) The input's inputmode.                                                                         | `\"decimal\", \"email\",  \"numeric\", \"search\", \"tel\", \"text\", \"url\"` | `undefined` |\n| `label`                     | `label`                        | (optional) The input's label.                                                                             | `string`                                                         | `undefined` |\n| `maxLength`                 | `max-length`                   | (optional) The input's maximum length.                                                                    | `number`                                                         | `undefined` |\n| `minLength`                 | `min-length`                   | (optional) The input's minimum length.                                                                    | `number`                                                         | `undefined` |\n| `pattern`                   | `pattern`                      | (optional) The input's HTML5 pattern.                                                                     | `string`                                                         | `undefined` |\n| `placeholder`               | `placeholder`                  | (optional) The input's placeholder text.                                                                  | `string`                                                         | `undefined` |\n| `readOnly`                  | `read-only`                    | (optional) Whether the input's content is read-only                                                       | `boolean`                                                        | `undefined` |\n| `required`                  | `required`                     | (optional) Whether the input is required.                                                                 | `boolean`                                                        | `undefined` |\n| `size`                      | `size`                         | (optional) The input's size.                                                                              | `\"large\", \"medium\"`                                              | `'medium'`  |\n| `spellcheck`                | `spellcheck`                   | (optional) Whether to enable spell checking.                                                              | `boolean`                                                        | `false`     |\n| `textAlign`                 | `text-align`                   | (optional) The input's text alignment.                                                                    | `\"left\", \"right\"`                                                | `'left'`    |\n| `type`                      | `type`                         | (optional) The input's type.                                                                              | `\"email\", \"password\", \"search\", \"text\", \"url\"`                   | `'text'`    |\n| `validText`                 | `valid-text`                   | (optional) The input's valid state text.                                                                  | `string`                                                         | `undefined` |\n| `value`                     | `value`                        | (optional) The input's value.                                                                             | `string`                                                         | `undefined` |\n| `name`                      | `name`                         | (optional) The input's name.                                                                              | `string`                                                         | `undefined` |\n\n### DOM Events\n\n| Name          | Description                      | Emits    |\n| ------------- | -------------------------------- | -------- |\n| `valueChange` | Fires on text input value change | `string` |\n\n### Methods\n\n| Method name  | Description     | Parameter | Return          |\n| ------------ | --------------- | --------- | --------------- |\n| `focusInput` | Focus the input |           | `Promise<void>` |\n\n### Accessibility\n\n- Text Input gets an `aria-label` provided by the `aria-label` property input.\n- It is recommended to pass `aria-label` when there is no label used so the input is accessible to screen readers.\n- Text Input gets an `aria-disabled` set to whether Text Input is disabled.\n- Text Input gets an `aria-placeholder` provided by the `placeholder` property input.\n- Text Input gets an `aria-invalid` set to whether Text Input is invalid.\n- Text Input gets an `aria-readonly` set to whether Text Input is readonly.\n- Text Input gets an `aria-required` set to whether Text Input is required.\n",
    "storybook_content": "\n\n--- modus-text-input.stories.tsx ---\n\n// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-text-input-storybook-docs.mdx';\nimport { html } from 'lit-html';\nimport { withActions } from '@storybook/addon-actions/decorator';\n\nexport default {\n  title: 'User Inputs/Text Input',\n  argTypes: {\n    ariaLabel: {\n      name: 'aria-label',\n      description: \"The text input's aria-label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    autocapitalize: {\n      name: 'autocapitalize',\n      options: ['none', 'off', 'sentences', 'on', 'words', 'characters'],\n      type: 'select',\n      description: 'Capitalization behavior when using a non-traditional keyboard (e.g. microphone, touch screen)',\n      table: {\n        type: { summary: `'none' | 'off' | 'sentences' | 'on' | 'words' | 'characters'` },\n      },\n    },\n    autocomplete: {\n      name: 'autocomplete',\n      description: \"The text input's autocomplete\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    autocorrect: {\n      name: 'autocorrect',\n      options: ['off', 'on'],\n      type: 'select',\n      description: 'Whether to activate automatic correction while the user is editing this field in Safari',\n      table: {\n        type: { summary: `boolean | 'off' | 'on'` },\n      },\n    },\n    autoFocusInput: {\n      name: 'auto-focus-input',\n      description: 'Sets autofocus for the input',\n      table: {\n        type: { summary: 'boolean' },\n      },\n    },\n    clearable: {\n      description: 'Whether the text input is clearable',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    disabled: {\n      description: 'Whether the text input is disabled',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    enterkeyhint: {\n      options: ['enter', 'done', 'go', 'next', 'previous', 'search', 'send'],\n      type: 'select',\n      description: 'Which action label to present for the enter key on virtual keyboards',\n      table: {\n        type: { summary: `'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send'` },\n      },\n    },\n    errorText: {\n      name: 'error-text',\n      description: \"The text input's error text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    helperText: {\n      name: 'helper-text',\n      description: \"The text input's helper text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    includeErrorIcon: {\n      name: 'include-error-icon',\n      description: 'Whether to include the error icon',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    includePasswordTextToggle: {\n      name: 'include-password-text-toggle',\n      description: 'Whether the password text toggle icon is included',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    includeSearchIcon: {\n      name: 'include-search-icon',\n      description: 'Whether to include the search icon',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    inputmode: {\n      options: ['decimal', 'email', 'numeric', 'search', 'tel', 'text', 'url'],\n      type: 'select',\n      description: 'The inputmode type',\n      table: {\n        type: {\n          summary: \"'decimal' | 'email' | 'numeric' | 'search' | 'tel' | 'text' | 'url'\",\n        },\n      },\n    },\n    label: {\n      description: \"The text input's label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    maxLength: {\n      name: 'max-length',\n      description: \"The text input's maximum length\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    minLength: {\n      name: 'min-length',\n      description: \"The text input's minimum length\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    pattern: {\n      description: \"The text input's pattern attribute\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    placeholder: {\n      description: \"The text input's placeholder text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    readOnly: {\n      name: 'read-only',\n      description: 'Whether the text input is read-only',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    required: {\n      description: 'Whether the text input is required',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    size: {\n      options: ['medium', 'large'],\n      type: 'select',\n      description: 'The size of the text input',\n      table: {\n        defaultValue: { summary: \"'medium'\" },\n        type: { summary: \"'medium' | 'large'\" },\n      },\n    },\n    spellcheck: {\n      type: 'boolean',\n      name: 'spellcheck',\n      description: 'Whether to enable spell checking.',\n      table: {\n        type: { summary: 'boolean' },\n      },\n    },\n    textAlign: {\n      name: 'text-align',\n      options: ['left', 'right'],\n      type: 'select',\n      description: 'text alignment for the input.',\n      table: {\n        defaultValue: { summary: \"'left'\" },\n        type: {\n          summary: \"'left' | 'right'\",\n        },\n      },\n    },\n    type: {\n      options: ['email', 'password', 'search', 'tel', 'text', 'url'],\n      type: 'select',\n      description: 'The input type',\n      table: {\n        defaultValue: { summary: \"'text'\" },\n        type: { summary: \"'email' | 'password' | 'search' | 'tel' | 'text' | 'url'\" },\n      },\n    },\n    validText: {\n      name: 'valid-text',\n      description: \"The text input's valid text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    value: {\n      description: \"The text input's value\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    name: {\n      name: 'name',\n      description: \"The text input's name\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n  },\n  parameters: {\n    actions: {\n      handles: ['valueChange'],\n    },\n    controls: { expanded: true, sort: 'requiredFirst' },\n    docs: {\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n    },\n  },\n  decorators: [withActions],\n};\n\nconst Template = ({\n  ariaLabel,\n  autocapitalize,\n  autocomplete,\n  autocorrect,\n  autoFocusInput,\n  clearable,\n  disabled,\n  enterkeyhint,\n  errorText,\n  helperText,\n  includeErrorIcon,\n  includePasswordTextToggle,\n  includeSearchIcon,\n  inputmode,\n  label,\n  maxLength,\n  minLength,\n  pattern,\n  placeholder,\n  readOnly,\n  required,\n  size,\n  spellcheck,\n  textAlign,\n  type,\n  validText,\n  name,\n  value,\n}) => html`\n  <form>\n    <modus-text-input\n      aria-label=${ariaLabel}\n      autocapitalize=${autocapitalize}\n      autocomplete=${autocomplete}\n      autocorrect=${autocorrect}\n      auto-focus-input=${autoFocusInput}\n      clearable=${clearable}\n      ?disabled=${disabled}\n      enterkeyhint=${enterkeyhint}\n      error-text=${errorText}\n      helper-text=${helperText}\n      include-error-icon=${includeErrorIcon}\n      include-password-text-toggle=${includePasswordTextToggle}\n      include-search-icon=${includeSearchIcon}\n      inputmode=${inputmode}\n      label=${label}\n      max-length=${maxLength}\n      min-length=${minLength}\n      pattern=${pattern}\n      placeholder=${placeholder}\n      read-only=${readOnly}\n      ?required=${required}\n      size=${size}\n      ?spellcheck=${spellcheck}\n      text-align=${textAlign}\n      type=${type}\n      valid-text=${validText}\n      value=${value}\n      name=${name}></modus-text-input>\n  </form>\n`;\n\nexport const Default = Template.bind({});\nDefault.args = {\n  ariaLabel: '',\n  autocapitalize: undefined,\n  autocomplete: '',\n  autocorrect: null,\n  autoFocusInput: true,\n  clearable: false,\n  disabled: false,\n  enterkeyhint: undefined,\n  errorText: '',\n  helperText: '',\n  includeErrorIcon: false,\n  includePasswordTextToggle: true,\n  includeSearchIcon: false,\n  inputmode: '',\n  label: 'Username',\n  name: 'test-input',\n  maxLength: 20,\n  minLength: 0,\n  pattern: '',\n  placeholder: '',\n  readOnly: false,\n  required: false,\n  size: 'medium',\n  spellcheck: false,\n  textAlign: 'left',\n  type: 'text',\n  validText: '',\n  value: '',\n};\n",
    "storybook": {
      "examples": [
        "<modus-text-input\n      aria-label=${ariaLabel}\n      autocapitalize=${autocapitalize}\n      autocomplete=${autocomplete}\n      autocorrect=${autocorrect}\n      auto-focus-input=${autoFocusInput}\n      clearable=${clearable}\n      ?disabled=${disabled}\n      enterkeyhint=${enterkeyhint}\n      error-text=${errorText}\n      helper-text=${helperText}\n      include-error-icon=${includeErrorIcon}\n      include-password-text-toggle=${includePasswordTextToggle}\n      include-search-icon=${includeSearchIcon}\n      inputmode=${inputmode}\n      label=${label}\n      max-length=${maxLength}\n      min-length=${minLength}\n      pattern=${pattern}\n      placeholder=${placeholder}\n      read-only=${readOnly}\n      ?required=${required}\n      size=${size}\n      ?spellcheck=${spellcheck}\n      text-align=${textAlign}\n      type=${type}\n      valid-text=${validText}\n      value=${value}\n      name=${name}></modus-text-input>",
        "\n  <form>\n    <modus-text-input\n      aria-label=${ariaLabel}\n      autocapitalize=${autocapitalize}\n      autocomplete=${autocomplete}\n      autocorrect=${autocorrect}\n      auto-focus-input=${autoFocusInput}\n      clearable=${clearable}\n      ?disabled=${disabled}\n      enterkeyhint=${enterkeyhint}\n      error-text=${errorText}\n      helper-text=${helperText}\n      include-error-icon=${includeErrorIcon}\n      include-password-text-toggle=${includePasswordTextToggle}\n      include-search-icon=${includeSearchIcon}\n      inputmode=${inputmode}\n      label=${label}\n      max-length=${maxLength}\n      min-length=${minLength}\n      pattern=${pattern}\n      placeholder=${placeholder}\n      read-only=${readOnly}\n      ?required=${required}\n      size=${size}\n      ?spellcheck=${spellcheck}\n      text-align=${textAlign}\n      type=${type}\n      valid-text=${validText}\n      value=${value}\n      name=${name}></modus-text-input>\n  </form>\n"
      ],
      "variants": [],
      "prop_usage": {}
    },
    "tag_name": "modus-text-input"
  },
  "modus-textarea-input": {
    "props": [
      {
        "name": "ariaLabel",
        "description": "/** (optional) The input's aria-label. */",
        "type": "string | null"
      },
      {
        "name": "autocorrect",
        "description": "/** (optional) The input's aria-label. */",
        "type": "boolean | 'off' | 'on'"
      },
      {
        "name": "autoFocusInput",
        "description": "/** (optional) The input's aria-label. */",
        "type": "boolean"
      },
      {
        "name": "disabled",
        "description": "/** (optional) The input's aria-label. */",
        "type": "boolean"
      },
      {
        "name": "enterkeyhint",
        "description": "/** (optional) The input's aria-label. */",
        "type": "'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send'"
      },
      {
        "name": "errorText",
        "description": "/** (optional) The input's aria-label. */",
        "type": "string"
      },
      {
        "name": "helperText",
        "description": "/** (optional) The input's aria-label. */",
        "type": "string"
      },
      {
        "name": "label",
        "description": "/** (optional) The input's aria-label. */",
        "type": "string"
      },
      {
        "name": "maxLength",
        "description": "/** (optional) The input's aria-label. */",
        "type": "number"
      },
      {
        "name": "minLength",
        "description": "/** (optional) The input's aria-label. */",
        "type": "number"
      },
      {
        "name": "placeholder",
        "description": "/** (optional) The input's aria-label. */",
        "type": "string"
      },
      {
        "name": "readOnly",
        "description": "/** (optional) The input's aria-label. */",
        "type": "boolean"
      },
      {
        "name": "required",
        "description": "/** (optional) The input's aria-label. */",
        "type": "boolean"
      },
      {
        "name": "size",
        "description": "/** (optional) The input's aria-label. */",
        "type": "'medium' | 'large'"
      },
      {
        "name": "spellcheck",
        "description": "/** (optional) The input's aria-label. */",
        "type": "boolean"
      },
      {
        "name": "textAlign",
        "description": "/** (optional) The input's aria-label. */",
        "type": "'left' | 'right'"
      },
      {
        "name": "validText",
        "description": "/** (optional) The input's aria-label. */",
        "type": "string"
      }
    ],
    "events": [
      "valueChange"
    ],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-textarea-input-storybook-docs.mdx ---\n\n# Textarea Input\n\n---\n\n[Modus Text](https://modus.trimble.com/components/inputs/) Input web components are wrappers around native `<textarea>` elements. They are referenced using the `<modus-textarea-input>` custom HTML element.\n\nThis component is compatible with Angular reactive forms. This can be achieved through the implementation of a simple directive.\n\n### Default\n\n<modus-textarea-input label=\"Textarea Input\" placeholder=\"Placeholder\" required></modus-textarea-input>\n\n<modus-textarea-input label=\"Textarea Input (Disabled)\" disabled></modus-textarea-input>\n\n<modus-textarea-input label=\"Textarea Input (Helper Text)\" placeholder=\"Placeholder\" value=\"Value\" helper-text=\"Helper Demo\" required></modus-textarea-input>\n\n<modus-textarea-input label=\"Textarea Input (Error)\" placeholder=\"Placeholder\" value=\"Value\" error-text=\"Error Demo\"></modus-textarea-input>\n\n<modus-textarea-input label=\"Textarea Input (Valid)\" placeholder=\"Placeholder\" value=\"Value\" valid-text=\"Valid Demo\"></modus-textarea-input>\n\n<modus-textarea-input label=\"Textarea Input (Large & Helper Text)\" placeholder=\"Placeholder\" value=\"Value\" size=\"large\" helper-text=\"Your username must be 8-20 characters long, contain letters and numbers, and must not contain spaces\"></modus-textarea-input>\n\n```html\n<modus-textarea-input label=\"Textarea Input\" placeholder=\"Placeholder\" required></modus-textarea-input>\n<modus-textarea-input label=\"Textarea Input (Disabled)\" disabled></modus-textarea-input>\n<modus-textarea-input\n  label=\"Textarea Input (Helper Text)\"\n  placeholder=\"Placeholder\"\n  value=\"Value\"\n  helper-text=\"Helper Demo\"\n  required></modus-textarea-input>\n<modus-textarea-input\n  label=\"Textarea Input (Error)\"\n  placeholder=\"Placeholder\"\n  value=\"Value\"\n  error-text=\"Error Demo\"></modus-textarea-input>\n<modus-textarea-input\n  label=\"Textarea Input (Valid)\"\n  placeholder=\"Placeholder\"\n  value=\"Value\"\n  valid-text=\"Valid Demo\"></modus-textarea-input>\n<modus-textarea-input\n  label=\"Textarea Input (Large & Helper Text)\"\n  placeholder=\"Placeholder\"\n  value=\"Value\"\n  size=\"large\"\n  helper-text=\"Your username must be 8-20 characters long, contain letters and numbers, and must not contain spaces\"></modus-textarea-input>\n<modus-textarea-input\n  label=\"Textarea Input (3 rows)\"\n  placeholder=\"Placeholder\"\n  value=\"Value\"\n  rows=\"3\"></modus-textarea-input>\n```\n\n### Properties\n\n| Property         | Attribute          | Description                                                                                         | Type                                                          | Default     |\n| ---------------- | ------------------ | --------------------------------------------------------------------------------------------------- | ------------------------------------------------------------- | ----------- |\n| `ariaLabel`      | `aria-label`       | (optional) The textarea's aria-label.                                                               | `string`                                                      | `undefined` |\n| `autoFocusInput` | `auto-focus-input` | (optional) Sets autofocus on the textarea.                                                          | `boolean`                                                     | `undefined` |\n| `autocorrect`    | `autocorrect`      | (optional) Whether to activate automatic correction while the user is editing this field in Safari. | `boolean, \"off\", \"on\"`                                        | `undefined` |\n| `clearable`      | `clearable`        | (optional) Whether the textarea has a clear button.                                                 | `boolean`                                                     | `false`     |\n| `disabled`       | `disabled`         | (optional) Whether the textarea is disabled.                                                        | `boolean`                                                     | `undefined` |\n| `enterkeyhint`   | `enterkeyhint`     | Which action label to present for the enter key on virtual keyboards.                               | `\"enter\", \"done\", \"go\", \"next\", \"previous\", \"search\", \"send\"` | `undefined` |\n| `errorText`      | `error-text`       | (optional) The textarea's error state text.                                                         | `string`                                                      | `undefined` |\n| `helperText`     | `helper-text`      | (optional) The textarea's helper text displayed below the input.                                    | `string`                                                      | `undefined` |\n| `label`          | `label`            | (optional) The textarea's label.                                                                    | `string`                                                      | `undefined` |\n| `maxLength`      | `max-length`       | (optional) The textarea's maximum length.                                                           | `number`                                                      | `undefined` |\n| `minLength`      | `min-length`       | (optional) The textarea's minimum length.                                                           | `number`                                                      | `undefined` |\n| `placeholder`    | `placeholder`      | (optional) The textarea's placeholder text.                                                         | `string`                                                      | `undefined` |\n| `readOnly`       | `read-only`        | (optional) Whether the textarea's content is read-only                                              | `boolean`                                                     | `undefined` |\n| `required`       | `required`         | (optional) Whether the input is required.                                                           | `boolean`                                                     | `undefined` |\n| `rows`           | `rows`             | (optional) Number of rows on textarea.                                                              | `number`                                                      | `undefined` |\n| `size`           | `size`             | (optional) The textarea's size.                                                                     | `\"large\", \"medium\"`                                           | `'medium'`  |\n| `spellcheck`     | `spellcheck`       | (optional) Whether to enable spell checking.                                                        | `\"large\", \"medium\"`                                           | `'medium'`  |\n| `textAlign`      | `text-align`       | (optional) The textarea's text alignment.                                                           | `boolean`                                                     | `'false'`   |\n| `validText`      | `valid-text`       | (optional) The textarea's valid state text.                                                         | `string`                                                      | `undefined` |\n| `value`          | `value`            | (optional) The textarea's value.                                                                    |\n\n### DOM Events\n\n| Name          | Description                          | Emits    |\n| ------------- | ------------------------------------ | -------- |\n| `valueChange` | Fires on textarea input value change | `string` |\n\n### Methods\n\n| Method name  | Description     | Parameter | Return          |\n| ------------ | --------------- | --------- | --------------- |\n| `focusInput` | Focus the input |           | `Promise<void>` |\n\n### Accessibility\n\n- Textarea Input gets an `aria-label` provided by the `aria-label` property input.\n- It is recommended to pass `aria-label` when there is no label used so the input is accessible to screen readers.\n- Textarea Input gets an `aria-disabled` set to whether Textarea Input is disabled.\n- Textarea Input gets an `aria-placeholder` provided by the `placeholder` property input.\n- Textarea Input gets an `aria-invalid` set to whether Textarea Input is invalid.\n- Textarea Input gets an `aria-readonly` set to whether Textarea Input is readonly.\n- Textarea Input gets an `aria-required` set to whether Textarea Input is required.\n",
    "storybook_content": "\n\n--- modus-textarea-input.stories.tsx ---\n\n// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-textarea-input-storybook-docs.mdx';\nimport { html } from 'lit-html';\nimport { withActions } from '@storybook/addon-actions/decorator';\n\nexport default {\n  title: 'User Inputs/Textarea Input',\n  argTypes: {\n    ariaLabel: {\n      name: 'aria-label',\n      description: \"The text input's aria-label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    autocorrect: {\n      name: 'autocorrect',\n      options: ['off', 'on'],\n      type: 'select',\n      description: 'Whether to activate automatic correction while the user is editing this field in Safari',\n      table: {\n        type: { summary: `boolean | 'off' | 'on'` },\n      },\n    },\n    autoFocusInput: {\n      name: 'auto-focus-input',\n      description: 'Sets autofocus for the input',\n      table: {\n        type: { summary: 'boolean' },\n      },\n    },\n    clearable: {\n      description: 'Whether the text input is clearable',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    disabled: {\n      description: 'Whether the text input is disabled',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    enterkeyhint: {\n      options: ['enter', 'done', 'go', 'next', 'previous', 'search', 'send'],\n      type: 'select',\n      description: 'Which action label to present for the enter key on virtual keyboards',\n      table: {\n        type: { summary: `'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send'` },\n      },\n    },\n    errorText: {\n      name: 'error-text',\n      description: \"The text input's error text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    helperText: {\n      name: 'helper-text',\n      description: \"The text input's helper text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    label: {\n      description: \"The text input's label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    maxLength: {\n      name: 'max-length',\n      description: \"The text input's maximum length\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    minLength: {\n      name: 'min-length',\n      description: \"The text input's minimum length\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    placeholder: {\n      description: \"The text input's placeholder text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    readOnly: {\n      name: 'read-only',\n      description: 'Whether the text input is read-only',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    required: {\n      description: 'Whether the text input is required',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    rows: {\n      description: 'Number of rows on textarea',\n      table: {\n        defaultValue: { summary: '5' },\n        type: { summary: 'number' },\n      },\n    },\n    size: {\n      options: ['medium', 'large'],\n      type: 'select',\n      description: 'The size of the text input',\n      table: {\n        defaultValue: { summary: \"'medium'\" },\n        type: { summary: \"'medium' | 'large'\" },\n      },\n    },\n    spellcheck: {\n      type: 'boolean',\n      name: 'spellcheck',\n      description: 'Whether to enable spell checking.',\n      table: {\n        type: { summary: 'boolean' },\n      },\n    },\n    textAlign: {\n      name: 'text-align',\n      options: ['left', 'right'],\n      type: 'select',\n      description: 'text alignment for the input.',\n      table: {\n        defaultValue: { summary: \"'left'\" },\n        type: {\n          summary: \"'left' | 'right'\",\n        },\n      },\n    },\n    validText: {\n      name: 'valid-text',\n      description: \"The text input's valid text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    value: {\n      description: \"The text input's value\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n  },\n  parameters: {\n    actions: {\n      handles: ['valueChange'],\n    },\n    controls: { expanded: true, sort: 'requiredFirst' },\n    docs: {\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n    },\n  },\n  decorators: [withActions],\n};\n\nconst Template = ({\n  ariaLabel,\n  autocorrect,\n  autoFocusInput,\n  clearable,\n  disabled,\n  enterkeyhint,\n  errorText,\n  helperText,\n  inputmode,\n  label,\n  maxLength,\n  minLength,\n  placeholder,\n  readOnly,\n  required,\n  rows,\n  size,\n  spellcheck,\n  textAlign,\n  validText,\n  value,\n}) => html`\n  <form>\n    <modus-textarea-input\n      aria-label=${ariaLabel}\n      autocorrect=${autocorrect}\n      auto-focus-input=${autoFocusInput}\n      clearable=${clearable}\n      ?disabled=${disabled}\n      enterkeyhint=${enterkeyhint}\n      error-text=${errorText}\n      helper-text=${helperText}\n      inputmode=${inputmode}\n      label=${label}\n      max-length=${maxLength}\n      min-length=${minLength}\n      placeholder=${placeholder}\n      read-only=${readOnly}\n      ?required=${required}\n      rows=${rows}\n      size=${size}\n      ?spellcheck=${spellcheck}\n      text-align=${textAlign}\n      valid-text=${validText}\n      value=${value}></modus-textarea-input>\n  </form>\n`;\n\nexport const Default = Template.bind({});\nDefault.args = {\n  ariaLabel: '',\n  autocorrect: null,\n  autoFocusInput: true,\n  clearable: false,\n  disabled: false,\n  enterkeyhint: undefined,\n  errorText: '',\n  helperText: '',\n  inputmode: '',\n  label: 'Comment',\n  maxLength: 2000,\n  minLength: 0,\n  placeholder: '',\n  readOnly: false,\n  required: false,\n  rows: 3,\n  size: 'medium',\n  spellcheck: false,\n  textAlign: 'left',\n  validText: '',\n  value: '',\n};\n",
    "storybook": {
      "examples": [
        "<modus-textarea-input\n      aria-label=${ariaLabel}\n      autocorrect=${autocorrect}\n      auto-focus-input=${autoFocusInput}\n      clearable=${clearable}\n      ?disabled=${disabled}\n      enterkeyhint=${enterkeyhint}\n      error-text=${errorText}\n      helper-text=${helperText}\n      inputmode=${inputmode}\n      label=${label}\n      max-length=${maxLength}\n      min-length=${minLength}\n      placeholder=${placeholder}\n      read-only=${readOnly}\n      ?required=${required}\n      rows=${rows}\n      size=${size}\n      ?spellcheck=${spellcheck}\n      text-align=${textAlign}\n      valid-text=${validText}\n      value=${value}></modus-textarea-input>",
        "\n  <form>\n    <modus-textarea-input\n      aria-label=${ariaLabel}\n      autocorrect=${autocorrect}\n      auto-focus-input=${autoFocusInput}\n      clearable=${clearable}\n      ?disabled=${disabled}\n      enterkeyhint=${enterkeyhint}\n      error-text=${errorText}\n      helper-text=${helperText}\n      inputmode=${inputmode}\n      label=${label}\n      max-length=${maxLength}\n      min-length=${minLength}\n      placeholder=${placeholder}\n      read-only=${readOnly}\n      ?required=${required}\n      rows=${rows}\n      size=${size}\n      ?spellcheck=${spellcheck}\n      text-align=${textAlign}\n      valid-text=${validText}\n      value=${value}></modus-textarea-input>\n  </form>\n"
      ],
      "variants": [],
      "prop_usage": {}
    },
    "tag_name": "modus-textarea-input"
  },
  "modus-time-picker": {
    "props": [],
    "events": [],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-time-picker-storybook-docs.mdx ---\n\nimport { Story } from '@storybook/blocks';\nimport * as TimePicker from './modus-time-picker.stories.tsx';\n\n# Time Picker\n\n---\n\n[Modus Time Picker](https://modus.trimble.com/components/web/date-time-picker/styles/#time-picker) web component is a wrapper around native `<input type=\"text\">` element used to input the time. It is referenced using the `<modus-time-picker>` custom HTML element.\n\n#### Implementation details\n\n- Modus Time Picker accepts input in 12 or 24-hour format depending on the value provided for prop `ampm`.\n- To use it along with a time zone, slot option is provided and referenced by `slot='timeZone'`.\n- The `value` which is a string representation of the time input is always in 24-hour format that includes leading zeros: `hh:mm`, regardless of the input format which is displayed.\n- The input string can be auto formatted while typing by enabling `autoFormat`.\n\n#### Validation\n\n- Modus Time Picker by default validates for an invalid time input based on the 12/24 hour format, and other validations based on the value provided for `required`, `min`, `max` fields. Validations are triggered on a blur event.\n- Modus Time picker by default allows only the characters in the format provided and it can be controlled by `allowedCharsRegex`.\n- If the default validation is disabled, using props `errorText`, `invalid` the error state can also be set manually.\n\n### Default\n\n<Story of={TimePicker.Default} />\n\n```html\n<modus-time-picker label=\"Time\" placeholder=\"23:39\" helper-text=\"hh:mm\"></modus-time-picker>\n```\n\n#### 12 Hour Format\n\n<Story of={TimePicker.TimeFormat} />\n\n```html\n<modus-time-picker\n  label=\"Time\"\n  ampm=\"true\"\n  value=\"23:39\"\n  placeholder=\"12:00 AM\"\n  helper-text=\"hh:mm AM/PM\"></modus-time-picker>\n```\n\n### Auto Format\n\n<Story of={TimePicker.AutoFormat} />\n\n```html\n<modus-time-picker\n  ampm=\"true\"\n  auto-format=\"true\"\n  helper-text=\"hh:mm AM/PM\"\n  label=\"Time\"\n  max-length=\"10\"\n  placeholder=\"12:00 AM\"></modus-time-picker>\n```\n\n### Time Picker with Time Zone\n\n<Story of={TimePicker.WithTimeZone} />\n\n```html\n<modus-time-picker helper-text=\"hh:mm\" label=\"Time\" max-length=\"10\" auto-format=\"true\" value=\"23:39\">\n  <div style=\"width: 300px;padding-left: 0.5rem;\" slot=\"timeZone\">\n    <modus-select id=\"timezone\" label=\"Time Zone\" aria-label=\"Time Zone\" options-display-prop=\"display\"></modus-select>\n  </div>\n</modus-time-picker>\n<script>\n  const modusSelect = document.querySelector('#select-demo-1');\n  modusSelect.options = [\n    { display: 'Alpha Time Zone' },\n    { display: 'Australian Central Daylight Time' },\n    { display: 'Atlantic Daylight Time' },\n  ];\n</script>\n```\n\n### Properties\n\n| Property            | Attribute             | Description                                                                                                                                       | Type                  | Default     |\n| ------------------- | --------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------- | ----------- |\n| `allowedCharsRegex` | `allowed-chars-regex` | (optional) Regular expression to allow characters while typing the input. Default is `/[\\d:apm\\s]/gi` or `/[\\d:]/gi` based on the display format. | `RegExp \\| string`    | `undefined` |\n| `ampm`              | `ampm`                | (optional) Sets 12/24 hour format for the input string.                                                                                           | `boolean`             | `undefined` |\n| `ariaLabel`         | `aria-label`          | (optional) The input's aria-label.                                                                                                                | `string`              | `undefined` |\n| `autoFocusInput`    | `auto-focus-input`    | (optional) Sets autofocus on the input.                                                                                                           | `boolean`             | `undefined` |\n| `autoFormat`        | `auto-format`         | (optional) Formats the text while typing in the input field.                                                                                      | `boolean`             | `undefined` |\n| `disableValidation` | `disable-validation`  | (optional) Disables default validation for the time input.                                                                                        | `boolean`             | `undefined` |\n| `disabled`          | `disabled`            | (optional) Whether the input is disabled.                                                                                                         | `boolean`             | `undefined` |\n| `errorText`         | `error-text`          | (optional) Custom error text displayed for the input.                                                                                             | `string`              | `undefined` |\n| `helperText`        | `helper-text`         | (optional) Custom helper text displayed below the input.                                                                                          | `string`              | `undefined` |\n| `label`             | `label`               | (optional) The input's label.                                                                                                                     | `string`              | `undefined` |\n| `max`               | `max`                 | (optional) Maximum time (in 24 hour format).                                                                                                      | `string`              | `undefined` |\n| `min`               | `min`                 | (optional) Minimum time (in 24 hour format).                                                                                                      | `string`              | `undefined` |\n| `placeholder`       | `placeholder`         | (optional) The input's placeholder text.                                                                                                          | `string`              | `undefined` |\n| `readOnly`          | `read-only`           | (optional) Whether the input's content is read-only                                                                                               | `boolean`             | `undefined` |\n| `required`          | `required`            | (optional) Whether the input is required.                                                                                                         | `boolean`             | `undefined` |\n| `size`              | `size`                | (optional) The input's size.                                                                                                                      | `\"large\" \\| \"medium\"` | `'medium'`  |\n| `validText`         | `valid-text`          | (optional) The input's valid state text.                                                                                                          | `string`              | `undefined` |\n| `value`             | `value`               | (optional) Value of the time entered into the input.                                                                                              | `string`              | `undefined` |\n\n### DOM Events\n\n| Event           | Description                                      | Type                                       |\n| --------------- | ------------------------------------------------ | ------------------------------------------ |\n| `timeInputBlur` | An event that fires on input value out of focus. | `CustomEvent<ModusTimePickerEventDetails>` |\n| `valueChange`   | An event that fires on input value change.       | `CustomEvent<ModusTimePickerEventDetails>` |\n\n### Methods\n\n| Method name  | Description     | Parameter | Return          |\n| ------------ | --------------- | --------- | --------------- |\n| `focusInput` | Focus the input |           | `Promise<void>` |\n\n### Accessibility\n\n- Time Input gets an `aria-label` provided by the `aria-label` property input.\n- It is recommended to pass `aria-label` when there is no label used so the input is accessible to screen readers.\n- Time Input gets an `aria-disabled` provided by the `disabled` property input.\n- Time Input gets an `aria-placeholder` provided by the `placeholder` property input.\n- Time Input gets an `aria-invalid` from `invalid` property input.\n- Time Input gets an `aria-readonly` from `readonly` property input.\n- Time Input gets an `aria-required` from `required` property input.\n",
    "storybook_content": "\n\n--- modus-time-picker.stories.tsx ---\n\n// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-time-picker-storybook-docs.mdx';\nimport { html } from 'lit-html';\nimport { withActions } from '@storybook/addon-actions/decorator';\n\nexport default {\n  title: 'User Inputs/Time Picker',\n  argTypes: {\n    ampm: {\n      name: 'ampm',\n      description: 'Sets 12/24 hour format for the input string.',\n      table: {\n        type: { summary: 'boolean' },\n      },\n    },\n    ariaLabel: {\n      name: 'aria-label',\n      description: \"The input's aria-label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    autoFocusInput: {\n      name: 'auto-focus-input',\n      description: 'Sets autofocus for the input',\n      table: {\n        type: { summary: 'boolean' },\n      },\n    },\n    autoFormat: {\n      name: 'auto-format',\n      description: 'Formats the text while typing in the input field',\n      table: {\n        type: { summary: 'boolean' },\n      },\n    },\n    disabled: {\n      description: 'Whether the text input is disabled',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    disableValidation: {\n      name: 'disable-validation',\n      description: 'Disables default validation for the time input',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    errorText: {\n      name: 'error-text',\n      description: \"The input's error text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    helperText: {\n      name: 'helper-text',\n      description: \"The input's helper text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    label: {\n      description: \"The input's label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    min: {\n      name: 'min',\n      description: 'Minimum time (in 24 hour format)',\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    max: {\n      name: 'max',\n      description: 'Maximum time (in 24 hour format)',\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    placeholder: {\n      description: \"The input's placeholder text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    readOnly: {\n      name: 'read-only',\n      description: 'Whether the input is read-only',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    required: {\n      description: 'Whether the input is required',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    size: {\n      options: ['medium', 'large'],\n      type: 'select',\n      description: 'The size of the input',\n      table: {\n        defaultValue: { summary: \"'medium'\" },\n        type: { summary: \"'medium' | 'large'\" },\n      },\n    },\n    validText: {\n      name: 'valid-text',\n      description: \"The input's valid text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    value: {\n      description: \"The input's value\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n  },\n  parameters: {\n    actions: {\n      handles: ['valueChange', 'timeInputBlur'],\n    },\n    controls: { expanded: true, sort: 'requiredFirst' },\n    docs: {\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n      enableShortcuts: false,\n    },\n  },\n  decorators: [withActions],\n};\n\nconst Template = ({\n  ampm,\n  autoFormat,\n  ariaLabel,\n  autoFocusInput,\n  disabled,\n  disableValidation,\n  errorText,\n  helperText,\n  label,\n  min,\n  max,\n  placeholder,\n  readOnly,\n  required,\n  size,\n  validText,\n  value,\n}) => html`\n  <modus-time-picker\n    ampm=${ampm}\n    auto-format=${autoFormat}\n    aria-label=${ariaLabel}\n    auto-focus-input=${autoFocusInput}\n    disable-validation=${disableValidation}\n    ?disabled=${disabled}\n    error-text=${errorText}\n    helper-text=${helperText}\n    label=${label}\n    min=${min}\n    max=${max}\n    placeholder=${placeholder}\n    read-only=${readOnly}\n    ?required=${required}\n    size=${size}\n    valid-text=${validText}\n    value=${value}></modus-time-picker>\n`;\n\nconst defaultArgs = {\n  ampm: false,\n  autoFormat: false,\n  ariaLabel: 'Time Input',\n  autoFocusInput: true,\n  disableValidation: false,\n  disabled: false,\n  errorText: '',\n  helperText: 'hh:mm',\n  label: 'Time',\n  min: null,\n  max: null,\n  placeholder: '',\n  readOnly: false,\n  required: false,\n  size: 'medium',\n  validText: '',\n  value: '23:39',\n};\n\nexport const Default = Template.bind({});\nDefault.args = defaultArgs;\n\nexport const TimeFormat = Template.bind({});\nTimeFormat.args = {\n  ...defaultArgs,\n  ...{ ampm: 'true', helperText: 'hh:mm AM/PM', placeholder: '12:00 AM' },\n};\n\nexport const AutoFormat = Template.bind({});\nAutoFormat.args = {\n  ...defaultArgs,\n  ...{\n    ampm: true,\n    value: '',\n    helperText: 'hh:mm AM/PM',\n    autoFormat: true,\n    placeholder: '12:00 AM',\n  },\n};\n\nexport const MinAndMax = Template.bind({});\nMinAndMax.args = {\n  ...defaultArgs,\n  ...{\n    min: '14:00',\n    max: '20:00',\n    helperText: 'hh:mm (min=14:00 to max=20:00)',\n    value: '14:00',\n    placeholder: '14:00',\n    autoFormat: true,\n  },\n};\n\nconst WithTimeZoneTemplate = ({\n  ampm,\n  autoFormat,\n  ariaLabel,\n  autoFocusInput,\n  disabled,\n  disableValidation,\n  errorText,\n  helperText,\n  label,\n  min,\n  max,\n  placeholder,\n  readOnly,\n  required,\n  size,\n  validText,\n  value,\n}) => html`\n  <modus-time-picker\n    ampm=${ampm}\n    auto-format=${autoFormat}\n    aria-label=${ariaLabel}\n    auto-focus-input=${autoFocusInput}\n    disable-validation=${disableValidation}\n    ?disabled=${disabled}\n    error-text=${errorText}\n    helper-text=${helperText}\n    label=${label}\n    min=${min}\n    max=${max}\n    placeholder=${placeholder}\n    read-only=${readOnly}\n    ?required=${required}\n    size=${size}\n    valid-text=${validText}\n    value=${value}>\n    <div style=\"width: 300px;padding-left: 0.5rem;\" slot=\"timeZone\">\n      <modus-select id=\"timezone\" label=\"Time Zone\" aria-label=\"Time Zone\" options-display-prop=\"display\"></modus-select>\n    </div>\n  </modus-time-picker>\n  ${setSelects()}\n`;\n\nconst setSelects = () => {\n  const tag = document.createElement('script');\n  tag.innerHTML = `\n  const modusSelect = document.querySelector('#timezone');\n  modusSelect.options = [\n    { display: 'Alpha Time Zone' },\n    { display: 'Australian Central Daylight Time' },\n    { display: 'Atlantic Daylight Time' },\n  ];\n  `;\n\n  return tag;\n};\nexport const WithTimeZone = WithTimeZoneTemplate.bind({});\nWithTimeZone.args = { ...defaultArgs, autoFormat: true };\n",
    "storybook": {
      "examples": [
        "<modus-time-picker\n    ampm=${ampm}\n    auto-format=${autoFormat}\n    aria-label=${ariaLabel}\n    auto-focus-input=${autoFocusInput}\n    disable-validation=${disableValidation}\n    ?disabled=${disabled}\n    error-text=${errorText}\n    helper-text=${helperText}\n    label=${label}\n    min=${min}\n    max=${max}\n    placeholder=${placeholder}\n    read-only=${readOnly}\n    ?required=${required}\n    size=${size}\n    valid-text=${validText}\n    value=${value}></modus-time-picker>",
        "<modus-select id=\"timezone\" label=\"Time Zone\" aria-label=\"Time Zone\" options-display-prop=\"display\"></modus-select>",
        "\n  <modus-time-picker\n    ampm=${ampm}\n    auto-format=${autoFormat}\n    aria-label=${ariaLabel}\n    auto-focus-input=${autoFocusInput}\n    disable-validation=${disableValidation}\n    ?disabled=${disabled}\n    error-text=${errorText}\n    helper-text=${helperText}\n    label=${label}\n    min=${min}\n    max=${max}\n    placeholder=${placeholder}\n    read-only=${readOnly}\n    ?required=${required}\n    size=${size}\n    valid-text=${validText}\n    value=${value}></modus-time-picker>\n",
        "\n  <modus-time-picker\n    ampm=${ampm}\n    auto-format=${autoFormat}\n    aria-label=${ariaLabel}\n    auto-focus-input=${autoFocusInput}\n    disable-validation=${disableValidation}\n    ?disabled=${disabled}\n    error-text=${errorText}\n    helper-text=${helperText}\n    label=${label}\n    min=${min}\n    max=${max}\n    placeholder=${placeholder}\n    read-only=${readOnly}\n    ?required=${required}\n    size=${size}\n    valid-text=${validText}\n    value=${value}>\n    <div style=\"width: 300px;padding-left: 0.5rem;\" slot=\"timeZone\">\n      <modus-select id=\"timezone\" label=\"Time Zone\" aria-label=\"Time Zone\" options-display-prop=\"display\"></modus-select>\n    </div>\n  </modus-time-picker>\n  ${setSelects()}\n"
      ],
      "variants": [],
      "prop_usage": {
        "style": [
          "width: 300px;padding-left: 0.5rem;"
        ],
        "slot": [
          "timeZone"
        ],
        "id": [
          "timezone"
        ],
        "label": [
          "Time Zone"
        ],
        "prop": [
          "display"
        ]
      }
    },
    "tag_name": "modus-time-picker"
  },
  "modus-toast": {
    "props": [
      {
        "name": "ariaLabel",
        "description": "/** (optional) The toast's aria-label. */",
        "type": "string | null"
      },
      {
        "name": "dismissible",
        "description": "/** (optional) The toast's aria-label. */",
        "type": "boolean"
      },
      {
        "name": "role",
        "description": "/** (optional) The toast's aria-label. */",
        "type": "string | null"
      },
      {
        "name": "type",
        "description": "/** (optional) The toast's aria-label. */",
        "type": "'danger' | 'dark' | 'default' | 'primary' | 'secondary' | 'success' | 'warning'"
      }
    ],
    "events": [
      "dismissClick"
    ],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-toast-storybook-docs.mdx ---\n\nimport { Anchor } from '@storybook/addon-docs';\n\n# Toast\n\n---\n\n[Modus Toast](https://modus.trimble.com/components/web/toasts/) web components are referenced using the `<modus-toast>` custom HTML element.\n\n### Primary\n\n<modus-toast type=\"primary\">Primary</modus-toast>\n\n<Anchor storyId=\"components-toast--primary\" />\n\n### Secondary\n\n<modus-toast type=\"secondary\">Secondary</modus-toast>\n\n<Anchor storyId=\"components-toast--secondary\" />\n\n### Success\n\n<modus-toast type=\"success\">Success</modus-toast>\n\n<Anchor storyId=\"components-toast--success\" />\n\n### Danger\n\n<modus-toast type=\"danger\">Danger</modus-toast>\n\n<Anchor storyId=\"components-toast--danger\" />\n\n### Retained Toast\n\n<modus-toast type=\"primary\" retain-element=\"true\">Retained Toast</modus-toast>\n\n<Anchor storyId=\"components-toast--retained-toast\" />\n\n```html\n<modus-toast type=\"primary\">Primary</modus-toast>\n<modus-toast type=\"secondary\">Secondary</modus-toast>\n<modus-toast type=\"success\">Success</modus-toast>\n<modus-toast type=\"danger\">Danger</modus-toast>\n<modus-toast type=\"primary\" retain-element=\"true\">Retained Toast</modus-toast>\n```\n\n### Properties\n\n| Name             | Description                                                            | Type      | Options                                      | Default Value |\n| ---------------- | ---------------------------------------------------------------------- | --------- | -------------------------------------------- | ------------- |\n| `aria-label`     | The toast's aria-label                                                 | `string`  |                                              |               |\n| `delay`          | Time taken to dismiss the toast                                        | `number`  |                                              | 15000         |\n| `dismissible`    | Whether the toast is dismissible                                       | `boolean` |                                              | false         |\n| `retain-element` | Whether to retain the toast's element in the DOM after it is dismissed | `boolean` |                                              | false         |\n| `role`           | Role taken by the toast                                                | `string`  | 'alert', 'log', 'marquee', 'status', 'timer' | 'status'      |\n| `show-icon`      | Whether to show the toast's                                            | `boolean` |                                              | false         |\n| `type`           | The toast's type                                                       | `string`  | 'danger', 'primary', 'secondary', 'success', | 'primary'     |\n\n### DOM Events\n\n| Name           | Description            | Emits |\n| -------------- | ---------------------- | ----- |\n| `dismissClick` | Fires on dismiss click |       |\n\n### Accessibility\n\n- Toast has `role` of `status`.\n- Toast gets an `aria-label` provided by the `aria-label` property input.\n",
    "storybook_content": "\n\n--- modus-toast.stories.tsx ---\n\n// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-toast-storybook-docs.mdx';\nimport { html } from 'lit-html';\nimport { withActions } from '@storybook/addon-actions/decorator';\n\nexport default {\n  title: 'Components/Toast',\n  argTypes: {\n    ariaLabel: {\n      name: 'aria-label',\n      description: \"The toast's aria-label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    delay: {\n      description: 'Time taken to dismiss the toast',\n      table: {\n        defaultValue: { summary: 15000 },\n        type: { summary: 'number' },\n      },\n    },\n    dismissible: {\n      description: 'Whether the toast is dismissible, renders the close icon',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    retainElement: {\n      name: 'retain-element',\n      description: 'Whether to retain the element in the DOM after it has been dismissed',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    role: {\n      options: ['alert', 'log', 'marquee', 'status', 'timer'],\n      type: 'select',\n      description: 'Role taken by the toast',\n      table: {\n        defaultValue: { summary: 'status' },\n        type: { summary: '\"alert\" | \"log\" | \"marquee\" | \"status\" | \"timer\"' },\n      },\n    },\n    showIcon: {\n      name: 'show-icon',\n      description: \"The toast's message\",\n      table: {\n        defaultValue: { summary: true },\n        type: { summary: 'boolean' },\n      },\n    },\n    type: {\n      options: ['danger', 'primary', 'secondary', 'success'],\n      type: 'select',\n      description: 'The type of the toast',\n      table: {\n        defaultValue: { summary: `'default'` },\n        type: {\n          summary: `'danger' | 'primary' | 'secondary' | 'success'`,\n        },\n      },\n    },\n  },\n  parameters: {\n    actions: {\n      handles: ['dismissClick'],\n    },\n    controls: { expanded: true, sort: 'requiredFirst' },\n    docs: {\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n    },\n  },\n  decorators: [withActions],\n};\n\nconst Template = ({ ariaLabel, dismissible, showIcon, retainElement, role, type, delay }) => html`\n  <modus-toast\n    aria-label=${ariaLabel}\n    delay=${delay}\n    dismissible=${dismissible}\n    show-icon=${showIcon}\n    retain-element=${retainElement}\n    role=${role}\n    type=${type}\n    >Toast!</modus-toast\n  >\n`;\n\nexport const Primary = Template.bind({});\nPrimary.args = {\n  ariaLabel: '',\n  delay: 0,\n  dismissible: false,\n  retainElement: false,\n  role: 'status',\n  showIcon: true,\n  type: 'primary',\n};\n\nexport const Secondary = Template.bind({});\nSecondary.args = {\n  ariaLabel: '',\n  delay: 0,\n  dismissible: false,\n  retainElement: false,\n  role: 'status',\n  showIcon: true,\n  type: 'secondary',\n};\n\nexport const Success = Template.bind({});\nSuccess.args = {\n  ariaLabel: '',\n  delay: 0,\n  dismissible: false,\n  retainElement: false,\n  role: 'status',\n  showIcon: true,\n  type: 'success',\n};\n\nexport const Danger = Template.bind({});\nDanger.args = {\n  ariaLabel: '',\n  delay: 0,\n  dismissible: false,\n  retainElement: false,\n  role: 'status',\n  showIcon: true,\n  type: 'danger',\n};\n\nexport const RetainedToast = Template.bind({});\nRetainedToast.args = {\n  ariaLabel: '',\n  delay: 2000,\n  dismissible: false,\n  retainElement: true,\n  role: 'status',\n  showIcon: true,\n  type: 'primary',\n};\n",
    "storybook": {
      "examples": [
        "<modus-toast\n    aria-label=${ariaLabel}\n    delay=${delay}\n    dismissible=${dismissible}\n    show-icon=${showIcon}\n    retain-element=${retainElement}\n    role=${role}\n    type=${type}\n    >Toast!</modus-toast\n  >",
        "\n  <modus-toast\n    aria-label=${ariaLabel}\n    delay=${delay}\n    dismissible=${dismissible}\n    show-icon=${showIcon}\n    retain-element=${retainElement}\n    role=${role}\n    type=${type}\n    >Toast!</modus-toast\n  >\n"
      ],
      "variants": [],
      "prop_usage": {}
    },
    "tag_name": "modus-toast"
  },
  "modus-toolbar": {
    "props": [],
    "events": [],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-toolbar-storybook-docs.mdx ---\n\nimport { Story } from '@storybook/blocks';\nimport * as Toolbar from './modus-toolbar.stories.tsx';\n\n# Toolbar\n\nThe `modus-toolbar` component provides a customizable Toolbar that can be positioned at the bottom of the screen, other positions are a work in progress. It's designed to offer users quick access to common actions or tools.\n\n### Default\n\n<Story of={Toolbar.Default} height=\"100px\" />\n\n```html\n<modus-toolbar>\n  <modus-button>Button 1</modus-button>\n  <modus-button>Button 2</modus-button>\n  <modus-button>Button 3</modus-button>\n</modus-toolbar>\n```\n\n### Icon Only\n\n<Story of={Toolbar.IconOnly} height=\"100px\" />\n\n```html\n<modus-toolbar>\n  <modus-tooltip text=\"undo\" position=\"top\">\n    <modus-button icon-only=\"undo\"></modus-button>\n  </modus-tooltip>\n  <modus-tooltip text=\"redo\" position=\"top\">\n    <modus-button icon-only=\"redo\"></modus-button>\n  </modus-tooltip>\n  <modus-tooltip text=\"expand\" position=\"top\">\n    <modus-button icon-only=\"expand\"></modus-button>\n  </modus-tooltip>\n  <modus-tooltip text=\"collapse\" position=\"top\">\n    <modus-button icon-only=\"collapse\"></modus-button>\n  </modus-tooltip>\n  <modus-divider></modus-divider>\n  <modus-tooltip text=\"window_dock_undock\" position=\"top\">\n    <modus-button icon-only=\"window_dock_undock\"></modus-button>\n  </modus-tooltip>\n</modus-toolbar>\n```\n\n## Properties\n\n| Property    | Attribute    | Description                     | Type      | Default |\n| ----------- | ------------ | ------------------------------- | --------- | ------- |\n| `ariaLabel` | `aria-label` | The Toolbar's aria-label        | `string`  |         |\n| `disabled`  | `disabled`   | Whether the Toolbar is disabled | `boolean` | `false` |\n\n### Accessibility\n\n- Toolbar gets `role=\"toolbar\"`.\n- Toolbar gets an `aria-label` provided by the `aria-label` property input.\n- Toolbar button gets an `aria-label` provided by the `aria-label` property input.\n",
    "storybook_content": "\n\n--- modus-toolbar.stories.tsx ---\n\nimport { html } from 'lit-html';\nimport docs from './modus-toolbar-storybook-docs.mdx';\nimport { withActions } from '@storybook/addon-actions/decorator';\n\nexport default {\n  title: 'Components/Toolbar',\n  component: 'modus-toolbar',\n  argTypes: {\n    ariaLabel: {\n      name: 'aria-label',\n      description: \"The Toolbar's aria-label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    disabled: {\n      name: 'disabled',\n      description: 'Whether the Toolbar is disabled',\n      table: {\n        type: { summary: 'boolean' },\n        defaultValue: { summary: false },\n      },\n    },\n  },\n  parameters: {\n    actions: {\n      handles: ['buttonClick'],\n    },\n    controls: { expanded: true, sort: 'requiredFirst' },\n    docs: {\n      page: docs,\n    },\n  },\n  decorators: [withActions],\n};\n\nconst Template = ({ ariaLabel, disabled }) => html`\n  <modus-toolbar .disabled=${disabled} aria-label=${ariaLabel}>\n    <modus-button>Button 1</modus-button>\n    <modus-button>Button 2</modus-button>\n    <modus-button>Button 3</modus-button>\n  </modus-toolbar>\n`;\n\nconst IconOnlyTemplate = ({ ariaLabel, disabled }) => html`\n  <modus-toolbar .disabled=${disabled} aria-label=${ariaLabel}>\n    <modus-tooltip text=\"Undo\" position=\"top\">\n      <modus-button icon-only=\"undo\"></modus-button>\n    </modus-tooltip>\n    <modus-tooltip text=\"Redo\" position=\"top\">\n      <modus-button icon-only=\"redo\"></modus-button>\n    </modus-tooltip>\n    <modus-tooltip text=\"Expand\" position=\"top\">\n      <modus-button icon-only=\"expand\"></modus-button>\n    </modus-tooltip>\n    <modus-tooltip text=\"Collapse\" position=\"top\">\n      <modus-button icon-only=\"collapse\"></modus-button>\n    </modus-tooltip>\n    <modus-divider></modus-divider>\n    <modus-tooltip text=\"Window Dock / Undock\" position=\"top\">\n      <modus-button icon-only=\"window_dock_undock\"></modus-button>\n    </modus-tooltip>\n  </modus-toolbar>\n`;\n\nexport const Default = Template.bind({});\nDefault.args = {\n  ariaLabel: 'Toolbar',\n  disabled: false,\n  tabIndex: 0,\n};\n\nexport const IconOnly = IconOnlyTemplate.bind({});\nIconOnly.args = {\n  ariaLabel: 'Toolbar',\n  disabled: false,\n  tabIndex: 0,\n};\n",
    "storybook": {
      "examples": [
        "<modus-button>Button 1</modus-button>",
        "<modus-button>Button 2</modus-button>",
        "<modus-button>Button 3</modus-button>",
        "<modus-button icon-only=\"undo\"></modus-button>",
        "<modus-button icon-only=\"redo\"></modus-button>"
      ],
      "variants": [],
      "prop_usage": {
        "text": [
          "Undo",
          "Redo",
          "Expand",
          "Collapse",
          "Window Dock / Undock"
        ],
        "position": [
          "top"
        ],
        "only": [
          "undo",
          "redo",
          "expand",
          "collapse",
          "window_dock_undock"
        ]
      }
    },
    "tag_name": "modus-toolbar"
  },
  "modus-tooltip": {
    "props": [
      {
        "name": "ariaLabel",
        "description": "/** (optional) The tooltip's aria-label. */",
        "type": "string | null"
      },
      {
        "name": "position",
        "description": "/** (optional) The tooltip's aria-label. */",
        "type": "ModusToolTipPlacement"
      },
      {
        "name": "text",
        "description": "/** (optional) The tooltip's aria-label. */",
        "type": "string"
      },
      {
        "name": "disabled",
        "description": "/** (optional) The tooltip's aria-label. */",
        "type": "boolean"
      }
    ],
    "events": [],
    "slots": [],
    "default_values": {},
    "documentation": "\n\n--- modus-tooltip-storybook-docs.mdx ---\n\n# Tooltip\n\n---\n\n[Modus Tooltip](https://modus.trimble.com/components/web/tooltips/) web components display the completion progress of a task. They are referenced using the `<modus-tooltip>` custom HTML element.\nThis component utilizes the slot element, allowing you to wrap anything with a tooltip.\n\n### Default\n\n<modus-tooltip text=\"Tooltip text...\" position=\"right\">\n  <modus-button>Button</modus-button>\n</modus-tooltip>\n\n```html\n<modus-tooltip text=\"Tooltip text...\" position=\"right\">\n  <modus-button>Button</modus-button>\n</modus-tooltip>\n```\n\n### Properties\n\n| Name         | Description                                               | Type      | Options                          | Default Value | Required |\n| ------------ | --------------------------------------------------------- | --------- | -------------------------------- | ------------- | -------- |\n| `aria-label` | The tooltip's aria-label                                  |           |                                  |               |          |\n| `disabled`   | (optional) Hide the tooltip                               | `boolean` |                                  | false         |          |\n| `text`       | The tooltip's text                                        | `string`  |                                  |               |          |\n| `position`   | The tooltip's position relative to the item it's wrapping | `string`  | 'bottom', 'left', 'right', 'top' | 'top'         |          |\n\n### Accessibility\n\n- Tooltip has `role` of `tooltip`.\n- Tooltip gets an `aria-label` provided by the `aria-label` property input.\n",
    "storybook_content": "\n\n--- modus-tooltip.stories.tsx ---\n\n// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-tooltip-storybook-docs.mdx';\nimport { html } from 'lit-html';\n\nexport default {\n  title: 'Components/Tooltip',\n  argTypes: {\n    ariaLabel: {\n      name: 'aria-label',\n      description: \"The tooltip's aria-label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    disabled: {\n      description: 'Hide the tooltip',\n      table: {\n        type: { summary: 'boolean' },\n      },\n    },\n    position: {\n      options: ['bottom', 'left', 'right', 'top'],\n      type: 'select',\n      description: \"The tooltip's position relative to the item it's wrapping\",\n      table: {\n        defaultValue: { summary: `'top'` },\n        type: { summary: `'bottom' | 'left' | 'right' | 'top'` },\n      },\n    },\n    text: {\n      description: \"The tooltip's text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n  },\n  parameters: {\n    controls: { expanded: true },\n    docs: {\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n    },\n    layout: 'centered',\n  },\n};\n\nexport const Default = ({ ariaLabel, position, text, disabled }) => html`\n  <modus-tooltip aria-label=${ariaLabel} position=${position} text=${text} ?disabled=${disabled}>\n    <modus-button>Button</modus-button>\n  </modus-tooltip>\n`;\nDefault.args = {\n  ariaLabel: '',\n  position: 'bottom',\n  text: 'Tooltip text...',\n  disabled: false,\n};\n",
    "storybook": {
      "examples": [
        "<modus-button>Button</modus-button>",
        "\n  <modus-tooltip aria-label=${ariaLabel} position=${position} text=${text} ?disabled=${disabled}>\n    <modus-button>Button</modus-button>\n  </modus-tooltip>\n"
      ],
      "variants": [],
      "prop_usage": {}
    },
    "tag_name": "modus-tooltip"
  },
  "modus-utility-panel": {
    "props": [
      {
        "name": "targetContent",
        "description": "/** The panel is expanded or closed */",
        "type": "string"
      }
    ],
    "events": [
      "panelOpened",
      "panelClosed"
    ],
    "slots": [
      "header",
      "body",
      "footer"
    ],
    "default_values": {},
    "documentation": "\n\n--- modus-utility-panel-storybook-docs.mdx ---\n\nimport { Story } from '@storybook/blocks';\nimport * as UtilityPanel from './modus-utility-panel.stories.tsx';\n\n# Utility Panel\n\n---\n\nThe `modus-utility-panel` component is a versatile panel that can be used for various purposes such as displaying\nadditional information, hosting forms, or any content that complements the main content of the page.\nIt has header, body, and footer slots for adding content. It supports both overlay and push content modes.\n\n<Story of={UtilityPanel.Default} />\n\n```html\n    <div id=\"defaultTemplate\">\n      <div\n        style=\"width: 100%; align-items: center; height: 56px; box-shadow: 0 0 2px var(--modus-secondary)!important; margin-top: 50px;\">\n        <modus-navbar\n          id=\"navbar\"\n          show-main-menu\n          .buttons=${[\n            {\n              id: 'addMenu',\n              icon: 'add',\n              tooltip: {\n                text: 'Add',\n              },\n            },\n          ]}>\n        </modus-navbar>\n      </div>\n  <div\n    id=\"container\"\n    style=\"display:flex; min-height:500px; overflow:hidden; position: relative; box-shadow: 0 0 2px var(--modus-secondary)!important;\">\n    <modus-utility-panel\n      target-content=\"#panelcontent\"\n      expanded=\"${expanded}\"\n      push-content=\"${pushContent}\"\n      target-content=\"${targetContent}\">\n      <span slot=\"header\">Utility Panel Header</span>\n      <div slot=\"body\">Content of the utility panel goes here.</div>\n      <span slot=\"footer\">Utility Panel Footer</span>\n    </modus-utility-panel>\n\n    <div id=\"panelcontent\" style=\"padding: 10px;\">\n      <div id=\"overview\">\n        <p>\n          The side navigation of an application provides context through accessible menu options and positions a consistent\n          component to connect to various pages in the application. The side navigation is a collapsible side content of the\n          site\u2019s pages. It is located alongside the page\u2019s primary content. The component is designed to add side content to\n          a fullscreen application. It is activated through the \u201chamburger\u201d menu in the Navbar.\n        </p>\n      </div>\n    </div>\n  </div>\n</div>\n<script>\n  const element = document.querySelector('modus-navbar');\n  element.buttons = [{ id: 'addMenu', icon: 'add' }];\n  document.addEventListener('buttonClick', (e) => {\n    const panel = document.querySelector('modus-utility-panel');\n    panel.expanded = !panel.expanded;\n  });\n</script>\n```\n\n## Properties\n\n| Property        | Description                                                                                                                   | Type      | Default |\n| --------------- | ----------------------------------------------------------------------------------------------------------------------------- | --------- | ------- |\n| `expanded`      | Controls the expanded state of the utility panel. When `true`, the panel is visible.                                          | `boolean` | false   |\n| `pushContent`   | Determines whether the utility panel should push the main content to the right (`true`) or overlay the content (`false`).     | `boolean` | false   |\n| `targetContent` | Specifies the selector for the page's content that will be affected by the utility panel based on the `pushContent` property. | `string`  |         |\n\n## CSS Custom Properties\n\nMore info on CSS Custom Properties: [Customizing Components with Custom Properties](https://stenciljs.com/docs/styling#customizing-components-with-custom-properties)\n\n| Property          | Description                                    |\n| ----------------- | ---------------------------------------------- |\n| `--panel-padding` | Padding of the utility panel, defaults to 1rem |\n",
    "storybook_content": "\n\n--- modus-utility-panel.stories.tsx ---\n\nimport docs from './modus-utility-panel-storybook-docs.mdx';\nimport { html } from 'lit-html';\nimport { useEffect } from '@storybook/preview-api';\nimport { withActions } from '@storybook/addon-actions/decorator';\n\nexport default {\n  title: 'Components/Utility Panel',\n  argTypes: {\n    ariaLabel: {\n      description: 'The aria label for the panel',\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    expanded: {\n      description: 'The expanded state of side navigation panel and items',\n      table: {\n        type: { summary: 'boolean' },\n      },\n    },\n    pushContent: {\n      description: 'Specify if the side navigation should push the content to the right or overlay the content',\n      table: {\n        type: { summary: 'boolean' },\n      },\n    },\n    targetContent: {\n      name: 'target-content',\n      description:\n        \"Specify the selector for the page's content for which paddings and margins will be set by side navigation based on the `mode`\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n  },\n  parameters: {\n    actions: {\n      handles: ['helpOpen'],\n    },\n    docs: {\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n    },\n    controls: { expanded: true, sort: 'requiredFirst' },\n    viewMode: 'docs',\n  },\n  decorators: [withActions],\n};\n\nconst DefaultTemplate = ({ ariaLabel, expanded, targetContent, pushContent }) => {\n  return html`\n    <div id=\"defaultTemplate\">\n      <div\n        style=\"width: 100%; align-items: center; height: 56px; box-shadow: 0 0 2px var(--modus-secondary)!important; margin-top: 50px;\">\n        <modus-navbar\n          id=\"navbar\"\n          show-main-menu\n          .buttons=${[\n            {\n              id: 'addMenu',\n              icon: 'add',\n              tooltip: {\n                text: 'Add',\n              },\n            },\n          ]}>\n        </modus-navbar>\n      </div>\n\n      <div\n        id=\"container\"\n        style=\"display:flex; min-height:500px; overflow:hidden; position: relative; box-shadow: 0 0 2px var(--modus-secondary)!important;\">\n        <modus-utility-panel\n          aria-label=${ariaLabel}\n          target-content=\"#panelcontent\"\n          expanded=${expanded}\n          push-content=${pushContent}\n          target-content=${targetContent}>\n          <span slot=\"header\">Utility Panel Header</span>\n          <div slot=\"body\">Content of the utility panel goes here.</div>\n          <span slot=\"footer\">Utility Panel Footer</span>\n        </modus-utility-panel>\n\n        <div id=\"panelcontent\" style=\"padding: 10px;\">\n          <div id=\"overview\">\n            <p>\n              The side navigation of an application provides context through accessible menu options and positions a\n              consistent component to connect to various pages in the application. The side navigation is a collapsible side\n              content of the site\u2019s pages. It is located alongside the page\u2019s primary content. The component is designed to\n              add side content to a fullscreen application. It is activated through the \u201chamburger\u201d menu in the Navbar.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  `;\n};\n\nexport const Default = DefaultTemplate.bind({});\n\nDefault.args = {\n  ariaLabel: 'Utility Panel',\n  expanded: false,\n  pushContent: true,\n  targetContent: '#panelcontent',\n};\n\nDefault.decorators = [\n  (Story) => {\n    useEffect(() => {\n      const handleHelpOpen = () => {\n        const panel = document.querySelector('modus-utility-panel');\n        if (panel) {\n          const isExpanded = panel.getAttribute('expanded') === 'true';\n          panel.setAttribute('expanded', (!isExpanded).toString());\n        }\n      };\n      document.addEventListener('buttonClick', handleHelpOpen);\n\n      return () => {\n        document.removeEventListener('buttonClick', handleHelpOpen);\n      };\n    }, []);\n\n    return Story();\n  },\n];\n",
    "storybook": {
      "examples": [
        "<modus-navbar\n          id=\"navbar\"\n          show-main-menu\n          .buttons=${[\n            {\n              id: 'addMenu',\n              icon: 'add',\n              tooltip: {\n                text: 'Add',\n              },\n            },\n          ]}>\n        </modus-navbar>",
        "\n    <div id=\"defaultTemplate\">\n      <div\n        style=\"width: 100%; align-items: center; height: 56px; box-shadow: 0 0 2px var(--modus-secondary)!important; margin-top: 50px;\">\n        <modus-navbar\n          id=\"navbar\"\n          show-main-menu\n          .buttons=${[\n            {\n              id: 'addMenu',\n              icon: 'add',\n              tooltip: {\n                text: 'Add',\n              },\n            },\n          ]}>\n        </modus-navbar>\n      </div>\n\n      <div\n        id=\"container\"\n        style=\"display:flex; min-height:500px; overflow:hidden; position: relative; box-shadow: 0 0 2px var(--modus-secondary)!important;\">\n        <modus-utility-panel\n          aria-label=${ariaLabel}\n          target-content=\"#panelcontent\"\n          expanded=${expanded}\n          push-content=${pushContent}\n          target-content=${targetContent}>\n          <span slot=\"header\">Utility Panel Header</span>\n          <div slot=\"body\">Content of the utility panel goes here.</div>\n          <span slot=\"footer\">Utility Panel Footer</span>\n        </modus-utility-panel>\n\n        <div id=\"panelcontent\" style=\"padding: 10px;\">\n          <div id=\"overview\">\n            <p>\n              The side navigation of an application provides context through accessible menu options and positions a\n              consistent component to connect to various pages in the application. The side navigation is a collapsible side\n              content of the site\u2019s pages. It is located alongside the page\u2019s primary content. The component is designed to\n              add side content to a fullscreen application. It is activated through the \u201chamburger\u201d menu in the Navbar.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  "
      ],
      "variants": [],
      "prop_usage": {
        "id": [
          "defaultTemplate",
          "navbar",
          "container",
          "panelcontent",
          "overview"
        ],
        "style": [
          "width: 100%; align-items: center; height: 56px; box-shadow: 0 0 2px var(--modus-secondary)!important; margin-top: 50px;",
          "display:flex; min-height:500px; overflow:hidden; position: relative; box-shadow: 0 0 2px var(--modus-secondary)!important;",
          "padding: 10px;"
        ],
        "content": [
          "#panelcontent"
        ],
        "slot": [
          "header",
          "body",
          "footer"
        ]
      }
    },
    "tag_name": "modus-utility-panel"
  }
}
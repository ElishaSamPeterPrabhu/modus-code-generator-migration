{
  "component_name": "modus-wc-badge",
  "version": "v2",
  "props": [
    {
      "name": "color",
      "description": "/**\n * A customizable badge component used to create badges with different sizes, types, and colors.\n *\n * The component supports a `<slot>` for injecting content within the badge.\n */\n@Component({\n  tag: 'modus-wc-badge',\n  styleUrl: 'modus-wc-badge.scss',\n  shadow: false,\n})\nexport class ModusWcBadge {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The color variant of the badge. */",
      "type": "| 'primary'\n    | 'secondary'\n    | 'tertiary'\n    | 'high-contrast'\n    | 'success'\n    | 'warning'\n    | 'danger'"
    },
    {
      "name": "customClass",
      "description": "/**\n * A customizable badge component used to create badges with different sizes, types, and colors.\n *\n * The component supports a `<slot>` for injecting content within the badge.\n */\n@Component({\n  tag: 'modus-wc-badge',\n  styleUrl: 'modus-wc-badge.scss',\n  shadow: false,\n})\nexport class ModusWcBadge {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The color variant of the badge. */",
      "type": "string"
    },
    {
      "name": "size",
      "description": "/**\n * A customizable badge component used to create badges with different sizes, types, and colors.\n *\n * The component supports a `<slot>` for injecting content within the badge.\n */\n@Component({\n  tag: 'modus-wc-badge',\n  styleUrl: 'modus-wc-badge.scss',\n  shadow: false,\n})\nexport class ModusWcBadge {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The color variant of the badge. */",
      "type": "ModusSize"
    },
    {
      "name": "variant",
      "description": "/**\n * A customizable badge component used to create badges with different sizes, types, and colors.\n *\n * The component supports a `<slot>` for injecting content within the badge.\n */\n@Component({\n  tag: 'modus-wc-badge',\n  styleUrl: 'modus-wc-badge.scss',\n  shadow: false,\n})\nexport class ModusWcBadge {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The color variant of the badge. */",
      "type": "'counter' | 'filled' | 'outlined' | 'text'"
    }
  ],
  "events": [],
  "slots": [],
  "default_values": {
    "color": "'primary'",
    "customClass": "''",
    "size": "'md'",
    "variant": "'filled'"
  },
  "documentation": "\n\n--- modus-wc-badge.stories.ts ---\n\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { ModusSize } from '../types';\n\ninterface BadgeArgs {\n  color:\n    | 'primary'\n    | 'secondary'\n    | 'tertiary'\n    | 'high-contrast'\n    | 'success'\n    | 'warning'\n    | 'danger';\n  'custom-class'?: string;\n  size: ModusSize;\n  variant: 'counter' | 'filled' | 'outlined' | 'text';\n}\n\nconst meta: Meta<BadgeArgs> = {\n  title: 'Components/Badge',\n  component: 'modus-wc-badge',\n  args: {\n    color: 'primary',\n    size: 'md',\n    variant: 'filled',\n  },\n  argTypes: {\n    color: {\n      control: { type: 'select' },\n      options: [\n        'primary',\n        'secondary',\n        'tertiary',\n        'high-contrast',\n        'success',\n        'warning',\n        'danger',\n      ],\n    },\n    size: {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg'],\n    },\n    variant: {\n      control: { type: 'select' },\n      options: ['counter', 'filled', 'outlined', 'text'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<BadgeArgs>;\n\nconst Template: Story = {\n  render: (args) => {\n    // prettier-ignore\n    return html`\n<modus-wc-badge\n  color=\"${args.color}\"\n  custom-class=\"${ifDefined(args['custom-class'])}\"\n  size=\"${args.size}\"\n  variant=\"${args.variant}\"\n>\n  Badge\n</modus-wc-badge>\n    `;\n  },\n};\n\nexport const Default: Story = {\n  ...Template,\n};\n\nexport const WithIcon: Story = {\n  render: () => {\n    // prettier-ignore\n    return html`\n<style>\n  .modus-wc-icon {\n    padding-inline-end: 4px;\n  }\n</style>\n<modus-wc-badge>\n  <modus-wc-icon decorative name=\"check\" size=\"xs\"></modus-wc-icon>\n  Item\n</modus-wc-badge>\n    `;\n  },\n};\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - The \\`dark\\` color option is now \\`high-contrast\\`\n  - The \\`type\\` prop is now \\`variant\\` and \\`default\\` type is now \\`filled\\`\n  - Size values have changed from verbose names (\\`small\\`, \\`medium\\`, \\`large\\`) to abbreviations (\\`sm\\`, \\`md\\`, \\`lg\\`).\n\n#### Prop Mapping\n\n| 1.0 Prop   | 2.0 Prop   | Notes                                                       |\n|------------|------------|-------------------------------------------------------------|\n| aria-label | aria-label |                                                             |\n| color      | color      | \\`dark\\` is now \\`high-contrast\\`                           |\n| size       | size       | \\`small\\` \u2192 \\`sm\\`, \\`medium\\` \u2192 \\`md\\`, \\`large\\` \u2192 \\`lg\\` |\n| type       | variant    | \\`default\\` is now \\`filled\\`                               |\n        `,\n      },\n    },\n    // To hide the actual story rendering and only show docs:\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  // Simple render function or leave it empty\n  render: () => html`<div></div>`,\n};\n",
  "storybook": {
    "examples": [
      "<modus-wc-badge\n  color=\"${args.color}\"\n  custom-class=\"${ifDefined(args['custom-class'])}\"\n  size=\"${args.size}\"\n  variant=\"${args.variant}\"\n>\n  Badge\n</modus-wc-badge>",
      "<modus-wc-icon decorative name=\"check\" size=\"xs\"></modus-wc-icon>",
      "\n<modus-wc-badge\n  color=\"${args.color}\"\n  custom-class=\"${ifDefined(args['custom-class'])}\"\n  size=\"${args.size}\"\n  variant=\"${args.variant}\"\n>\n  Badge\n</modus-wc-badge>\n    ",
      "\n<style>\n  .modus-wc-icon {\n    padding-inline-end: 4px;\n  }\n</style>\n<modus-wc-badge>\n  <modus-wc-icon decorative name=\"check\" size=\"xs\"></modus-wc-icon>\n  Item\n</modus-wc-badge>\n    "
    ],
    "variants": [
      "${args.variant}"
    ],
    "prop_usage": {
      "color": [
        "${args.color}"
      ],
      "class": [
        "${ifDefined(args["
      ],
      "size": [
        "${args.size}",
        "xs"
      ],
      "variant": [
        "${args.variant}"
      ],
      "name": [
        "check"
      ]
    }
  },
  "tag_name": "modus-wc-badge"
}
{
  "component_name": "modus-wc-textarea",
  "version": "v2",
  "props": [
    {
      "name": "autoCorrect",
      "description": "/**\n * A customizable textarea component.\n */\n@Component({\n  tag: 'modus-wc-textarea',\n  styleUrl: 'modus-wc-textarea.scss',\n  shadow: false,\n})\nexport class ModusWcTextarea {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic correction in inputted text. Support by browser varies. */",
      "type": ": 'on' | 'off'"
    },
    {
      "name": "bordered",
      "description": "/**\n * A customizable textarea component.\n */\n@Component({\n  tag: 'modus-wc-textarea',\n  styleUrl: 'modus-wc-textarea.scss',\n  shadow: false,\n})\nexport class ModusWcTextarea {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic correction in inputted text. Support by browser varies. */",
      "type": ": boolean"
    },
    {
      "name": "customClass",
      "description": "/**\n * A customizable textarea component.\n */\n@Component({\n  tag: 'modus-wc-textarea',\n  styleUrl: 'modus-wc-textarea.scss',\n  shadow: false,\n})\nexport class ModusWcTextarea {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic correction in inputted text. Support by browser varies. */",
      "type": ": string"
    },
    {
      "name": "disabled",
      "description": "/**\n * A customizable textarea component.\n */\n@Component({\n  tag: 'modus-wc-textarea',\n  styleUrl: 'modus-wc-textarea.scss',\n  shadow: false,\n})\nexport class ModusWcTextarea {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic correction in inputted text. Support by browser varies. */",
      "type": ": boolean"
    },
    {
      "name": "enterkeyhint",
      "description": "/**\n * A customizable textarea component.\n */\n@Component({\n  tag: 'modus-wc-textarea',\n  styleUrl: 'modus-wc-textarea.scss',\n  shadow: false,\n})\nexport class ModusWcTextarea {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic correction in inputted text. Support by browser varies. */",
      "type": ":\n    | 'enter'\n    | 'done'\n    | 'go'\n    | 'next'\n    | 'previous'\n    | 'search'\n    | 'send'"
    },
    {
      "name": "feedback",
      "description": "/**\n * A customizable textarea component.\n */\n@Component({\n  tag: 'modus-wc-textarea',\n  styleUrl: 'modus-wc-textarea.scss',\n  shadow: false,\n})\nexport class ModusWcTextarea {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic correction in inputted text. Support by browser varies. */",
      "type": ": IInputFeedbackProp"
    },
    {
      "name": "inputId",
      "description": "/**\n * A customizable textarea component.\n */\n@Component({\n  tag: 'modus-wc-textarea',\n  styleUrl: 'modus-wc-textarea.scss',\n  shadow: false,\n})\nexport class ModusWcTextarea {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic correction in inputted text. Support by browser varies. */",
      "type": ": string"
    },
    {
      "name": "inputTabIndex",
      "description": "/**\n * A customizable textarea component.\n */\n@Component({\n  tag: 'modus-wc-textarea',\n  styleUrl: 'modus-wc-textarea.scss',\n  shadow: false,\n})\nexport class ModusWcTextarea {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic correction in inputted text. Support by browser varies. */",
      "type": ": number"
    },
    {
      "name": "label",
      "description": "/**\n * A customizable textarea component.\n */\n@Component({\n  tag: 'modus-wc-textarea',\n  styleUrl: 'modus-wc-textarea.scss',\n  shadow: false,\n})\nexport class ModusWcTextarea {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic correction in inputted text. Support by browser varies. */",
      "type": ": string"
    },
    {
      "name": "maxLength",
      "description": "/**\n * A customizable textarea component.\n */\n@Component({\n  tag: 'modus-wc-textarea',\n  styleUrl: 'modus-wc-textarea.scss',\n  shadow: false,\n})\nexport class ModusWcTextarea {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic correction in inputted text. Support by browser varies. */",
      "type": ": number"
    },
    {
      "name": "minLength",
      "description": "/**\n * A customizable textarea component.\n */\n@Component({\n  tag: 'modus-wc-textarea',\n  styleUrl: 'modus-wc-textarea.scss',\n  shadow: false,\n})\nexport class ModusWcTextarea {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic correction in inputted text. Support by browser varies. */",
      "type": ": number"
    },
    {
      "name": "name",
      "description": "/**\n * A customizable textarea component.\n */\n@Component({\n  tag: 'modus-wc-textarea',\n  styleUrl: 'modus-wc-textarea.scss',\n  shadow: false,\n})\nexport class ModusWcTextarea {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic correction in inputted text. Support by browser varies. */",
      "type": ": string"
    },
    {
      "name": "placeholder",
      "description": "/**\n * A customizable textarea component.\n */\n@Component({\n  tag: 'modus-wc-textarea',\n  styleUrl: 'modus-wc-textarea.scss',\n  shadow: false,\n})\nexport class ModusWcTextarea {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic correction in inputted text. Support by browser varies. */",
      "type": ": string"
    },
    {
      "name": "readonly",
      "description": "/**\n * A customizable textarea component.\n */\n@Component({\n  tag: 'modus-wc-textarea',\n  styleUrl: 'modus-wc-textarea.scss',\n  shadow: false,\n})\nexport class ModusWcTextarea {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic correction in inputted text. Support by browser varies. */",
      "type": ": boolean"
    },
    {
      "name": "required",
      "description": "/**\n * A customizable textarea component.\n */\n@Component({\n  tag: 'modus-wc-textarea',\n  styleUrl: 'modus-wc-textarea.scss',\n  shadow: false,\n})\nexport class ModusWcTextarea {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic correction in inputted text. Support by browser varies. */",
      "type": ": boolean"
    },
    {
      "name": "rows",
      "description": "/**\n * A customizable textarea component.\n */\n@Component({\n  tag: 'modus-wc-textarea',\n  styleUrl: 'modus-wc-textarea.scss',\n  shadow: false,\n})\nexport class ModusWcTextarea {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic correction in inputted text. Support by browser varies. */",
      "type": ": number"
    },
    {
      "name": "size",
      "description": "/**\n * A customizable textarea component.\n */\n@Component({\n  tag: 'modus-wc-textarea',\n  styleUrl: 'modus-wc-textarea.scss',\n  shadow: false,\n})\nexport class ModusWcTextarea {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic correction in inputted text. Support by browser varies. */",
      "type": ": ModusSize"
    },
    {
      "name": "value",
      "description": "/**\n * A customizable textarea component.\n */\n@Component({\n  tag: 'modus-wc-textarea',\n  styleUrl: 'modus-wc-textarea.scss',\n  shadow: false,\n})\nexport class ModusWcTextarea {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic correction in inputted text. Support by browser varies. */",
      "type": "string"
    }
  ],
  "events": [
    {
      "name": "inputBlur",
      "description": "/**\n * A customizable textarea component.\n */\n@Component({\n  tag: 'modus-wc-textarea',\n  styleUrl: 'modus-wc-textarea.scss',\n  shadow: false,\n})\nexport class ModusWcTextarea {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic correction in inputted text. Support by browser varies. */\n  @Prop() autoCorrect?: 'on' | 'off';\n\n  /** Indicates that the input should have a border. */\n  @Prop() bordered?: boolean = true;\n\n  /** Custom CSS class to apply to the textarea (supports DaisyUI). */\n  @Prop() customClass?: string = '';\n\n  /** The disabled state of the textarea. */\n  @Prop() disabled?: boolean = false;\n\n  /** A hint to the browser for which enter key to display. */\n  @Prop() enterkeyhint?:\n    | 'enter'\n    | 'done'\n    | 'go'\n    | 'next'\n    | 'previous'\n    | 'search'\n    | 'send';\n\n  /** Feedback to render below the input. */\n  @Prop() feedback?: IInputFeedbackProp;\n\n  /** The ID of the input element. */\n  @Prop() inputId?: string;\n\n  /** The tabindex of the input. */\n  @Prop() inputTabIndex?: number;\n\n  /** The text to display within the label. */\n  @Prop() label?: string;\n\n  /** The maximum number of characters allowed in the textarea. */\n  @Prop() maxLength?: number;\n\n  /** The minimum number of characters required in the textarea. */\n  @Prop() minLength?: number;\n\n  /** Name of the form control. Submitted with the form as part of a name/value pair. */\n  @Prop() name?: string;\n\n  /** The placeholder text for the textarea. */\n  @Prop() placeholder?: string = '';\n\n  /** The readonly state of the textarea. */\n  @Prop() readonly?: boolean = false;\n\n  /** A value is required for the form to be submittable. */\n  @Prop() required?: boolean = false;\n\n  /** The number of visible text lines for the textarea. */\n  @Prop() rows?: number;\n\n  /** The size of the input. */\n  @Prop() size?: ModusSize = 'md';\n\n  /** The value of the textarea. */\n  @Prop({ mutable: true, reflect: true }) value: string = '';\n\n  /** Emitted when the input loses focus. */"
    },
    {
      "name": "inputChange",
      "description": "/**\n * A customizable textarea component.\n */\n@Component({\n  tag: 'modus-wc-textarea',\n  styleUrl: 'modus-wc-textarea.scss',\n  shadow: false,\n})\nexport class ModusWcTextarea {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic correction in inputted text. Support by browser varies. */\n  @Prop() autoCorrect?: 'on' | 'off';\n\n  /** Indicates that the input should have a border. */\n  @Prop() bordered?: boolean = true;\n\n  /** Custom CSS class to apply to the textarea (supports DaisyUI). */\n  @Prop() customClass?: string = '';\n\n  /** The disabled state of the textarea. */\n  @Prop() disabled?: boolean = false;\n\n  /** A hint to the browser for which enter key to display. */\n  @Prop() enterkeyhint?:\n    | 'enter'\n    | 'done'\n    | 'go'\n    | 'next'\n    | 'previous'\n    | 'search'\n    | 'send';\n\n  /** Feedback to render below the input. */\n  @Prop() feedback?: IInputFeedbackProp;\n\n  /** The ID of the input element. */\n  @Prop() inputId?: string;\n\n  /** The tabindex of the input. */\n  @Prop() inputTabIndex?: number;\n\n  /** The text to display within the label. */\n  @Prop() label?: string;\n\n  /** The maximum number of characters allowed in the textarea. */\n  @Prop() maxLength?: number;\n\n  /** The minimum number of characters required in the textarea. */\n  @Prop() minLength?: number;\n\n  /** Name of the form control. Submitted with the form as part of a name/value pair. */\n  @Prop() name?: string;\n\n  /** The placeholder text for the textarea. */\n  @Prop() placeholder?: string = '';\n\n  /** The readonly state of the textarea. */\n  @Prop() readonly?: boolean = false;\n\n  /** A value is required for the form to be submittable. */\n  @Prop() required?: boolean = false;\n\n  /** The number of visible text lines for the textarea. */\n  @Prop() rows?: number;\n\n  /** The size of the input. */\n  @Prop() size?: ModusSize = 'md';\n\n  /** The value of the textarea. */\n  @Prop({ mutable: true, reflect: true }) value: string = '';\n\n  /** Emitted when the input loses focus. */"
    },
    {
      "name": "inputFocus",
      "description": "/**\n * A customizable textarea component.\n */\n@Component({\n  tag: 'modus-wc-textarea',\n  styleUrl: 'modus-wc-textarea.scss',\n  shadow: false,\n})\nexport class ModusWcTextarea {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Controls automatic correction in inputted text. Support by browser varies. */\n  @Prop() autoCorrect?: 'on' | 'off';\n\n  /** Indicates that the input should have a border. */\n  @Prop() bordered?: boolean = true;\n\n  /** Custom CSS class to apply to the textarea (supports DaisyUI). */\n  @Prop() customClass?: string = '';\n\n  /** The disabled state of the textarea. */\n  @Prop() disabled?: boolean = false;\n\n  /** A hint to the browser for which enter key to display. */\n  @Prop() enterkeyhint?:\n    | 'enter'\n    | 'done'\n    | 'go'\n    | 'next'\n    | 'previous'\n    | 'search'\n    | 'send';\n\n  /** Feedback to render below the input. */\n  @Prop() feedback?: IInputFeedbackProp;\n\n  /** The ID of the input element. */\n  @Prop() inputId?: string;\n\n  /** The tabindex of the input. */\n  @Prop() inputTabIndex?: number;\n\n  /** The text to display within the label. */\n  @Prop() label?: string;\n\n  /** The maximum number of characters allowed in the textarea. */\n  @Prop() maxLength?: number;\n\n  /** The minimum number of characters required in the textarea. */\n  @Prop() minLength?: number;\n\n  /** Name of the form control. Submitted with the form as part of a name/value pair. */\n  @Prop() name?: string;\n\n  /** The placeholder text for the textarea. */\n  @Prop() placeholder?: string = '';\n\n  /** The readonly state of the textarea. */\n  @Prop() readonly?: boolean = false;\n\n  /** A value is required for the form to be submittable. */\n  @Prop() required?: boolean = false;\n\n  /** The number of visible text lines for the textarea. */\n  @Prop() rows?: number;\n\n  /** The size of the input. */\n  @Prop() size?: ModusSize = 'md';\n\n  /** The value of the textarea. */\n  @Prop({ mutable: true, reflect: true }) value: string = '';\n\n  /** Emitted when the input loses focus. */"
    }
  ],
  "slots": [],
  "default_values": {
    "bordered": "true",
    "customClass": "''",
    "disabled": "false",
    "enterkeyhint": "{this.enterkeyhint}\n          id={this.inputId}\n          maxLength={this.maxLength}\n          minlength={this.minLength}\n          name={this.name}\n          onBlur={this.handleBlur}\n          onFocus={this.handleFocus}\n          onInput={this.handleInput}\n          placeholder={this.placeholder}\n          readonly={this.readonly}\n          required={this.required}\n          rows={this.rows}\n          tabIndex={this.inputTabIndex}\n          value={this.value}\n          {...this.inheritedAttributes}\n        />\n        {this.feedback && (\n          <modus-wc-input-feedback\n            level={this.feedback.level}\n            message={this.feedback.message}\n            size={this.size}\n          />\n        )}\n      </Host>\n    )",
    "maxLength": "{this.maxLength}\n          minlength={this.minLength}\n          name={this.name}\n          onBlur={this.handleBlur}\n          onFocus={this.handleFocus}\n          onInput={this.handleInput}\n          placeholder={this.placeholder}\n          readonly={this.readonly}\n          required={this.required}\n          rows={this.rows}\n          tabIndex={this.inputTabIndex}\n          value={this.value}\n          {...this.inheritedAttributes}\n        />\n        {this.feedback && (\n          <modus-wc-input-feedback\n            level={this.feedback.level}\n            message={this.feedback.message}\n            size={this.size}\n          />\n        )}\n      </Host>\n    )",
    "name": "{this.name}\n          onBlur={this.handleBlur}\n          onFocus={this.handleFocus}\n          onInput={this.handleInput}\n          placeholder={this.placeholder}\n          readonly={this.readonly}\n          required={this.required}\n          rows={this.rows}\n          tabIndex={this.inputTabIndex}\n          value={this.value}\n          {...this.inheritedAttributes}\n        />\n        {this.feedback && (\n          <modus-wc-input-feedback\n            level={this.feedback.level}\n            message={this.feedback.message}\n            size={this.size}\n          />\n        )}\n      </Host>\n    )",
    "placeholder": "''",
    "readonly": "false",
    "required": "false",
    "rows": "{this.rows}\n          tabIndex={this.inputTabIndex}\n          value={this.value}\n          {...this.inheritedAttributes}\n        />\n        {this.feedback && (\n          <modus-wc-input-feedback\n            level={this.feedback.level}\n            message={this.feedback.message}\n            size={this.size}\n          />\n        )}\n      </Host>\n    )",
    "size": "'md'",
    "value": "''"
  },
  "documentation": "\n\n--- modus-wc-textarea.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { IInputFeedbackProp, ModusSize } from '../types';\n\ninterface TextAreaArgs {\n  'auto-correct': 'on' | 'off';\n  bordered?: boolean;\n  'custom-class'?: string;\n  disabled?: boolean;\n  enterkeyhint?:\n    | 'enter'\n    | 'done'\n    | 'go'\n    | 'next'\n    | 'previous'\n    | 'search'\n    | 'send';\n  feedback?: IInputFeedbackProp;\n  'input-aria-invalid'?: 'grammar' | 'spelling' | 'true' | 'false';\n  'input-id'?: string;\n  'input-tab-index'?: number;\n  label?: string;\n  'max-length'?: number;\n  'min-length'?: number;\n  name?: string;\n  placeholder?: string;\n  readonly?: boolean;\n  required?: boolean;\n  rows?: number;\n  size?: ModusSize;\n  spellcheck?: boolean;\n  value: string;\n}\n\nconst meta: Meta<TextAreaArgs> = {\n  title: 'Components/Forms/Textarea',\n  component: 'modus-wc-textarea',\n  args: {\n    bordered: true,\n    'custom-class': '',\n    disabled: false,\n    label: 'Label',\n    readonly: false,\n    required: false,\n    size: 'md',\n    spellcheck: false,\n    value: '',\n  },\n  argTypes: {\n    'auto-correct': {\n      options: ['on', 'off'],\n    },\n    enterkeyhint: {\n      options: ['enter', 'done', 'go', 'next', 'previous', 'search', 'send'],\n    },\n    feedback: {\n      description: 'Feedback prop for input components',\n      table: {\n        type: {\n          detail: `\n            Interface: IInputFeedbackProp\n            Properties:\n            - level ('error' | 'info' | 'success' | 'warning'): The feedback level\n            - message (string, optional): The feedback message\n          `,\n        },\n      },\n    },\n    'input-aria-invalid': {\n      control: {\n        type: 'select',\n      },\n      options: ['grammar', 'spelling', 'true', 'false'],\n    },\n    size: {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg'],\n    },\n    spellcheck: {\n      description:\n        'Whether the element may be checked for spelling errors. A hint for the browser, not a guarantee.',\n      table: {\n        category: 'attributes',\n        defaultValue: { summary: 'false' },\n      },\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['inputBlur', 'inputChange', 'inputFocus'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<TextAreaArgs>;\n\nexport const Default: Story = {\n  render: (args) => {\n    return html`\n      <modus-wc-textarea\n        aria-label=\"Textarea input\"\n        auto-correct=${ifDefined(args['auto-correct'])}\n        ?bordered=${args.bordered}\n        custom-class=${ifDefined(args['custom-class'])}\n        enterkeyhint=${ifDefined(args.enterkeyhint)}\n        ?disabled=${args.disabled}\n        .feedback=${args.feedback}\n        input-aria-invalid=${ifDefined(args['input-aria-invalid'])}\n        input-id=${ifDefined(args['input-id'])}\n        input-tab-index=${ifDefined(args['input-tab-index'])}\n        label=${ifDefined(args.label)}\n        max-length=${ifDefined(args['max-length'])}\n        min-length=${ifDefined(args['min-length'])}\n        name=${ifDefined(args.name)}\n        placeholder=${ifDefined(args.placeholder)}\n        ?readonly=${args.readonly}\n        ?required=${args.required}\n        rows=${ifDefined(args.rows)}\n        size=${ifDefined(args.size)}\n        spellcheck=${ifDefined(args.spellcheck)}\n        .value=${args.value}\n      ></modus-wc-textarea>\n    `;\n  },\n};\n\nconst errorFeedback: IInputFeedbackProp = {\n  level: 'error',\n  message: 'Value is required.',\n};\n\nexport const WithErrorFeedback: Story = {\n  render: (args) => html`\n    <modus-wc-textarea\n      aria-label=\"Textarea input\"\n      .feedback=${errorFeedback}\n      label=${ifDefined(args.label)}\n      ?required=${true}\n      .value=${args.value}\n    ></modus-wc-textarea>\n  `,\n};\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - In 1.0 input state was maintained by the component. 2.0 components encourage users to follow a controlled\n  input model. See the Form Inputs [documentation](/docs/documentation-form-inputs--docs) for\n  additional info and examples.\n  - Size values have changed from verbose names (\\`medium\\`, \\`large\\`) to abbreviations (\\`sm\\`, \\`md\\`, \\`lg\\`).\n\n#### Prop Mapping\n\n| 1.0 Prop                     | 2.0 Prop            | Notes                                                       |\n|------------------------------|---------------------|-------------------------------------------------------------|\n| aria-label                   | aria-label          |                                                             |\n| autocorrect                  | auto-correct        |                                                             |\n| auto-focus-input             |                     | Not carried over                                            |\n| clearable                    |                     | Not carried over                                            |\n| disabled                     | disabled            |                                                             |\n| enterkeyhint                 | enterkeyhint        |                                                             |\n| error-text                   | feedback.message    | Use \\`feedback\\` level                                      |\n| helper-text                  |                     | Not carried over                                            |\n| label                        | label               |                                                             |\n| max-length                   | max-length          |                                                             |\n| min-length                   | min-length          |                                                             |\n| placeholder                  | placeholder         |                                                             |\n| read-only                    | readonly            |                                                             |\n| rows                         | rows                |                                                             |\n| required                     | required            |                                                             |\n| size                         | size                | \\`medium\\` \u2192 \\`md\\`, \\`large\\` \u2192 \\`lg\\`                     |\n| spellcheck                   | spellcheck          |                                                             |\n| text-align                   |                     | Not carried over, use CSS instead                           |\n| valid-text                   | feedback.message    | Use \\`feedback\\` level                                      |\n| value                        | value               |                                                             |\n\n#### Event Mapping\n\n| 1.0 Event   | 2.0 Event   | Notes            |\n|-------------|-------------|------------------|\n| valueChange | inputChange |                  |\n        `,\n      },\n    },\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  render: () => html`<div></div>`,\n};\n",
  "storybook": {
    "examples": [
      "<modus-wc-textarea\n        aria-label=\"Textarea input\"\n        auto-correct=${ifDefined(args['auto-correct'])}\n        ?bordered=${args.bordered}\n        custom-class=${ifDefined(args['custom-class'])}\n        enterkeyhint=${ifDefined(args.enterkeyhint)}\n        ?disabled=${args.disabled}\n        .feedback=${args.feedback}\n        input-aria-invalid=${ifDefined(args['input-aria-invalid'])}\n        input-id=${ifDefined(args['input-id'])}\n        input-tab-index=${ifDefined(args['input-tab-index'])}\n        label=${ifDefined(args.label)}\n        max-length=${ifDefined(args['max-length'])}\n        min-length=${ifDefined(args['min-length'])}\n        name=${ifDefined(args.name)}\n        placeholder=${ifDefined(args.placeholder)}\n        ?readonly=${args.readonly}\n        ?required=${args.required}\n        rows=${ifDefined(args.rows)}\n        size=${ifDefined(args.size)}\n        spellcheck=${ifDefined(args.spellcheck)}\n        .value=${args.value}\n      ></modus-wc-textarea>",
      "<modus-wc-textarea\n      aria-label=\"Textarea input\"\n      .feedback=${errorFeedback}\n      label=${ifDefined(args.label)}\n      ?required=${true}\n      .value=${args.value}\n    ></modus-wc-textarea>",
      "\n      <modus-wc-textarea\n        aria-label=\"Textarea input\"\n        auto-correct=${ifDefined(args['auto-correct'])}\n        ?bordered=${args.bordered}\n        custom-class=${ifDefined(args['custom-class'])}\n        enterkeyhint=${ifDefined(args.enterkeyhint)}\n        ?disabled=${args.disabled}\n        .feedback=${args.feedback}\n        input-aria-invalid=${ifDefined(args['input-aria-invalid'])}\n        input-id=${ifDefined(args['input-id'])}\n        input-tab-index=${ifDefined(args['input-tab-index'])}\n        label=${ifDefined(args.label)}\n        max-length=${ifDefined(args['max-length'])}\n        min-length=${ifDefined(args['min-length'])}\n        name=${ifDefined(args.name)}\n        placeholder=${ifDefined(args.placeholder)}\n        ?readonly=${args.readonly}\n        ?required=${args.required}\n        rows=${ifDefined(args.rows)}\n        size=${ifDefined(args.size)}\n        spellcheck=${ifDefined(args.spellcheck)}\n        .value=${args.value}\n      ></modus-wc-textarea>\n    ",
      "\n    <modus-wc-textarea\n      aria-label=\"Textarea input\"\n      .feedback=${errorFeedback}\n      label=${ifDefined(args.label)}\n      ?required=${true}\n      .value=${args.value}\n    ></modus-wc-textarea>\n  "
    ],
    "variants": [],
    "prop_usage": {
      "label": [
        "Textarea input"
      ]
    }
  },
  "tag_name": "modus-wc-textarea"
}
{
  "component_name": "modus-wc-rating",
  "version": "v2",
  "props": [
    {
      "name": "allowHalf",
      "description": "/**\n * A rating component that allows users to choose a rating from predefined options\n */\n@Component({\n  tag: 'modus-wc-rating',\n  styleUrl: 'modus-wc-rating.scss',\n  shadow: false,\n})\nexport class ModusWcRating {\n  private inheritedAttributes: Attributes = {};\n  private uniqueRatingGroupName: string;\n  private readonly VARIANTS_WITHOUT_HALF_SUPPORT: ModusWcRatingVariant[] = [\n    'smiley',\n    'thumb',\n  ];\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Whether to allow half-ratings. Only applies to star and heart variants. */",
      "type": ": boolean"
    },
    {
      "name": "count",
      "description": "/**\n * A rating component that allows users to choose a rating from predefined options\n */\n@Component({\n  tag: 'modus-wc-rating',\n  styleUrl: 'modus-wc-rating.scss',\n  shadow: false,\n})\nexport class ModusWcRating {\n  private inheritedAttributes: Attributes = {};\n  private uniqueRatingGroupName: string;\n  private readonly VARIANTS_WITHOUT_HALF_SUPPORT: ModusWcRatingVariant[] = [\n    'smiley',\n    'thumb',\n  ];\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Whether to allow half-ratings. Only applies to star and heart variants. */",
      "type": "number"
    },
    {
      "name": "customClass",
      "description": "/**\n * A rating component that allows users to choose a rating from predefined options\n */\n@Component({\n  tag: 'modus-wc-rating',\n  styleUrl: 'modus-wc-rating.scss',\n  shadow: false,\n})\nexport class ModusWcRating {\n  private inheritedAttributes: Attributes = {};\n  private uniqueRatingGroupName: string;\n  private readonly VARIANTS_WITHOUT_HALF_SUPPORT: ModusWcRatingVariant[] = [\n    'smiley',\n    'thumb',\n  ];\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Whether to allow half-ratings. Only applies to star and heart variants. */",
      "type": ": string"
    },
    {
      "name": "disabled",
      "description": "/**\n * A rating component that allows users to choose a rating from predefined options\n */\n@Component({\n  tag: 'modus-wc-rating',\n  styleUrl: 'modus-wc-rating.scss',\n  shadow: false,\n})\nexport class ModusWcRating {\n  private inheritedAttributes: Attributes = {};\n  private uniqueRatingGroupName: string;\n  private readonly VARIANTS_WITHOUT_HALF_SUPPORT: ModusWcRatingVariant[] = [\n    'smiley',\n    'thumb',\n  ];\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Whether to allow half-ratings. Only applies to star and heart variants. */",
      "type": ": boolean"
    },
    {
      "name": "getAriaLabelText",
      "description": "/**\n * A rating component that allows users to choose a rating from predefined options\n */\n@Component({\n  tag: 'modus-wc-rating',\n  styleUrl: 'modus-wc-rating.scss',\n  shadow: false,\n})\nexport class ModusWcRating {\n  private inheritedAttributes: Attributes = {};\n  private uniqueRatingGroupName: string;\n  private readonly VARIANTS_WITHOUT_HALF_SUPPORT: ModusWcRatingVariant[] = [\n    'smiley',\n    'thumb',\n  ];\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Whether to allow half-ratings. Only applies to star and heart variants. */",
      "type": ": (ratingValue: number)"
    },
    {
      "name": "size",
      "description": "/**\n * A rating component that allows users to choose a rating from predefined options\n */\n@Component({\n  tag: 'modus-wc-rating',\n  styleUrl: 'modus-wc-rating.scss',\n  shadow: false,\n})\nexport class ModusWcRating {\n  private inheritedAttributes: Attributes = {};\n  private uniqueRatingGroupName: string;\n  private readonly VARIANTS_WITHOUT_HALF_SUPPORT: ModusWcRatingVariant[] = [\n    'smiley',\n    'thumb',\n  ];\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Whether to allow half-ratings. Only applies to star and heart variants. */",
      "type": ": ModusSize"
    },
    {
      "name": "variant",
      "description": "/**\n * A rating component that allows users to choose a rating from predefined options\n */\n@Component({\n  tag: 'modus-wc-rating',\n  styleUrl: 'modus-wc-rating.scss',\n  shadow: false,\n})\nexport class ModusWcRating {\n  private inheritedAttributes: Attributes = {};\n  private uniqueRatingGroupName: string;\n  private readonly VARIANTS_WITHOUT_HALF_SUPPORT: ModusWcRatingVariant[] = [\n    'smiley',\n    'thumb',\n  ];\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Whether to allow half-ratings. Only applies to star and heart variants. */",
      "type": "ModusWcRatingVariant"
    },
    {
      "name": "value",
      "description": "/**\n * A rating component that allows users to choose a rating from predefined options\n */\n@Component({\n  tag: 'modus-wc-rating',\n  styleUrl: 'modus-wc-rating.scss',\n  shadow: false,\n})\nexport class ModusWcRating {\n  private inheritedAttributes: Attributes = {};\n  private uniqueRatingGroupName: string;\n  private readonly VARIANTS_WITHOUT_HALF_SUPPORT: ModusWcRatingVariant[] = [\n    'smiley',\n    'thumb',\n  ];\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Whether to allow half-ratings. Only applies to star and heart variants. */",
      "type": "number"
    }
  ],
  "events": [],
  "slots": [],
  "default_values": {
    "allowHalf": "false",
    "count": "5",
    "customClass": "''",
    "disabled": "false",
    "getAriaLabelText": "> string = (ratingValue) =>\n    `Rating item ${ratingValue}`",
    "size": "'md'",
    "variant": "'smiley'",
    "value": "0"
  },
  "documentation": "\n\n--- modus-wc-rating.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { ModusWcRatingVariant } from './modus-wc-rating';\n\ninterface RatingArgs {\n  'allow-half'?: boolean;\n  count: number;\n  'custom-class'?: string;\n  disabled?: boolean;\n  getAriaLabelText?: (index: number) => string;\n  size?: 'sm' | 'md' | 'lg';\n  value?: number;\n  variant: ModusWcRatingVariant;\n}\n\nconst meta: Meta<RatingArgs> = {\n  title: 'Components/Forms/Rating',\n  component: 'modus-wc-rating',\n  args: {\n    'allow-half': false,\n    count: 5,\n    'custom-class': '',\n    disabled: false,\n    getAriaLabelText: (index: number) => `${index} rating`,\n    size: 'md',\n    value: 0,\n    variant: 'smiley',\n  },\n  argTypes: {\n    size: {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg'],\n    },\n    variant: {\n      control: { type: 'select' },\n      options: ['heart', 'smiley', 'star', 'thumb'],\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['ratingChange'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<RatingArgs>;\n\nexport const Default: Story = {\n  render: (args) => html`\n    <modus-wc-rating\n      aria-label=\"Rating scale component\"\n      allow-half=${ifDefined(args['allow-half'])}\n      count=${args.count}\n      custom-class=${ifDefined(args['custom-class'])}\n      disabled=${ifDefined(args.disabled)}\n      size=${ifDefined(args.size)}\n      value=${ifDefined(args.value)}\n      variant=${args.variant}\n      .getAriaLabelText=${args.getAriaLabelText}\n    ></modus-wc-rating>\n  `,\n};\n\nexport const CustomAriaLabels: Story = {\n  render: (args) => {\n    const ariaLabelText = (index: number) =>\n      `Custom label for rating item ${index}`;\n\n    // prettier-ignore\n    return html`\n<script>\n  const myAriaLabelText = (index) => {\n    return 'Custom label for rating item ' + index.toString();\n  };\n</script>\n<modus-wc-rating\n  aria-label=\"Rating scale component\"\n  allow-half=${ifDefined(args['allow-half'])}\n  count=${args.count}\n  custom-class=\"custom-rating-component\"\n  disabled=${ifDefined(args.disabled)}\n  size=${ifDefined(args.size)}\n  value=${ifDefined(args.value)}\n  variant=${args.variant}\n  .getAriaLabelText=${ariaLabelText}\n></modus-wc-rating>\n    `;\n  },\n};\n\nexport const CustomColors: Story = {\n  // prettier-ignore\n  render: (args) => html`\n<style>\n  .custom-color-rating-component {\n    --modus-wc-rating-item-color: var(--modus-wc-color-yellow-dark);\n  }\n</style>\n<modus-wc-rating\n  aria-label=\"Rating scale component\"\n  allow-half=${ifDefined(args['allow-half'])}\n  count=${args.count}\n  custom-class=\"custom-color-rating-component\"\n  disabled=${ifDefined(args.disabled)}\n  size=${ifDefined(args.size)}\n  value=\"3\"\n  variant=\"star\"\n></modus-wc-rating>\n  `,\n};\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - In 1.0 input state was maintained by the component. 2.0 components encourage users to follow a controlled\n  input model. See the Form Inputs [documentation](/docs/documentation-form-inputs--docs) for\n  additional info and examples.\n  - Type/variant values have changed from \\`smileys\\` to \\`smiley\\` and \\`thumbs\\` to \\`thumb\\`.\n\n#### Prop Mapping\n\n| 1.0 Prop    | 2.0 Prop    | Notes                                                |\n|-------------|-------------|------------------------------------------------------|\n| aria-label  | aria-label  |                                                      |\n| disabled    | disabled    |                                                      |\n| type        | variant     | \\`smileys\\` \u2192 \\`smiley\\`, \\`thumbs\\` \u2192 \\`thumb\\`     |\n\n#### Event Mapping\n\n| 1.0 Event          | 2.0 Event    | Notes                                         |\n|--------------------|--------------|-----------------------------------------------|\n| sentimentSelection | ratingChange |                                               |\n        `,\n      },\n    },\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  render: () => html`<div></div>`,\n};\n",
  "storybook": {
    "examples": [
      "<modus-wc-rating\n      aria-label=\"Rating scale component\"\n      allow-half=${ifDefined(args['allow-half'])}\n      count=${args.count}\n      custom-class=${ifDefined(args['custom-class'])}\n      disabled=${ifDefined(args.disabled)}\n      size=${ifDefined(args.size)}\n      value=${ifDefined(args.value)}\n      variant=${args.variant}\n      .getAriaLabelText=${args.getAriaLabelText}\n    ></modus-wc-rating>",
      "<modus-wc-rating\n  aria-label=\"Rating scale component\"\n  allow-half=${ifDefined(args['allow-half'])}\n  count=${args.count}\n  custom-class=\"custom-rating-component\"\n  disabled=${ifDefined(args.disabled)}\n  size=${ifDefined(args.size)}\n  value=${ifDefined(args.value)}\n  variant=${args.variant}\n  .getAriaLabelText=${ariaLabelText}\n></modus-wc-rating>",
      "<modus-wc-rating\n  aria-label=\"Rating scale component\"\n  allow-half=${ifDefined(args['allow-half'])}\n  count=${args.count}\n  custom-class=\"custom-color-rating-component\"\n  disabled=${ifDefined(args.disabled)}\n  size=${ifDefined(args.size)}\n  value=\"3\"\n  variant=\"star\"\n></modus-wc-rating>",
      "\n    <modus-wc-rating\n      aria-label=\"Rating scale component\"\n      allow-half=${ifDefined(args['allow-half'])}\n      count=${args.count}\n      custom-class=${ifDefined(args['custom-class'])}\n      disabled=${ifDefined(args.disabled)}\n      size=${ifDefined(args.size)}\n      value=${ifDefined(args.value)}\n      variant=${args.variant}\n      .getAriaLabelText=${args.getAriaLabelText}\n    ></modus-wc-rating>\n  ",
      "\n<script>\n  const myAriaLabelText = (index) => {\n    return 'Custom label for rating item ' + index.toString();\n  };\n</script>\n<modus-wc-rating\n  aria-label=\"Rating scale component\"\n  allow-half=${ifDefined(args['allow-half'])}\n  count=${args.count}\n  custom-class=\"custom-rating-component\"\n  disabled=${ifDefined(args.disabled)}\n  size=${ifDefined(args.size)}\n  value=${ifDefined(args.value)}\n  variant=${args.variant}\n  .getAriaLabelText=${ariaLabelText}\n></modus-wc-rating>\n    "
    ],
    "variants": [
      "star"
    ],
    "prop_usage": {
      "label": [
        "Rating scale component"
      ],
      "class": [
        "custom-rating-component",
        "custom-color-rating-component"
      ],
      "value": [
        "3"
      ],
      "variant": [
        "star"
      ]
    }
  },
  "tag_name": "modus-wc-rating"
}
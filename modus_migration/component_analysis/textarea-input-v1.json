{
  "component_name": "modus-textarea-input",
  "version": "v1",
  "props": [
    {
      "name": "ariaLabel",
      "description": "/** (optional) The input's aria-label. */",
      "type": "string | null"
    },
    {
      "name": "autocorrect",
      "description": "/** (optional) The input's aria-label. */",
      "type": "boolean | 'off' | 'on'"
    },
    {
      "name": "autoFocusInput",
      "description": "/** (optional) The input's aria-label. */",
      "type": "boolean"
    },
    {
      "name": "clearable",
      "description": "/** (optional) The input's aria-label. */",
      "type": ""
    },
    {
      "name": "disabled",
      "description": "/** (optional) The input's aria-label. */",
      "type": "boolean"
    },
    {
      "name": "enterkeyhint",
      "description": "/** (optional) The input's aria-label. */",
      "type": "'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send'"
    },
    {
      "name": "errorText",
      "description": "/** (optional) The input's aria-label. */",
      "type": "string"
    },
    {
      "name": "helperText",
      "description": "/** (optional) The input's aria-label. */",
      "type": "string"
    },
    {
      "name": "label",
      "description": "/** (optional) The input's aria-label. */",
      "type": "string"
    },
    {
      "name": "maxLength",
      "description": "/** (optional) The input's aria-label. */",
      "type": "number"
    },
    {
      "name": "minLength",
      "description": "/** (optional) The input's aria-label. */",
      "type": "number"
    },
    {
      "name": "placeholder",
      "description": "/** (optional) The input's aria-label. */",
      "type": "string"
    },
    {
      "name": "readOnly",
      "description": "/** (optional) The input's aria-label. */",
      "type": "boolean"
    },
    {
      "name": "rows",
      "description": "/** (optional) The input's aria-label. */",
      "type": ""
    },
    {
      "name": "required",
      "description": "/** (optional) The input's aria-label. */",
      "type": "boolean"
    },
    {
      "name": "size",
      "description": "/** (optional) The input's aria-label. */",
      "type": "'medium' | 'large'"
    },
    {
      "name": "spellcheck",
      "description": "/** (optional) The input's aria-label. */",
      "type": "boolean"
    },
    {
      "name": "textAlign",
      "description": "/** (optional) The input's aria-label. */",
      "type": "'left' | 'right'"
    },
    {
      "name": "validText",
      "description": "/** (optional) The input's aria-label. */",
      "type": "string"
    },
    {
      "name": "value",
      "description": "/** (optional) The input's aria-label. */",
      "type": "string"
    }
  ],
  "events": [],
  "slots": [],
  "default_values": {
    "autocorrect": "== true) {\n      return 'on'",
    "clearable": "false",
    "disabled": "{this.disabled}\n            enterkeyhint={this.enterkeyhint}\n            maxlength={this.maxLength}\n            minlength={this.minLength}\n            onInput={(event) => this.handleOnInput(event)}\n            placeholder={this.placeholder}\n            readonly={this.readOnly}\n            ref={(el) => (this.textInput = el as HTMLTextAreaElement)}\n            rows={this.rows}\n            spellcheck={this.spellcheck}\n            tabIndex={0}\n            value={this.value}\n            autofocus={this.autoFocusInput}\n          />\n          {showClearIcon && (\n            <span\n              class=\"icons clear\"\n              tabIndex={0}\n              onKeyDown={(event) => this.handleClearKeyDown(event)}\n              onClick={() => this.handleClear()}\n              role=\"button\"\n              aria-label=\"Clear entry\">\n              <IconClose size={iconSize} />\n            </span>\n          )}\n        </div>\n        {this.errorText ? (\n          <label class=\"sub-text error\">{this.errorText}</label>\n        ) : this.validText ? (\n          <label class=\"sub-text valid\">{this.validText}</label>\n        ) : this.helperText ? (\n          <label class=\"sub-text helper\">{this.helperText}</label>\n        ) : null}\n      </div>\n    )",
    "enterkeyhint": "{this.enterkeyhint}\n            maxlength={this.maxLength}\n            minlength={this.minLength}\n            onInput={(event) => this.handleOnInput(event)}\n            placeholder={this.placeholder}\n            readonly={this.readOnly}\n            ref={(el) => (this.textInput = el as HTMLTextAreaElement)}\n            rows={this.rows}\n            spellcheck={this.spellcheck}\n            tabIndex={0}\n            value={this.value}\n            autofocus={this.autoFocusInput}\n          />\n          {showClearIcon && (\n            <span\n              class=\"icons clear\"\n              tabIndex={0}\n              onKeyDown={(event) => this.handleClearKeyDown(event)}\n              onClick={() => this.handleClear()}\n              role=\"button\"\n              aria-label=\"Clear entry\">\n              <IconClose size={iconSize} />\n            </span>\n          )}\n        </div>\n        {this.errorText ? (\n          <label class=\"sub-text error\">{this.errorText}</label>\n        ) : this.validText ? (\n          <label class=\"sub-text valid\">{this.validText}</label>\n        ) : this.helperText ? (\n          <label class=\"sub-text helper\">{this.helperText}</label>\n        ) : null}\n      </div>\n    )",
    "errorText": "{() => this.textInput.focus()}\n          part=\"input-container\">\n          <textarea\n            id={this.inputId}\n            aria-invalid={!!this.errorText}\n            aria-label={this.ariaLabel}\n            aria-required={this.required?.toString()}\n            autocorrect={this.autocorrect as string}\n            class={buildTextInputClassNames()}\n            disabled={this.disabled}\n            enterkeyhint={this.enterkeyhint}\n            maxlength={this.maxLength}\n            minlength={this.minLength}\n            onInput={(event) => this.handleOnInput(event)}\n            placeholder={this.placeholder}\n            readonly={this.readOnly}\n            ref={(el) => (this.textInput = el as HTMLTextAreaElement)}\n            rows={this.rows}\n            spellcheck={this.spellcheck}\n            tabIndex={0}\n            value={this.value}\n            autofocus={this.autoFocusInput}\n          />\n          {showClearIcon && (\n            <span\n              class=\"icons clear\"\n              tabIndex={0}\n              onKeyDown={(event) => this.handleClearKeyDown(event)}\n              onClick={() => this.handleClear()}\n              role=\"button\"\n              aria-label=\"Clear entry\">\n              <IconClose size={iconSize} />\n            </span>\n          )}\n        </div>\n        {this.errorText ? (\n          <label class=\"sub-text error\">{this.errorText}</label>\n        ) : this.validText ? (\n          <label class=\"sub-text valid\">{this.validText}</label>\n        ) : this.helperText ? (\n          <label class=\"sub-text helper\">{this.helperText}</label>\n        ) : null}\n      </div>\n    )",
    "helperText": "\"sub-text helper\">{this.helperText}</label>\n        ) : null}\n      </div>\n    )",
    "label": "{this.inputId}>{this.label}</label> : null}\n            {this.required ? <span class=\"required\">*</span> : null}\n          </div>\n        ) : null}\n        <div\n          class={`input-container ${this.errorText ? 'error' : this.validText ? 'valid' : ''} ${this.classBySize.get(\n            this.size\n          )}`}\n          onClick={() => this.textInput.focus()}\n          part=\"input-container\">\n          <textarea\n            id={this.inputId}\n            aria-invalid={!!this.errorText}\n            aria-label={this.ariaLabel}\n            aria-required={this.required?.toString()}\n            autocorrect={this.autocorrect as string}\n            class={buildTextInputClassNames()}\n            disabled={this.disabled}\n            enterkeyhint={this.enterkeyhint}\n            maxlength={this.maxLength}\n            minlength={this.minLength}\n            onInput={(event) => this.handleOnInput(event)}\n            placeholder={this.placeholder}\n            readonly={this.readOnly}\n            ref={(el) => (this.textInput = el as HTMLTextAreaElement)}\n            rows={this.rows}\n            spellcheck={this.spellcheck}\n            tabIndex={0}\n            value={this.value}\n            autofocus={this.autoFocusInput}\n          />\n          {showClearIcon && (\n            <span\n              class=\"icons clear\"\n              tabIndex={0}\n              onKeyDown={(event) => this.handleClearKeyDown(event)}\n              onClick={() => this.handleClear()}\n              role=\"button\"\n              aria-label=\"Clear entry\">\n              <IconClose size={iconSize} />\n            </span>\n          )}\n        </div>\n        {this.errorText ? (\n          <label class=\"sub-text error\">{this.errorText}</label>\n        ) : this.validText ? (\n          <label class=\"sub-text valid\">{this.validText}</label>\n        ) : this.helperText ? (\n          <label class=\"sub-text helper\">{this.helperText}</label>\n        ) : null}\n      </div>\n    )",
    "placeholder": "{this.placeholder}\n            readonly={this.readOnly}\n            ref={(el) => (this.textInput = el as HTMLTextAreaElement)}\n            rows={this.rows}\n            spellcheck={this.spellcheck}\n            tabIndex={0}\n            value={this.value}\n            autofocus={this.autoFocusInput}\n          />\n          {showClearIcon && (\n            <span\n              class=\"icons clear\"\n              tabIndex={0}\n              onKeyDown={(event) => this.handleClearKeyDown(event)}\n              onClick={() => this.handleClear()}\n              role=\"button\"\n              aria-label=\"Clear entry\">\n              <IconClose size={iconSize} />\n            </span>\n          )}\n        </div>\n        {this.errorText ? (\n          <label class=\"sub-text error\">{this.errorText}</label>\n        ) : this.validText ? (\n          <label class=\"sub-text valid\">{this.validText}</label>\n        ) : this.helperText ? (\n          <label class=\"sub-text helper\">{this.helperText}</label>\n        ) : null}\n      </div>\n    )",
    "rows": "3",
    "required": "{'label-container'}>\n            {this.label ? <label htmlFor={this.inputId}>{this.label}</label> : null}\n            {this.required ? <span class=\"required\">*</span> : null}\n          </div>\n        ) : null}\n        <div\n          class={`input-container ${this.errorText ? 'error' : this.validText ? 'valid' : ''} ${this.classBySize.get(\n            this.size\n          )}`}\n          onClick={() => this.textInput.focus()}\n          part=\"input-container\">\n          <textarea\n            id={this.inputId}\n            aria-invalid={!!this.errorText}\n            aria-label={this.ariaLabel}\n            aria-required={this.required?.toString()}\n            autocorrect={this.autocorrect as string}\n            class={buildTextInputClassNames()}\n            disabled={this.disabled}\n            enterkeyhint={this.enterkeyhint}\n            maxlength={this.maxLength}\n            minlength={this.minLength}\n            onInput={(event) => this.handleOnInput(event)}\n            placeholder={this.placeholder}\n            readonly={this.readOnly}\n            ref={(el) => (this.textInput = el as HTMLTextAreaElement)}\n            rows={this.rows}\n            spellcheck={this.spellcheck}\n            tabIndex={0}\n            value={this.value}\n            autofocus={this.autoFocusInput}\n          />\n          {showClearIcon && (\n            <span\n              class=\"icons clear\"\n              tabIndex={0}\n              onKeyDown={(event) => this.handleClearKeyDown(event)}\n              onClick={() => this.handleClear()}\n              role=\"button\"\n              aria-label=\"Clear entry\">\n              <IconClose size={iconSize} />\n            </span>\n          )}\n        </div>\n        {this.errorText ? (\n          <label class=\"sub-text error\">{this.errorText}</label>\n        ) : this.validText ? (\n          <label class=\"sub-text valid\">{this.validText}</label>\n        ) : this.helperText ? (\n          <label class=\"sub-text helper\">{this.helperText}</label>\n        ) : null}\n      </div>\n    )",
    "size": "'medium'",
    "spellcheck": "{this.spellcheck}\n            tabIndex={0}\n            value={this.value}\n            autofocus={this.autoFocusInput}\n          />\n          {showClearIcon && (\n            <span\n              class=\"icons clear\"\n              tabIndex={0}\n              onKeyDown={(event) => this.handleClearKeyDown(event)}\n              onClick={() => this.handleClear()}\n              role=\"button\"\n              aria-label=\"Clear entry\">\n              <IconClose size={iconSize} />\n            </span>\n          )}\n        </div>\n        {this.errorText ? (\n          <label class=\"sub-text error\">{this.errorText}</label>\n        ) : this.validText ? (\n          <label class=\"sub-text valid\">{this.validText}</label>\n        ) : this.helperText ? (\n          <label class=\"sub-text helper\">{this.helperText}</label>\n        ) : null}\n      </div>\n    )",
    "textAlign": "'left'",
    "validText": "{() => this.textInput.focus()}\n          part=\"input-container\">\n          <textarea\n            id={this.inputId}\n            aria-invalid={!!this.errorText}\n            aria-label={this.ariaLabel}\n            aria-required={this.required?.toString()}\n            autocorrect={this.autocorrect as string}\n            class={buildTextInputClassNames()}\n            disabled={this.disabled}\n            enterkeyhint={this.enterkeyhint}\n            maxlength={this.maxLength}\n            minlength={this.minLength}\n            onInput={(event) => this.handleOnInput(event)}\n            placeholder={this.placeholder}\n            readonly={this.readOnly}\n            ref={(el) => (this.textInput = el as HTMLTextAreaElement)}\n            rows={this.rows}\n            spellcheck={this.spellcheck}\n            tabIndex={0}\n            value={this.value}\n            autofocus={this.autoFocusInput}\n          />\n          {showClearIcon && (\n            <span\n              class=\"icons clear\"\n              tabIndex={0}\n              onKeyDown={(event) => this.handleClearKeyDown(event)}\n              onClick={() => this.handleClear()}\n              role=\"button\"\n              aria-label=\"Clear entry\">\n              <IconClose size={iconSize} />\n            </span>\n          )}\n        </div>\n        {this.errorText ? (\n          <label class=\"sub-text error\">{this.errorText}</label>\n        ) : this.validText ? (\n          <label class=\"sub-text valid\">{this.validText}</label>\n        ) : this.helperText ? (\n          <label class=\"sub-text helper\">{this.helperText}</label>\n        ) : null}\n      </div>\n    )",
    "value": "null"
  },
  "documentation": "\n\n--- modus-textarea-input-storybook-docs.mdx ---\n\n# Textarea Input\n\n---\n\n[Modus Text](https://modus.trimble.com/components/inputs/) Input web components are wrappers around native `<textarea>` elements. They are referenced using the `<modus-textarea-input>` custom HTML element.\n\nThis component is compatible with Angular reactive forms. This can be achieved through the implementation of a simple directive.\n\n### Default\n\n<modus-textarea-input label=\"Textarea Input\" placeholder=\"Placeholder\" required></modus-textarea-input>\n\n<modus-textarea-input label=\"Textarea Input (Disabled)\" disabled></modus-textarea-input>\n\n<modus-textarea-input label=\"Textarea Input (Helper Text)\" placeholder=\"Placeholder\" value=\"Value\" helper-text=\"Helper Demo\" required></modus-textarea-input>\n\n<modus-textarea-input label=\"Textarea Input (Error)\" placeholder=\"Placeholder\" value=\"Value\" error-text=\"Error Demo\"></modus-textarea-input>\n\n<modus-textarea-input label=\"Textarea Input (Valid)\" placeholder=\"Placeholder\" value=\"Value\" valid-text=\"Valid Demo\"></modus-textarea-input>\n\n<modus-textarea-input label=\"Textarea Input (Large & Helper Text)\" placeholder=\"Placeholder\" value=\"Value\" size=\"large\" helper-text=\"Your username must be 8-20 characters long, contain letters and numbers, and must not contain spaces\"></modus-textarea-input>\n\n```html\n<modus-textarea-input label=\"Textarea Input\" placeholder=\"Placeholder\" required></modus-textarea-input>\n<modus-textarea-input label=\"Textarea Input (Disabled)\" disabled></modus-textarea-input>\n<modus-textarea-input\n  label=\"Textarea Input (Helper Text)\"\n  placeholder=\"Placeholder\"\n  value=\"Value\"\n  helper-text=\"Helper Demo\"\n  required></modus-textarea-input>\n<modus-textarea-input\n  label=\"Textarea Input (Error)\"\n  placeholder=\"Placeholder\"\n  value=\"Value\"\n  error-text=\"Error Demo\"></modus-textarea-input>\n<modus-textarea-input\n  label=\"Textarea Input (Valid)\"\n  placeholder=\"Placeholder\"\n  value=\"Value\"\n  valid-text=\"Valid Demo\"></modus-textarea-input>\n<modus-textarea-input\n  label=\"Textarea Input (Large & Helper Text)\"\n  placeholder=\"Placeholder\"\n  value=\"Value\"\n  size=\"large\"\n  helper-text=\"Your username must be 8-20 characters long, contain letters and numbers, and must not contain spaces\"></modus-textarea-input>\n<modus-textarea-input\n  label=\"Textarea Input (3 rows)\"\n  placeholder=\"Placeholder\"\n  value=\"Value\"\n  rows=\"3\"></modus-textarea-input>\n```\n\n### Properties\n\n| Property         | Attribute          | Description                                                                                         | Type                                                          | Default     |\n| ---------------- | ------------------ | --------------------------------------------------------------------------------------------------- | ------------------------------------------------------------- | ----------- |\n| `ariaLabel`      | `aria-label`       | (optional) The textarea's aria-label.                                                               | `string`                                                      | `undefined` |\n| `autoFocusInput` | `auto-focus-input` | (optional) Sets autofocus on the textarea.                                                          | `boolean`                                                     | `undefined` |\n| `autocorrect`    | `autocorrect`      | (optional) Whether to activate automatic correction while the user is editing this field in Safari. | `boolean, \"off\", \"on\"`                                        | `undefined` |\n| `clearable`      | `clearable`        | (optional) Whether the textarea has a clear button.                                                 | `boolean`                                                     | `false`     |\n| `disabled`       | `disabled`         | (optional) Whether the textarea is disabled.                                                        | `boolean`                                                     | `undefined` |\n| `enterkeyhint`   | `enterkeyhint`     | Which action label to present for the enter key on virtual keyboards.                               | `\"enter\", \"done\", \"go\", \"next\", \"previous\", \"search\", \"send\"` | `undefined` |\n| `errorText`      | `error-text`       | (optional) The textarea's error state text.                                                         | `string`                                                      | `undefined` |\n| `helperText`     | `helper-text`      | (optional) The textarea's helper text displayed below the input.                                    | `string`                                                      | `undefined` |\n| `label`          | `label`            | (optional) The textarea's label.                                                                    | `string`                                                      | `undefined` |\n| `maxLength`      | `max-length`       | (optional) The textarea's maximum length.                                                           | `number`                                                      | `undefined` |\n| `minLength`      | `min-length`       | (optional) The textarea's minimum length.                                                           | `number`                                                      | `undefined` |\n| `placeholder`    | `placeholder`      | (optional) The textarea's placeholder text.                                                         | `string`                                                      | `undefined` |\n| `readOnly`       | `read-only`        | (optional) Whether the textarea's content is read-only                                              | `boolean`                                                     | `undefined` |\n| `required`       | `required`         | (optional) Whether the input is required.                                                           | `boolean`                                                     | `undefined` |\n| `rows`           | `rows`             | (optional) Number of rows on textarea.                                                              | `number`                                                      | `undefined` |\n| `size`           | `size`             | (optional) The textarea's size.                                                                     | `\"large\", \"medium\"`                                           | `'medium'`  |\n| `spellcheck`     | `spellcheck`       | (optional) Whether to enable spell checking.                                                        | `\"large\", \"medium\"`                                           | `'medium'`  |\n| `textAlign`      | `text-align`       | (optional) The textarea's text alignment.                                                           | `boolean`                                                     | `'false'`   |\n| `validText`      | `valid-text`       | (optional) The textarea's valid state text.                                                         | `string`                                                      | `undefined` |\n| `value`          | `value`            | (optional) The textarea's value.                                                                    |\n\n### DOM Events\n\n| Name          | Description                          | Emits    |\n| ------------- | ------------------------------------ | -------- |\n| `valueChange` | Fires on textarea input value change | `string` |\n\n### Methods\n\n| Method name  | Description     | Parameter | Return          |\n| ------------ | --------------- | --------- | --------------- |\n| `focusInput` | Focus the input |           | `Promise<void>` |\n\n### Accessibility\n\n- Textarea Input gets an `aria-label` provided by the `aria-label` property input.\n- It is recommended to pass `aria-label` when there is no label used so the input is accessible to screen readers.\n- Textarea Input gets an `aria-disabled` set to whether Textarea Input is disabled.\n- Textarea Input gets an `aria-placeholder` provided by the `placeholder` property input.\n- Textarea Input gets an `aria-invalid` set to whether Textarea Input is invalid.\n- Textarea Input gets an `aria-readonly` set to whether Textarea Input is readonly.\n- Textarea Input gets an `aria-required` set to whether Textarea Input is required.\n",
  "storybook_content": "\n\n--- modus-textarea-input.stories.tsx ---\n\n// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-textarea-input-storybook-docs.mdx';\nimport { html } from 'lit-html';\nimport { withActions } from '@storybook/addon-actions/decorator';\n\nexport default {\n  title: 'User Inputs/Textarea Input',\n  argTypes: {\n    ariaLabel: {\n      name: 'aria-label',\n      description: \"The text input's aria-label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    autocorrect: {\n      name: 'autocorrect',\n      options: ['off', 'on'],\n      type: 'select',\n      description: 'Whether to activate automatic correction while the user is editing this field in Safari',\n      table: {\n        type: { summary: `boolean | 'off' | 'on'` },\n      },\n    },\n    autoFocusInput: {\n      name: 'auto-focus-input',\n      description: 'Sets autofocus for the input',\n      table: {\n        type: { summary: 'boolean' },\n      },\n    },\n    clearable: {\n      description: 'Whether the text input is clearable',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    disabled: {\n      description: 'Whether the text input is disabled',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    enterkeyhint: {\n      options: ['enter', 'done', 'go', 'next', 'previous', 'search', 'send'],\n      type: 'select',\n      description: 'Which action label to present for the enter key on virtual keyboards',\n      table: {\n        type: { summary: `'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send'` },\n      },\n    },\n    errorText: {\n      name: 'error-text',\n      description: \"The text input's error text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    helperText: {\n      name: 'helper-text',\n      description: \"The text input's helper text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    label: {\n      description: \"The text input's label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    maxLength: {\n      name: 'max-length',\n      description: \"The text input's maximum length\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    minLength: {\n      name: 'min-length',\n      description: \"The text input's minimum length\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    placeholder: {\n      description: \"The text input's placeholder text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    readOnly: {\n      name: 'read-only',\n      description: 'Whether the text input is read-only',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    required: {\n      description: 'Whether the text input is required',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    rows: {\n      description: 'Number of rows on textarea',\n      table: {\n        defaultValue: { summary: '5' },\n        type: { summary: 'number' },\n      },\n    },\n    size: {\n      options: ['medium', 'large'],\n      type: 'select',\n      description: 'The size of the text input',\n      table: {\n        defaultValue: { summary: \"'medium'\" },\n        type: { summary: \"'medium' | 'large'\" },\n      },\n    },\n    spellcheck: {\n      type: 'boolean',\n      name: 'spellcheck',\n      description: 'Whether to enable spell checking.',\n      table: {\n        type: { summary: 'boolean' },\n      },\n    },\n    textAlign: {\n      name: 'text-align',\n      options: ['left', 'right'],\n      type: 'select',\n      description: 'text alignment for the input.',\n      table: {\n        defaultValue: { summary: \"'left'\" },\n        type: {\n          summary: \"'left' | 'right'\",\n        },\n      },\n    },\n    validText: {\n      name: 'valid-text',\n      description: \"The text input's valid text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    value: {\n      description: \"The text input's value\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n  },\n  parameters: {\n    actions: {\n      handles: ['valueChange'],\n    },\n    controls: { expanded: true, sort: 'requiredFirst' },\n    docs: {\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n    },\n    design: {\n      type: 'figma',\n      url: 'https://www.figma.com/design/wyfVJUHWRMkeCfdB38HFEE/Modus---Web?node-id=1346-5&m=dev',\n    },\n  },\n  decorators: [withActions],\n};\n\nconst Template = ({\n  ariaLabel,\n  autocorrect,\n  autoFocusInput,\n  clearable,\n  disabled,\n  enterkeyhint,\n  errorText,\n  helperText,\n  inputmode,\n  label,\n  maxLength,\n  minLength,\n  placeholder,\n  readOnly,\n  required,\n  rows,\n  size,\n  spellcheck,\n  textAlign,\n  validText,\n  value,\n}) => html`\n  <form>\n    <modus-textarea-input\n      aria-label=${ariaLabel}\n      autocorrect=${autocorrect}\n      auto-focus-input=${autoFocusInput}\n      clearable=${clearable}\n      ?disabled=${disabled}\n      enterkeyhint=${enterkeyhint}\n      error-text=${errorText}\n      helper-text=${helperText}\n      inputmode=${inputmode}\n      label=${label}\n      max-length=${maxLength}\n      min-length=${minLength}\n      placeholder=${placeholder}\n      read-only=${readOnly}\n      ?required=${required}\n      rows=${rows}\n      size=${size}\n      ?spellcheck=${spellcheck}\n      text-align=${textAlign}\n      valid-text=${validText}\n      value=${value}></modus-textarea-input>\n  </form>\n`;\n\nexport const Default = Template.bind({});\nDefault.args = {\n  ariaLabel: '',\n  autocorrect: null,\n  autoFocusInput: true,\n  clearable: false,\n  disabled: false,\n  enterkeyhint: undefined,\n  errorText: '',\n  helperText: '',\n  inputmode: '',\n  label: 'Comment',\n  maxLength: 2000,\n  minLength: 0,\n  placeholder: '',\n  readOnly: false,\n  required: false,\n  rows: 3,\n  size: 'medium',\n  spellcheck: false,\n  textAlign: 'left',\n  validText: '',\n  value: '',\n};\n",
  "storybook": {
    "examples": [
      "<modus-textarea-input\n      aria-label=${ariaLabel}\n      autocorrect=${autocorrect}\n      auto-focus-input=${autoFocusInput}\n      clearable=${clearable}\n      ?disabled=${disabled}\n      enterkeyhint=${enterkeyhint}\n      error-text=${errorText}\n      helper-text=${helperText}\n      inputmode=${inputmode}\n      label=${label}\n      max-length=${maxLength}\n      min-length=${minLength}\n      placeholder=${placeholder}\n      read-only=${readOnly}\n      ?required=${required}\n      rows=${rows}\n      size=${size}\n      ?spellcheck=${spellcheck}\n      text-align=${textAlign}\n      valid-text=${validText}\n      value=${value}></modus-textarea-input>",
      "\n  <form>\n    <modus-textarea-input\n      aria-label=${ariaLabel}\n      autocorrect=${autocorrect}\n      auto-focus-input=${autoFocusInput}\n      clearable=${clearable}\n      ?disabled=${disabled}\n      enterkeyhint=${enterkeyhint}\n      error-text=${errorText}\n      helper-text=${helperText}\n      inputmode=${inputmode}\n      label=${label}\n      max-length=${maxLength}\n      min-length=${minLength}\n      placeholder=${placeholder}\n      read-only=${readOnly}\n      ?required=${required}\n      rows=${rows}\n      size=${size}\n      ?spellcheck=${spellcheck}\n      text-align=${textAlign}\n      valid-text=${validText}\n      value=${value}></modus-textarea-input>\n  </form>\n"
    ],
    "variants": [],
    "prop_usage": {}
  },
  "tag_name": "modus-textarea-input"
}
{
  "component_name": "modus-wc-select",
  "version": "v2",
  "props": [
    {
      "name": "bordered",
      "description": "/** Whether the option is disabled and cannot be selected. */\n  disabled?: boolean;\n  /** The text to render in the option. */\n  label: string;\n  /** The value of the option. */\n  value: string;\n}\n\n/**\n * A customizable select component used to pick a value from a list of options\n */\n@Component({\n  tag: 'modus-wc-select',\n  styleUrl: 'modus-wc-select.scss',\n  shadow: false,\n})\nexport class ModusWcSelect {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */",
      "type": ": boolean"
    },
    {
      "name": "customClass",
      "description": "/** Whether the option is disabled and cannot be selected. */\n  disabled?: boolean;\n  /** The text to render in the option. */\n  label: string;\n  /** The value of the option. */\n  value: string;\n}\n\n/**\n * A customizable select component used to pick a value from a list of options\n */\n@Component({\n  tag: 'modus-wc-select',\n  styleUrl: 'modus-wc-select.scss',\n  shadow: false,\n})\nexport class ModusWcSelect {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */",
      "type": ": string"
    },
    {
      "name": "disabled",
      "description": "/** Whether the option is disabled and cannot be selected. */\n  disabled?: boolean;\n  /** The text to render in the option. */\n  label: string;\n  /** The value of the option. */\n  value: string;\n}\n\n/**\n * A customizable select component used to pick a value from a list of options\n */\n@Component({\n  tag: 'modus-wc-select',\n  styleUrl: 'modus-wc-select.scss',\n  shadow: false,\n})\nexport class ModusWcSelect {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */",
      "type": ": boolean"
    },
    {
      "name": "feedback",
      "description": "/** Whether the option is disabled and cannot be selected. */\n  disabled?: boolean;\n  /** The text to render in the option. */\n  label: string;\n  /** The value of the option. */\n  value: string;\n}\n\n/**\n * A customizable select component used to pick a value from a list of options\n */\n@Component({\n  tag: 'modus-wc-select',\n  styleUrl: 'modus-wc-select.scss',\n  shadow: false,\n})\nexport class ModusWcSelect {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */",
      "type": ": IInputFeedbackProp"
    },
    {
      "name": "inputId",
      "description": "/** Whether the option is disabled and cannot be selected. */\n  disabled?: boolean;\n  /** The text to render in the option. */\n  label: string;\n  /** The value of the option. */\n  value: string;\n}\n\n/**\n * A customizable select component used to pick a value from a list of options\n */\n@Component({\n  tag: 'modus-wc-select',\n  styleUrl: 'modus-wc-select.scss',\n  shadow: false,\n})\nexport class ModusWcSelect {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */",
      "type": ": string"
    },
    {
      "name": "inputTabIndex",
      "description": "/** Whether the option is disabled and cannot be selected. */\n  disabled?: boolean;\n  /** The text to render in the option. */\n  label: string;\n  /** The value of the option. */\n  value: string;\n}\n\n/**\n * A customizable select component used to pick a value from a list of options\n */\n@Component({\n  tag: 'modus-wc-select',\n  styleUrl: 'modus-wc-select.scss',\n  shadow: false,\n})\nexport class ModusWcSelect {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */",
      "type": ": number"
    },
    {
      "name": "label",
      "description": "/** Whether the option is disabled and cannot be selected. */\n  disabled?: boolean;\n  /** The text to render in the option. */\n  label: string;\n  /** The value of the option. */\n  value: string;\n}\n\n/**\n * A customizable select component used to pick a value from a list of options\n */\n@Component({\n  tag: 'modus-wc-select',\n  styleUrl: 'modus-wc-select.scss',\n  shadow: false,\n})\nexport class ModusWcSelect {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */",
      "type": "string"
    },
    {
      "name": "name",
      "description": "/** Whether the option is disabled and cannot be selected. */\n  disabled?: boolean;\n  /** The text to render in the option. */\n  label: string;\n  /** The value of the option. */\n  value: string;\n}\n\n/**\n * A customizable select component used to pick a value from a list of options\n */\n@Component({\n  tag: 'modus-wc-select',\n  styleUrl: 'modus-wc-select.scss',\n  shadow: false,\n})\nexport class ModusWcSelect {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */",
      "type": ": string"
    },
    {
      "name": "options",
      "description": "/** Whether the option is disabled and cannot be selected. */\n  disabled?: boolean;\n  /** The text to render in the option. */\n  label: string;\n  /** The value of the option. */\n  value: string;\n}\n\n/**\n * A customizable select component used to pick a value from a list of options\n */\n@Component({\n  tag: 'modus-wc-select',\n  styleUrl: 'modus-wc-select.scss',\n  shadow: false,\n})\nexport class ModusWcSelect {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */",
      "type": "ISelectOption[]"
    },
    {
      "name": "required",
      "description": "/** Whether the option is disabled and cannot be selected. */\n  disabled?: boolean;\n  /** The text to render in the option. */\n  label: string;\n  /** The value of the option. */\n  value: string;\n}\n\n/**\n * A customizable select component used to pick a value from a list of options\n */\n@Component({\n  tag: 'modus-wc-select',\n  styleUrl: 'modus-wc-select.scss',\n  shadow: false,\n})\nexport class ModusWcSelect {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */",
      "type": ": boolean"
    },
    {
      "name": "size",
      "description": "/** Whether the option is disabled and cannot be selected. */\n  disabled?: boolean;\n  /** The text to render in the option. */\n  label: string;\n  /** The value of the option. */\n  value: string;\n}\n\n/**\n * A customizable select component used to pick a value from a list of options\n */\n@Component({\n  tag: 'modus-wc-select',\n  styleUrl: 'modus-wc-select.scss',\n  shadow: false,\n})\nexport class ModusWcSelect {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */",
      "type": ": ModusSize"
    },
    {
      "name": "value",
      "description": "/** Whether the option is disabled and cannot be selected. */\n  disabled?: boolean;\n  /** The text to render in the option. */\n  label: string;\n  /** The value of the option. */\n  value: string;\n}\n\n/**\n * A customizable select component used to pick a value from a list of options\n */\n@Component({\n  tag: 'modus-wc-select',\n  styleUrl: 'modus-wc-select.scss',\n  shadow: false,\n})\nexport class ModusWcSelect {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */",
      "type": "string"
    }
  ],
  "events": [
    {
      "name": "inputBlur",
      "description": "/** Whether the option is disabled and cannot be selected. */\n  disabled?: boolean;\n  /** The text to render in the option. */\n  label: string;\n  /** The value of the option. */\n  value: string;\n}\n\n/**\n * A customizable select component used to pick a value from a list of options\n */\n@Component({\n  tag: 'modus-wc-select',\n  styleUrl: 'modus-wc-select.scss',\n  shadow: false,\n})\nexport class ModusWcSelect {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */\n  @Prop() bordered?: boolean = true;\n\n  /** Custom CSS class to apply to the inner div. */\n  @Prop() customClass?: string = '';\n\n  /** Whether the form control is disabled. */\n  @Prop() disabled?: boolean = false;\n\n  /** Feedback to render below the input. */\n  @Prop() feedback?: IInputFeedbackProp;\n\n  /** The ID of the input element. */\n  @Prop() inputId?: string;\n\n  /** Determine the control's relative ordering for sequential focus navigation (typically with the Tab key). */\n  @Prop() inputTabIndex?: number;\n\n  /** The text to display within the label. */\n  @Prop() label?: string;\n\n  /** Name of the form control. Submitted with the form as part of a name/value pair. */\n  @Prop() name?: string;\n\n  /** The options to display in the select dropdown. */\n  @Prop({ mutable: true, reflect: true }) options: ISelectOption[] = [];\n\n  /** A value is required for the form to be submittable. */\n  @Prop() required?: boolean = false;\n\n  /** The size of the input. */\n  @Prop() size?: ModusSize = 'md';\n\n  /** The value of the control. */\n  @Prop({ mutable: true, reflect: true }) value: string = '';\n\n  /** Event emitted when the input loses focus. */"
    },
    {
      "name": "inputChange",
      "description": "/** Whether the option is disabled and cannot be selected. */\n  disabled?: boolean;\n  /** The text to render in the option. */\n  label: string;\n  /** The value of the option. */\n  value: string;\n}\n\n/**\n * A customizable select component used to pick a value from a list of options\n */\n@Component({\n  tag: 'modus-wc-select',\n  styleUrl: 'modus-wc-select.scss',\n  shadow: false,\n})\nexport class ModusWcSelect {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */\n  @Prop() bordered?: boolean = true;\n\n  /** Custom CSS class to apply to the inner div. */\n  @Prop() customClass?: string = '';\n\n  /** Whether the form control is disabled. */\n  @Prop() disabled?: boolean = false;\n\n  /** Feedback to render below the input. */\n  @Prop() feedback?: IInputFeedbackProp;\n\n  /** The ID of the input element. */\n  @Prop() inputId?: string;\n\n  /** Determine the control's relative ordering for sequential focus navigation (typically with the Tab key). */\n  @Prop() inputTabIndex?: number;\n\n  /** The text to display within the label. */\n  @Prop() label?: string;\n\n  /** Name of the form control. Submitted with the form as part of a name/value pair. */\n  @Prop() name?: string;\n\n  /** The options to display in the select dropdown. */\n  @Prop({ mutable: true, reflect: true }) options: ISelectOption[] = [];\n\n  /** A value is required for the form to be submittable. */\n  @Prop() required?: boolean = false;\n\n  /** The size of the input. */\n  @Prop() size?: ModusSize = 'md';\n\n  /** The value of the control. */\n  @Prop({ mutable: true, reflect: true }) value: string = '';\n\n  /** Event emitted when the input loses focus. */"
    },
    {
      "name": "inputFocus",
      "description": "/** Whether the option is disabled and cannot be selected. */\n  disabled?: boolean;\n  /** The text to render in the option. */\n  label: string;\n  /** The value of the option. */\n  value: string;\n}\n\n/**\n * A customizable select component used to pick a value from a list of options\n */\n@Component({\n  tag: 'modus-wc-select',\n  styleUrl: 'modus-wc-select.scss',\n  shadow: false,\n})\nexport class ModusWcSelect {\n  private inheritedAttributes: Attributes = {};\n  private generatedId: string = generateElementId();\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */\n  @Prop() bordered?: boolean = true;\n\n  /** Custom CSS class to apply to the inner div. */\n  @Prop() customClass?: string = '';\n\n  /** Whether the form control is disabled. */\n  @Prop() disabled?: boolean = false;\n\n  /** Feedback to render below the input. */\n  @Prop() feedback?: IInputFeedbackProp;\n\n  /** The ID of the input element. */\n  @Prop() inputId?: string;\n\n  /** Determine the control's relative ordering for sequential focus navigation (typically with the Tab key). */\n  @Prop() inputTabIndex?: number;\n\n  /** The text to display within the label. */\n  @Prop() label?: string;\n\n  /** Name of the form control. Submitted with the form as part of a name/value pair. */\n  @Prop() name?: string;\n\n  /** The options to display in the select dropdown. */\n  @Prop({ mutable: true, reflect: true }) options: ISelectOption[] = [];\n\n  /** A value is required for the form to be submittable. */\n  @Prop() required?: boolean = false;\n\n  /** The size of the input. */\n  @Prop() size?: ModusSize = 'md';\n\n  /** The value of the control. */\n  @Prop({ mutable: true, reflect: true }) value: string = '';\n\n  /** Event emitted when the input loses focus. */"
    }
  ],
  "slots": [],
  "default_values": {
    "bordered": "true",
    "customClass": "''",
    "disabled": "false",
    "name": "{this.name}\n          onBlur={this.handleBlur}\n          onFocus={this.handleFocus}\n          onInput={this.handleInput}\n          required={this.required}\n          tabindex={this.inputTabIndex}\n          {...this.inheritedAttributes}\n        >\n          {this.options.map((option) => (\n            <option\n              disabled={option.disabled}\n              selected={option.value === this.value}\n              value={option.value}\n            >\n              {option.label}\n            </option>\n          ))}\n        </select>\n        {this.feedback && (\n          <modus-wc-input-feedback\n            level={this.feedback.level}\n            message={this.feedback.message}\n            size={this.size}\n          />\n        )}\n      </Host>\n    )",
    "options": "[]",
    "required": "false",
    "size": "'md'",
    "value": "''"
  },
  "documentation": "\n\n--- modus-wc-select.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { ISelectOption } from './modus-wc-select';\nimport { IInputFeedbackProp, ModusSize } from '../types';\n\nconst options: ISelectOption[] = [\n  { label: 'Option 1', value: '1' },\n  { label: 'Option 2', value: '2' },\n  { label: 'Option 3', value: '3' },\n];\n\ninterface SelectArgs {\n  bordered?: boolean;\n  'custom-class'?: string;\n  disabled?: boolean;\n  feedback?: IInputFeedbackProp;\n  'input-aria-invalid'?: 'true' | 'false';\n  'input-id'?: string;\n  'input-tab-index'?: number;\n  label?: string;\n  name?: string;\n  options: ISelectOption[];\n  required?: boolean;\n  size?: ModusSize;\n  value: string;\n}\n\nconst meta: Meta<SelectArgs> = {\n  title: 'Components/Forms/Select',\n  component: 'modus-wc-select',\n  args: {\n    bordered: true,\n    disabled: false,\n    label: 'Label',\n    options,\n    size: 'md',\n    value: '',\n  },\n  argTypes: {\n    feedback: {\n      description: 'Feedback prop for input components',\n      table: {\n        type: {\n          detail: `\n            Interface: IInputFeedbackProp\n            Properties:\n            - level ('error' | 'info' | 'success' | 'warning'): The feedback level\n            - message (string, optional): The feedback message\n          `,\n        },\n      },\n    },\n    'input-aria-invalid': {\n      control: { type: 'select' },\n      options: ['true', 'false'],\n    },\n    options: {\n      description: 'Array of option objects for the select dropdown',\n      table: {\n        type: {\n          detail: `\n            Interface: ISelectOption\n            Properties:\n            - disabled (boolean, optional): Whether the option is disabled and cannot be selected\n            - label (string): Display text for the option\n            - value (string): The value of the option\n          `,\n        },\n      },\n    },\n    size: {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg'],\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['inputBlur', 'inputChange', 'inputFocus'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<SelectArgs>;\n\nexport const Default: Story = {\n  render: (args) => html`\n    <modus-wc-select\n      aria-label=\"Select input\"\n      ?bordered=${args.bordered}\n      custom-class=${ifDefined(args['custom-class'])}\n      ?disabled=${args.disabled}\n      .feedback=${args.feedback}\n      input-aria-invalid=${ifDefined(args['input-aria-invalid'])}\n      input-id=${ifDefined(args['input-id'])}\n      input-tab-index=${ifDefined(args['input-tab-index'])}\n      label=${ifDefined(args.label)}\n      name=${ifDefined(args.name)}\n      .options=${args.options}\n      ?required=${args.required}\n      size=${ifDefined(args.size)}\n      .value=${args.value}\n    ></modus-wc-select>\n  `,\n};\n\nconst errorFeedback: IInputFeedbackProp = {\n  level: 'error',\n  message: 'Value is required.',\n};\n\nexport const WithErrorFeedback: Story = {\n  render: (args) => html`\n    <modus-wc-select\n      aria-label=\"Select input\"\n      .feedback=${errorFeedback}\n      label=${ifDefined(args.label)}\n      .options=${[]}\n      ?required=${true}\n      .value=${args.value}\n    ></modus-wc-select>\n  `,\n};\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - In 1.0 input state was maintained by the component. 2.0 components encourage users to follow a controlled\n  input model. See the Form Inputs [documentation](/docs/documentation-form-inputs--docs) for\n  additional info and examples.\n  - The options format has changed to use a standardized \\`ISelectOption\\` object array.\n  - Size values have changed from verbose names (\\`medium\\`, \\`large\\`) to abbreviations (\\`sm\\`, \\`md\\`, \\`lg\\`).\n\n#### Prop Mapping\n\n| 1.0 Prop              | 2.0 Prop            | Notes                                                |\n|-----------------------|---------------------|------------------------------------------------------|\n| aria-label            | aria-label          |                                                      |\n| disabled              | disabled            |                                                      |\n| error-text            | feedback.message    | Use \\`feedback\\` level                               |\n| helper-text           |                     | Not carried over                                     |\n| label                 | label               |                                                      |\n| options               | options             | Format changed to require array of \\`ISelectOption\\` objects |\n| options-display-prop  |                     | Not carried over                                     |\n| placeholder           |                     | Not carried over                                     |\n| required              | required            |                                                      |\n| size                  | size                | \\`medium\\` \u2192 \\`md\\`, \\`large\\` \u2192 \\`lg\\`              |\n| valid-text            | feedback.message    | Use \\`feedback\\` level                               |\n| value                 | value               |                                                      |\n\n#### Event Mapping\n\n| 1.0 Event    | 2.0 Event   | Notes            |\n|--------------|-------------|------------------|\n| valueChange  | inputChange |                  |\n| inputBlur    | inputBlur   |                  |\n        `,\n      },\n    },\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  render: () => html`<div></div>`,\n};\n",
  "storybook": {
    "examples": [
      "<modus-wc-select\n      aria-label=\"Select input\"\n      ?bordered=${args.bordered}\n      custom-class=${ifDefined(args['custom-class'])}\n      ?disabled=${args.disabled}\n      .feedback=${args.feedback}\n      input-aria-invalid=${ifDefined(args['input-aria-invalid'])}\n      input-id=${ifDefined(args['input-id'])}\n      input-tab-index=${ifDefined(args['input-tab-index'])}\n      label=${ifDefined(args.label)}\n      name=${ifDefined(args.name)}\n      .options=${args.options}\n      ?required=${args.required}\n      size=${ifDefined(args.size)}\n      .value=${args.value}\n    ></modus-wc-select>",
      "<modus-wc-select\n      aria-label=\"Select input\"\n      .feedback=${errorFeedback}\n      label=${ifDefined(args.label)}\n      .options=${[]}\n      ?required=${true}\n      .value=${args.value}\n    ></modus-wc-select>",
      "\n    <modus-wc-select\n      aria-label=\"Select input\"\n      ?bordered=${args.bordered}\n      custom-class=${ifDefined(args['custom-class'])}\n      ?disabled=${args.disabled}\n      .feedback=${args.feedback}\n      input-aria-invalid=${ifDefined(args['input-aria-invalid'])}\n      input-id=${ifDefined(args['input-id'])}\n      input-tab-index=${ifDefined(args['input-tab-index'])}\n      label=${ifDefined(args.label)}\n      name=${ifDefined(args.name)}\n      .options=${args.options}\n      ?required=${args.required}\n      size=${ifDefined(args.size)}\n      .value=${args.value}\n    ></modus-wc-select>\n  ",
      "\n    <modus-wc-select\n      aria-label=\"Select input\"\n      .feedback=${errorFeedback}\n      label=${ifDefined(args.label)}\n      .options=${[]}\n      ?required=${true}\n      .value=${args.value}\n    ></modus-wc-select>\n  "
    ],
    "variants": [],
    "prop_usage": {
      "label": [
        "Select input"
      ]
    }
  },
  "tag_name": "modus-wc-select"
}
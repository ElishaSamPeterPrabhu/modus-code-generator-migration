{
  "component_name": "modus-navbar",
  "version": "v1",
  "props": [
    {
      "name": "navAriaLabel",
      "description": "/**\n * @slot main - Renders custom main menu content\n * @slot notifications - Renders custom notifications content\n */\n\n@Component({\n  tag: 'modus-navbar',\n  styleUrl: 'modus-navbar.scss',\n  shadow: true,\n})\nexport class ModusNavbar {\n  @Element() element: HTMLElement;\n\n  /** (optional) The navbar's aria-label. */",
      "type": ": string"
    },
    {
      "name": "apps",
      "description": "/**\n * @slot main - Renders custom main menu content\n * @slot notifications - Renders custom notifications content\n */\n\n@Component({\n  tag: 'modus-navbar',\n  styleUrl: 'modus-navbar.scss',\n  shadow: true,\n})\nexport class ModusNavbar {\n  @Element() element: HTMLElement;\n\n  /** (optional) The navbar's aria-label. */",
      "type": "ModusNavbarApp[]"
    },
    {
      "name": "buttons",
      "description": "/**\n * @slot main - Renders custom main menu content\n * @slot notifications - Renders custom notifications content\n */\n\n@Component({\n  tag: 'modus-navbar',\n  styleUrl: 'modus-navbar.scss',\n  shadow: true,\n})\nexport class ModusNavbar {\n  @Element() element: HTMLElement;\n\n  /** (optional) The navbar's aria-label. */",
      "type": "ModusNavbarButton[]"
    },
    {
      "name": "enableSearchOverlay",
      "description": "/**\n * @slot main - Renders custom main menu content\n * @slot notifications - Renders custom notifications content\n */\n\n@Component({\n  tag: 'modus-navbar',\n  styleUrl: 'modus-navbar.scss',\n  shadow: true,\n})\nexport class ModusNavbar {\n  @Element() element: HTMLElement;\n\n  /** (optional) The navbar's aria-label. */",
      "type": "boolean"
    },
    {
      "name": "logoOptions",
      "description": "/**\n * @slot main - Renders custom main menu content\n * @slot notifications - Renders custom notifications content\n */\n\n@Component({\n  tag: 'modus-navbar',\n  styleUrl: 'modus-navbar.scss',\n  shadow: true,\n})\nexport class ModusNavbar {\n  @Element() element: HTMLElement;\n\n  /** (optional) The navbar's aria-label. */",
      "type": "ModusNavbarLogoOptions"
    },
    {
      "name": "dropdownOptions",
      "description": "/**\n * @slot main - Renders custom main menu content\n * @slot notifications - Renders custom notifications content\n */\n\n@Component({\n  tag: 'modus-navbar',\n  styleUrl: 'modus-navbar.scss',\n  shadow: true,\n})\nexport class ModusNavbar {\n  @Element() element: HTMLElement;\n\n  /** (optional) The navbar's aria-label. */",
      "type": "ModusNavbarDropdownOptions"
    },
    {
      "name": "selectedDropdownItem",
      "description": "/**\n * @slot main - Renders custom main menu content\n * @slot notifications - Renders custom notifications content\n */\n\n@Component({\n  tag: 'modus-navbar',\n  styleUrl: 'modus-navbar.scss',\n  shadow: true,\n})\nexport class ModusNavbar {\n  @Element() element: HTMLElement;\n\n  /** (optional) The navbar's aria-label. */",
      "type": "ModusNavbarDropdownItem"
    },
    {
      "name": "profileMenuOptions",
      "description": "/**\n * @slot main - Renders custom main menu content\n * @slot notifications - Renders custom notifications content\n */\n\n@Component({\n  tag: 'modus-navbar',\n  styleUrl: 'modus-navbar.scss',\n  shadow: true,\n})\nexport class ModusNavbar {\n  @Element() element: HTMLElement;\n\n  /** (optional) The navbar's aria-label. */",
      "type": "ModusProfileMenuOptions"
    },
    {
      "name": "reverse",
      "description": "/**\n * @slot main - Renders custom main menu content\n * @slot notifications - Renders custom notifications content\n */\n\n@Component({\n  tag: 'modus-navbar',\n  styleUrl: 'modus-navbar.scss',\n  shadow: true,\n})\nexport class ModusNavbar {\n  @Element() element: HTMLElement;\n\n  /** (optional) The navbar's aria-label. */",
      "type": "boolean"
    },
    {
      "name": "searchTooltip",
      "description": "/**\n * @slot main - Renders custom main menu content\n * @slot notifications - Renders custom notifications content\n */\n\n@Component({\n  tag: 'modus-navbar',\n  styleUrl: 'modus-navbar.scss',\n  shadow: true,\n})\nexport class ModusNavbar {\n  @Element() element: HTMLElement;\n\n  /** (optional) The navbar's aria-label. */",
      "type": "ModusNavbarTooltip"
    },
    {
      "name": "showAppsMenu",
      "description": "/**\n * @slot main - Renders custom main menu content\n * @slot notifications - Renders custom notifications content\n */\n\n@Component({\n  tag: 'modus-navbar',\n  styleUrl: 'modus-navbar.scss',\n  shadow: true,\n})\nexport class ModusNavbar {\n  @Element() element: HTMLElement;\n\n  /** (optional) The navbar's aria-label. */",
      "type": "boolean"
    },
    {
      "name": "showMainMenu",
      "description": "/**\n * @slot main - Renders custom main menu content\n * @slot notifications - Renders custom notifications content\n */\n\n@Component({\n  tag: 'modus-navbar',\n  styleUrl: 'modus-navbar.scss',\n  shadow: true,\n})\nexport class ModusNavbar {\n  @Element() element: HTMLElement;\n\n  /** (optional) The navbar's aria-label. */",
      "type": "boolean"
    },
    {
      "name": "showNotifications",
      "description": "/**\n * @slot main - Renders custom main menu content\n * @slot notifications - Renders custom notifications content\n */\n\n@Component({\n  tag: 'modus-navbar',\n  styleUrl: 'modus-navbar.scss',\n  shadow: true,\n})\nexport class ModusNavbar {\n  @Element() element: HTMLElement;\n\n  /** (optional) The navbar's aria-label. */",
      "type": "boolean"
    },
    {
      "name": "notificationCount",
      "description": "/**\n * @slot main - Renders custom main menu content\n * @slot notifications - Renders custom notifications content\n */\n\n@Component({\n  tag: 'modus-navbar',\n  styleUrl: 'modus-navbar.scss',\n  shadow: true,\n})\nexport class ModusNavbar {\n  @Element() element: HTMLElement;\n\n  /** (optional) The navbar's aria-label. */",
      "type": "number"
    },
    {
      "name": "showPendoPlaceholder",
      "description": "/**\n * @slot main - Renders custom main menu content\n * @slot notifications - Renders custom notifications content\n */\n\n@Component({\n  tag: 'modus-navbar',\n  styleUrl: 'modus-navbar.scss',\n  shadow: true,\n})\nexport class ModusNavbar {\n  @Element() element: HTMLElement;\n\n  /** (optional) The navbar's aria-label. */",
      "type": "boolean"
    },
    {
      "name": "showProfile",
      "description": "/**\n * @slot main - Renders custom main menu content\n * @slot notifications - Renders custom notifications content\n */\n\n@Component({\n  tag: 'modus-navbar',\n  styleUrl: 'modus-navbar.scss',\n  shadow: true,\n})\nexport class ModusNavbar {\n  @Element() element: HTMLElement;\n\n  /** (optional) The navbar's aria-label. */",
      "type": ""
    },
    {
      "name": "showSearch",
      "description": "/**\n * @slot main - Renders custom main menu content\n * @slot notifications - Renders custom notifications content\n */\n\n@Component({\n  tag: 'modus-navbar',\n  styleUrl: 'modus-navbar.scss',\n  shadow: true,\n})\nexport class ModusNavbar {\n  @Element() element: HTMLElement;\n\n  /** (optional) The navbar's aria-label. */",
      "type": "boolean"
    },
    {
      "name": "showShadow",
      "description": "/**\n * @slot main - Renders custom main menu content\n * @slot notifications - Renders custom notifications content\n */\n\n@Component({\n  tag: 'modus-navbar',\n  styleUrl: 'modus-navbar.scss',\n  shadow: true,\n})\nexport class ModusNavbar {\n  @Element() element: HTMLElement;\n\n  /** (optional) The navbar's aria-label. */",
      "type": "boolean"
    },
    {
      "name": "showHelp",
      "description": "/**\n * @slot main - Renders custom main menu content\n * @slot notifications - Renders custom notifications content\n */\n\n@Component({\n  tag: 'modus-navbar',\n  styleUrl: 'modus-navbar.scss',\n  shadow: true,\n})\nexport class ModusNavbar {\n  @Element() element: HTMLElement;\n\n  /** (optional) The navbar's aria-label. */",
      "type": "boolean"
    },
    {
      "name": "helpTooltip",
      "description": "/**\n * @slot main - Renders custom main menu content\n * @slot notifications - Renders custom notifications content\n */\n\n@Component({\n  tag: 'modus-navbar',\n  styleUrl: 'modus-navbar.scss',\n  shadow: true,\n})\nexport class ModusNavbar {\n  @Element() element: HTMLElement;\n\n  /** (optional) The navbar's aria-label. */",
      "type": "ModusNavbarTooltip"
    },
    {
      "name": "helpUrl",
      "description": "/**\n * @slot main - Renders custom main menu content\n * @slot notifications - Renders custom notifications content\n */\n\n@Component({\n  tag: 'modus-navbar',\n  styleUrl: 'modus-navbar.scss',\n  shadow: true,\n})\nexport class ModusNavbar {\n  @Element() element: HTMLElement;\n\n  /** (optional) The navbar's aria-label. */",
      "type": "string"
    },
    {
      "name": "variant",
      "description": "/**\n * @slot main - Renders custom main menu content\n * @slot notifications - Renders custom notifications content\n */\n\n@Component({\n  tag: 'modus-navbar',\n  styleUrl: 'modus-navbar.scss',\n  shadow: true,\n})\nexport class ModusNavbar {\n  @Element() element: HTMLElement;\n\n  /** (optional) The navbar's aria-label. */",
      "type": "'default' | 'blue'"
    }
  ],
  "events": [],
  "slots": [],
  "default_values": {
    "apps": "{this.apps}\n                        reverse={this.reverse}\n                        onAppOpen={(event) => this.handleAppsMenuAppOpen(event)}\n                      />\n                    )}\n                  </div>\n                )}\n                {this.showProfile && (\n                  <div class=\"profile-menu\">\n                    <modus-tooltip\n                      text={this.profileMenuOptions?.tooltip?.text}\n                      aria-label={this.profileMenuOptions?.tooltip?.ariaLabel || undefined}\n                      disabled={this.profileMenuVisible}\n                      position=\"bottom\">\n                      {this.profileMenuOptions?.avatarUrl ? (\n                        <img\n                          class=\"avatar\"\n                          height=\"32\"\n                          src={this.profileMenuOptions?.avatarUrl}\n                          alt=\"Modus navbar profile menu avatar\"\n                          onClick={(event) => this.profileMenuClickHandler(event)}\n                          onKeyDown={(event) => this.profileMenuKeydownHandler(event)}\n                          tabIndex={0}\n                          ref={(el) => (this.profileAvatarElement = el as HTMLImageElement)}\n                        />\n                      ) : (\n                        <span\n                          class=\"initials\"\n                          onClick={(event) => this.profileMenuClickHandler(event)}\n                          onKeyDown={(event) => this.profileMenuKeydownHandler(event)}\n                          tabIndex={0}>\n                          {this.profileMenuOptions?.initials}\n                        </span>\n                      )}\n                    </modus-tooltip>\n                    {this.profileMenuVisible && (\n                      <modus-navbar-profile-menu\n                        avatar-url={this.profileMenuOptions?.avatarUrl}\n                        email={this.profileMenuOptions?.email}\n                        initials={this.profileMenuOptions?.initials}\n                        links={this.profileMenuOptions?.links}\n                        reverse={this.reverse}\n                        username={this.profileMenuOptions?.username}\n                        variant={this.variant}\n                        sign-out-text={this.profileMenuOptions?.signOutText}>\n                        <slot name={this.SLOT_PROFILE_MENU}></slot>\n                      </modus-navbar-profile-menu>\n                    )}\n                  </div>\n                )}\n              </div>\n            </Fragment>\n          )}\n          {overlay}\n        </nav>\n      </Host>\n    )",
    "buttons": "> a.orderIndex - b.orderIndex)",
    "selectedDropdownItem": "item",
    "profileMenuOptions": "{\n        ...this.profileMenuOptions,\n        avatarUrl: null,\n      }",
    "reverse": "{this.reverse}\n                    selectedItem={this.selectedDropdownItem}\n                  />\n                )}\n              </div>\n              <div class={`right ${direction}`}>\n                {this.showSearch && (\n                  <div class=\"navbar-button search\" data-test-id=\"search-menu\">\n                    <modus-tooltip\n                      text={this.searchTooltip?.text}\n                      aria-label={this.searchTooltip?.ariaLabel || undefined}\n                      position=\"bottom\">\n                      <span\n                        class=\"navbar-button-icon\"\n                        aria-label=\"Search\"\n                        role=\"button\"\n                        onKeyDown={(event) => this.searchMenuKeydownHandler(event)}\n                        tabIndex={0}\n                        id=\"search-button\"\n                        ref={(el) => (this.searchButton = el as HTMLElement)}>\n                        <IconSearch\n                          size=\"24\"\n                          onClick={(event) => this.searchMenuClickHandler(event)}\n                          pressed={this.searchOverlayVisible}\n                        />\n                      </span>\n                    </modus-tooltip>\n                  </div>\n                )}\n                <ModusNavbarButtonList\n                  buttons={sortedButtonList}\n                  reverse={this.reverse}\n                  openButtonMenuId={this.openButtonMenuId}\n                  onKeyDown={(event, button) => this.buttonMenuKeyDownHandler(event, button)}\n                  onClick={(event, button) => this.buttonMenuClickHandler(event, button)}></ModusNavbarButtonList>\n                {this.showNotifications && (\n                  <div class=\"navbar-button\" data-test-id=\"notifications-menu\">\n                    <span\n                      class=\"navbar-button-icon\"\n                      role=\"button\"\n                      aria-label=\"Notifications\"\n                      onKeyDown={(event) => this.notificationsMenuKeydownHandler(event)}\n                      tabIndex={0}>\n                      <IconNotifications\n                        size=\"24\"\n                        onClick={(event) => this.notificationsMenuClickHandler(event)}\n                        pressed={this.notificationsMenuVisible}\n                      />\n                      {counterValue && (\n                        <modus-badge\n                          class=\"badge\"\n                          color=\"danger\"\n                          size=\"medium\"\n                          type=\"counter\"\n                          aria-label=\"Notification badge\">\n                          {counterValue}\n                        </modus-badge>\n                      )}\n                    </span>\n                    {this.notificationsMenuVisible && (\n                      <modus-navbar-notifications-menu reverse={this.reverse}>\n                        <slot name={this.SLOT_NOTIFICATIONS}></slot>\n                      </modus-navbar-notifications-menu>\n                    )}\n                  </div>\n                )}\n                {this.showPendoPlaceholder && <div class={'pendo-placeholder'} />}\n                {this.showHelp && (\n                  <div class=\"navbar-button\" data-test-id=\"help-menu\">\n                    <modus-tooltip\n                      text={this.helpTooltip?.text}\n                      aria-label={this.helpTooltip?.ariaLabel || undefined}\n                      position=\"bottom\">\n                      <span\n                        class=\"navbar-button-icon\"\n                        role=\"button\"\n                        onKeyDown={(event) => this.helpMenuKeyHandler(event)}\n                        aria-label=\"Help\"\n                        onClick={(event) => this.helpMenuClickHandler(event)}\n                        tabIndex={0}>\n                        <IconHelp size=\"24\" />\n                      </span>\n                    </modus-tooltip>\n                  </div>\n                )}\n                {this.showAppsMenu && (\n                  <div class=\"navbar-button\" data-test-id=\"apps-menu\">\n                    <span\n                      class=\"navbar-button-icon\"\n                      role=\"button\"\n                      aria-label=\"Apps\"\n                      onKeyDown={(event) => this.appsMenuKeydownHandler(event)}\n                      tabIndex={0}>\n                      <IconApps\n                        size=\"24\"\n                        pressed={this.appsMenuVisible}\n                        onClick={(event) => this.appsMenuClickHandler(event)}\n                      />\n                    </span>\n                    {this.appsMenuVisible && (\n                      <modus-navbar-apps-menu\n                        apps={this.apps}\n                        reverse={this.reverse}\n                        onAppOpen={(event) => this.handleAppsMenuAppOpen(event)}\n                      />\n                    )}\n                  </div>\n                )}\n                {this.showProfile && (\n                  <div class=\"profile-menu\">\n                    <modus-tooltip\n                      text={this.profileMenuOptions?.tooltip?.text}\n                      aria-label={this.profileMenuOptions?.tooltip?.ariaLabel || undefined}\n                      disabled={this.profileMenuVisible}\n                      position=\"bottom\">\n                      {this.profileMenuOptions?.avatarUrl ? (\n                        <img\n                          class=\"avatar\"\n                          height=\"32\"\n                          src={this.profileMenuOptions?.avatarUrl}\n                          alt=\"Modus navbar profile menu avatar\"\n                          onClick={(event) => this.profileMenuClickHandler(event)}\n                          onKeyDown={(event) => this.profileMenuKeydownHandler(event)}\n                          tabIndex={0}\n                          ref={(el) => (this.profileAvatarElement = el as HTMLImageElement)}\n                        />\n                      ) : (\n                        <span\n                          class=\"initials\"\n                          onClick={(event) => this.profileMenuClickHandler(event)}\n                          onKeyDown={(event) => this.profileMenuKeydownHandler(event)}\n                          tabIndex={0}>\n                          {this.profileMenuOptions?.initials}\n                        </span>\n                      )}\n                    </modus-tooltip>\n                    {this.profileMenuVisible && (\n                      <modus-navbar-profile-menu\n                        avatar-url={this.profileMenuOptions?.avatarUrl}\n                        email={this.profileMenuOptions?.email}\n                        initials={this.profileMenuOptions?.initials}\n                        links={this.profileMenuOptions?.links}\n                        reverse={this.reverse}\n                        username={this.profileMenuOptions?.username}\n                        variant={this.variant}\n                        sign-out-text={this.profileMenuOptions?.signOutText}>\n                        <slot name={this.SLOT_PROFILE_MENU}></slot>\n                      </modus-navbar-profile-menu>\n                    )}\n                  </div>\n                )}\n              </div>\n            </Fragment>\n          )}\n          {overlay}\n        </nav>\n      </Host>\n    )",
    "searchTooltip": "{this.searchTooltip?.ariaLabel || undefined}\n                      position=\"bottom\">\n                      <span\n                        class=\"navbar-button-icon\"\n                        aria-label=\"Search\"\n                        role=\"button\"\n                        onKeyDown={(event) => this.searchMenuKeydownHandler(event)}\n                        tabIndex={0}\n                        id=\"search-button\"\n                        ref={(el) => (this.searchButton = el as HTMLElement)}>\n                        <IconSearch\n                          size=\"24\"\n                          onClick={(event) => this.searchMenuClickHandler(event)}\n                          pressed={this.searchOverlayVisible}\n                        />\n                      </span>\n                    </modus-tooltip>\n                  </div>\n                )}\n                <ModusNavbarButtonList\n                  buttons={sortedButtonList}\n                  reverse={this.reverse}\n                  openButtonMenuId={this.openButtonMenuId}\n                  onKeyDown={(event, button) => this.buttonMenuKeyDownHandler(event, button)}\n                  onClick={(event, button) => this.buttonMenuClickHandler(event, button)}></ModusNavbarButtonList>\n                {this.showNotifications && (\n                  <div class=\"navbar-button\" data-test-id=\"notifications-menu\">\n                    <span\n                      class=\"navbar-button-icon\"\n                      role=\"button\"\n                      aria-label=\"Notifications\"\n                      onKeyDown={(event) => this.notificationsMenuKeydownHandler(event)}\n                      tabIndex={0}>\n                      <IconNotifications\n                        size=\"24\"\n                        onClick={(event) => this.notificationsMenuClickHandler(event)}\n                        pressed={this.notificationsMenuVisible}\n                      />\n                      {counterValue && (\n                        <modus-badge\n                          class=\"badge\"\n                          color=\"danger\"\n                          size=\"medium\"\n                          type=\"counter\"\n                          aria-label=\"Notification badge\">\n                          {counterValue}\n                        </modus-badge>\n                      )}\n                    </span>\n                    {this.notificationsMenuVisible && (\n                      <modus-navbar-notifications-menu reverse={this.reverse}>\n                        <slot name={this.SLOT_NOTIFICATIONS}></slot>\n                      </modus-navbar-notifications-menu>\n                    )}\n                  </div>\n                )}\n                {this.showPendoPlaceholder && <div class={'pendo-placeholder'} />}\n                {this.showHelp && (\n                  <div class=\"navbar-button\" data-test-id=\"help-menu\">\n                    <modus-tooltip\n                      text={this.helpTooltip?.text}\n                      aria-label={this.helpTooltip?.ariaLabel || undefined}\n                      position=\"bottom\">\n                      <span\n                        class=\"navbar-button-icon\"\n                        role=\"button\"\n                        onKeyDown={(event) => this.helpMenuKeyHandler(event)}\n                        aria-label=\"Help\"\n                        onClick={(event) => this.helpMenuClickHandler(event)}\n                        tabIndex={0}>\n                        <IconHelp size=\"24\" />\n                      </span>\n                    </modus-tooltip>\n                  </div>\n                )}\n                {this.showAppsMenu && (\n                  <div class=\"navbar-button\" data-test-id=\"apps-menu\">\n                    <span\n                      class=\"navbar-button-icon\"\n                      role=\"button\"\n                      aria-label=\"Apps\"\n                      onKeyDown={(event) => this.appsMenuKeydownHandler(event)}\n                      tabIndex={0}>\n                      <IconApps\n                        size=\"24\"\n                        pressed={this.appsMenuVisible}\n                        onClick={(event) => this.appsMenuClickHandler(event)}\n                      />\n                    </span>\n                    {this.appsMenuVisible && (\n                      <modus-navbar-apps-menu\n                        apps={this.apps}\n                        reverse={this.reverse}\n                        onAppOpen={(event) => this.handleAppsMenuAppOpen(event)}\n                      />\n                    )}\n                  </div>\n                )}\n                {this.showProfile && (\n                  <div class=\"profile-menu\">\n                    <modus-tooltip\n                      text={this.profileMenuOptions?.tooltip?.text}\n                      aria-label={this.profileMenuOptions?.tooltip?.ariaLabel || undefined}\n                      disabled={this.profileMenuVisible}\n                      position=\"bottom\">\n                      {this.profileMenuOptions?.avatarUrl ? (\n                        <img\n                          class=\"avatar\"\n                          height=\"32\"\n                          src={this.profileMenuOptions?.avatarUrl}\n                          alt=\"Modus navbar profile menu avatar\"\n                          onClick={(event) => this.profileMenuClickHandler(event)}\n                          onKeyDown={(event) => this.profileMenuKeydownHandler(event)}\n                          tabIndex={0}\n                          ref={(el) => (this.profileAvatarElement = el as HTMLImageElement)}\n                        />\n                      ) : (\n                        <span\n                          class=\"initials\"\n                          onClick={(event) => this.profileMenuClickHandler(event)}\n                          onKeyDown={(event) => this.profileMenuKeydownHandler(event)}\n                          tabIndex={0}>\n                          {this.profileMenuOptions?.initials}\n                        </span>\n                      )}\n                    </modus-tooltip>\n                    {this.profileMenuVisible && (\n                      <modus-navbar-profile-menu\n                        avatar-url={this.profileMenuOptions?.avatarUrl}\n                        email={this.profileMenuOptions?.email}\n                        initials={this.profileMenuOptions?.initials}\n                        links={this.profileMenuOptions?.links}\n                        reverse={this.reverse}\n                        username={this.profileMenuOptions?.username}\n                        variant={this.variant}\n                        sign-out-text={this.profileMenuOptions?.signOutText}>\n                        <slot name={this.SLOT_PROFILE_MENU}></slot>\n                      </modus-navbar-profile-menu>\n                    )}\n                  </div>\n                )}\n              </div>\n            </Fragment>\n          )}\n          {overlay}\n        </nav>\n      </Host>\n    )",
    "showProfile": "true",
    "helpTooltip": "{this.helpTooltip?.ariaLabel || undefined}\n                      position=\"bottom\">\n                      <span\n                        class=\"navbar-button-icon\"\n                        role=\"button\"\n                        onKeyDown={(event) => this.helpMenuKeyHandler(event)}\n                        aria-label=\"Help\"\n                        onClick={(event) => this.helpMenuClickHandler(event)}\n                        tabIndex={0}>\n                        <IconHelp size=\"24\" />\n                      </span>\n                    </modus-tooltip>\n                  </div>\n                )}\n                {this.showAppsMenu && (\n                  <div class=\"navbar-button\" data-test-id=\"apps-menu\">\n                    <span\n                      class=\"navbar-button-icon\"\n                      role=\"button\"\n                      aria-label=\"Apps\"\n                      onKeyDown={(event) => this.appsMenuKeydownHandler(event)}\n                      tabIndex={0}>\n                      <IconApps\n                        size=\"24\"\n                        pressed={this.appsMenuVisible}\n                        onClick={(event) => this.appsMenuClickHandler(event)}\n                      />\n                    </span>\n                    {this.appsMenuVisible && (\n                      <modus-navbar-apps-menu\n                        apps={this.apps}\n                        reverse={this.reverse}\n                        onAppOpen={(event) => this.handleAppsMenuAppOpen(event)}\n                      />\n                    )}\n                  </div>\n                )}\n                {this.showProfile && (\n                  <div class=\"profile-menu\">\n                    <modus-tooltip\n                      text={this.profileMenuOptions?.tooltip?.text}\n                      aria-label={this.profileMenuOptions?.tooltip?.ariaLabel || undefined}\n                      disabled={this.profileMenuVisible}\n                      position=\"bottom\">\n                      {this.profileMenuOptions?.avatarUrl ? (\n                        <img\n                          class=\"avatar\"\n                          height=\"32\"\n                          src={this.profileMenuOptions?.avatarUrl}\n                          alt=\"Modus navbar profile menu avatar\"\n                          onClick={(event) => this.profileMenuClickHandler(event)}\n                          onKeyDown={(event) => this.profileMenuKeydownHandler(event)}\n                          tabIndex={0}\n                          ref={(el) => (this.profileAvatarElement = el as HTMLImageElement)}\n                        />\n                      ) : (\n                        <span\n                          class=\"initials\"\n                          onClick={(event) => this.profileMenuClickHandler(event)}\n                          onKeyDown={(event) => this.profileMenuKeydownHandler(event)}\n                          tabIndex={0}>\n                          {this.profileMenuOptions?.initials}\n                        </span>\n                      )}\n                    </modus-tooltip>\n                    {this.profileMenuVisible && (\n                      <modus-navbar-profile-menu\n                        avatar-url={this.profileMenuOptions?.avatarUrl}\n                        email={this.profileMenuOptions?.email}\n                        initials={this.profileMenuOptions?.initials}\n                        links={this.profileMenuOptions?.links}\n                        reverse={this.reverse}\n                        username={this.profileMenuOptions?.username}\n                        variant={this.variant}\n                        sign-out-text={this.profileMenuOptions?.signOutText}>\n                        <slot name={this.SLOT_PROFILE_MENU}></slot>\n                      </modus-navbar-profile-menu>\n                    )}\n                  </div>\n                )}\n              </div>\n            </Fragment>\n          )}\n          {overlay}\n        </nav>\n      </Host>\n    )",
    "variant": "'default'"
  },
  "documentation": "\n\n--- modus-navbar-storybook-docs.mdx ---\n\nimport { Story } from '@storybook/blocks';\nimport * as Navbar from './modus-navbar.stories.tsx';\n\n# Navbar\n\n---\n\n[Modus Navbar](https://modus.trimble.com/components/web/navbars/) web components are the header of all Trimble applications. They are referenced using the `<modus-navbar>` custom HTML element.\n\nThis component utilizes the slot element, allowing you to render your own HTML in the help and notification menus.\n\n#### Implementation Details\n\n- The only required navigation items are the product logo and the user menu. The rest are hidden by default.\n- If a profile menu avatarUrl is provided it will take rendering preference over initials.\n  - If the provided avatarUrl fails to load, initials will be used as a fallback.\n- If the profile menu signOutText is provided, a sign out button with the provided text will be rendered else the sign out button will be rendered with the text \"Sign out\".\n- If `buttons` are provided, Navbar creates the icon buttons dynamically\n  - The `slot` allows rendering custom HTML on button click by linking the slot name with button id.\n- If a `show-search` with `enable-search-overlay` set as true then search overly will open on search button click, if enable-search-overlay set to false then search button emit the event for client.\n- The `slot` allows rendering custom HTML by linking the slot name with `profileMenu` id under the links.\n\n### Default\n\n<Story of={Navbar.Default} />\n\n```html\n<modus-navbar id=\"working\" show-apps-menu show-help show-main-menu>\n  <div slot=\"main\" style=\"height:300px;\">Render your own main menu.</div>\n  <div slot=\"addMenu\">Render your own add menu.</div>\n  <div slot=\"notificationMenu\">Render your own notification menu.</div>\n  <div slot=\"profileMenu\">Render your own profile menu content.</div>\n</modus-navbar>\n\n<script>\n  const element = document.querySelector('modus-navbar');\n  element.apps = [\n    {\n      description: 'The One Trimble Design System',\n      logoUrl: 'https://modus.trimble.com/favicon.svg',\n      name: 'Trimble Modus',\n      url: 'https://modus.trimble.com/',\n    },\n  ];\n  element.logoOptions = {\n    primary: {\n      url: 'https://modus-bootstrap.trimble.com/img/trimble-logo-rev.svg',\n      height: 24,\n    },\n    secondary: { url: 'https://modus.trimble.com/favicon.svg', height: 24 },\n  };\n  element.dropdownOptions = {\n    ariaLabel: 'Project dropdown',\n    defaultValue: '2',\n    items: [\n      { text: 'Project 1', value: '1' },\n      { text: 'Project 2', value: '2' },\n      { text: 'Project 3', value: '3' },\n    ],\n  };\n  element.profileMenuOptions = {\n    avatarUrl: '...',\n    email: 'modus_user@trimble.com',\n    initials: 'MU',\n    signOutText: 'Sign out',\n    username: 'Modus User',\n    links: [\n      {\n        id: 'link1',\n        display: 'Link 1',\n        icon: 'moon',\n      },\n      {\n        id: 'link2',\n        display: 'Link 2',\n        icon: 'sun',\n      },\n    ],\n  };\n</script>\n```\n\n### Failed Avatar (Initials Fallback)\n\n<Story of={Navbar.FailedAvatar} />\n\n```html\n<modus-navbar id=\"broken\" show-apps-menu show-help show-main-menu show-notifications>\n  <div slot=\"main\" style=\"height:300px;\">Render your own main menu.</div>\n  <div slot=\"notifications\">Render your own notifications.</div>\n</modus-navbar>\n\n<script>\n  const element = document.querySelector('modus-navbar');\n  element.apps = [\n    {\n      description: 'The One Trimble Design System',\n      logoUrl: 'https://modus.trimble.com/favicon.svg',\n      name: 'Trimble Modus',\n      url: 'https://modus.trimble.com/',\n    },\n  ];\n  element.logoOptions = {\n    primary: {\n      url: 'https://modus-bootstrap.trimble.com/img/trimble-logo-rev.svg',\n      height: 24,\n    },\n    secondary: { url: 'https://modus.trimble.com/favicon.svg', height: 24 },\n  };\n  element.profileMenuOptions = {\n    avatarUrl: 'https://avatar.example.com/broken-image-link.png',\n    email: 'modus_user@trimble.com',\n    initials: 'MU',\n    signOutText: 'Sign out',\n    username: 'Modus User',\n  };\n</script>\n```\n\n### Navbar with Optional Features\n\nAdd optional features to the navbar.\n\n<Story of={Navbar.WithOptionalFeatures} />\n\n```html\n<modus-navbar id=\"with-optional-features\" show-apps-menu show-help show-main-menu show-notifications>\n  <div slot=\"main\" style=\"height:300px;\">Render your own main menu.</div>\n  <div slot=\"notifications\">Render your own notifications.</div>\n</modus-navbar>\n\n<script>\n  const element = document.querySelector('modus-navbar');\n  element.apps = [\n    {\n      description: 'The One Trimble Design System',\n      logoUrl: 'https://modus.trimble.com/favicon.svg',\n      name: 'Trimble Modus',\n      url: 'https://modus.trimble.com/',\n    },\n  ];\n  element.logoOptions = {\n    primary: {\n      url: 'https://modus-bootstrap.trimble.com/img/trimble-logo-rev.svg',\n      height: 24,\n    },\n    secondary: { url: 'https://modus.trimble.com/favicon.svg', height: 24 },\n  };\n\n  const items = [\n    { text: 'Project 1', value: '1' },\n    { text: 'Project 2', value: '2' },\n    { text: 'Project 3', value: '3' },\n  ];\n  element.dropdownOptions = {\n    ariaLabel: 'Project dropdown',\n    items,\n  };\n  element.selectedDropdownItem = items[1];\n\n  element.profileMenuOptions = {\n    avatarUrl: 'https://avatar.example.com/broken-image-link.png',\n    email: 'modus_user@trimble.com',\n    initials: 'MU',\n    signOutText: 'Sign out',\n    username: 'Modus User',\n  };\n</script>\n```\n\n### Blue Navbar\n\nUse the `variant` prop to choose a blue background navbar.\n\n<Story of={Navbar.BlueNavbar} />\n\n```html\n<modus-navbar id=\"blue-theme\" show-apps-menu show-help show-main-menu show-notifications variant=\"blue\">\n  <div slot=\"main\" style=\"height:300px;\">Render your own main menu.</div>\n  <div slot=\"notifications\">Render your own notifications.</div>\n</modus-navbar>\n\n<script>\n  const element = document.querySelector('modus-navbar');\n  element.apps = [\n    {\n      description: 'The One Trimble Design System',\n      logoUrl: 'https://modus.trimble.com/favicon.svg',\n      name: 'Trimble Modus',\n      url: 'https://modus.trimble.com/',\n    },\n  ];\n  element.logoOptions = {\n    primary: {\n      url: 'https://modus-bootstrap.trimble.com/img/trimble-logo-rev.svg',\n      height: 24,\n    },\n    secondary: { url: 'https://modus.trimble.com/favicon.svg', height: 24 },\n  };\n  element.profileMenuOptions = {\n    avatarUrl: 'https://avatar.example.com/broken-image-link.png',\n    email: 'modus_user@trimble.com',\n    initials: 'MU',\n    signOutText: 'Sign out',\n    username: 'Modus User',\n  };\n</script>\n```\n\n### Types\n\n```ts\ninterface ModusNavbarApp {\n  description?: string;\n  logoUrl: string;\n  name: string;\n  url: string;\n  category?: string;\n  showCategory?: boolean;\n}\n\ninterface ModusNavbarProfileMenuLink {\n  display: string;\n  id: string;\n  icon?: string;\n}\n\ninterface ModusNavbarLogo {\n  alt?: string;\n  url: string;\n  height?: string;\n}\n\ninterface ModusNavbarLogoOptions {\n  primary?: ModusNavbarLogo;\n  secondary?: ModusNavbarLogo;\n  clickable?: boolean;\n}\n\ninterface ModusNavbarTooltip {\n  text: string;\n  ariaLabel?: string;\n}\n\ninterface ModusProfileMenuOptions {\n  avatarUrl?: string;\n  email?: string;\n  initials?: string;\n  signOutText?: string;\n  links?: ModusNavbarProfileMenuLink[];\n  username: string;\n  tooltip: ModusNavbarTooltip;\n}\n\ninterface ModusNavbarButton {\n  id: string;\n  icon: string;\n  orderIndex: number;\n  hideMenu?: boolean;\n  tooltip?: ModusNavbarTooltip;\n}\n\nexport interface ModusNavbarDropdownItem {\n  text: string;\n  value: string;\n}\n\nexport interface ModusNavbarDropdownOptions {\n  ariaLabel: string;\n  items: ModusNavbarDropdownItem[];\n}\n```\n\n### Properties\n\n| Property               | Attribute                | Description                                                                                                                                                                             | Type                         | Default     |\n| ---------------------- | ------------------------ | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------- | ----------- |\n| `apps`                 | --                       | (optional) The apps to render in the apps menu.                                                                                                                                         | `ModusNavbarApp[]`           | `undefined` |\n| `navAriaLabel`         | `nav-aria-label`         | (optional) The navbar's aria-label.                                                                                                                                                     | `string`                     | `undefined` |\n| `buttons`              | --                       | (optional) The buttons to render in the Navbar.                                                                                                                                         | `ModusNavbarButton[]`        | `undefined` |\n| `notificationCount`    | `notification-count`     | (optional) To add the counter value to the notification icon.                                                                                                                           | `number`                     | `undefined` |\n| `enableSearchOverlay`  | `enable-search-overlay`  | (optional) Whether to show search overlay or not.                                                                                                                                       | `boolean`                    | `undefined` |\n| `helpTooltip`          | --                       | (optional) Help tooltip.                                                                                                                                                                | `ModusNavbarTooltip`         | `undefined` |\n| `helpUrl`              | `help-url`               | (optional) Help URL.                                                                                                                                                                    | `string`                     | `undefined` |\n| `logoOptions`          | --                       | (optional) Set the primary logo to display when the screen size is greater than 576 pixels, and the secondary logo to display when the screen size is less than or equal to 576 pixels. | `ModusNavbarLogoOptions`     | `undefined` |\n| `dropdownOptions`      | --                       | (optional) Renders a modus dropdown in the Navbar.                                                                                                                                      | `ModusNavbarDropdownOptions` | `undefined` |\n| `selectedDropdownItem` | --                       | (optional) The selected dropdown item.                                                                                                                                                  | `ModusNavbarDropdownItem`    | `undefined` |\n| `profileMenuOptions`   | --                       | (required) Profile menu options.                                                                                                                                                        | `ModusProfileMenuOptions`    | `undefined` |\n| `reverse`              | `reverse`                | (optional) Whether to display the navbar items in reverse order.                                                                                                                        | `boolean`                    | `undefined` |\n| `searchTooltip`        | --                       | (optional) Search tooltip.                                                                                                                                                              | `ModusNavbarTooltip`         | `undefined` |\n| `showAppsMenu`         | `show-apps-menu`         | (optional) Whether to show the apps menu.                                                                                                                                               | `boolean`                    | `undefined` |\n| `showHelp`             | `show-help`              | (optional) Whether to show help.                                                                                                                                                        | `boolean`                    | `undefined` |\n| `showMainMenu`         | `show-main-menu`         | (optional) Whether to show the main menu.                                                                                                                                               | `boolean`                    | `undefined` |\n| `showNotifications`    | `show-notifications`     | (optional) Whether to show notifications.                                                                                                                                               | `boolean`                    | `undefined` |\n| `showPendoPlaceholder` | `show-pendo-placeholder` | (optional) Whether to show the placeholder for Pendo.                                                                                                                                   | `boolean`                    | `undefined` |\n| `showProfile`          | `show-profile`           | (optional) Whether to show the profile.                                                                                                                                                 | `boolean`                    | `true`      |\n| `showSearch`           | `show-search`            | (optional) Whether to show search.                                                                                                                                                      | `boolean`                    | `undefined` |\n| `showShadow`           | `show-shadow`            | (optional) Whether to show a shadow under the navbar.                                                                                                                                   | `boolean`                    | `undefined` |\n| `variant`              | `variant`                | (optional) Color variants for NavBar.                                                                                                                                                   | `\"blue\" \\| \"default\"`        | `'default'` |\n\n### DOM Events\n\n| Event                     | Description                                                             | Type                                                      |\n| ------------------------- | ----------------------------------------------------------------------- | --------------------------------------------------------- |\n| `appsMenuAppOpen`         | An event that fires when an apps menu app opens.                        | `CustomEvent<ModusNavbarApp>`                             |\n| `appsMenuOpen`            | An event that fires when the apps menu opens.                           | `CustomEvent<void>`                                       |\n| `buttonClick`             | An event that fires when a button in the custom button list is clicked. | `CustomEvent<string>`                                     |\n| `dropdownItemSelect`      | An event that fires when a dropdown item is selected.                   | `CustomEvent<ModusNavbarDropdownItem>`                    |\n| `helpOpen`                | An event that fires when the help link opens.                           | `CustomEvent<void>`                                       |\n| `mainMenuClick`           | An event that fires on main menu click.                                 | `CustomEvent<KeyboardEvent>` or `CustomEvent<MouseEvent>` |\n| `notificationsMenuOpen`   | An event that fires when the notifications menu opens.                  | `CustomEvent<void>`                                       |\n| `productLogoClick`        | An event that fires on product logo click.                              | `CustomEvent<MouseEvent>`                                 |\n| `profileMenuLinkClick`    | An event that fires on profile menu link click.                         | `CustomEvent<string>`                                     |\n| `profileMenuOpen`         | An event that fires when the profile menu opens.                        | `CustomEvent<void>`                                       |\n| `profileMenuSignOutClick` | An event that fires on profile menu sign out click.                     | `CustomEvent<KeyboardEvent>` or `CustomEvent<MouseEvent>` |\n| `searchChange`            | An event that fires on search value change.                             | `CustomEvent<string>`                                     |\n| `searchMenuClick`         | An event that fires on search button click.                             | `CustomEvent<void>`                                       |\n\n### Methods\n\n<section>\n  <table>\n    <thead>\n      <tr>\n        <th>Name</th>\n        <th>Description</th>\n        <th>Returns</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td>hideMainMenu</td>\n        <td>Hides the main menu</td>\n        <td>void</td>\n      </tr>\n    </tbody>\n  </table>\n</section>\n\n### Accessibility\n\n- When Main Menu has focus, <kbd>Enter</kbd> toggles it.\n- When Notifications Menu has focus, <kbd>Enter</kbd> toggles it.\n- When Apps Menu has focus, <kbd>Enter</kbd> toggles it.\n- When User Menu has focus, <kbd>Enter</kbd> toggles it.\n",
  "storybook_content": "\n\n--- modus-navbar.stories.tsx ---\n\n// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-navbar-storybook-docs.mdx';\nimport { html } from 'lit-html';\nimport { withActions } from '@storybook/addon-actions/decorator';\n\nexport default {\n  title: 'Components/Navbar',\n  argTypes: {\n    enableSearchOverlay: {\n      name: 'enable-search-overlay',\n      description: 'Whether to show search overlay or not.',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    navAriaLabel: {\n      name: 'nav-aria-label',\n      description: \"The navbar's aria-label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    showHelp: {\n      name: 'show-help',\n      description: 'Toggle the help button',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    showProfile: {\n      name: 'show-profile',\n      description: 'Toggle the profile',\n      table: {\n        defaultValue: { summary: true },\n        type: { summary: 'boolean' },\n      },\n    },\n    showSearch: {\n      name: 'show-search',\n      description: 'Toggle the search button',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    profileMenuOptions: {\n      name: 'profile-menu-options',\n      description: 'Set the options for profile menu',\n      table: {\n        type: { summary: 'ModusProfileMenuOptions' },\n      },\n    },\n    buttons: {\n      name: 'buttons',\n      description: 'To add icon buttons dynamically to the Navbar, create an array of ModusNavbarButton.',\n      table: {\n        type: { summary: 'ModusNavbarButton[]' },\n      },\n    },\n    searchTooltip: {\n      name: 'search-tooltip ',\n      description: 'To add the search tooltip text and ariaLabel',\n      table: {\n        type: { summary: 'ModusNavbarTooltip' },\n      },\n    },\n    helpTooltip: {\n      name: 'help-tooltip ',\n      description: 'To add the help icon tooltip text and ariaLabel',\n      table: {\n        type: { summary: 'ModusNavbarTooltip' },\n      },\n    },\n    notificationCount: {\n      name: 'notification-count',\n      description: 'To add the counter value to the notification icon',\n      table: {\n        type: { summary: 'number' },\n      },\n    },\n  },\n  parameters: {\n    actions: {\n      handles: ['searchMenuClick', 'buttonClick', 'productLogoClick', 'helpOpen', 'profileMenuSignOutClick'],\n    },\n    controls: { expanded: true, sort: 'requiredFirst' },\n    docs: {\n      page: docs,\n      inlineStories: true,\n    },\n    options: {\n      isToolshown: true,\n    },\n    viewMode: 'docs',\n    design: {\n      type: 'figma',\n      url: 'https://www.figma.com/design/wyfVJUHWRMkeCfdB38HFEE/Modus---Web?node-id=1919-12473&m=dev',\n    },\n  },\n  decorators: [withActions],\n};\n\nconst workingAvatarUrl =\n  'https://images-wixmp-ed30a86b8c4ca887773594c2.wixmp.com/f/0e738c17-7f3c-422e-8225-f8c782b08626/d9pordj-43d4aa59-54b0-46a1-a568-e36dd691cf27.png?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1cm46YXBwOjdlMGQxODg5ODIyNjQzNzNhNWYwZDQxNWVhMGQyNmUwIiwiaXNzIjoidXJuOmFwcDo3ZTBkMTg4OTgyMjY0MzczYTVmMGQ0MTVlYTBkMjZlMCIsIm9iaiI6W1t7InBhdGgiOiJcL2ZcLzBlNzM4YzE3LTdmM2MtNDIyZS04MjI1LWY4Yzc4MmIwODYyNlwvZDlwb3Jkai00M2Q0YWE1OS01NGIwLTQ2YTEtYTU2OC1lMzZkZDY5MWNmMjcucG5nIn1dXSwiYXVkIjpbInVybjpzZXJ2aWNlOmZpbGUuZG93bmxvYWQiXX0.xvDk9KFIUAx0yAG3BPamDfRqmWUX6zwR4WVW40GjsoY';\nconst failingAvatarUrl = 'https://avatar.example.com/broken-image-link.png';\nconst defaultPrimaryLogo = 'https://modus.trimble.com/img/trimble-logo.svg';\nconst defaultSecondaryLogo = 'https://modus.trimble.com/favicon.svg';\nconst primaryAlt = 'Trimble Modus Logo';\nconst secondaryAlt = 'Trimble Modus Icon';\nconst defaultLogo = {\n  primary: {\n    url: defaultPrimaryLogo,\n    alt: primaryAlt,\n  },\n  secondary: {\n    url: defaultSecondaryLogo,\n    alt: secondaryAlt,\n  },\n};\nconst blueLogo = {\n  primary: {\n    url: 'https://modus-bootstrap.trimble.com/img/trimble-logo-rev.svg',\n    alt: 'Trimble Modus Logo',\n  },\n  secondary: {\n    url: 'https://modus-bootstrap.trimble.com/img/trimble-icon-rev.svg',\n    alt: 'Trimble Modus Icon',\n  },\n};\nconst defaultApps = [\n  {\n    description: 'The One Trimble Design System',\n    logoUrl: 'https://modus.trimble.com/favicon.svg',\n    name: 'Trimble Modus',\n    url: 'https://modus.trimble.com/',\n  },\n];\n\nconst Template = ({\n  buttons,\n  notificationCount,\n  enableSearchOverlay,\n  helpTooltip,\n  navAriaLabel,\n  profileMenuOptions,\n  searchTooltip,\n  showHelp,\n  showProfile,\n  showSearch,\n}) => html`\n  <modus-navbar\n    enable-search-overlay=${enableSearchOverlay}\n    nav-aria-label=${navAriaLabel}\n    show-apps-menu\n    show-help=${showHelp}\n    show-main-menu\n    show-profile=${showProfile}\n    show-search=${showSearch}\n    notification-count=${notificationCount}\n    show-notifications\n    .apps=${defaultApps}\n    .buttons=${buttons}\n    .helpTooltip=${helpTooltip}\n    .logoOptions=${defaultLogo}\n    .profileMenuOptions=${profileMenuOptions}\n    .searchTooltip=${searchTooltip}>\n    <div slot=\"main\" style=\"height:300px;\">Render your own main menu.</div>\n\n    <modus-list slot=\"addMenu\">\n      <modus-list-item>Menu Item 1</modus-list-item>\n      <modus-list-item>Menu Item 2</modus-list-item>\n    </modus-list>\n\n    <div slot=\"notificationMenu\">Render your own notification menu.</div>\n    <div slot=\"profileMenu\">Render your own profile menu content.</div>\n  </modus-navbar>\n`;\n\nexport const Default = Template.bind({});\nDefault.args = {\n  enableSearchOverlay: false,\n  helpTooltip: undefined,\n  navAriaLabel: 'Default',\n  profileMenuOptions: {\n    avatarUrl: workingAvatarUrl,\n    email: 'modus_user@trimble.com',\n    initials: 'MU',\n    signOutText: 'Sign out',\n    username: 'Modus User',\n    links: [\n      {\n        id: 'link1',\n        display: 'Link 1',\n        icon: 'moon',\n      },\n      {\n        id: 'link2',\n        display: 'Link 2',\n        icon: 'sun',\n      },\n    ],\n    tooltip: {\n      text: 'User Profile Menu',\n    },\n  },\n  searchTooltip: undefined,\n  showHelp: false,\n  showProfile: true,\n  showSearch: false,\n  notificationCount: 0,\n};\n\nconst FailedToLoadAvatarTemplate = ({\n  buttons,\n  notificationCount,\n  enableSearchOverlay,\n  helpTooltip,\n  navAriaLabel,\n  profileMenuOptions,\n  searchTooltip,\n  showHelp,\n  showProfile,\n  showSearch,\n}) => html`\n  <modus-navbar\n    enable-search-overlay=${enableSearchOverlay}\n    nav-aria-label=${navAriaLabel}\n    show-apps-menu\n    show-help=${showHelp}\n    show-help\n    show-main-menu\n    show-notifications\n    notification-count=${notificationCount}\n    show-profile=${showProfile}\n    show-search=${showSearch}\n    .apps=${defaultApps}\n    .buttons=${buttons}\n    .helpTooltip=${helpTooltip}\n    .logoOptions=${defaultLogo}\n    .profileMenuOptions=${profileMenuOptions}\n    .searchTooltip=${searchTooltip}>\n    <div slot=\"main\" style=\"height:300px;\">Render your own main menu.</div>\n    <div slot=\"notifications\">Render your own notifications.</div>\n  </modus-navbar>\n`;\n\nexport const FailedAvatar = FailedToLoadAvatarTemplate.bind({});\nFailedAvatar.args = {\n  buttons: [],\n  enableSearchOverlay: false,\n  helpTooltip: undefined,\n  navAriaLabel: 'Failed Avatar',\n  profileMenuOptions: {\n    avatarUrl: failingAvatarUrl,\n    email: 'modus_user@trimble.com',\n    initials: 'MU',\n    signOutText: 'Sign out',\n    username: 'Modus User',\n  },\n  searchTooltip: undefined,\n  showHelp: false,\n  showProfile: true,\n  showSearch: false,\n  notificationCount: 0,\n};\n\nconst BlueTemplate = ({\n  buttons,\n  notificationCount,\n  enableSearchOverlay,\n  helpTooltip,\n  navAriaLabel,\n  profileMenuOptions,\n  searchTooltip,\n  showHelp,\n  showProfile,\n  showSearch,\n}) => html`\n  <modus-navbar\n    enable-search-overlay=${enableSearchOverlay}\n    nav-aria-label=${navAriaLabel}\n    show-apps-menu\n    show-help=${showHelp}\n    show-help\n    show-main-menu\n    show-notifications\n    notification-count=${notificationCount}\n    show-profile=${showProfile}\n    show-search=${showSearch}\n    variant=\"blue\"\n    .apps=${defaultApps}\n    .buttons=${buttons}\n    .helpTooltip=${helpTooltip}\n    .logoOptions=${blueLogo}\n    .profileMenuOptions=${profileMenuOptions}\n    .searchTooltip=${searchTooltip}>\n    <div slot=\"main\" style=\"height:300px;\">Render your own main menu.</div>\n    <div slot=\"notifications\">Render your own notifications.</div>\n  </modus-navbar>\n`;\n\nexport const BlueNavbar = BlueTemplate.bind({});\nBlueNavbar.args = {\n  buttons: [],\n  enableSearchOverlay: false,\n  helpTooltip: undefined,\n  navAriaLabel: 'Blue navbar',\n  profileMenuOptions: {\n    avatarUrl: workingAvatarUrl,\n    email: 'modus_user@trimble.com',\n    initials: 'MU',\n    signOutText: 'Sign out',\n    username: 'Modus User',\n  },\n  searchTooltip: undefined,\n  showHelp: false,\n  showProfile: true,\n  showSearch: false,\n  notificationCount: 0,\n};\n\nconst items = [\n  { text: 'Project 1', value: '1' },\n  { text: 'Project 2', value: '2' },\n  { text: 'Project 3', value: '3' },\n];\nconst dropdownOptions = {\n  ariaLabel: 'Project dropdown',\n  items,\n};\n\nconst WithOptionalFeaturesTemplate = ({\n  buttons,\n  notificationCount,\n  enableSearchOverlay,\n  helpTooltip,\n  navAriaLabel,\n  profileMenuOptions,\n  searchTooltip,\n  showHelp,\n  showProfile,\n  showSearch,\n}) => html`\n  <modus-navbar\n    enable-search-overlay=${enableSearchOverlay}\n    nav-aria-label=${navAriaLabel}\n    show-apps-menu\n    show-help=${showHelp}\n    show-main-menu\n    show-profile=${showProfile}\n    show-search=${showSearch}\n    notification-count=${notificationCount}\n    show-notifications\n    .apps=${defaultApps}\n    .buttons=${buttons}\n    .helpTooltip=${helpTooltip}\n    .logoOptions=${defaultLogo}\n    .dropdownOptions=${dropdownOptions}\n    .selectedDropdownItem=${items[1]}\n    .profileMenuOptions=${profileMenuOptions}\n    .searchTooltip=${searchTooltip}>\n    <div slot=\"main\" style=\"height:300px;\">Render your own main menu.</div>\n\n    <modus-list slot=\"addMenu\">\n      <modus-list-item>Menu Item 1</modus-list-item>\n      <modus-list-item>Menu Item 2</modus-list-item>\n    </modus-list>\n\n    <div slot=\"notificationMenu\">Render your own notification menu.</div>\n    <div slot=\"profileMenu\">Render your own profile menu content.</div>\n  </modus-navbar>\n`;\n\nexport const WithOptionalFeatures = WithOptionalFeaturesTemplate.bind({});\nWithOptionalFeatures.args = {\n  enableSearchOverlay: false,\n  helpTooltip: undefined,\n  navAriaLabel: 'Default',\n  profileMenuOptions: {\n    avatarUrl: workingAvatarUrl,\n    email: 'modus_user@trimble.com',\n    initials: 'MU',\n    signOutText: 'Sign out',\n    username: 'Modus User',\n    links: [\n      {\n        id: 'link1',\n        display: 'Link 1',\n        icon: 'moon',\n      },\n      {\n        id: 'link2',\n        display: 'Link 2',\n        icon: 'sun',\n      },\n    ],\n    tooltip: {\n      text: 'User Profile Menu',\n    },\n  },\n  searchTooltip: undefined,\n  showHelp: false,\n  showProfile: true,\n  showSearch: false,\n  notificationCount: 0,\n};\n",
  "storybook": {
    "examples": [
      "<modus-list-item>Menu Item 1</modus-list-item>",
      "<modus-list-item>Menu Item 2</modus-list-item>",
      "<modus-list-item>Menu Item 1</modus-list-item>",
      "<modus-list-item>Menu Item 2</modus-list-item>",
      "\n  <modus-navbar\n    enable-search-overlay=${enableSearchOverlay}\n    nav-aria-label=${navAriaLabel}\n    show-apps-menu\n    show-help=${showHelp}\n    show-main-menu\n    show-profile=${showProfile}\n    show-search=${showSearch}\n    notification-count=${notificationCount}\n    show-notifications\n    .apps=${defaultApps}\n    .buttons=${buttons}\n    .helpTooltip=${helpTooltip}\n    .logoOptions=${defaultLogo}\n    .profileMenuOptions=${profileMenuOptions}\n    .searchTooltip=${searchTooltip}>\n    <div slot=\"main\" style=\"height:300px;\">Render your own main menu.</div>\n\n    <modus-list slot=\"addMenu\">\n      <modus-list-item>Menu Item 1</modus-list-item>\n      <modus-list-item>Menu Item 2</modus-list-item>\n    </modus-list>\n\n    <div slot=\"notificationMenu\">Render your own notification menu.</div>\n    <div slot=\"profileMenu\">Render your own profile menu content.</div>\n  </modus-navbar>\n"
    ],
    "variants": [
      "blue"
    ],
    "prop_usage": {
      "slot": [
        "main",
        "addMenu",
        "notificationMenu",
        "profileMenu",
        "notifications"
      ],
      "style": [
        "height:300px;"
      ],
      "variant": [
        "blue"
      ]
    }
  },
  "tag_name": "modus-navbar"
}
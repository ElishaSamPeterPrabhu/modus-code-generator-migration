{
  "component_name": "modus-modal",
  "version": "v1",
  "props": [
    {
      "name": "ariaLabel",
      "description": "/**\n * @slot footerContent - Slot for a custom footer content\n */\n@Component({\n  tag: 'modus-modal',\n  styleUrl: 'modus-modal.scss',\n  shadow: true,\n})\nexport class ModusModal {\n  /** Reference to host HTML element. */\n  @Element() el: HTMLElement;\n\n  /** (optional) The modal's aria-label. */",
      "type": "string | null"
    },
    {
      "name": "headerText",
      "description": "/**\n * @slot footerContent - Slot for a custom footer content\n */\n@Component({\n  tag: 'modus-modal',\n  styleUrl: 'modus-modal.scss',\n  shadow: true,\n})\nexport class ModusModal {\n  /** Reference to host HTML element. */\n  @Element() el: HTMLElement;\n\n  /** (optional) The modal's aria-label. */",
      "type": "string"
    },
    {
      "name": "primaryButtonAriaLabel",
      "description": "/**\n * @slot footerContent - Slot for a custom footer content\n */\n@Component({\n  tag: 'modus-modal',\n  styleUrl: 'modus-modal.scss',\n  shadow: true,\n})\nexport class ModusModal {\n  /** Reference to host HTML element. */\n  @Element() el: HTMLElement;\n\n  /** (optional) The modal's aria-label. */",
      "type": "string | null"
    },
    {
      "name": "primaryButtonDisabled",
      "description": "/**\n * @slot footerContent - Slot for a custom footer content\n */\n@Component({\n  tag: 'modus-modal',\n  styleUrl: 'modus-modal.scss',\n  shadow: true,\n})\nexport class ModusModal {\n  /** Reference to host HTML element. */\n  @Element() el: HTMLElement;\n\n  /** (optional) The modal's aria-label. */",
      "type": "boolean"
    },
    {
      "name": "primaryButtonText",
      "description": "/**\n * @slot footerContent - Slot for a custom footer content\n */\n@Component({\n  tag: 'modus-modal',\n  styleUrl: 'modus-modal.scss',\n  shadow: true,\n})\nexport class ModusModal {\n  /** Reference to host HTML element. */\n  @Element() el: HTMLElement;\n\n  /** (optional) The modal's aria-label. */",
      "type": "string"
    },
    {
      "name": "secondaryButtonAriaLabel",
      "description": "/**\n * @slot footerContent - Slot for a custom footer content\n */\n@Component({\n  tag: 'modus-modal',\n  styleUrl: 'modus-modal.scss',\n  shadow: true,\n})\nexport class ModusModal {\n  /** Reference to host HTML element. */\n  @Element() el: HTMLElement;\n\n  /** (optional) The modal's aria-label. */",
      "type": "string | null"
    },
    {
      "name": "secondaryButtonDisabled",
      "description": "/**\n * @slot footerContent - Slot for a custom footer content\n */\n@Component({\n  tag: 'modus-modal',\n  styleUrl: 'modus-modal.scss',\n  shadow: true,\n})\nexport class ModusModal {\n  /** Reference to host HTML element. */\n  @Element() el: HTMLElement;\n\n  /** (optional) The modal's aria-label. */",
      "type": "boolean"
    },
    {
      "name": "secondaryButtonText",
      "description": "/**\n * @slot footerContent - Slot for a custom footer content\n */\n@Component({\n  tag: 'modus-modal',\n  styleUrl: 'modus-modal.scss',\n  shadow: true,\n})\nexport class ModusModal {\n  /** Reference to host HTML element. */\n  @Element() el: HTMLElement;\n\n  /** (optional) The modal's aria-label. */",
      "type": "string"
    },
    {
      "name": "zIndex",
      "description": "/**\n * @slot footerContent - Slot for a custom footer content\n */\n@Component({\n  tag: 'modus-modal',\n  styleUrl: 'modus-modal.scss',\n  shadow: true,\n})\nexport class ModusModal {\n  /** Reference to host HTML element. */\n  @Element() el: HTMLElement;\n\n  /** (optional) The modal's aria-label. */",
      "type": "this.zIndex }}>\n        {this.renderModal()}\n      </div>\n    )"
    },
    {
      "name": "backdrop",
      "description": "/**\n * @slot footerContent - Slot for a custom footer content\n */\n@Component({\n  tag: 'modus-modal',\n  styleUrl: 'modus-modal.scss',\n  shadow: true,\n})\nexport class ModusModal {\n  /** Reference to host HTML element. */\n  @Element() el: HTMLElement;\n\n  /** (optional) The modal's aria-label. */",
      "type": "'default' | 'static'"
    },
    {
      "name": "showFullscreenToggle",
      "description": "/**\n * @slot footerContent - Slot for a custom footer content\n */\n@Component({\n  tag: 'modus-modal',\n  styleUrl: 'modus-modal.scss',\n  shadow: true,\n})\nexport class ModusModal {\n  /** Reference to host HTML element. */\n  @Element() el: HTMLElement;\n\n  /** (optional) The modal's aria-label. */",
      "type": ""
    },
    {
      "name": "fullscreen",
      "description": "/**\n * @slot footerContent - Slot for a custom footer content\n */\n@Component({\n  tag: 'modus-modal',\n  styleUrl: 'modus-modal.scss',\n  shadow: true,\n})\nexport class ModusModal {\n  /** Reference to host HTML element. */\n  @Element() el: HTMLElement;\n\n  /** (optional) The modal's aria-label. */",
      "type": "'Collapse' : 'Expand'}\n              onClick"
    }
  ],
  "events": [],
  "slots": [
    "footerContent"
  ],
  "default_values": {
    "ariaLabel": "{this.secondaryButtonAriaLabel}\n              onButtonClick={() => this.handleSecondaryClick()}>\n              {this.secondaryButtonText}\n            </modus-button>\n          )}\n          {this.primaryButtonText && (\n            <modus-button\n              disabled={this.primaryButtonDisabled}\n              color=\"primary\"\n              ariaLabel={this.primaryButtonAriaLabel}\n              onButtonClick={() => this.handlePrimaryClick()}>\n              {this.primaryButtonText}\n            </modus-button>\n          )}\n          <slot name=\"footerContent\"></slot>\n        </footer>\n      </Fragment>\n    )",
    "zIndex": "'1'",
    "backdrop": "'default'",
    "showFullscreenToggle": "false",
    "fullscreen": "false"
  },
  "documentation": "\n\n--- modus-modal-storybook-docs.mdx ---\n\nimport { Story } from '@storybook/blocks';\nimport * as Modal from './modus-modal.stories';\n\n# Modal\n\n---\n\n[Modus Dialog](https://modus.trimble.com/components/web/modals/) web components interrupt workflows when user interaction is required. They are referenced using the `<modus-modal>` custom HTML element.\n\nThis modal component uses the slot element to render the content and the slot `footerContent` to render custom footer content.\n\nWhen designing a custom footer, it is highly recommended to use button progressions from, structural and color progression. Use only one button progression in a single product, for example, `primary` button should be followed by a `secondary` button or `tertiary` button not the outline buttons. For more guidelines refer to [Modus Styleguide](https://modus.trimble.com/components/web/modals/styles/).\n\n### Default\n\n<Story of={Modal.Default} />\n\n```html\n<modus-button id=\"btn-modal\" color=\"primary\">Open modal</modus-button>\n<modus-modal\n  header-text=\"Modal title\"\n  primary-button-text=\"Save changes\"\n  secondary-button-text=\"Sweet!\"\n  primary-button-aria-label=\"Save changes\"\n  secondary-button-aria-label=\"Sweet\">\n  <p>Woo-hoo, you're reading this text in a modal!</p>\n</modus-modal>\n\n<script>\n  document.querySelector('#btn-modal').addEventListener('buttonClick', () => {\n    document.querySelector('modus-modal').open();\n  });\n\n  document.querySelector('modus-modal').addEventListener('closed', () => {\n    // Timeout is a workaround for Stencil Web Component not capturing the state updates quick enough when another component is immediately focussed\n    setTimeout(() => {\n      document.querySelector('#btn-modal').focusButton();\n    }, 100);\n  });\n</script>\n```\n\n### Custom footer\n\n<Story of={Modal.CustomFooter} />\n\n```html\n<modus-button id=\"btn-modal\" color=\"primary\">Open modal</modus-button>\n<modus-modal>\n  <p>\n    A dialog or a modal is a window overlaid on the primary window. It interrupts the user and requires an action. It\n    disables the main content until the user explicitly interacts with the modal dialog.\n  </p>\n  <div\n    style=\"align-items: center;\n    display: flex;\n    justify-content: flex-end; gap: 8px; height:100%;\"\n    slot=\"footerContent\">\n    <modus-button color=\"tertiary\">Cancel</modus-button>\n    <modus-button color=\"secondary\">Check later</modus-button>\n    <modus-button color=\"primary\">Approve</modus-button>\n  </div>\n</modus-modal>\n\n<script>\n  document.querySelector('#btn-modal').addEventListener('buttonClick', () => {\n    document.querySelector('modus-modal').open();\n  });\n\n  document.querySelector('modus-modal').addEventListener('closed', () => {\n    // Timeout is a workaround for Stencil Web Component not capturing the state updates quick enough when another component is immediately focussed\n    setTimeout(() => {\n      document.querySelector('#btn-modal').focusButton();\n    }, 100);\n  });\n</script>\n```\n\n### Properties\n\n| Property                   | Attribute                     | Description                                                                                                                           | Type                   | Default     |\n| -------------------------- | ----------------------------- | ------------------------------------------------------------------------------------------------------------------------------------- | ---------------------- | ----------- |\n| `ariaLabel`                | `aria-label`                  | (optional) The modal's aria-label.                                                                                                    | `string`               | `undefined` |\n| `backdrop`                 | `backdrop`                    | (optional) The modal's backdrop. Specify 'static' for a backdrop that doesn't close the modal when clicked outside the modal content. | \"static\" \\| \"default\"` | `'default'` |\n| `fullscreen`               | `fullscreen`                  | (optional) The modal's full screen view.                                                                                              | `boolean`              | `false`     |\n| `headerText`               | `header-text`                 | (optional) The modal's primary button text.                                                                                           | `string`               | `undefined` |\n| `primaryButtonAriaLabel`   | `primary-button-aria-label`   | (optional) The modal's primary button aria-label.                                                                                     | `string`               | `undefined` |\n| `primaryButtonDisabled`    | `primary-button-disabled`     | (optional) Disable primary button.                                                                                                    | `boolean`              | `undefined` |\n| `primaryButtonText`        | `primary-button-text`         | (optional) The modal's primary button text.                                                                                           | `string`               | `undefined` |\n| `secondaryButtonAriaLabel` | `secondary-button-aria-label` | (optional) The modal's secondary button aria-label.                                                                                   | `string`               | `undefined` |\n| `secondaryButtonDisabled`  | `secondary-button-disabled`   | (optional) Disable secondary button.                                                                                                  | `boolean`              | `undefined` |\n| `secondaryButtonText`      | `secondary-button-text`       | (optional) The modal's secondary button text.                                                                                         | `string`               | `undefined` |\n| `showFullscreenToggle`     | `show-fullscreen-toggle`      | (optional) Show full screen toggle.                                                                                                   | `boolean`              | `false`     |\n| `zIndex`                   | `z-index`                     | (optional) The modal's z-index.                                                                                                       | `string`               | `'1'`       |\n\n### Events\n\n| Event                  | Description                                    | Type               |\n| ---------------------- | ---------------------------------------------- | ------------------ |\n| `closed`               | An event that fires on modal close.            | `CustomEvent<any>` |\n| `opened`               | An event that fires on modal open.             | `CustomEvent<any>` |\n| `primaryButtonClick`   | An event that fires on primary button click.   | `CustomEvent<any>` |\n| `secondaryButtonClick` | An event that fires on secondary button click. | `CustomEvent<any>` |\n\n### Methods\n\n| Method name | Description      | Parameter | Return          |\n| ----------- | ---------------- | --------- | --------------- |\n| `close`     | Closes the Modal |           | `Promise<void>` |\n| `open`      | Opens the Modal  |           | `Promise<void>` |\n\n### Slots\n\n| Slot              | Description                      |\n| ----------------- | -------------------------------- |\n| `\"footerContent\"` | Slot for a custom footer content |\n\n### Accessibility\n\n- Modal has `role` of `dialog`.\n- Modal gets `aria-hidden` set to whether Modal is closed.\n- When Primary button has focus, <kbd>Enter</kbd> emits `primaryButtonClick` event.\n- When Secondary button has focus, <kbd>Enter</kbd> emits `secondaryButtonClick` event.\n- When the Modal is open, tabbing can be performed only on the focussable elements inside Modal. Note: Pressing <kbd>Shift</kbd> + <kbd>Tab</kbd> on Modal Header cannot go back to Modal Footer.\n- Pressing <kbd>Escape</kbd> key closes the Modal and emits `close` event.\n- To customize footer, slot option is provided and referenced by `slot='footer'`.\n",
  "storybook_content": "\n\n--- modus-modal.stories.tsx ---\n\n// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-modal-storybook-docs.mdx';\nimport { html } from 'lit-html';\nimport { withActions } from '@storybook/addon-actions/decorator';\n\nexport default {\n  title: 'Components/Modal',\n  argTypes: {\n    ariaLabel: {\n      name: 'aria-label',\n      description: \"The modal's aria-label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    headerText: {\n      name: 'headerText',\n      description: \"The modal's primary button text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    primaryButtonAriaLabel: {\n      name: 'primaryButtonAriaLabel',\n      description: \"The modal's primary button aria-label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    primaryButtonDisabled: {\n      name: 'primaryButtonDisabled',\n      description: 'Disable primary button',\n      table: {\n        type: { summary: 'boolean' },\n      },\n    },\n    primaryButtonText: {\n      name: 'primaryButtonText',\n      description: \"The modal's primary button text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    secondaryButtonAriaLabel: {\n      name: 'secondaryButtonAriaLabel',\n      description: \"The modal's secondary button aria-label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    secondaryButtonDisabled: {\n      name: 'secondaryButtonDisabled',\n      description: 'Disable secondary button',\n      table: {\n        type: { summary: 'boolean' },\n      },\n    },\n    secondaryButtonText: {\n      name: 'secondaryButtonText',\n      description: \"The modal's secondary button text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    zIndex: {\n      name: 'zIndex',\n      description: \"The modal's z-index\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    backdrop: {\n      name: 'backdrop',\n      description: \"The modal's backdrop\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    fullscreen: {\n      name: 'fullscreen',\n      description: \"The modal's full screen view.\",\n      table: {\n        type: { summary: 'boolean' },\n      },\n    },\n    showFullscreenToggle: {\n      name: 'showFullscreenToggle',\n      description: 'Show full screen toggle',\n      table: {\n        type: { summary: 'boolean' },\n      },\n    },\n  },\n  parameters: {\n    actions: {\n      handles: ['closed', 'primaryButtonClick', 'secondaryButtonClick', 'buttonClick'],\n    },\n    docs: {\n      inlineStories: false,\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n    },\n    controls: { expanded: true, sort: 'requiredFirst' },\n    viewMode: 'docs',\n    design: {\n      type: 'figma',\n      url: 'https://www.figma.com/design/wyfVJUHWRMkeCfdB38HFEE/Modus---Web?node-id=1346-12&m=dev',\n    },\n  },\n  decorators: [withActions],\n};\n\nconst Template = ({\n  ariaLabel,\n  headerText,\n  primaryButtonAriaLabel,\n  primaryButtonDisabled,\n  primaryButtonText,\n  secondaryButtonAriaLabel,\n  secondaryButtonDisabled,\n  secondaryButtonText,\n  zIndex,\n  backdrop,\n  fullscreen,\n  showFullscreenToggle,\n}) => html`\n  <modus-button id=\"btn-modal\" color=\"primary\">Open modal</modus-button>\n  <modus-modal\n    aria-label=${ariaLabel}\n    header-text=${headerText}\n    primary-button-aria-label=${primaryButtonAriaLabel}\n    primary-button-disabled=${primaryButtonDisabled}\n    primary-button-text=${primaryButtonText}\n    secondary-button-aria-label=${secondaryButtonAriaLabel}\n    secondary-button-disabled=${secondaryButtonDisabled}\n    secondary-button-text=${secondaryButtonText}\n    z-index=${zIndex}\n    backdrop=${backdrop}\n    fullscreen=${fullscreen}\n    show-fullscreen-toggle=${showFullscreenToggle}>\n    <p>Woo-hoo, you're reading this text in a modal!</p>\n  </modus-modal>\n  ${setScript()}\n`;\nexport const Default = Template.bind({});\nDefault.args = {\n  ariaLabel: '',\n  headerText: 'Modal title',\n  primaryButtonAriaLabel: 'Save changes',\n  primaryButtonDisabled: false,\n  primaryButtonText: 'Save changes',\n  secondaryButtonAriaLabel: 'Sweet',\n  secondaryButtonDisabled: false,\n  secondaryButtonText: 'Sweet',\n  zIndex: '1',\n  backdrop: 'default',\n  fullscreen: false,\n  showFullscreenToggle: false,\n};\n\nconst CustomFooterTemplate = ({ ariaLabel, headerText, zIndex, backdrop, fullscreen, showFullscreenToggle }) => html`\n  <modus-button id=\"btn-modal-footer\" color=\"primary\">Open modal</modus-button>\n  <modus-modal\n    id=\"modal-footer\"\n    aria-label=${ariaLabel}\n    header-text=${headerText}\n    z-index=${zIndex}\n    backdrop=${backdrop}\n    fullscreen=${fullscreen}\n    show-fullscreen-toggle=${showFullscreenToggle}>\n    <p>\n      A dialog or a modal is a window overlaid on the primary window. It interrupts the user and requires an action. It\n      disables the main content until the user explicitly interacts with the modal dialog.\n    </p>\n    <div\n      style=\"align-items: center;\n    display: flex;\n    justify-content: flex-end; gap: 8px; height:100%;\"\n      slot=\"footerContent\">\n      <modus-button color=\"tertiary\">Cancel</modus-button>\n      <modus-button color=\"secondary\">Check later</modus-button>\n      <modus-button color=\"primary\">Approve</modus-button>\n    </div>\n  </modus-modal>\n  ${setFooterScript()}\n`;\nexport const CustomFooter = CustomFooterTemplate.bind({});\nCustomFooter.args = {\n  ariaLabel: '',\n  headerText: 'Modal title',\n  zIndex: '1',\n  backdrop: 'default',\n  fullscreen: false,\n  showFullscreenToggle: false,\n};\n\nconst setScript = () => {\n  const tag = document.createElement('script');\n  tag.innerHTML = `\n    document.querySelector('#btn-modal').addEventListener('buttonClick', () => {\n      document.querySelector('modus-modal').open();\n    });\n\n    document.querySelector('modus-modal').addEventListener('closed', () => {\n      // Timeout is a workaround for Stencil Web Component not capturing the state updates quick enough when another component is immediately focussed\n      setTimeout(() => {\n        document.querySelector('#btn-modal').focusButton();\n      }, 100);\n    });\n  `;\n\n  return tag;\n};\nconst setFooterScript = () => {\n  const tag = document.createElement('script');\n  tag.innerHTML = `\n    document.querySelector('#btn-modal-footer').addEventListener('buttonClick', () => {\n      document.querySelector('#modal-footer').open();\n    });\n\n    document.querySelector('#modal-footer').addEventListener('closed', () => {\n      // Timeout is a workaround for Stencil Web Component not capturing the state updates quick enough when another component is immediately focussed\n      setTimeout(() => {\n        document.querySelector('#btn-modal-footer').focusButton();\n      }, 100);\n    });\n  `;\n\n  return tag;\n};\n",
  "storybook": {
    "examples": [
      "<modus-button id=\"btn-modal\" color=\"primary\">Open modal</modus-button>",
      "<modus-button id=\"btn-modal-footer\" color=\"primary\">Open modal</modus-button>",
      "<modus-button color=\"tertiary\">Cancel</modus-button>",
      "<modus-button color=\"secondary\">Check later</modus-button>",
      "<modus-button color=\"primary\">Approve</modus-button>"
    ],
    "variants": [],
    "prop_usage": {
      "id": [
        "btn-modal",
        "btn-modal-footer",
        "modal-footer"
      ],
      "color": [
        "primary",
        "tertiary",
        "secondary"
      ],
      "style": [
        "align-items: center;\n    display: flex;\n    justify-content: flex-end; gap: 8px; height:100%;"
      ],
      "slot": [
        "footerContent"
      ]
    }
  },
  "tag_name": "modus-modal"
}
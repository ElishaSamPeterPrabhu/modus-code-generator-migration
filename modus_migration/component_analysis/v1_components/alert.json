{
  "component_name": "modus-alert",
  "version": "v1",
  "props": [
    {
      "name": "ariaLabel",
      "description": "/** (optional) The alert's aria-label. */",
      "type": "string | null"
    },
    {
      "name": "buttonAriaLabel",
      "description": "/** (optional) The alert's aria-label. */",
      "type": "string | null"
    },
    {
      "name": "buttonText",
      "description": "/** (optional) The alert's aria-label. */",
      "type": "string | null"
    },
    {
      "name": "dismissible",
      "description": "/** (optional) The alert's aria-label. */",
      "type": "boolean"
    },
    {
      "name": "message",
      "description": "/** (optional) The alert's aria-label. */",
      "type": "string"
    },
    {
      "name": "type",
      "description": "/** (optional) The alert's aria-label. */",
      "type": "'error' | 'info' | 'info-gray' | 'info-gray-dark' | 'success' | 'warning'"
    }
  ],
  "events": [],
  "slots": [],
  "default_values": {
    "ariaLabel": "{this.buttonAriaLabel}\n              onButtonClick={() => this.actionClick.emit()}\n              onKeyDown={(e) => this.handleKeyDown(e, 'action')}>\n              {this.buttonText}\n            </modus-button>\n          )}\n          {this.dismissible && (\n            <div\n              class=\"icon-close-container\"\n              aria-label=\"Dismiss alert\"\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => this.dismissClick.emit()}\n              onKeyDown={(e) => this.handleKeyDown(e, 'dismiss')}>\n              <IconClose size=\"18\" />\n            </div>\n          )}\n        </div>\n      </div>\n    )",
    "buttonText": "\"action-button\"\n              buttonStyle=\"outline\"\n              color=\"secondary\"\n              size=\"medium\"\n              ariaLabel={this.buttonAriaLabel}\n              onButtonClick={() => this.actionClick.emit()}\n              onKeyDown={(e) => this.handleKeyDown(e, 'action')}>\n              {this.buttonText}\n            </modus-button>\n          )}\n          {this.dismissible && (\n            <div\n              class=\"icon-close-container\"\n              aria-label=\"Dismiss alert\"\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => this.dismissClick.emit()}\n              onKeyDown={(e) => this.handleKeyDown(e, 'dismiss')}>\n              <IconClose size=\"18\" />\n            </div>\n          )}\n        </div>\n      </div>\n    )",
    "type": "'info'"
  },
  "documentation": "\n\n--- modus-alert-storybook-docs.mdx ---\n\nimport { Anchor, Story } from '@storybook/addon-docs';\n\n# Alert\n\n---\n\n[Modus Alert](https://modus.trimble.com/components/alerts/) web components provide well defined elements for rendering system level messages. They are referenced using the `<modus-alert>` custom HTML element.\n\n<Anchor storyId=\"components-alert--default\" />\n\n### Default\n\n<modus-alert message=\"Info alert (default)\"></modus-alert>\n\n<Anchor storyId=\"components-alert--dismissible\" />\n\n### Dismissible\n\n<modus-alert dismissible message=\"Dismissible alert\"></modus-alert>\n\n<Anchor storyId=\"components-alert--action-button\" />\n\n### Action button\n\n<modus-alert message=\"Info alert with action button\" button-text=\"Action\"></modus-alert>\n\n<Anchor storyId=\"components-alert--error\" />\n\n### Error\n\n<modus-alert message=\"Error alert\" type=\"error\"></modus-alert>\n\n<Anchor storyId=\"components-alert--success\" />\n\n### Success\n\n<modus-alert message=\"Success alert\" type=\"success\"></modus-alert>\n\n<Anchor storyId=\"components-alert--warning\" />\n\n### Warning\n\n<modus-alert message=\"Warning alert\" type=\"warning\"></modus-alert>\n\n<Anchor storyId=\"components-alert--with-link\" />\n\n### Alert with Link\n\nThe `<modus-alert>` utilizes the slot element, allowing you to insert links in the alert message.\nNote: If anchor tags are nested, it is required to apply CSS variables `--modus-alert-<variant>-link-color` on the link, due to the limitations of nested `slot` elements.\n\n<br />\n\n<modus-alert type=\"info\"> This is a info alert with <a href=\"#\">an example link</a> </modus-alert>\n\n```html\n<modus-alert message=\"Info alert (default)\"></modus-alert>\n<modus-alert dismissible message=\"Dismissible alert\"></modus-alert>\n<modus-alert message=\"Info alert with action button\" button-text=\"Action\"></modus-alert>\n<modus-alert message=\"Error alert\" type=\"error\"></modus-alert>\n<modus-alert message=\"Success alert\" type=\"success\"></modus-alert>\n<modus-alert message=\"Warning alert\" type=\"warning\"></modus-alert>\n<modus-alert type=\"info\"> This is a info alert with <a href=\"#\">an example link</a> </modus-alert>\n```\n\n### Properties\n\n| Name              | Description                                              | Type      | Options                               | Default Value |\n| ----------------- | -------------------------------------------------------- | --------- | ------------------------------------- | ------------- |\n| `ariaLabel`       | The alert's aria-label                                   | `string`  |                                       |               |\n| `buttonAriaLabel` | The button's aria-label                                  | `string`  |                                       |               |\n| `buttonText`      | The button's text                                        | `string`  |                                       |               |\n| `dismissible`     | Whether the alert is dismissible, renders the close icon | `boolean` |                                       |               |\n| `message`         | The alert message                                        | `string`  |                                       |               |\n| `type`            | The type of the alert                                    | `string`  | 'error', 'info', 'success', 'warning' | 'info'        |\n\n### DOM Events\n\n| Name           | Description                  | Type                |\n| -------------- | ---------------------------- | ------------------- |\n| `dismissClick` | Fires on dismiss icon click  | `CustomEvent<void>` |\n| `actionClick`  | Fires on action button click | `CustomEvent<void>` |\n\n### Accessibility\n\n- Alert has `role` of `alert`.\n- Alert gets an `aria-label` provided by the `aria-label` property input.\n- When Alert has focus, <kbd>Escape</kbd> causes the `dismissClick` event to fire if dismissible.\n",
  "storybook_content": "\n\n--- modus-alert.stories.tsx ---\n\nimport { html } from 'lit-html';\n// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-alert-storybook-docs.mdx';\nimport { withActions } from '@storybook/addon-actions/decorator';\n\nexport default {\n  title: 'Components/Alert',\n  argTypes: {\n    ariaLabel: {\n      name: 'aria-label',\n      description: \"The alert's aria-label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    buttonAriaLabel: {\n      description: \"The button's aria-label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    buttonText: {\n      description: \"The button's text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    dismissible: {\n      description: 'Whether the alert is dismissible, renders the close icon',\n      type: 'boolean',\n      table: {\n        defaultValue: { summary: false },\n      },\n    },\n    message: {\n      description: 'The alert message',\n      table: {\n        type: { summary: 'string' },\n      },\n      type: { required: true },\n    },\n    type: {\n      options: ['error', 'info', 'success', 'warning'],\n      type: 'select',\n      description: 'The type of the alert',\n      table: {\n        defaultValue: { summary: `'info'` },\n        type: {\n          summary: `'error' | 'info' | 'success' | 'warning'`,\n        },\n      },\n    },\n  },\n  parameters: {\n    actions: {\n      handles: ['dismissClick', 'actionClick '],\n    },\n    controls: { expanded: true, sort: 'requiredFirst' },\n    docs: {\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n    },\n    design: {\n      type: 'figma',\n      url: 'https://www.figma.com/design/wyfVJUHWRMkeCfdB38HFEE/Modus---Web?node-id=1346-17&m=dev',\n    },\n  },\n  decorators: [withActions],\n};\n\nconst Template = ({ ariaLabel, buttonAriaLabel, buttonText, dismissible, message, type }) => html`\n  <modus-alert\n    ariaLabel=${ariaLabel}\n    button-aria-label=${buttonAriaLabel}\n    button-text=${buttonText}\n    dismissible=${dismissible}\n    message=${message}\n    type=${type}>\n  </modus-alert>\n`;\n\n// TODO - Figure out how to get rid of the optional parameters in the template (dismissible and type).\n// If not passed, they should result to null or their default values.\nexport const Default = Template.bind({});\nDefault.args = {\n  ariaLabel: '',\n  buttonAriaLabel: '',\n  buttonText: '',\n  dismissible: false,\n  message: 'Info alert (default)',\n  type: 'info',\n};\n\nexport const ActionButton = Template.bind({});\nActionButton.args = {\n  ariaLabel: '',\n  buttonAriaLabel: 'Action button',\n  buttonText: 'Action',\n  dismissible: false,\n  message: 'Info alert with action button',\n  type: 'info',\n};\n\nexport const Dismissible = Template.bind({});\nDismissible.args = {\n  ariaLabel: '',\n  buttonAriaLabel: '',\n  buttonText: '',\n  dismissible: true,\n  message: 'Dismissible alert',\n  type: 'info',\n};\n\nexport const Error = Template.bind({});\nError.args = {\n  ariaLabel: '',\n  buttonAriaLabel: '',\n  buttonText: '',\n  dismissible: false,\n  message: 'Error alert',\n  type: 'error',\n};\n\nexport const Success = Template.bind({});\nSuccess.args = {\n  ariaLabel: '',\n  buttonAriaLabel: '',\n  buttonText: '',\n  dismissible: false,\n  message: 'Success alert',\n  type: 'success',\n};\n\nexport const Warning = Template.bind({});\nWarning.args = {\n  ariaLabel: '',\n  buttonAriaLabel: '',\n  buttonText: '',\n  dismissible: false,\n  message: 'Warning alert',\n  type: 'warning',\n};\n\nconst TemplateWithLink = ({ ariaLabel, buttonAriaLabel, buttonText, dismissible, message, type }) => html`\n  <modus-alert\n    ariaLabel=${ariaLabel}\n    button-aria-label=${buttonAriaLabel}\n    button-text=${buttonText}\n    dismissible=${dismissible}\n    message=${message}\n    type=${type}>\n    This is a info alert with <a href=\"#\">an example link</a>\n  </modus-alert>\n`;\n\nexport const WithLink = TemplateWithLink.bind({});\nWithLink.args = {\n  ariaLabel: '',\n  buttonAriaLabel: '',\n  buttonText: '',\n  dismissible: false,\n  type: 'info',\n  message: null,\n};\n",
  "storybook": {
    "examples": [
      "<modus-alert\n    ariaLabel=${ariaLabel}\n    button-aria-label=${buttonAriaLabel}\n    button-text=${buttonText}\n    dismissible=${dismissible}\n    message=${message}\n    type=${type}>\n  </modus-alert>",
      "\n  <modus-alert\n    ariaLabel=${ariaLabel}\n    button-aria-label=${buttonAriaLabel}\n    button-text=${buttonText}\n    dismissible=${dismissible}\n    message=${message}\n    type=${type}>\n  </modus-alert>\n",
      "\n  <modus-alert\n    ariaLabel=${ariaLabel}\n    button-aria-label=${buttonAriaLabel}\n    button-text=${buttonText}\n    dismissible=${dismissible}\n    message=${message}\n    type=${type}>\n    This is a info alert with <a href=\"#\">an example link</a>\n  </modus-alert>\n"
    ],
    "variants": [],
    "prop_usage": {
      "href": [
        "#"
      ]
    }
  },
  "tag_name": "modus-alert"
}
{
  "component_name": "modus-text-input",
  "version": "v1",
  "props": [
    {
      "name": "ariaLabel",
      "description": "/** (optional) The input's aria-label. */",
      "type": "string | null"
    },
    {
      "name": "autocapitalize",
      "description": "/** (optional) The input's aria-label. */",
      "type": "string"
    },
    {
      "name": "autocorrect",
      "description": "/** (optional) The input's aria-label. */",
      "type": "boolean | 'off' | 'on'"
    },
    {
      "name": "autocomplete",
      "description": "/** (optional) The input's aria-label. */",
      "type": "string | null"
    },
    {
      "name": "autoFocusInput",
      "description": "/** (optional) The input's aria-label. */",
      "type": "boolean"
    },
    {
      "name": "clearable",
      "description": "/** (optional) The input's aria-label. */",
      "type": ""
    },
    {
      "name": "disabled",
      "description": "/** (optional) The input's aria-label. */",
      "type": "boolean"
    },
    {
      "name": "enterkeyhint",
      "description": "/** (optional) The input's aria-label. */",
      "type": "'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send'"
    },
    {
      "name": "errorText",
      "description": "/** (optional) The input's aria-label. */",
      "type": "string"
    },
    {
      "name": "helperText",
      "description": "/** (optional) The input's aria-label. */",
      "type": "string"
    },
    {
      "name": "includeErrorIcon",
      "description": "/** (optional) The input's aria-label. */",
      "type": "boolean"
    },
    {
      "name": "includeSearchIcon",
      "description": "/** (optional) The input's aria-label. */",
      "type": "boolean"
    },
    {
      "name": "includePasswordTextToggle",
      "description": "/** (optional) The input's aria-label. */",
      "type": ""
    },
    {
      "name": "inputmode",
      "description": "/** (optional) The input's aria-label. */",
      "type": "'decimal' | 'email' | 'numeric' | 'search' | 'tel' | 'text' | 'url'"
    },
    {
      "name": "label",
      "description": "/** (optional) The input's aria-label. */",
      "type": "string"
    },
    {
      "name": "maxLength",
      "description": "/** (optional) The input's aria-label. */",
      "type": "number"
    },
    {
      "name": "minLength",
      "description": "/** (optional) The input's aria-label. */",
      "type": "number"
    },
    {
      "name": "pattern",
      "description": "/** (optional) The input's aria-label. */",
      "type": "string"
    },
    {
      "name": "placeholder",
      "description": "/** (optional) The input's aria-label. */",
      "type": "string"
    },
    {
      "name": "readOnly",
      "description": "/** (optional) The input's aria-label. */",
      "type": "boolean"
    },
    {
      "name": "required",
      "description": "/** (optional) The input's aria-label. */",
      "type": "boolean"
    },
    {
      "name": "size",
      "description": "/** (optional) The input's aria-label. */",
      "type": "'medium' | 'large'"
    },
    {
      "name": "spellcheck",
      "description": "/** (optional) The input's aria-label. */",
      "type": "boolean"
    },
    {
      "name": "textAlign",
      "description": "/** (optional) The input's aria-label. */",
      "type": "'left' | 'right'"
    },
    {
      "name": "type",
      "description": "/** (optional) The input's aria-label. */",
      "type": "'email' | 'password' | 'search' | 'text' | 'tel' | 'url'"
    },
    {
      "name": "validText",
      "description": "/** (optional) The input's aria-label. */",
      "type": "string"
    },
    {
      "name": "name",
      "description": "/** (optional) The input's aria-label. */",
      "type": "string"
    },
    {
      "name": "value",
      "description": "/** (optional) The input's aria-label. */",
      "type": "string"
    }
  ],
  "events": [],
  "slots": [],
  "default_values": {
    "autocapitalize": "{this.autocapitalize}\n            autocomplete={this.autocomplete}\n            autocorrect={this.autocorrect as string}\n            class={buildTextInputClassNames()}\n            disabled={this.disabled}\n            enterkeyhint={this.enterkeyhint}\n            inputmode={this.inputmode}\n            maxlength={this.maxLength}\n            minlength={this.minLength}\n            onInput={(event) => this.handleOnInput(event)}\n            pattern={this.pattern}\n            placeholder={this.placeholder}\n            readonly={this.readOnly}\n            ref={(el) => (this.textInput = el as HTMLInputElement)}\n            spellcheck={this.spellcheck}\n            tabIndex={0}\n            type={this.type}\n            value={this.value}\n            autofocus={this.autoFocusInput}\n          />\n          {showPasswordToggle && (\n            <div\n              class=\"icons toggle-password\"\n              tabIndex={0}\n              onKeyDown={(event) => this.handleTogglePasswordKeyDown(event)}\n              onClick={() => this.handleTogglePassword()}\n              role=\"button\"\n              aria-label=\"Show password as plain text. Warning: this will display your password on the screen.\"\n              ref={(el) => (this.buttonTogglePassword = el as HTMLDivElement)}>\n              {this.passwordVisible ? <IconVisibilityOn size={iconSize} /> : <IconVisibilityOff size={iconSize} />}\n            </div>\n          )}\n          {showClearIcon && (\n            <span\n              class=\"icons clear\"\n              tabIndex={0}\n              onKeyDown={(event) => this.handleClearKeyDown(event)}\n              onClick={() => this.handleClear()}\n              role=\"button\"\n              aria-label=\"Clear entry\">\n              <IconClose size={iconSize} />\n            </span>\n          )}\n        </div>\n        {this.errorText ? (\n          <label class=\"sub-text error\">\n            {this.includeErrorIcon ? <IconError size={iconSize} /> : null}\n            {this.errorText}\n          </label>\n        ) : this.validText ? (\n          <label class=\"sub-text valid\">{this.validText}</label>\n        ) : null}\n      </div>\n    )",
    "autocorrect": "== true) {\n      return 'on'",
    "autocomplete": "{this.autocomplete}\n            autocorrect={this.autocorrect as string}\n            class={buildTextInputClassNames()}\n            disabled={this.disabled}\n            enterkeyhint={this.enterkeyhint}\n            inputmode={this.inputmode}\n            maxlength={this.maxLength}\n            minlength={this.minLength}\n            onInput={(event) => this.handleOnInput(event)}\n            pattern={this.pattern}\n            placeholder={this.placeholder}\n            readonly={this.readOnly}\n            ref={(el) => (this.textInput = el as HTMLInputElement)}\n            spellcheck={this.spellcheck}\n            tabIndex={0}\n            type={this.type}\n            value={this.value}\n            autofocus={this.autoFocusInput}\n          />\n          {showPasswordToggle && (\n            <div\n              class=\"icons toggle-password\"\n              tabIndex={0}\n              onKeyDown={(event) => this.handleTogglePasswordKeyDown(event)}\n              onClick={() => this.handleTogglePassword()}\n              role=\"button\"\n              aria-label=\"Show password as plain text. Warning: this will display your password on the screen.\"\n              ref={(el) => (this.buttonTogglePassword = el as HTMLDivElement)}>\n              {this.passwordVisible ? <IconVisibilityOn size={iconSize} /> : <IconVisibilityOff size={iconSize} />}\n            </div>\n          )}\n          {showClearIcon && (\n            <span\n              class=\"icons clear\"\n              tabIndex={0}\n              onKeyDown={(event) => this.handleClearKeyDown(event)}\n              onClick={() => this.handleClear()}\n              role=\"button\"\n              aria-label=\"Clear entry\">\n              <IconClose size={iconSize} />\n            </span>\n          )}\n        </div>\n        {this.errorText ? (\n          <label class=\"sub-text error\">\n            {this.includeErrorIcon ? <IconError size={iconSize} /> : null}\n            {this.errorText}\n          </label>\n        ) : this.validText ? (\n          <label class=\"sub-text valid\">{this.validText}</label>\n        ) : null}\n      </div>\n    )",
    "clearable": "false",
    "disabled": "{this.disabled}\n            enterkeyhint={this.enterkeyhint}\n            inputmode={this.inputmode}\n            maxlength={this.maxLength}\n            minlength={this.minLength}\n            onInput={(event) => this.handleOnInput(event)}\n            pattern={this.pattern}\n            placeholder={this.placeholder}\n            readonly={this.readOnly}\n            ref={(el) => (this.textInput = el as HTMLInputElement)}\n            spellcheck={this.spellcheck}\n            tabIndex={0}\n            type={this.type}\n            value={this.value}\n            autofocus={this.autoFocusInput}\n          />\n          {showPasswordToggle && (\n            <div\n              class=\"icons toggle-password\"\n              tabIndex={0}\n              onKeyDown={(event) => this.handleTogglePasswordKeyDown(event)}\n              onClick={() => this.handleTogglePassword()}\n              role=\"button\"\n              aria-label=\"Show password as plain text. Warning: this will display your password on the screen.\"\n              ref={(el) => (this.buttonTogglePassword = el as HTMLDivElement)}>\n              {this.passwordVisible ? <IconVisibilityOn size={iconSize} /> : <IconVisibilityOff size={iconSize} />}\n            </div>\n          )}\n          {showClearIcon && (\n            <span\n              class=\"icons clear\"\n              tabIndex={0}\n              onKeyDown={(event) => this.handleClearKeyDown(event)}\n              onClick={() => this.handleClear()}\n              role=\"button\"\n              aria-label=\"Clear entry\">\n              <IconClose size={iconSize} />\n            </span>\n          )}\n        </div>\n        {this.errorText ? (\n          <label class=\"sub-text error\">\n            {this.includeErrorIcon ? <IconError size={iconSize} /> : null}\n            {this.errorText}\n          </label>\n        ) : this.validText ? (\n          <label class=\"sub-text valid\">{this.validText}</label>\n        ) : null}\n      </div>\n    )",
    "enterkeyhint": "{this.enterkeyhint}\n            inputmode={this.inputmode}\n            maxlength={this.maxLength}\n            minlength={this.minLength}\n            onInput={(event) => this.handleOnInput(event)}\n            pattern={this.pattern}\n            placeholder={this.placeholder}\n            readonly={this.readOnly}\n            ref={(el) => (this.textInput = el as HTMLInputElement)}\n            spellcheck={this.spellcheck}\n            tabIndex={0}\n            type={this.type}\n            value={this.value}\n            autofocus={this.autoFocusInput}\n          />\n          {showPasswordToggle && (\n            <div\n              class=\"icons toggle-password\"\n              tabIndex={0}\n              onKeyDown={(event) => this.handleTogglePasswordKeyDown(event)}\n              onClick={() => this.handleTogglePassword()}\n              role=\"button\"\n              aria-label=\"Show password as plain text. Warning: this will display your password on the screen.\"\n              ref={(el) => (this.buttonTogglePassword = el as HTMLDivElement)}>\n              {this.passwordVisible ? <IconVisibilityOn size={iconSize} /> : <IconVisibilityOff size={iconSize} />}\n            </div>\n          )}\n          {showClearIcon && (\n            <span\n              class=\"icons clear\"\n              tabIndex={0}\n              onKeyDown={(event) => this.handleClearKeyDown(event)}\n              onClick={() => this.handleClear()}\n              role=\"button\"\n              aria-label=\"Clear entry\">\n              <IconClose size={iconSize} />\n            </span>\n          )}\n        </div>\n        {this.errorText ? (\n          <label class=\"sub-text error\">\n            {this.includeErrorIcon ? <IconError size={iconSize} /> : null}\n            {this.errorText}\n          </label>\n        ) : this.validText ? (\n          <label class=\"sub-text valid\">{this.validText}</label>\n        ) : null}\n      </div>\n    )",
    "errorText": "{() => this.textInput.focus()}\n          part=\"input-container\">\n          {this.includeSearchIcon ? <IconSearch size={iconSize} /> : null}\n          <input\n            id={this.inputId}\n            name={this.name}\n            aria-invalid={!!this.errorText}\n            aria-label={this.ariaLabel || undefined}\n            aria-required={this.required?.toString()}\n            autocapitalize={this.autocapitalize}\n            autocomplete={this.autocomplete}\n            autocorrect={this.autocorrect as string}\n            class={buildTextInputClassNames()}\n            disabled={this.disabled}\n            enterkeyhint={this.enterkeyhint}\n            inputmode={this.inputmode}\n            maxlength={this.maxLength}\n            minlength={this.minLength}\n            onInput={(event) => this.handleOnInput(event)}\n            pattern={this.pattern}\n            placeholder={this.placeholder}\n            readonly={this.readOnly}\n            ref={(el) => (this.textInput = el as HTMLInputElement)}\n            spellcheck={this.spellcheck}\n            tabIndex={0}\n            type={this.type}\n            value={this.value}\n            autofocus={this.autoFocusInput}\n          />\n          {showPasswordToggle && (\n            <div\n              class=\"icons toggle-password\"\n              tabIndex={0}\n              onKeyDown={(event) => this.handleTogglePasswordKeyDown(event)}\n              onClick={() => this.handleTogglePassword()}\n              role=\"button\"\n              aria-label=\"Show password as plain text. Warning: this will display your password on the screen.\"\n              ref={(el) => (this.buttonTogglePassword = el as HTMLDivElement)}>\n              {this.passwordVisible ? <IconVisibilityOn size={iconSize} /> : <IconVisibilityOff size={iconSize} />}\n            </div>\n          )}\n          {showClearIcon && (\n            <span\n              class=\"icons clear\"\n              tabIndex={0}\n              onKeyDown={(event) => this.handleClearKeyDown(event)}\n              onClick={() => this.handleClear()}\n              role=\"button\"\n              aria-label=\"Clear entry\">\n              <IconClose size={iconSize} />\n            </span>\n          )}\n        </div>\n        {this.errorText ? (\n          <label class=\"sub-text error\">\n            {this.includeErrorIcon ? <IconError size={iconSize} /> : null}\n            {this.errorText}\n          </label>\n        ) : this.validText ? (\n          <label class=\"sub-text valid\">{this.validText}</label>\n        ) : null}\n      </div>\n    )",
    "helperText": "\"sub-text helper\">{this.helperText}</label> : null}\n          </div>\n        ) : null}\n        <div\n          class={`input-container ${this.errorText ? 'error' : this.validText ? 'valid' : ''} ${this.classBySize.get(\n            this.size\n          )}`}\n          onClick={() => this.textInput.focus()}\n          part=\"input-container\">\n          {this.includeSearchIcon ? <IconSearch size={iconSize} /> : null}\n          <input\n            id={this.inputId}\n            name={this.name}\n            aria-invalid={!!this.errorText}\n            aria-label={this.ariaLabel || undefined}\n            aria-required={this.required?.toString()}\n            autocapitalize={this.autocapitalize}\n            autocomplete={this.autocomplete}\n            autocorrect={this.autocorrect as string}\n            class={buildTextInputClassNames()}\n            disabled={this.disabled}\n            enterkeyhint={this.enterkeyhint}\n            inputmode={this.inputmode}\n            maxlength={this.maxLength}\n            minlength={this.minLength}\n            onInput={(event) => this.handleOnInput(event)}\n            pattern={this.pattern}\n            placeholder={this.placeholder}\n            readonly={this.readOnly}\n            ref={(el) => (this.textInput = el as HTMLInputElement)}\n            spellcheck={this.spellcheck}\n            tabIndex={0}\n            type={this.type}\n            value={this.value}\n            autofocus={this.autoFocusInput}\n          />\n          {showPasswordToggle && (\n            <div\n              class=\"icons toggle-password\"\n              tabIndex={0}\n              onKeyDown={(event) => this.handleTogglePasswordKeyDown(event)}\n              onClick={() => this.handleTogglePassword()}\n              role=\"button\"\n              aria-label=\"Show password as plain text. Warning: this will display your password on the screen.\"\n              ref={(el) => (this.buttonTogglePassword = el as HTMLDivElement)}>\n              {this.passwordVisible ? <IconVisibilityOn size={iconSize} /> : <IconVisibilityOff size={iconSize} />}\n            </div>\n          )}\n          {showClearIcon && (\n            <span\n              class=\"icons clear\"\n              tabIndex={0}\n              onKeyDown={(event) => this.handleClearKeyDown(event)}\n              onClick={() => this.handleClear()}\n              role=\"button\"\n              aria-label=\"Clear entry\">\n              <IconClose size={iconSize} />\n            </span>\n          )}\n        </div>\n        {this.errorText ? (\n          <label class=\"sub-text error\">\n            {this.includeErrorIcon ? <IconError size={iconSize} /> : null}\n            {this.errorText}\n          </label>\n        ) : this.validText ? (\n          <label class=\"sub-text valid\">{this.validText}</label>\n        ) : null}\n      </div>\n    )",
    "includeErrorIcon": "{iconSize} /> : null}\n            {this.errorText}\n          </label>\n        ) : this.validText ? (\n          <label class=\"sub-text valid\">{this.validText}</label>\n        ) : null}\n      </div>\n    )",
    "includeSearchIcon": "{iconSize} /> : null}\n          <input\n            id={this.inputId}\n            name={this.name}\n            aria-invalid={!!this.errorText}\n            aria-label={this.ariaLabel || undefined}\n            aria-required={this.required?.toString()}\n            autocapitalize={this.autocapitalize}\n            autocomplete={this.autocomplete}\n            autocorrect={this.autocorrect as string}\n            class={buildTextInputClassNames()}\n            disabled={this.disabled}\n            enterkeyhint={this.enterkeyhint}\n            inputmode={this.inputmode}\n            maxlength={this.maxLength}\n            minlength={this.minLength}\n            onInput={(event) => this.handleOnInput(event)}\n            pattern={this.pattern}\n            placeholder={this.placeholder}\n            readonly={this.readOnly}\n            ref={(el) => (this.textInput = el as HTMLInputElement)}\n            spellcheck={this.spellcheck}\n            tabIndex={0}\n            type={this.type}\n            value={this.value}\n            autofocus={this.autoFocusInput}\n          />\n          {showPasswordToggle && (\n            <div\n              class=\"icons toggle-password\"\n              tabIndex={0}\n              onKeyDown={(event) => this.handleTogglePasswordKeyDown(event)}\n              onClick={() => this.handleTogglePassword()}\n              role=\"button\"\n              aria-label=\"Show password as plain text. Warning: this will display your password on the screen.\"\n              ref={(el) => (this.buttonTogglePassword = el as HTMLDivElement)}>\n              {this.passwordVisible ? <IconVisibilityOn size={iconSize} /> : <IconVisibilityOff size={iconSize} />}\n            </div>\n          )}\n          {showClearIcon && (\n            <span\n              class=\"icons clear\"\n              tabIndex={0}\n              onKeyDown={(event) => this.handleClearKeyDown(event)}\n              onClick={() => this.handleClear()}\n              role=\"button\"\n              aria-label=\"Clear entry\">\n              <IconClose size={iconSize} />\n            </span>\n          )}\n        </div>\n        {this.errorText ? (\n          <label class=\"sub-text error\">\n            {this.includeErrorIcon ? <IconError size={iconSize} /> : null}\n            {this.errorText}\n          </label>\n        ) : this.validText ? (\n          <label class=\"sub-text valid\">{this.validText}</label>\n        ) : null}\n      </div>\n    )",
    "includePasswordTextToggle": "true",
    "inputmode": "{this.inputmode}\n            maxlength={this.maxLength}\n            minlength={this.minLength}\n            onInput={(event) => this.handleOnInput(event)}\n            pattern={this.pattern}\n            placeholder={this.placeholder}\n            readonly={this.readOnly}\n            ref={(el) => (this.textInput = el as HTMLInputElement)}\n            spellcheck={this.spellcheck}\n            tabIndex={0}\n            type={this.type}\n            value={this.value}\n            autofocus={this.autoFocusInput}\n          />\n          {showPasswordToggle && (\n            <div\n              class=\"icons toggle-password\"\n              tabIndex={0}\n              onKeyDown={(event) => this.handleTogglePasswordKeyDown(event)}\n              onClick={() => this.handleTogglePassword()}\n              role=\"button\"\n              aria-label=\"Show password as plain text. Warning: this will display your password on the screen.\"\n              ref={(el) => (this.buttonTogglePassword = el as HTMLDivElement)}>\n              {this.passwordVisible ? <IconVisibilityOn size={iconSize} /> : <IconVisibilityOff size={iconSize} />}\n            </div>\n          )}\n          {showClearIcon && (\n            <span\n              class=\"icons clear\"\n              tabIndex={0}\n              onKeyDown={(event) => this.handleClearKeyDown(event)}\n              onClick={() => this.handleClear()}\n              role=\"button\"\n              aria-label=\"Clear entry\">\n              <IconClose size={iconSize} />\n            </span>\n          )}\n        </div>\n        {this.errorText ? (\n          <label class=\"sub-text error\">\n            {this.includeErrorIcon ? <IconError size={iconSize} /> : null}\n            {this.errorText}\n          </label>\n        ) : this.validText ? (\n          <label class=\"sub-text valid\">{this.validText}</label>\n        ) : null}\n      </div>\n    )",
    "label": "{this.inputId}>{this.label}</label> : null}\n            {this.required ? <span class=\"required\">*</span> : null}\n            {this.helperText ? <label class=\"sub-text helper\">{this.helperText}</label> : null}\n          </div>\n        ) : null}\n        <div\n          class={`input-container ${this.errorText ? 'error' : this.validText ? 'valid' : ''} ${this.classBySize.get(\n            this.size\n          )}`}\n          onClick={() => this.textInput.focus()}\n          part=\"input-container\">\n          {this.includeSearchIcon ? <IconSearch size={iconSize} /> : null}\n          <input\n            id={this.inputId}\n            name={this.name}\n            aria-invalid={!!this.errorText}\n            aria-label={this.ariaLabel || undefined}\n            aria-required={this.required?.toString()}\n            autocapitalize={this.autocapitalize}\n            autocomplete={this.autocomplete}\n            autocorrect={this.autocorrect as string}\n            class={buildTextInputClassNames()}\n            disabled={this.disabled}\n            enterkeyhint={this.enterkeyhint}\n            inputmode={this.inputmode}\n            maxlength={this.maxLength}\n            minlength={this.minLength}\n            onInput={(event) => this.handleOnInput(event)}\n            pattern={this.pattern}\n            placeholder={this.placeholder}\n            readonly={this.readOnly}\n            ref={(el) => (this.textInput = el as HTMLInputElement)}\n            spellcheck={this.spellcheck}\n            tabIndex={0}\n            type={this.type}\n            value={this.value}\n            autofocus={this.autoFocusInput}\n          />\n          {showPasswordToggle && (\n            <div\n              class=\"icons toggle-password\"\n              tabIndex={0}\n              onKeyDown={(event) => this.handleTogglePasswordKeyDown(event)}\n              onClick={() => this.handleTogglePassword()}\n              role=\"button\"\n              aria-label=\"Show password as plain text. Warning: this will display your password on the screen.\"\n              ref={(el) => (this.buttonTogglePassword = el as HTMLDivElement)}>\n              {this.passwordVisible ? <IconVisibilityOn size={iconSize} /> : <IconVisibilityOff size={iconSize} />}\n            </div>\n          )}\n          {showClearIcon && (\n            <span\n              class=\"icons clear\"\n              tabIndex={0}\n              onKeyDown={(event) => this.handleClearKeyDown(event)}\n              onClick={() => this.handleClear()}\n              role=\"button\"\n              aria-label=\"Clear entry\">\n              <IconClose size={iconSize} />\n            </span>\n          )}\n        </div>\n        {this.errorText ? (\n          <label class=\"sub-text error\">\n            {this.includeErrorIcon ? <IconError size={iconSize} /> : null}\n            {this.errorText}\n          </label>\n        ) : this.validText ? (\n          <label class=\"sub-text valid\">{this.validText}</label>\n        ) : null}\n      </div>\n    )",
    "pattern": "{this.pattern}\n            placeholder={this.placeholder}\n            readonly={this.readOnly}\n            ref={(el) => (this.textInput = el as HTMLInputElement)}\n            spellcheck={this.spellcheck}\n            tabIndex={0}\n            type={this.type}\n            value={this.value}\n            autofocus={this.autoFocusInput}\n          />\n          {showPasswordToggle && (\n            <div\n              class=\"icons toggle-password\"\n              tabIndex={0}\n              onKeyDown={(event) => this.handleTogglePasswordKeyDown(event)}\n              onClick={() => this.handleTogglePassword()}\n              role=\"button\"\n              aria-label=\"Show password as plain text. Warning: this will display your password on the screen.\"\n              ref={(el) => (this.buttonTogglePassword = el as HTMLDivElement)}>\n              {this.passwordVisible ? <IconVisibilityOn size={iconSize} /> : <IconVisibilityOff size={iconSize} />}\n            </div>\n          )}\n          {showClearIcon && (\n            <span\n              class=\"icons clear\"\n              tabIndex={0}\n              onKeyDown={(event) => this.handleClearKeyDown(event)}\n              onClick={() => this.handleClear()}\n              role=\"button\"\n              aria-label=\"Clear entry\">\n              <IconClose size={iconSize} />\n            </span>\n          )}\n        </div>\n        {this.errorText ? (\n          <label class=\"sub-text error\">\n            {this.includeErrorIcon ? <IconError size={iconSize} /> : null}\n            {this.errorText}\n          </label>\n        ) : this.validText ? (\n          <label class=\"sub-text valid\">{this.validText}</label>\n        ) : null}\n      </div>\n    )",
    "placeholder": "{this.placeholder}\n            readonly={this.readOnly}\n            ref={(el) => (this.textInput = el as HTMLInputElement)}\n            spellcheck={this.spellcheck}\n            tabIndex={0}\n            type={this.type}\n            value={this.value}\n            autofocus={this.autoFocusInput}\n          />\n          {showPasswordToggle && (\n            <div\n              class=\"icons toggle-password\"\n              tabIndex={0}\n              onKeyDown={(event) => this.handleTogglePasswordKeyDown(event)}\n              onClick={() => this.handleTogglePassword()}\n              role=\"button\"\n              aria-label=\"Show password as plain text. Warning: this will display your password on the screen.\"\n              ref={(el) => (this.buttonTogglePassword = el as HTMLDivElement)}>\n              {this.passwordVisible ? <IconVisibilityOn size={iconSize} /> : <IconVisibilityOff size={iconSize} />}\n            </div>\n          )}\n          {showClearIcon && (\n            <span\n              class=\"icons clear\"\n              tabIndex={0}\n              onKeyDown={(event) => this.handleClearKeyDown(event)}\n              onClick={() => this.handleClear()}\n              role=\"button\"\n              aria-label=\"Clear entry\">\n              <IconClose size={iconSize} />\n            </span>\n          )}\n        </div>\n        {this.errorText ? (\n          <label class=\"sub-text error\">\n            {this.includeErrorIcon ? <IconError size={iconSize} /> : null}\n            {this.errorText}\n          </label>\n        ) : this.validText ? (\n          <label class=\"sub-text valid\">{this.validText}</label>\n        ) : null}\n      </div>\n    )",
    "required": "{'label-container'}>\n            {this.label ? <label htmlFor={this.inputId}>{this.label}</label> : null}\n            {this.required ? <span class=\"required\">*</span> : null}\n            {this.helperText ? <label class=\"sub-text helper\">{this.helperText}</label> : null}\n          </div>\n        ) : null}\n        <div\n          class={`input-container ${this.errorText ? 'error' : this.validText ? 'valid' : ''} ${this.classBySize.get(\n            this.size\n          )}`}\n          onClick={() => this.textInput.focus()}\n          part=\"input-container\">\n          {this.includeSearchIcon ? <IconSearch size={iconSize} /> : null}\n          <input\n            id={this.inputId}\n            name={this.name}\n            aria-invalid={!!this.errorText}\n            aria-label={this.ariaLabel || undefined}\n            aria-required={this.required?.toString()}\n            autocapitalize={this.autocapitalize}\n            autocomplete={this.autocomplete}\n            autocorrect={this.autocorrect as string}\n            class={buildTextInputClassNames()}\n            disabled={this.disabled}\n            enterkeyhint={this.enterkeyhint}\n            inputmode={this.inputmode}\n            maxlength={this.maxLength}\n            minlength={this.minLength}\n            onInput={(event) => this.handleOnInput(event)}\n            pattern={this.pattern}\n            placeholder={this.placeholder}\n            readonly={this.readOnly}\n            ref={(el) => (this.textInput = el as HTMLInputElement)}\n            spellcheck={this.spellcheck}\n            tabIndex={0}\n            type={this.type}\n            value={this.value}\n            autofocus={this.autoFocusInput}\n          />\n          {showPasswordToggle && (\n            <div\n              class=\"icons toggle-password\"\n              tabIndex={0}\n              onKeyDown={(event) => this.handleTogglePasswordKeyDown(event)}\n              onClick={() => this.handleTogglePassword()}\n              role=\"button\"\n              aria-label=\"Show password as plain text. Warning: this will display your password on the screen.\"\n              ref={(el) => (this.buttonTogglePassword = el as HTMLDivElement)}>\n              {this.passwordVisible ? <IconVisibilityOn size={iconSize} /> : <IconVisibilityOff size={iconSize} />}\n            </div>\n          )}\n          {showClearIcon && (\n            <span\n              class=\"icons clear\"\n              tabIndex={0}\n              onKeyDown={(event) => this.handleClearKeyDown(event)}\n              onClick={() => this.handleClear()}\n              role=\"button\"\n              aria-label=\"Clear entry\">\n              <IconClose size={iconSize} />\n            </span>\n          )}\n        </div>\n        {this.errorText ? (\n          <label class=\"sub-text error\">\n            {this.includeErrorIcon ? <IconError size={iconSize} /> : null}\n            {this.errorText}\n          </label>\n        ) : this.validText ? (\n          <label class=\"sub-text valid\">{this.validText}</label>\n        ) : null}\n      </div>\n    )",
    "size": "'medium'",
    "spellcheck": "{this.spellcheck}\n            tabIndex={0}\n            type={this.type}\n            value={this.value}\n            autofocus={this.autoFocusInput}\n          />\n          {showPasswordToggle && (\n            <div\n              class=\"icons toggle-password\"\n              tabIndex={0}\n              onKeyDown={(event) => this.handleTogglePasswordKeyDown(event)}\n              onClick={() => this.handleTogglePassword()}\n              role=\"button\"\n              aria-label=\"Show password as plain text. Warning: this will display your password on the screen.\"\n              ref={(el) => (this.buttonTogglePassword = el as HTMLDivElement)}>\n              {this.passwordVisible ? <IconVisibilityOn size={iconSize} /> : <IconVisibilityOff size={iconSize} />}\n            </div>\n          )}\n          {showClearIcon && (\n            <span\n              class=\"icons clear\"\n              tabIndex={0}\n              onKeyDown={(event) => this.handleClearKeyDown(event)}\n              onClick={() => this.handleClear()}\n              role=\"button\"\n              aria-label=\"Clear entry\">\n              <IconClose size={iconSize} />\n            </span>\n          )}\n        </div>\n        {this.errorText ? (\n          <label class=\"sub-text error\">\n            {this.includeErrorIcon ? <IconError size={iconSize} /> : null}\n            {this.errorText}\n          </label>\n        ) : this.validText ? (\n          <label class=\"sub-text valid\">{this.validText}</label>\n        ) : null}\n      </div>\n    )",
    "textAlign": "'left'",
    "type": "'text'",
    "validText": "{() => this.textInput.focus()}\n          part=\"input-container\">\n          {this.includeSearchIcon ? <IconSearch size={iconSize} /> : null}\n          <input\n            id={this.inputId}\n            name={this.name}\n            aria-invalid={!!this.errorText}\n            aria-label={this.ariaLabel || undefined}\n            aria-required={this.required?.toString()}\n            autocapitalize={this.autocapitalize}\n            autocomplete={this.autocomplete}\n            autocorrect={this.autocorrect as string}\n            class={buildTextInputClassNames()}\n            disabled={this.disabled}\n            enterkeyhint={this.enterkeyhint}\n            inputmode={this.inputmode}\n            maxlength={this.maxLength}\n            minlength={this.minLength}\n            onInput={(event) => this.handleOnInput(event)}\n            pattern={this.pattern}\n            placeholder={this.placeholder}\n            readonly={this.readOnly}\n            ref={(el) => (this.textInput = el as HTMLInputElement)}\n            spellcheck={this.spellcheck}\n            tabIndex={0}\n            type={this.type}\n            value={this.value}\n            autofocus={this.autoFocusInput}\n          />\n          {showPasswordToggle && (\n            <div\n              class=\"icons toggle-password\"\n              tabIndex={0}\n              onKeyDown={(event) => this.handleTogglePasswordKeyDown(event)}\n              onClick={() => this.handleTogglePassword()}\n              role=\"button\"\n              aria-label=\"Show password as plain text. Warning: this will display your password on the screen.\"\n              ref={(el) => (this.buttonTogglePassword = el as HTMLDivElement)}>\n              {this.passwordVisible ? <IconVisibilityOn size={iconSize} /> : <IconVisibilityOff size={iconSize} />}\n            </div>\n          )}\n          {showClearIcon && (\n            <span\n              class=\"icons clear\"\n              tabIndex={0}\n              onKeyDown={(event) => this.handleClearKeyDown(event)}\n              onClick={() => this.handleClear()}\n              role=\"button\"\n              aria-label=\"Clear entry\">\n              <IconClose size={iconSize} />\n            </span>\n          )}\n        </div>\n        {this.errorText ? (\n          <label class=\"sub-text error\">\n            {this.includeErrorIcon ? <IconError size={iconSize} /> : null}\n            {this.errorText}\n          </label>\n        ) : this.validText ? (\n          <label class=\"sub-text valid\">{this.validText}</label>\n        ) : null}\n      </div>\n    )",
    "name": "{this.name}\n            aria-invalid={!!this.errorText}\n            aria-label={this.ariaLabel || undefined}\n            aria-required={this.required?.toString()}\n            autocapitalize={this.autocapitalize}\n            autocomplete={this.autocomplete}\n            autocorrect={this.autocorrect as string}\n            class={buildTextInputClassNames()}\n            disabled={this.disabled}\n            enterkeyhint={this.enterkeyhint}\n            inputmode={this.inputmode}\n            maxlength={this.maxLength}\n            minlength={this.minLength}\n            onInput={(event) => this.handleOnInput(event)}\n            pattern={this.pattern}\n            placeholder={this.placeholder}\n            readonly={this.readOnly}\n            ref={(el) => (this.textInput = el as HTMLInputElement)}\n            spellcheck={this.spellcheck}\n            tabIndex={0}\n            type={this.type}\n            value={this.value}\n            autofocus={this.autoFocusInput}\n          />\n          {showPasswordToggle && (\n            <div\n              class=\"icons toggle-password\"\n              tabIndex={0}\n              onKeyDown={(event) => this.handleTogglePasswordKeyDown(event)}\n              onClick={() => this.handleTogglePassword()}\n              role=\"button\"\n              aria-label=\"Show password as plain text. Warning: this will display your password on the screen.\"\n              ref={(el) => (this.buttonTogglePassword = el as HTMLDivElement)}>\n              {this.passwordVisible ? <IconVisibilityOn size={iconSize} /> : <IconVisibilityOff size={iconSize} />}\n            </div>\n          )}\n          {showClearIcon && (\n            <span\n              class=\"icons clear\"\n              tabIndex={0}\n              onKeyDown={(event) => this.handleClearKeyDown(event)}\n              onClick={() => this.handleClear()}\n              role=\"button\"\n              aria-label=\"Clear entry\">\n              <IconClose size={iconSize} />\n            </span>\n          )}\n        </div>\n        {this.errorText ? (\n          <label class=\"sub-text error\">\n            {this.includeErrorIcon ? <IconError size={iconSize} /> : null}\n            {this.errorText}\n          </label>\n        ) : this.validText ? (\n          <label class=\"sub-text valid\">{this.validText}</label>\n        ) : null}\n      </div>\n    )",
    "value": "null"
  },
  "documentation": "\n\n--- modus-text-input-storybook-docs.mdx ---\n\n# Text Input\n\n---\n\n[Modus Text](https://modus.trimble.com/components/inputs/) Input web components are wrappers around native `<input type=\"text\">` elements. They are referenced using the `<modus-text-input>` custom HTML element.\n\nThis component is compatible with Angular reactive forms. This can be achieved through the implementation of a simple directive.\n\n### Default\n\n<modus-text-input label=\"Text Input (Search Icon)\" placeholder=\"Placeholder\" include-search-icon required></modus-text-input>\n\n<modus-text-input label=\"Text Input (Search Icon & Disabled)\" include-search-icon disabled></modus-text-input>\n\n<modus-text-input label=\"Text Input (Search Icon & Helper Text)\" placeholder=\"Placeholder\" value=\"Value\" helper-text=\"Helper Demo\" include-search-icon required></modus-text-input>\n\n<modus-text-input label=\"Text Input (Error)\" placeholder=\"Placeholder\" value=\"Value\" error-text=\"Error Demo\"></modus-text-input>\n\n<modus-text-input label=\"Text Input (Valid)\" placeholder=\"Placeholder\" value=\"Value\" valid-text=\"Valid Demo\"></modus-text-input>\n\n<modus-text-input label=\"Text Input (Large & Helper Text)\" placeholder=\"Placeholder\" value=\"Value\" size=\"large\" helper-text=\"Your username must be 8-20 characters long, contain letters and numbers, and must not contain spaces\"></modus-text-input>\n\n<modus-text-input label=\"Text Input (Clearable)\" placeholder=\"Placeholder\" value=\"Value\" clearable=\"true\"></modus-text-input>\n\n<modus-text-input label=\"Text Input (Password)\" placeholder=\"Password\" type=\"password\"></modus-text-input>\n\n```html\n<modus-text-input label=\"Text Input (Search Icon)\" placeholder=\"Placeholder\" include-search-icon required></modus-text-input>\n<modus-text-input label=\"Text Input (Search Icon & Disabled)\" include-search-icon disabled></modus-text-input>\n<modus-text-input\n  label=\"Text Input (Search Icon & Helper Text)\"\n  placeholder=\"Placeholder\"\n  value=\"Value\"\n  helper-text=\"Helper Demo\"\n  include-search-icon\n  required></modus-text-input>\n<modus-text-input\n  label=\"Text Input (Error)\"\n  placeholder=\"Placeholder\"\n  value=\"Value\"\n  error-text=\"Error Demo\"></modus-text-input>\n<modus-text-input\n  label=\"Text Input (Valid)\"\n  placeholder=\"Placeholder\"\n  value=\"Value\"\n  valid-text=\"Valid Demo\"></modus-text-input>\n<modus-text-input\n  label=\"Text Input (Large & Helper Text)\"\n  placeholder=\"Placeholder\"\n  value=\"Value\"\n  size=\"large\"\n  helper-text=\"Your username must be 8-20 characters long, contain letters and numbers, and must not contain spaces\"></modus-text-input>\n<modus-text-input label=\"Text Input (Clearable)\" placeholder=\"Placeholder\" value=\"Value\" clearable=\"true\"></modus-text-input>\n<modus-text-input label=\"Text Input (Password)\" placeholder=\"Password\" type=\"password\"></modus-text-input>\n```\n\n### Properties\n\n| Property                    | Attribute                      | Description                                                                                               | Type                                                             | Default     |\n| --------------------------- | ------------------------------ | --------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | ----------- |\n| `ariaLabel`                 | `aria-label`                   | (optional) The input's aria-label.                                                                        | `string`                                                         | `undefined` |\n| `autoFocusInput`            | `auto-focus-input`             | (optional) Sets autofocus on the input.                                                                   | `boolean`                                                        | `undefined` |\n| `autocapitalize`            | `autocapitalize`               | (optional) Capitalization behavior when using a non-traditional keyboard (e.g. microphone, touch screen). | `\"none\", \"off\", \"sentences\", \"on\", \"words\", \"characters\"`        | `undefined` |\n| `autocorrect `              | `autocorrect`                  | (optional) Whether to activate automatic correction while the user is editing this field in Safari.       | `boolean, \"off\", \"on\"`                                           | `undefined` |\n| `autocomplete`              | `autocomplete`                 | (optional) Sets autocomplete on the input.                                                                | `string`                                                         | `undefined` |\n| `clearable`                 | `clearable`                    | (optional) Whether the input has a clear button.                                                          | `boolean`                                                        | `false`     |\n| `disabled`                  | `disabled`                     | (optional) Whether the input is disabled.                                                                 | `boolean`                                                        | `undefined` |\n| `enterkeyhint`              | `enterkeyhint`                 | (optional) Which action label to present for the enter key on virtual keyboards.                          | `\"enter\", \"done\", \"go\", \"next\", \"previous\", \"search\", \"send\"`    | `undefined` |\n| `errorText`                 | `error-text`                   | (optional) The input's error state text.                                                                  | `string`                                                         | `undefined` |\n| `helperText`                | `helper-text`                  | (optional) The input's helper text displayed below the input.                                             | `string`                                                         | `undefined` |\n| `includeErrorIcon`          | `include-error-icon`           | (optional) Whether the error icon is included.                                                            | `boolean`                                                        | `undefined` |\n| `includePasswordTextToggle` | `include-password-text-toggle` | (optional) Whether the password text toggle icon is included.                                             | `boolean`                                                        | `true`      |\n| `includeSearchIcon`         | `include-search-icon`          | (optional) Whether the search icon is included.                                                           | `boolean`                                                        | `undefined` |\n| `inputmode`                 | `inputmode`                    | (optional) The input's inputmode.                                                                         | `\"decimal\", \"email\",  \"numeric\", \"search\", \"tel\", \"text\", \"url\"` | `undefined` |\n| `label`                     | `label`                        | (optional) The input's label.                                                                             | `string`                                                         | `undefined` |\n| `maxLength`                 | `max-length`                   | (optional) The input's maximum length.                                                                    | `number`                                                         | `undefined` |\n| `minLength`                 | `min-length`                   | (optional) The input's minimum length.                                                                    | `number`                                                         | `undefined` |\n| `pattern`                   | `pattern`                      | (optional) The input's HTML5 pattern.                                                                     | `string`                                                         | `undefined` |\n| `placeholder`               | `placeholder`                  | (optional) The input's placeholder text.                                                                  | `string`                                                         | `undefined` |\n| `readOnly`                  | `read-only`                    | (optional) Whether the input's content is read-only                                                       | `boolean`                                                        | `undefined` |\n| `required`                  | `required`                     | (optional) Whether the input is required.                                                                 | `boolean`                                                        | `undefined` |\n| `size`                      | `size`                         | (optional) The input's size.                                                                              | `\"large\", \"medium\"`                                              | `'medium'`  |\n| `spellcheck`                | `spellcheck`                   | (optional) Whether to enable spell checking.                                                              | `boolean`                                                        | `false`     |\n| `textAlign`                 | `text-align`                   | (optional) The input's text alignment.                                                                    | `\"left\", \"right\"`                                                | `'left'`    |\n| `type`                      | `type`                         | (optional) The input's type.                                                                              | `\"email\", \"password\", \"search\", \"text\", \"url\"`                   | `'text'`    |\n| `validText`                 | `valid-text`                   | (optional) The input's valid state text.                                                                  | `string`                                                         | `undefined` |\n| `value`                     | `value`                        | (optional) The input's value.                                                                             | `string`                                                         | `undefined` |\n| `name`                      | `name`                         | (optional) The input's name.                                                                              | `string`                                                         | `undefined` |\n\n### DOM Events\n\n| Name          | Description                      | Emits    |\n| ------------- | -------------------------------- | -------- |\n| `valueChange` | Fires on text input value change | `string` |\n\n### Methods\n\n| Method name  | Description     | Parameter | Return          |\n| ------------ | --------------- | --------- | --------------- |\n| `focusInput` | Focus the input |           | `Promise<void>` |\n\n### Accessibility\n\n- Text Input gets an `aria-label` provided by the `aria-label` property input.\n- It is recommended to pass `aria-label` when there is no label used so the input is accessible to screen readers.\n- Text Input gets an `aria-disabled` set to whether Text Input is disabled.\n- Text Input gets an `aria-placeholder` provided by the `placeholder` property input.\n- Text Input gets an `aria-invalid` set to whether Text Input is invalid.\n- Text Input gets an `aria-readonly` set to whether Text Input is readonly.\n- Text Input gets an `aria-required` set to whether Text Input is required.\n",
  "storybook_content": "\n\n--- modus-text-input.stories.tsx ---\n\n// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-text-input-storybook-docs.mdx';\nimport { html } from 'lit-html';\nimport { withActions } from '@storybook/addon-actions/decorator';\n\nexport default {\n  title: 'User Inputs/Text Input',\n  argTypes: {\n    ariaLabel: {\n      name: 'aria-label',\n      description: \"The text input's aria-label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    autocapitalize: {\n      name: 'autocapitalize',\n      options: ['none', 'off', 'sentences', 'on', 'words', 'characters'],\n      type: 'select',\n      description: 'Capitalization behavior when using a non-traditional keyboard (e.g. microphone, touch screen)',\n      table: {\n        type: { summary: `'none' | 'off' | 'sentences' | 'on' | 'words' | 'characters'` },\n      },\n    },\n    autocomplete: {\n      name: 'autocomplete',\n      description: \"The text input's autocomplete\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    autocorrect: {\n      name: 'autocorrect',\n      options: ['off', 'on'],\n      type: 'select',\n      description: 'Whether to activate automatic correction while the user is editing this field in Safari',\n      table: {\n        type: { summary: `boolean | 'off' | 'on'` },\n      },\n    },\n    autoFocusInput: {\n      name: 'auto-focus-input',\n      description: 'Sets autofocus for the input',\n      table: {\n        type: { summary: 'boolean' },\n      },\n    },\n    clearable: {\n      description: 'Whether the text input is clearable',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    disabled: {\n      description: 'Whether the text input is disabled',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    enterkeyhint: {\n      options: ['enter', 'done', 'go', 'next', 'previous', 'search', 'send'],\n      type: 'select',\n      description: 'Which action label to present for the enter key on virtual keyboards',\n      table: {\n        type: { summary: `'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send'` },\n      },\n    },\n    errorText: {\n      name: 'error-text',\n      description: \"The text input's error text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    helperText: {\n      name: 'helper-text',\n      description: \"The text input's helper text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    includeErrorIcon: {\n      name: 'include-error-icon',\n      description: 'Whether to include the error icon',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    includePasswordTextToggle: {\n      name: 'include-password-text-toggle',\n      description: 'Whether the password text toggle icon is included',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    includeSearchIcon: {\n      name: 'include-search-icon',\n      description: 'Whether to include the search icon',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    inputmode: {\n      options: ['decimal', 'email', 'numeric', 'search', 'tel', 'text', 'url'],\n      type: 'select',\n      description: 'The inputmode type',\n      table: {\n        type: {\n          summary: \"'decimal' | 'email' | 'numeric' | 'search' | 'tel' | 'text' | 'url'\",\n        },\n      },\n    },\n    label: {\n      description: \"The text input's label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    maxLength: {\n      name: 'max-length',\n      description: \"The text input's maximum length\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    minLength: {\n      name: 'min-length',\n      description: \"The text input's minimum length\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    pattern: {\n      description: \"The text input's pattern attribute\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    placeholder: {\n      description: \"The text input's placeholder text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    readOnly: {\n      name: 'read-only',\n      description: 'Whether the text input is read-only',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    required: {\n      description: 'Whether the text input is required',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    size: {\n      options: ['medium', 'large'],\n      type: 'select',\n      description: 'The size of the text input',\n      table: {\n        defaultValue: { summary: \"'medium'\" },\n        type: { summary: \"'medium' | 'large'\" },\n      },\n    },\n    spellcheck: {\n      type: 'boolean',\n      name: 'spellcheck',\n      description: 'Whether to enable spell checking.',\n      table: {\n        type: { summary: 'boolean' },\n      },\n    },\n    textAlign: {\n      name: 'text-align',\n      options: ['left', 'right'],\n      type: 'select',\n      description: 'text alignment for the input.',\n      table: {\n        defaultValue: { summary: \"'left'\" },\n        type: {\n          summary: \"'left' | 'right'\",\n        },\n      },\n    },\n    type: {\n      options: ['email', 'password', 'search', 'tel', 'text', 'url'],\n      type: 'select',\n      description: 'The input type',\n      table: {\n        defaultValue: { summary: \"'text'\" },\n        type: { summary: \"'email' | 'password' | 'search' | 'tel' | 'text' | 'url'\" },\n      },\n    },\n    validText: {\n      name: 'valid-text',\n      description: \"The text input's valid text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    value: {\n      description: \"The text input's value\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    name: {\n      name: 'name',\n      description: \"The text input's name\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n  },\n  parameters: {\n    actions: {\n      handles: ['valueChange'],\n    },\n    controls: { expanded: true, sort: 'requiredFirst' },\n    docs: {\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n    },\n    design: {\n      type: 'figma',\n      url: 'https://www.figma.com/design/wyfVJUHWRMkeCfdB38HFEE/Modus---Web?node-id=1346-5&m=dev',\n    },\n  },\n  decorators: [withActions],\n};\n\nconst Template = ({\n  ariaLabel,\n  autocapitalize,\n  autocomplete,\n  autocorrect,\n  autoFocusInput,\n  clearable,\n  disabled,\n  enterkeyhint,\n  errorText,\n  helperText,\n  includeErrorIcon,\n  includePasswordTextToggle,\n  includeSearchIcon,\n  inputmode,\n  label,\n  maxLength,\n  minLength,\n  pattern,\n  placeholder,\n  readOnly,\n  required,\n  size,\n  spellcheck,\n  textAlign,\n  type,\n  validText,\n  name,\n  value,\n}) => html`\n  <form>\n    <modus-text-input\n      aria-label=${ariaLabel}\n      autocapitalize=${autocapitalize}\n      autocomplete=${autocomplete}\n      autocorrect=${autocorrect}\n      auto-focus-input=${autoFocusInput}\n      clearable=${clearable}\n      ?disabled=${disabled}\n      enterkeyhint=${enterkeyhint}\n      error-text=${errorText}\n      helper-text=${helperText}\n      include-error-icon=${includeErrorIcon}\n      include-password-text-toggle=${includePasswordTextToggle}\n      include-search-icon=${includeSearchIcon}\n      inputmode=${inputmode}\n      label=${label}\n      max-length=${maxLength}\n      min-length=${minLength}\n      pattern=${pattern}\n      placeholder=${placeholder}\n      read-only=${readOnly}\n      ?required=${required}\n      size=${size}\n      ?spellcheck=${spellcheck}\n      text-align=${textAlign}\n      type=${type}\n      valid-text=${validText}\n      value=${value}\n      name=${name}></modus-text-input>\n  </form>\n`;\n\nexport const Default = Template.bind({});\nDefault.args = {\n  ariaLabel: '',\n  autocapitalize: undefined,\n  autocomplete: '',\n  autocorrect: null,\n  autoFocusInput: true,\n  clearable: false,\n  disabled: false,\n  enterkeyhint: undefined,\n  errorText: '',\n  helperText: '',\n  includeErrorIcon: false,\n  includePasswordTextToggle: true,\n  includeSearchIcon: false,\n  inputmode: '',\n  label: 'Username',\n  name: 'test-input',\n  maxLength: 20,\n  minLength: 0,\n  pattern: '',\n  placeholder: '',\n  readOnly: false,\n  required: false,\n  size: 'medium',\n  spellcheck: false,\n  textAlign: 'left',\n  type: 'text',\n  validText: '',\n  value: '',\n};\n",
  "storybook": {
    "examples": [
      "<modus-text-input\n      aria-label=${ariaLabel}\n      autocapitalize=${autocapitalize}\n      autocomplete=${autocomplete}\n      autocorrect=${autocorrect}\n      auto-focus-input=${autoFocusInput}\n      clearable=${clearable}\n      ?disabled=${disabled}\n      enterkeyhint=${enterkeyhint}\n      error-text=${errorText}\n      helper-text=${helperText}\n      include-error-icon=${includeErrorIcon}\n      include-password-text-toggle=${includePasswordTextToggle}\n      include-search-icon=${includeSearchIcon}\n      inputmode=${inputmode}\n      label=${label}\n      max-length=${maxLength}\n      min-length=${minLength}\n      pattern=${pattern}\n      placeholder=${placeholder}\n      read-only=${readOnly}\n      ?required=${required}\n      size=${size}\n      ?spellcheck=${spellcheck}\n      text-align=${textAlign}\n      type=${type}\n      valid-text=${validText}\n      value=${value}\n      name=${name}></modus-text-input>",
      "\n  <form>\n    <modus-text-input\n      aria-label=${ariaLabel}\n      autocapitalize=${autocapitalize}\n      autocomplete=${autocomplete}\n      autocorrect=${autocorrect}\n      auto-focus-input=${autoFocusInput}\n      clearable=${clearable}\n      ?disabled=${disabled}\n      enterkeyhint=${enterkeyhint}\n      error-text=${errorText}\n      helper-text=${helperText}\n      include-error-icon=${includeErrorIcon}\n      include-password-text-toggle=${includePasswordTextToggle}\n      include-search-icon=${includeSearchIcon}\n      inputmode=${inputmode}\n      label=${label}\n      max-length=${maxLength}\n      min-length=${minLength}\n      pattern=${pattern}\n      placeholder=${placeholder}\n      read-only=${readOnly}\n      ?required=${required}\n      size=${size}\n      ?spellcheck=${spellcheck}\n      text-align=${textAlign}\n      type=${type}\n      valid-text=${validText}\n      value=${value}\n      name=${name}></modus-text-input>\n  </form>\n"
    ],
    "variants": [],
    "prop_usage": {}
  },
  "tag_name": "modus-text-input"
}
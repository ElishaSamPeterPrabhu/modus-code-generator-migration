{
  "component_name": "modus-side-navigation",
  "version": "v1",
  "props": [
    {
      "name": "collapseOnClickOutside",
      "description": "/** (optional) To choose whether to collapse the panel when clicked outside. */",
      "type": ""
    },
    {
      "name": "data",
      "description": "/** (optional) To choose whether to collapse the panel when clicked outside. */",
      "type": "ModusSideNavigationItemInfo[]"
    },
    {
      "name": "maxWidth",
      "description": "/** (optional) To choose whether to collapse the panel when clicked outside. */",
      "type": "this._minWidth"
    },
    {
      "name": "mode",
      "description": "/** (optional) To choose whether to collapse the panel when clicked outside. */",
      "type": "'overlay' | 'push'"
    },
    {
      "name": "expanded",
      "description": "/** (optional) To choose whether to collapse the panel when clicked outside. */",
      "type": "' expanded' : ''}`}\n        style"
    },
    {
      "name": "targetContent",
      "description": "/** (optional) To choose whether to collapse the panel when clicked outside. */",
      "type": "string"
    }
  ],
  "events": [],
  "slots": [],
  "default_values": {
    "collapseOnClickOutside": "true",
    "data": "[\n        {\n          id: null,\n          label: null,\n          children: data,\n          levelPosition: 'center',\n        },\n      ]",
    "maxWidth": "'256px'",
    "mode": "'overlay'",
    "expanded": "false"
  },
  "documentation": "\n\n--- modus-side-navigation-storybook-docs.mdx ---\n\nimport { Story } from '@storybook/blocks';\nimport * as SideNavigation from './modus-side-navigation.stories.tsx';\n\n# Modus Side Navigation\n\n---\n\n[Modus Side Navigation](https://modus.trimble.com/components/web/side-navigation/) is a collapsible side content of the site\u2019s pages. It is located alongside the page\u2019s primary content. The component is designed to add side content to a fullscreen application. It is activated through the \u201chamburger\u201d menu in the [Navbar](https://modus-web-components.trimble.com/?path=/docs/components-navbar--default).\n\n#### Implementation Details\n\n- There are two ways to add a Modus Side Navigation, either use the tags `modus-side-navigation` for root and `modus-side-navigation-item` for menu items or pass an object array for the prop `data`.\n- For modus side navigation to maintain state `modus-side-navigation-item` tag requires `id` which should be a unique identifier.\n- The `expanded` prop on `modus-side-navigation` controls the expanded state of all the side navigation menu items.\n- The width of the panel in an expanded state can be set using `maxWidth` prop.\n- The prop `label` on `modus-side-navigation-item` is used for menu text and a `modus-side-navigation-item` can be manually selected using `selected` prop.\n\n### Accessibility\n\nEvery menu item is accessible through keyboard. <kbd>Tab</kbd> key and `Down Arrow` key moves focus to the next menu item. `Shift + Tab` key and `Up Arrow` moves focus to the previous menu item. Pressing `Enter` key either opens the folder or selects the item.\n\n### Basic Modus Side Navigation\n\nA basic Modus Side Navigation with only item selection and keyboard navigation features can be designed as show in the example below.\n\n<Story of={SideNavigation.Default} />\n\n```html\n<div id=\"defaultTemplate\">\n  <div\n    style=\"width: 100%;align-items: center;height: 56px;box-shadow: 0 0 2px var(--modus-secondary)!important; margin-top: 50px;\">\n    <modus-navbar id=\"navbar\" show-apps-menu show-help show-main-menu show-notifications> </modus-navbar>\n  </div>\n\n  <div\n    id=\"container\"\n    style=\"display:flex; min-height:500px; overflow-y: auto; position: relative;box-shadow: 0 0 2px var(--modus-secondary)!important;\">\n    <modus-side-navigation max-width=\"300px\" id=\"sideNav\" target-content=\"#defaultTemplate #panelcontent\">\n      <modus-side-navigation-item id=\"home-menu\" label=\"Home page\">\n        <modus-icon name=\"home\" size=\"24\" slot=\"menu-icon\"></modus-icon>\n      </modus-side-navigation-item>\n      <modus-side-navigation-item id=\"usage-menu\" label=\"Usage\">\n        <modus-icon name=\"flowchart\" size=\"24\" slot=\"menu-icon\"></modus-icon>\n      </modus-side-navigation-item>\n      <modus-side-navigation-item id=\"styles-menu\" label=\"Styles\">\n        <modus-icon name=\"bar_graph_line\" size=\"24\" slot=\"menu-icon\"></modus-icon>\n      </modus-side-navigation-item>\n      <modus-side-navigation-item id=\"accessibility-menu\" label=\"Accessibility\">\n        <modus-icon name=\"screen\" size=\"24\" slot=\"menu-icon\"></modus-icon>\n      </modus-side-navigation-item>\n    </modus-side-navigation>\n\n    <div id=\"panelcontent\" style=\"padding:10px;\">\n      <div id=\"overview\">\n        <p>\n          The side navigation of an application provides context through accessible menu options and positions a consistent\n          component to connect to various pages in the application.\n        </p>\n        <p>\n          The side navigation is a collapsible side content of the site\u2019s pages. It is located alongside the page\u2019s primary\n          content. The component is designed to add side content to a fullscreen application. It is activated through the\n          \u201chamburger\u201d menu in the Navbar.\n        </p>\n      </div>\n    </div>\n  </div>\n</div>\n\n<script>\n  document.querySelector('#navbar').logoOptions = {\n    primary: {\n      url: 'https://modus.trimble.com/img/trimble-logo.svg',\n    },\n  };\n  document.querySelector('#navbar').profileMenuOptions = {\n    avatarUrl: 'https://avatar.example.com/broken-image-link.png',\n    email: 'modus_user@trimble.com',\n    initials: 'MU',\n    username: 'Modus User',\n  };\n\n  function addEventHandlers() {\n    document.addEventListener('mainMenuClick', (e) => {\n      const panel = document.querySelector('modus-side-navigation');\n      panel.expanded = !panel.expanded;\n    });\n\n    Array.from(document.querySelectorAll('modus-side-navigation-item')).forEach((c) => {\n      c.addEventListener('sideNavItemClicked', function callbackfn(e) {\n        if (e.detail.selected) {\n          const panel = document.querySelector('#panelcontent');\n          document.querySelector('#sidenav-content-title')?.remove();\n          const el = document.createElement('h3');\n          el.id = 'sidenav-content-title';\n          el.innerHTML = document.querySelector('#' + e.detail.id)?.label || 'Home page';\n          panel.insertBefore(el, document.querySelector('#overview'));\n        }\n      });\n    });\n  }\n\n  addEventHandlers();\n</script>\n```\n\n### Modus Side Navigation with `data` prop\n\nFor side navigation with multiple levels, `data` prop can be used to pass the details of parents and its children.\n\n#### Modus Side Navigation Types\n\nModus side navigation can be configured to overlay the page's content or push the page's content. Specifying the selector for the page's content will enable the side navigation to set the necessary paddings and margins.\n\nUse the prop `mode` to choose whether to overlay or push and use the prop `target-content` to set the page's content selector. Listening to event `sideNavExpand` can also be used as an alternative to set the paddings and margins.\n\n#### Modus Side Navigation Blue Theme\n\nModus side navigation uses CSS variables for theming ex:`--modus-side-navigation-bg: #fff;`, it can be leveraged to apply a blue theme too as shown in the example below.\n\n<Story of={SideNavigation.SideNavigationWithData} />\n\n```html\n<div id=\"dataTemplate\">\n  <modus-switch id=\"switch-theme\" label=\"Enable blue theme\"></modus-switch>\n  <br />\n  <modus-switch id=\"switch-mode\" label=\"Enable Push Side Navigation\"></modus-switch>\n  <div\n    style=\"width: 100%;align-items: center;height: 56px;box-shadow: 0 0 2px var(--modus-secondary)!important; margin-top: 10px;\">\n    <modus-navbar id=\"navbar\" show-apps-menu show-help show-main-menu show-notifications> </modus-navbar>\n  </div>\n\n  <div\n    id=\"container\"\n    style=\"display:flex; min-height:500px; overflow-y: auto; position: relative;box-shadow: 0 0 2px var(--modus-secondary)!important;\">\n    <modus-side-navigation max-width=\"300px\" id=\"sideNav\" target-content=\"#dataTemplate #panelcontent\" mode=\"overlay\">\n    </modus-side-navigation>\n\n    <div id=\"panelcontent\" style=\"padding:10px; transition: all 0.25s linear 0s;\">\n      <div id=\"overview\">\n        <p>\n          The side navigation of an application provides context through accessible menu options and positions a consistent\n          component to connect to various pages in the application.\n        </p>\n        <p>\n          The side navigation is a collapsible side content of the site\u2019s pages. It is located alongside the page\u2019s primary\n          content. The component is designed to add side content to a fullscreen application. It is activated through the\n          \u201chamburger\u201d menu in the Navbar.\n        </p>\n      </div>\n    </div>\n  </div>\n</div>\n\n<script>\n  document.querySelector('#navbar').logoOptions = {\n    primary: {\n      url: 'https://modus.trimble.com/img/trimble-logo.svg',\n    },\n  };\n  document.querySelector('#navbar').profileMenuOptions = {\n    avatarUrl: 'https://avatar.example.com/broken-image-link.png',\n    email: 'modus_user@trimble.com',\n    initials: 'MU',\n    username: 'Modus User',\n  };\n\n  const homeIcon = 'home';\n  const usageIcon = 'flowchart';\n  const stylesIcon = 'bar_graph_line';\n  const accessibilityIcon = 'screen';\n\n  const selectionHandler = (e) => {\n    if (e.detail) {\n      const panel = document.querySelector('#panelcontent');\n      document.querySelector('#sidenav-content-title')?.remove();\n      const el = document.createElement('h3');\n      el.id = 'sidenav-content-title';\n      el.innerHTML = e.target?.label || 'Home page';\n      panel.insertBefore(el, document.querySelector('#overview'));\n    }\n  };\n\n  const blueTheme = `--modus-side-navigation-link-color:#ffffff;--modus-side-navigation-bg:#0e416c;--modus-side-navigation-item-color:#ffffff;--modus-side-navigation-item-active-bg:#217cbb;--modus-side-navigation-item-hover-bg:#0063a3;--modus-side-navigation-item-icon-color:#ffffff;--modus-side-navigation-item-chevron-color:#ffffff;--modus-side-navigation-item-icon-filter:invert(100%) sepia(0%) saturate(24%) hue-rotate(114deg) brightness(108%) contrast(108%);`;\n\n  function initialize() {\n    const sidenav = document.querySelector('modus-side-navigation');\n    sidenav.data = [\n      {\n        id: 'home-menu',\n        menuIcon: homeIcon,\n        label: 'Home page 1',\n        children: [\n          {\n            id: 'home-menu-2',\n            menuIcon: homeIcon,\n            label: 'Home page 2',\n            onSideNavItemClicked: selectionHandler,\n          },\n          {\n            id: 'usage-menu-2',\n            children: [\n              {\n                id: 'home-menu-3',\n                menuIcon: homeIcon,\n                label: 'Home page 3',\n                onSideNavItemClicked: selectionHandler,\n              },\n            ],\n            menuIcon: usageIcon,\n            label: 'Usage page 2',\n          },\n        ],\n      },\n      {\n        id: 'usage-menu',\n        menuIcon: usageIcon,\n        label: 'Usage page 1',\n        onSideNavItemClicked: selectionHandler,\n      },\n      {\n        id: 'styles-menu',\n        menuIcon: stylesIcon,\n        label: 'Styles page 1',\n        onSideNavItemClicked: selectionHandler,\n      },\n      {\n        id: 'accessibility-menu',\n        menuIcon: accessibilityIcon,\n        label: 'Accessibility page 1',\n        onSideNavItemClicked: selectionHandler,\n      },\n    ];\n  }\n\n  function addEventHandlers() {\n    document.addEventListener('mainMenuClick', (e) => {\n      executeListener(e, () => {\n        const panel = document.querySelector('modus-side-navigation');\n        panel.expanded = !panel.expanded;\n      });\n    });\n\n    document.querySelector('#switch-theme').addEventListener('switchClick', (e) => {\n      const sidenav = document.querySelector('modus-side-navigation');\n      if (e.detail) {\n        sidenav.style = blueTheme;\n      } else sidenav.style = '';\n    });\n\n    document.querySelector('#switch-mode').addEventListener('switchClick', (e) => {\n      const sidenav = document.querySelector('modus-side-navigation');\n      sidenav.mode = sidenav.mode === 'push' ? 'overlay' : 'push';\n    });\n  }\n\n  initialize();\n  addEventHandlers();\n</script>\n```\n\n### Modus Side Navigation with `Header` prop\n\nThe `isHeader` property enables a dropdown menu in side navigation items when set to true and configured with menu items. This allows dynamic updates to the menu, navigation, or other interactive features.\n\n```html\n<div id=\"dataTemplate\">\n  <modus-switch id=\"switch-theme\" label=\"Enable blue theme\"></modus-switch>\n  <br />\n  <modus-switch id=\"switch-mode\" label=\"Enable Push Side Navigation\"></modus-switch>\n  <div\n    style=\"width: 100%;align-items: center;height: 56px;box-shadow: 0 0 2px var(--modus-secondary)!important; margin-top: 10px;\">\n    <modus-navbar id=\"navbar\" show-apps-menu show-help show-main-menu show-notifications> </modus-navbar>\n  </div>\n\n  <div\n    id=\"container\"\n    style=\"display:flex; min-height:500px; overflow-y: auto; position: relative;box-shadow: 0 0 2px var(--modus-secondary)!important;\">\n    <modus-side-navigation max-width=\"300px\" id=\"sideNav\" target-content=\"#dataTemplate #panelcontent\" mode=\"overlay\">\n    </modus-side-navigation>\n\n    <div id=\"panelcontent\" style=\"padding: 10px; transition: all 0.25s linear 0s\">\n      <div id=\"overview\">\n        <p>\n          The side navigation of an application provides context through accessible menu options and positions a consistent\n          component to connect to various pages in the application.\n        </p>\n        <p>\n          The side navigation is a collapsible side content of the site\u2019s pages. It is located alongside the page\u2019s primary\n          content. The component is designed to add side content to a fullscreen application. It is activated through the\n          \u201chamburger\u201d menu in the Navbar.\n        </p>\n      </div>\n    </div>\n  </div>\n</div>\n\n<script>\n  document.querySelector('#navbar').logoOptions = {\n    primary: {\n      url: 'https://modus.trimble.com/img/trimble-logo.svg',\n    },\n  };\n  document.querySelector('#navbar').profileMenuOptions = {\n    avatarUrl: 'https://avatar.example.com/broken-image-link.png',\n    email: 'modus_user@trimble.com',\n    initials: 'MU',\n    username: 'Modus User',\n  };\n\n  const homeIcon = 'home';\n  const usageIcon = 'flowchart';\n  const stylesIcon = 'bar_graph_line';\n  const accessibilityIcon = 'screen';\n  const sidenav = document.querySelector('modus-side-navigation');\n\n  const selectionHandler = (e) => {\n    if (e.detail) {\n      if (e.detail.selected) {\n        const panel = document.querySelector('#panelcontent');\n        document.querySelector('#sidenav-content-title')?.remove();\n        const el = document.createElement('h3');\n        el.id = 'sidenav-content-title';\n        const selectedItem = e.target.data?.find((item) => item.id === e.detail.id);\n        if (selectedItem) {\n          el.innerHTML = selectedItem.label || 'Home Page';\n        }\n        panel.insertBefore(el, document.querySelector('#overview'));\n      }\n    }\n  };\n\n  function getLabel(newItems) {\n    sidenav.data = [\n      {\n        id: 'Home',\n        menuIcon: homeIcon,\n        label: 'Home',\n        isHeader: {\n          enabled: true,\n          items: [\n            {\n              id: 'Home',\n              label: 'Home',\n              icon: 'home',\n            },\n            {\n              id: 'Charts',\n              label: 'Charts',\n              icon: 'bar_graph',\n            },\n            {\n              id: 'Maps',\n              label: 'Maps',\n              icon: 'location_arrow',\n            },\n          ],\n        },\n        onSideNavItemHeaderClicked: selectionHeaderHandler,\n      },\n      {\n        id: 'usage-menu',\n        menuIcon: newItems[0].icon,\n        label: newItems[0].label,\n        onSideNavItemClicked: selectionHandler,\n      },\n      {\n        id: 'styles-menu',\n        menuIcon: newItems[1].icon,\n        label: newItems[1].label,\n        onSideNavItemClicked: selectionHandler,\n      },\n    ];\n  }\n\n  const selectionHeaderHandler = (e) => {\n    const headerLabel = e.detail.id;\n    let newItems = [];\n\n    if (headerLabel === 'Charts') {\n      newItems = [\n        { label: 'Bar graph square', icon: 'bar_graph_square' },\n        { label: 'Gantt chart', icon: 'gantt_chart' },\n      ];\n      getLabel(newItems);\n\n      const simulatedEvent = {\n        detail: { selected: true, id: 'Charts' },\n        target: { data: [{ id: 'Charts', label: 'Charts' }] },\n      };\n      selectionHandler(simulatedEvent);\n    } else if (headerLabel === 'Maps') {\n      newItems = [\n        { label: 'World', icon: 'web' },\n        { label: 'Region', icon: 'map_poi' },\n      ];\n      getLabel(newItems);\n\n      const simulatedEvent = {\n        detail: { selected: true, id: 'Maps' },\n        target: { data: [{ id: 'Maps', label: 'Maps' }] },\n      };\n      selectionHandler(simulatedEvent);\n    } else {\n      initialize();\n\n      const simulatedEvent = {\n        detail: { selected: true, id: 'Home' },\n        target: { data: [{ id: 'Home', label: 'Home' }] },\n      };\n      selectionHandler(simulatedEvent);\n    }\n  };\n\n  const blueTheme = `--modus-side-navigation-link-color:#ffffff;--modus-side-navigation-bg:#0e416c;--modus-side-navigation-item-color:#ffffff;--modus-side-navigation-item-active-bg:#217cbb;--modus-side-navigation-item-hover-bg:#0063a3;--modus-side-navigation-item-icon-color:#ffffff;--modus-side-navigation-item-chevron-color:#ffffff;--modus-side-navigation-item-icon-filter:invert(100%) sepia(0%) saturate(24%) hue-rotate(114deg) brightness(108%) contrast(108%);`;\n\n  function initialize() {\n    sidenav.data = [\n      {\n        id: 'Home',\n        menuIcon: homeIcon,\n        label: 'Home',\n        isHeader: {\n          enabled: true,\n          items: [\n            {\n              id: 'Home',\n              label: 'Home',\n              icon: 'home',\n            },\n            {\n              id: 'Charts',\n              label: 'Charts',\n              icon: 'bar_graph',\n            },\n            {\n              id: 'Maps',\n              label: 'Maps',\n              icon: 'location_arrow',\n            },\n          ],\n        },\n        onSideNavItemHeaderClicked: selectionHeaderHandler,\n      },\n      {\n        id: 'usage-menu',\n        menuIcon: usageIcon,\n        label: 'Usage page',\n        onSideNavItemClicked: selectionHandler,\n      },\n      {\n        id: 'styles-menu',\n        menuIcon: stylesIcon,\n        label: 'Styles page',\n        onSideNavItemClicked: selectionHandler,\n      },\n    ];\n  }\n\n  function addEventHandlers() {\n    document.addEventListener('mainMenuClick', (e) => {\n      const panel = document.querySelector('modus-side-navigation');\n      panel.expanded = !panel.expanded;\n    });\n\n    document.querySelector('#switch-theme').addEventListener('switchClick', (e) => {\n      const sidenav = document.querySelector('modus-side-navigation');\n      if (e.detail) {\n        sidenav.style = blueTheme;\n      } else sidenav.style = '';\n    });\n\n    document.querySelector('#switch-mode').addEventListener('switchClick', (e) => {\n      const sidenav = document.querySelector('modus-side-navigation');\n      sidenav.mode = sidenav.mode === 'push' ? 'overlay' : 'push';\n    });\n  }\n\n  initialize();\n  addEventHandlers();\n  sidenav.addEventListener('sideNavItemHeaderClicked', selectionHeaderHandler);\n  sidenav.addEventListener('sideNavItemClicked', selectionHandler);\n</script>\n```\n\n### Properties\n\n#### Modus Side Navigation\n\n| Property                 | Attribute                   | Description                                                                                                                               | Type                            | Default     |\n| ------------------------ | --------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------- | ----------- |\n| `collapseOnClickOutside` | `collapse-on-click-outside` | (optional) To choose whether to collapse the panel when clicked outside.                                                                  | `boolean`                       | `true`      |\n| `data`                   | --                          | (optional) Data property to create the items.                                                                                             | `ModusSideNavigationItemInfo[]` | `undefined` |\n| `expanded`               | `expanded`                  | (optional) The expanded state of side navigation panel and items.                                                                         | `boolean`                       | `false`     |\n| `maxWidth`               | `max-width`                 | (optional) Maximum width of the side navigation panel in an expanded state.                                                               | `string`                        | `'256px'`   |\n| `mode`                   | `mode`                      | Mode to make side navigation either overlay or push the content for the selector specified in `targetContent`                             | `\"overlay\" \\| \"push\"`           | `'overlay'` |\n| `targetContent`          | `target-content`            | (optional) Specify the selector for the page's content for which paddings and margins will be set by side navigation based on the `mode`. | `string`                        | `undefined` |\n\n## Events\n\n| Event           | Description                                                     | Type                   |\n| --------------- | --------------------------------------------------------------- | ---------------------- |\n| `sideNavExpand` | An event that fires on side navigation panel collapse & expand. | `CustomEvent<boolean>` |\n\n#### Modus Side Navigation Item\n\n| Property           | Attribute           | Description                                                                | Type                            | Default                         |\n| ------------------ | ------------------- | -------------------------------------------------------------------------- | ------------------------------- | ------------------------------- |\n| `id`               | `id`                | Unique identifier for a side navigation panel item.                        | `string`                        |                                 |\n| `disableSelection` | `disable-selection` | (optional) Disables item selection.                                        | `boolean`                       | `false`                         |\n| `disabled`         | `disabled`          | (optional) The disabled state of side navigation panel item.               | `boolean`                       | `false`                         |\n| `expanded`         | `expanded`          | (optional) The expanded state of side navigation panel item.               | `boolean`                       | `false`                         |\n| `label`            | `label`             | (optional) Label for the item and the tooltip message.                     | `string`                        | `undefined`                     |\n| `menuIcon`         | `menu-icon`         | (optional) A built-in menu icon string or a image url.                     | `string`                        | `undefined`                     |\n| `selected`         | `selected`          | (optional) The selected state of side navigation panel item.               | `boolean`                       | `false`                         |\n| `showExpandIcon`   | `show-expand-icon`  | (optional) Shows the expand icon.                                          | `boolean`                       | `false`                         |\n| `isHeader`         | `isHeader`          | (optional) To enable the header dropdown feature of side navigation panel. | `ModusHeaderNavigationItemInfo` | `{ enabled: false, items: [] }` |\n\n## Events\n\n| Event                      | Description                                                           | Type                                              |\n| -------------------------- | --------------------------------------------------------------------- | ------------------------------------------------- |\n| `sideNavItemClicked`       | An event that fires when mouse click or `Enter` key press on an item. | `CustomEvent<{ id: string; selected: boolean; }>` |\n| `sideNavItemFocus`         | An event that fires when an item is in focus.                         | `CustomEvent<{ id: string; }>`                    |\n| `sideNavItemHeaderClicked` | An event that fires when an item in header dropdown item is selected. | `CustomEvent<{ id: string; selected: boolean }>`  |\n\n## Types\n\n```ts\ntype ModusHeaderNavigationItemInfo{\n  isEnabled : boolean,\n  items: string[];\n};\n```\n",
  "storybook_content": "\n\n--- modus-side-navigation.stories.tsx ---\n\n// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-side-navigation-storybook-docs.mdx';\nimport { html } from 'lit-html';\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { useEffect } from '@storybook/preview-api';\n\nexport default {\n  title: 'Components/Side Navigation',\n  argTypes: {\n    collapseOnClickOutside: {\n      name: 'collapse-on-click-outside',\n      description: 'To choose whether to collapse the panel when clicked outside',\n      table: {\n        type: { summary: 'boolean' },\n      },\n    },\n    data: {\n      description: 'Data property to create the side navigation items',\n      table: {\n        type: { summary: 'ModusSideNavigationItemInfo' },\n      },\n    },\n    maxWidth: {\n      name: 'max-width',\n      description: 'Maximum width of the side navigation panel in an expanded state',\n      table: {\n        defaultValue: { summary: '256px' },\n        type: { summary: 'string' },\n      },\n    },\n    mode: {\n      options: ['overlay', 'push'],\n      type: 'select',\n      description:\n        'Mode to make side navigation either overlay or push the content for the selector specified in `targetContent`',\n      table: {\n        defaultValue: { summary: `'overlay'` },\n        type: {\n          summary: `'overlay' | 'push'`,\n        },\n      },\n    },\n    expanded: {\n      description: 'The expanded state of side navigation panel and items',\n      table: {\n        type: { summary: 'boolean' },\n      },\n    },\n    isHeader: {\n      name: 'is-header',\n      description: 'To enable header dropdown feature',\n      table: {\n        type: { summary: 'ModusHeaderNavigationItemInfo' },\n      },\n    },\n    targetContent: {\n      name: 'target-content',\n      description:\n        \"Specify the selector for the page's content for which paddings and margins will be set by side navigation based on the `mode`\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n  },\n  parameters: {\n    docs: {\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n    },\n    actions: {\n      handles: ['sideNavExpand', 'sideNavItemClicked', 'mainMenuClick', 'sideNavItemFocus', 'sideNavItemHeaderClicked'],\n    },\n    controls: { expanded: true, sort: 'requiredFirst' },\n    viewMode: 'docs',\n    design: {\n      type: 'figma',\n      url: 'https://www.figma.com/design/wyfVJUHWRMkeCfdB38HFEE/Modus---Web?node-id=6572-22376&m=dev',\n    },\n  },\n  decorators: [\n    withActions,\n    (Story) => {\n      useEffect(() => {\n        const handleHelpOpen = () => {\n          const panel = document.querySelector('modus-side-navigation');\n          if (panel) {\n            const isExpanded = panel.getAttribute('expanded') === 'true';\n            panel.setAttribute('expanded', (!isExpanded).toString());\n          }\n        };\n        const blueTheme = `--modus-side-navigation-link-color:#ffffff;--modus-side-navigation-bg:#0e416c;--modus-side-navigation-item-color:#ffffff;--modus-side-navigation-item-active-bg:#217cbb;--modus-side-navigation-item-hover-bg:#0063a3;--modus-side-navigation-item-icon-color:#ffffff;--modus-side-navigation-item-chevron-color:#ffffff;--modus-side-navigation-item-icon-filter:invert(100%) sepia(0%) saturate(24%) hue-rotate(114deg) brightness(108%) contrast(108%);`;\n        const sideNav = document.querySelector('modus-side-navigation');\n        const switchTheme = () => {\n          const switchTheme = document.querySelector('#switch-theme');\n          if (switchTheme.checked) {\n            sideNav.style = blueTheme;\n          } else {\n            sideNav.style = '';\n          }\n        };\n        const switchMode = () => {\n          const switchMode = document.querySelector('#switch-mode');\n\n          if (switchMode.checked) {\n            sideNav.mode = sideNav.mode === 'push' ? 'overlay' : 'push';\n          }\n        };\n        document.addEventListener('switchClick', switchMode);\n        document.addEventListener('switchClick', switchTheme);\n        document.addEventListener('mainMenuClick', handleHelpOpen);\n\n        Array.from(document.querySelectorAll('modus-side-navigation-item')).forEach((item) => {\n          item.addEventListener('sideNavItemClicked', (e) => {\n            executeListener(e, () => {\n              const panel = document.querySelector('#panelcontent');\n              document.querySelector('#sidenav-content-title')?.remove();\n              const el = document.createElement('h3');\n              el.id = 'sidenav-content-title';\n              el.innerHTML = document.querySelector(`#${e.detail.id}`)?.label || 'Home page';\n              panel.insertBefore(el, document.querySelector('#overview'));\n            });\n          });\n        });\n\n        const initialize = () => {\n          const sidenav = document.querySelector('#dataTemplate #sideNav');\n          sidenav.data = [\n            {\n              id: 'home-menu',\n              menuIcon: 'home',\n              label: 'Home page 1',\n              children: [\n                {\n                  id: 'home-menu-2',\n                  menuIcon: 'home',\n                  label: 'Home page 2',\n                  onSideNavItemClicked: (e) => {\n                    executeListener(e, () => {\n                      if (e.detail) {\n                        const panel = document.querySelector('#panelcontent');\n                        document.querySelector('#sidenav-content-title')?.remove();\n                        const el = document.createElement('h3');\n                        el.id = 'sidenav-content-title';\n                        el.innerHTML = e.target?.label || 'Home page';\n                        panel.insertBefore(el, document.querySelector('#overview'));\n                      }\n                    });\n                  },\n                },\n                {\n                  id: 'usage-menu-2',\n                  children: [\n                    {\n                      id: 'home-menu-3',\n                      menuIcon: 'home',\n                      label: 'Home page 3',\n                      onSideNavItemClicked: (e) => {\n                        executeListener(e, () => {\n                          if (e.detail) {\n                            const panel = document.querySelector('#panelcontent');\n                            document.querySelector('#sidenav-content-title')?.remove();\n                            const el = document.createElement('h3');\n                            el.id = 'sidenav-content-title';\n                            el.innerHTML = e.target?.label || 'Home page';\n                            panel.insertBefore(el, document.querySelector('#overview'));\n                          }\n                        });\n                      },\n                    },\n                  ],\n                  menuIcon: 'flowchart',\n                  label: 'Usage page 2',\n                },\n              ],\n            },\n            {\n              id: 'usage-menu',\n              menuIcon: 'flowchart',\n              label: 'Usage page 1',\n              onSideNavItemClicked: (e) => {\n                executeListener(e, () => {\n                  if (e.detail) {\n                    const panel = document.querySelector('#panelcontent');\n                    document.querySelector('#sidenav-content-title')?.remove();\n                    const el = document.createElement('h3');\n                    el.id = 'sidenav-content-title';\n                    el.innerHTML = e.target?.label || 'Home page';\n                    panel.insertBefore(el, document.querySelector('#overview'));\n                  }\n                });\n              },\n            },\n            {\n              id: 'styles-menu',\n              menuIcon: 'bar_graph_line',\n              label: 'Styles page 1',\n              onSideNavItemClicked: (e) => {\n                executeListener(e, () => {\n                  if (e.detail) {\n                    const panel = document.querySelector('#panelcontent');\n                    document.querySelector('#sidenav-content-title')?.remove();\n                    const el = document.createElement('h3');\n                    el.id = 'sidenav-content-title';\n                    el.innerHTML = e.target?.label || 'Home page';\n                    panel.insertBefore(el, document.querySelector('#overview'));\n                  }\n                });\n              },\n            },\n            {\n              id: 'accessibility-menu',\n              menuIcon: 'screen',\n              label: 'Accessibility page 1',\n              onSideNavItemClicked: (e) => {\n                executeListener(e, () => {\n                  if (e.detail) {\n                    const panel = document.querySelector('#panelcontent');\n                    document.querySelector('#sidenav-content-title')?.remove();\n                    const el = document.createElement('h3');\n                    el.id = 'sidenav-content-title';\n                    el.innerHTML = e.target?.label || 'Home page';\n                    panel.insertBefore(el, document.querySelector('#overview'));\n                  }\n                });\n              },\n            },\n          ];\n        };\n        const sidenav = document.querySelector('#dataTemplate #sideNav');\n        if (sidenav) {\n          initialize();\n        }\n        return () => {\n          document.removeEventListener('switchClick', switchMode);\n          document.removeEventListener('switchClick', switchTheme);\n          document.removeEventListener('mainMenuClick', handleHelpOpen);\n          document.removeEventListener('mainMenuClick', handleHelpOpen);\n          Array.from(document.querySelectorAll('modus-side-navigation-item')).forEach((item) => {\n            item.removeEventListener('sideNavItemClicked', handleHelpOpen);\n          });\n        };\n      }, []);\n      return Story();\n    },\n  ],\n};\n\nconst DefaultTemplate = ({ collapseOnClickOutside, maxWidth, mode, expanded, targetContent }) => html`\n  <div id=\"defaultTemplate\">\n    <div\n      style=\"width: 100%; align-items: center; height: 56px; box-shadow: 0 0 2px var(--modus-secondary)!important; margin-top: 50px;\">\n      <modus-navbar id=\"navbar\" show-apps-menu show-help show-main-menu show-notifications> </modus-navbar>\n    </div>\n\n    <div\n      id=\"container\"\n      style=\"display: flex; min-height: 500px; overflow-y: auto; position: relative; box-shadow: 0 0 2px var(--modus-secondary)!important;\">\n      <modus-side-navigation\n        max-width=${maxWidth}\n        id=\"sideNav\"\n        collapse-on-click-outside=${collapseOnClickOutside}\n        mode=${mode}\n        expanded=${expanded}\n        target-content=${targetContent}>\n        <modus-side-navigation-item id=\"home-menu\" label=\"Home page\">\n          <modus-icon name=\"home\" size=\"24\" slot=\"menu-icon\"></modus-icon>\n        </modus-side-navigation-item>\n        <modus-side-navigation-item id=\"usage-menu\" label=\"Usage\">\n          <modus-icon name=\"flowchart\" size=\"24\" slot=\"menu-icon\"></modus-icon>\n        </modus-side-navigation-item>\n        <modus-side-navigation-item id=\"styles-menu\" label=\"Styles\">\n          <modus-icon name=\"bar_graph_line\" size=\"24\" slot=\"menu-icon\"></modus-icon>\n        </modus-side-navigation-item>\n        <modus-side-navigation-item id=\"accessibility-menu\" label=\"Accessibility\">\n          <modus-icon name=\"screen\" size=\"24\" slot=\"menu-icon\"></modus-icon>\n        </modus-side-navigation-item>\n      </modus-side-navigation>\n\n      <div id=\"panelcontent\" style=\"padding: 10px;\">\n        <div id=\"overview\">\n          <p>\n            The side navigation of an application provides context through accessible menu options and positions a consistent\n            component to connect to various pages in the application.\n          </p>\n          <p>\n            The side navigation is a collapsible side content of the site\u2019s pages. It is located alongside the page\u2019s primary\n            content. The component is designed to add side content to a fullscreen application. It is activated through the\n            \u201chamburger\u201d menu in the Navbar.\n          </p>\n        </div>\n      </div>\n    </div>\n  </div>\n`;\nexport const Default = DefaultTemplate.bind({});\nDefault.args = {\n  collapseOnClickOutside: true,\n  maxWidth: '300px',\n  mode: 'overlay',\n  expanded: false,\n  targetContent: '#defaultTemplate #panelcontent',\n};\n\nconst SideNavigationWithDataTemplate = ({ collapseOnClickOutside, maxWidth, mode, expanded, targetContent }) => html`\n  <div id=\"dataTemplate\">\n    <modus-switch id=\"switch-theme\" label=\"Enable blue theme\"></modus-switch>\n    <br />\n    <modus-switch id=\"switch-mode\" label=\"Enable Push Side Navigation\"></modus-switch>\n    <div\n      style=\"width: 100%;align-items: center;height: 56px;box-shadow: 0 0 2px var(--modus-secondary)!important; margin-top: 10px;\">\n      <modus-navbar id=\"navbar\" show-apps-menu show-help show-main-menu show-notifications> </modus-navbar>\n    </div>\n\n    <div\n      id=\"container\"\n      style=\"display:flex; min-height:500px; overflow-y: auto; position: relative;box-shadow: 0 0 2px var(--modus-secondary)!important;\">\n      <modus-side-navigation\n        max-width=${maxWidth}\n        id=\"sideNav\"\n        collapse-on-click-outside=${collapseOnClickOutside}\n        mode=${mode}\n        expanded=${expanded}\n        target-content=${targetContent}>\n      </modus-side-navigation>\n\n      <div id=\"panelcontent\" style=\"padding:10px; transition: all 0.25s linear 0s;\">\n        <div id=\"overview\">\n          <p>\n            The side navigation of an application provides context through accessible menu options and positions a consistent\n            component to connect to various pages in the application.\n          </p>\n          <p>\n            The side navigation is a collapsible side content of the site\u2019s pages. It is located alongside the page\u2019s primary\n            content. The component is designed to add side content to a fullscreen application. It is activated through the\n            \u201chamburger\u201d menu in the Navbar.\n          </p>\n        </div>\n      </div>\n    </div>\n  </div>\n`;\n\nexport const SideNavigationWithData = (args) => {\n  const { collapseOnClickOutside, maxWidth, mode, expanded, targetContent } = args;\n\n  // Decorator pattern applied here to dynamically configure the component properties\n  return SideNavigationWithDataTemplate({\n    collapseOnClickOutside,\n    maxWidth: maxWidth || '300px', // Defaulting to '300px' if not provided\n    mode: mode || 'overlay', // Default to 'overlay' mode if not provided\n    expanded: expanded !== undefined ? expanded : true, // Default to expanded if not provided\n    targetContent: targetContent || '#dataTemplate #panelcontent', // Default target content selector\n  });\n};\n\nSideNavigationWithData.args = {\n  collapseOnClickOutside: true,\n  maxWidth: '300px',\n  mode: 'overlay',\n  expanded: true,\n  targetContent: '#dataTemplate #panelcontent',\n};\n\nexport const SideNavigationWithHeader = (args) => {\n  const { isHeader, maxWidth, mode, expanded, targetContent, collapseOnClickOutside } = args;\n\n  return html`\n    <div id=\"dataTemplateWithHeader\">\n      <modus-switch id=\"switch-theme\" label=\"Enable blue theme\"></modus-switch>\n      <br />\n      <modus-switch id=\"switch-mode\" label=\"Enable Push Side Navigation\"></modus-switch>\n      <div\n        style=\"width: 100%;align-items: center;height: 56px;box-shadow: 0 0 2px var(--modus-secondary)!important; margin-top: 10px;\">\n        <modus-navbar id=\"navbarWithHeader\" show-apps-menu show-help show-main-menu show-notifications> </modus-navbar>\n      </div>\n\n      <div\n        id=\"container\"\n        style=\"display:flex; min-height:500px; overflow-y: auto; position: relative;box-shadow: 0 0 2px var(--modus-secondary)!important;\">\n        <modus-side-navigation\n          max-width=${maxWidth}\n          id=\"sideNavWithHeader\"\n          target-content=${targetContent}\n          collapse-on-click-outside=${collapseOnClickOutside}\n          mode=\"overlay\"\n          mode=${mode}\n          expanded=${expanded}\n          isHeader=${JSON.stringify(isHeader)}>\n        </modus-side-navigation>\n        <div id=\"panelcontent\" style=\"padding:10px; transition: all 0.25s linear 0s\">\n          <div id=\"overview\">\n            <p>\n              The side navigation of an application provides context through accessible menu options and positions a\n              consistent component to connect to various pages in the application.\n            </p>\n            <p>\n              The side navigation is a collapsible side content of the site\u2019s pages. It is located alongside the page\u2019s\n              primary content. The component is designed to add side content to a fullscreen application. It is activated\n              through the \u201chamburger\u201d menu in the Navbar.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    ${sideNavWithHeaderScript()}\n  `;\n};\n\nSideNavigationWithHeader.args = {\n  collapseOnClickOutside: true,\n  maxWidth: '300px',\n  mode: 'overlay',\n  expanded: true,\n  targetContent: '#dataTemplateWithHeader #panelcontent',\n};\n\nconst sideNavWithHeaderScript = () => {\n  // Check if the script is already added to prevent duplicate execution\n  if (document.querySelector('#sideNavWithHeaderScript')) return;\n\n  const script = document.createElement('script');\n  script.id = 'sideNavWithHeaderScript'; // Add an ID for tracking\n  script.innerHTML = `\n  (function () {\n    const homeIcon = 'home';\n    const usageIcon = 'flowchart';\n    const stylesIcon = 'bar_graph_line';\n    const sideNavHeader = document.querySelector('modus-side-navigation');\n\n    const selectionHandler = (e) => {\n      if (e.detail && e.detail.selected) {\n        const panel = document.querySelector('#panelcontent');\n        document.querySelector('#sidenav-content-title')?.remove();\n        const el = document.createElement('h3');\n        el.id = 'sidenav-content-title';\n        const selectedItem = e.target.data?.find((item) => item.id === e.detail.id);\n        el.innerHTML = selectedItem?.label || 'Home Page';\n        panel.insertBefore(el, document.querySelector('#overview'));\n      }\n    };\n\n    function getLabel(newItems) {\n      sideNavHeader.data = [\n        {\n          id: 'Home',\n          menuIcon: homeIcon,\n          label: 'Home',\n          isHeader: {\n            enabled: true,\n            items: [\n              {\n                id: 'Home',\n                label: 'Home',\n                icon: 'home',\n              },\n              {\n                id: 'Charts',\n                label: 'Charts',\n                icon: 'bar_graph',\n              },\n              {\n                id: 'Maps',\n                label: 'Maps',\n                icon: 'location_arrow',\n              },\n            ],\n          },\n          onSideNavItemHeaderClicked: selectionHeaderHandler,\n        },\n        {\n          id: 'usage-menu',\n          menuIcon: newItems[0].icon,\n          label: newItems[0].label,\n          onSideNavItemClicked: selectionHandler,\n        },\n        {\n          id: 'styles-menu',\n          menuIcon: newItems[1].icon,\n          label: newItems[1].label,\n          onSideNavItemClicked: selectionHandler,\n        },\n      ];\n    }\n\n    const selectionHeaderHandler = (e) => {\n      const headerLabel = e.detail.id;\n      let newItems = [];\n\n      if (headerLabel === 'Charts') {\n        newItems = [\n          { label: 'Bar graph square', icon: 'bar_graph_square' },\n          { label: 'Gantt chart', icon: 'gantt_chart' },\n        ];\n        getLabel(newItems);\n\n        const simulatedEvent = {\n          detail: { selected: true, id: 'Charts' },\n          target: { data: [{ id: 'Charts', label: 'Charts' }] },\n        };\n        selectionHandler(simulatedEvent);\n      } else if (headerLabel === 'Maps') {\n        newItems = [\n          { label: 'World', icon: 'web' },\n          { label: 'Region', icon: 'map_poi' },\n        ];\n        getLabel(newItems);\n\n        const simulatedEvent = {\n          detail: { selected: true, id: 'Maps' },\n          target: { data: [{ id: 'Maps', label: 'Maps' }] },\n        };\n        selectionHandler(simulatedEvent);\n      } else {\n        initialize();\n\n        const simulatedEvent = {\n          detail: { selected: true, id: 'Home' },\n          target: { data: [{ id: 'Home', label: 'Home' }] },\n        };\n        selectionHandler(simulatedEvent);\n      }\n    };\n\n    function initialize() {\n      sideNavHeader.data = [\n        {\n          id: 'Home',\n          menuIcon: homeIcon,\n          label: 'Home',\n          isHeader: {\n            enabled: true,\n            items: [\n              {\n                id: 'Home',\n                label: 'Home',\n                icon: 'home',\n              },\n              {\n                id: 'Charts',\n                label: 'Charts',\n                icon: 'bar_graph',\n              },\n              {\n                id: 'Maps',\n                label: 'Maps',\n                icon: 'location_arrow',\n              },\n            ],\n          },\n          onSideNavItemHeaderClicked: selectionHeaderHandler,\n        },\n        {\n          id: 'usage-menu',\n          menuIcon: usageIcon,\n          label: 'Usage page',\n          onSideNavItemClicked: selectionHandler,\n        },\n        {\n          id: 'styles-menu',\n          menuIcon: stylesIcon,\n          label: 'Styles page',\n          onSideNavItemClicked: selectionHandler,\n        },\n      ];\n    }\n    initialize();\n    sideNavHeader.addEventListener('sideNavItemHeaderClicked', selectionHeaderHandler);\n    sideNavHeader.addEventListener('sideNavItemClicked', selectionHandler);\n  })();\n\n  `;\n  return script;\n};\n",
  "storybook": {
    "examples": [
      "<modus-navbar id=\"navbar\" show-apps-menu show-help show-main-menu show-notifications> </modus-navbar>",
      "<modus-icon name=\"home\" size=\"24\" slot=\"menu-icon\"></modus-icon>",
      "<modus-icon name=\"flowchart\" size=\"24\" slot=\"menu-icon\"></modus-icon>",
      "<modus-icon name=\"bar_graph_line\" size=\"24\" slot=\"menu-icon\"></modus-icon>",
      "<modus-icon name=\"screen\" size=\"24\" slot=\"menu-icon\"></modus-icon>"
    ],
    "variants": [],
    "prop_usage": {
      "id": [
        "defaultTemplate",
        "navbar",
        "container",
        "sideNav",
        "home-menu",
        "usage-menu",
        "styles-menu",
        "accessibility-menu",
        "panelcontent",
        "overview",
        "dataTemplate",
        "switch-theme",
        "switch-mode",
        "dataTemplateWithHeader",
        "navbarWithHeader",
        "sideNavWithHeader"
      ],
      "style": [
        "width: 100%; align-items: center; height: 56px; box-shadow: 0 0 2px var(--modus-secondary)!important; margin-top: 50px;",
        "display: flex; min-height: 500px; overflow-y: auto; position: relative; box-shadow: 0 0 2px var(--modus-secondary)!important;",
        "padding: 10px;",
        "width: 100%;align-items: center;height: 56px;box-shadow: 0 0 2px var(--modus-secondary)!important; margin-top: 10px;",
        "display:flex; min-height:500px; overflow-y: auto; position: relative;box-shadow: 0 0 2px var(--modus-secondary)!important;",
        "padding:10px; transition: all 0.25s linear 0s;",
        "padding:10px; transition: all 0.25s linear 0s"
      ],
      "label": [
        "Home page",
        "Usage",
        "Styles",
        "Accessibility",
        "Enable blue theme",
        "Enable Push Side Navigation"
      ],
      "name": [
        "home",
        "flowchart",
        "bar_graph_line",
        "screen"
      ],
      "size": [
        "24"
      ],
      "slot": [
        "menu-icon"
      ],
      "mode": [
        "overlay"
      ]
    }
  },
  "tag_name": "modus-side-navigation"
}
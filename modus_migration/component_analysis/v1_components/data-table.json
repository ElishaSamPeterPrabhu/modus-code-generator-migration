{
  "component_name": "modus-data-table",
  "version": "v1",
  "props": [
    {
      "name": "columns",
      "description": "/** Options for data table display. */",
      "type": ": string[] | TColumn[]"
    },
    {
      "name": "data",
      "description": "/** Options for data table display. */",
      "type": ": TCell[][] | TRow[]"
    },
    {
      "name": "displayOptions",
      "description": "/** Options for data table display. */",
      "type": ": ModusDataTableDisplayOptions"
    },
    {
      "name": "rowActions",
      "description": "/** Options for data table display. */",
      "type": ": ModusDataTableRowAction[]"
    },
    {
      "name": "selectionOptions",
      "description": "/** Options for data table display. */",
      "type": ": ModusDataTableSelectionOptions"
    },
    {
      "name": "sortOptions",
      "description": "/** Options for data table display. */",
      "type": ": ModusDataTableSortOptions"
    }
  ],
  "events": [],
  "slots": [],
  "default_values": {
    "columns": "ModusDataTableUtilities.convertToTColumns(this.columns)",
    "data": "ModusDataTableUtilities.convertToTRows(this.data, this.columns)",
    "displayOptions": "{\n    animateRowActionsDropdown: false,\n    borderless: true,\n    cellBorderless: true,\n    rowStripe: false,\n    size: 'large',\n  }",
    "rowActions": "[]",
    "selectionOptions": "{\n    canSelect: false,\n    checkboxSelection: false,\n  }",
    "sortOptions": "{\n    canSort: false,\n    serverSide: false,\n  }"
  },
  "documentation": "\n\n--- modus-data-table-storybook-docs.mdx ---\n\nimport { Story } from '@storybook/blocks';\nimport * as DataTable from './modus-data-table.stories.tsx';\n\n# Data Table\n\n<modus-alert type=\"warning\" message=\"This component will be deprecated soon and replaced by a new Table component!\"> Check our open <a href=\"https://github.com/trimble-oss/modus-web-components/issues?q=is%3Aopen+is%3Aissue+label%3Atable+\" target=\"_blank\" rel=\"noopener\">GitHub issues</a>.</modus-alert>\n\n---\n\n[Modus Data Table](https://modus.trimble.com/components/tables/) web components are wrappers around the HTML table element.\nThey organize information in a way that\u2019s easy to scan, so that users can look for patterns and insights.\nThey are referenced using the `<modus-data-table>` custom HTML element.\n\n## Overview\n\n- [Implementation Details](#implementation-details)\n- [Inputs](#inputs)\n- [Sorting](#sorting)\n- [Selection](#selection)\n- [Display](#display)\n- [Row Actions](#row-actions)\n- [Cell Types](#cell-types)\n- [Types](#types)\n- [Properties](#properties)\n- [Events](#events)\n\n---\n\n### Default\n\n<Story of={DataTable.Default} />\n\n```html\n<div style=\"width: 500px\">\n  <modus-data-table />\n</div>\n<script>\n  document.querySelector('modus-data-table').columns = ['Name', 'Age', 'Contacted'];\n  document.querySelector('modus-data-table').data = [\n    ['John', 25, false],\n    ['Jane', 26, false],\n    ['Joe', 27, true],\n  ];\n</script>\n```\n\n### Implementation Details\n\n- The table `columns` property accepts an array of strings, or an array of objects.\n  - Defining the columns with objects allows you to define extra properties on the column/column cells.\n- The table `data` property accepts either a 2D array of primitive types (`string`, `number`, or `boolean`) or an array of objects.\n  - Note: the objects in `data` get their property names mapped to each column `id`.\n- The table needs a unique `id` for each column that maps to each cell in that column. If it is not provided, the table will generate a unique id for each column.\n\n### Inputs\n\nRefer to the **Default** example above to see how to define simple `columns` and `data` in the table.\n\nTo define columns and data in the table _using objects_:\n\n```html\n<modus-data-table />\n<script>\n  document.querySelector('modus-data-table').columns = [\n    { display: 'Name', id: 'name', width: '50%' },\n    { display: 'Age', id: 'age', align: 'right' },\n    { display: 'Contacted', id: 'contacted' },\n  ];\n\n  const john = { name: 'John', age: 25, contacted: false };\n  const jane = { name: 'Jane', age: 26, contacted: false };\n  const joe = { name: 'Joe', age: 27, contacted: true };\n  document.querySelector('modus-data-table').data = [john, jane, joe];\n</script>\n```\n\n### Sorting\n\n- The table uses a tri-state for its sorting:\n  - `none`: no sorting is applied\n  - `asc`: ascending sort\n  - `desc`: descending sort\n- The table sorting options can be set with the optional `sortOptions` property. The property accepts a `ModusDataTableSortOptions` object.\n  - The object defines whether the table can be sorted on header click, and if the sort is done on the client or server-side.\n- If the table is sortable, it will output the `sort` event on header click. This event's detail is a `ModusDataTableSortEvent` object.\n- If the table's `serverSide` sort option is `false`, it will sort the columns on the client-side. Otherwise, it is up to the consumer to update the table's `data` property with the sorted data.\n\n### Selection\n\n- The `TRow` object has two optional properties that are used for selection:\n  - `_id`: The row's unique id. Output in the event detail on row selection.\n  - `_selected`: Whether the row is selected. You can set this to change selection state with code.\n- The `selectionOptions` property accepts a `ModusDataTableSelectionOptions` object.\n  - The options define whether the table rows can be selected, and if the selection uses a checkbox column.\n- When a selection changes, the `selection` event fires detailing the currently selected rows' IDs.\n\n### Display\n\n- The table's display can be configured with the `displayOptions` prop. The property accepts a `ModusDataTableDisplayOptions` object:\n  - `borderless`: Whether the table has a border. Defaults to true.\n  - `cellBorderless`: Whether the table cells have a border. Default to true.\n  - `rowStripe`: Whether the table rows have a stripe. Defaults to false.\n  - `size`: The table's size. Defaults to 'large'.\n\n### Row Actions\n\n- The table's `rowActions` can be set to give each table row a context menu.\n- When a row action is clicked, a `ModusDataTableRowActionClickEvent` is fired with the relevant `actionId`, and `rowId`.\n  - Each row action takes an `_id` (which will be emitted in the event detail), and a `display` object that sets the `text` and optional `icon`.\n    ```ts\n    document.querySelector('modus-data-table').rowActions = [\n      {\n        _id: '0',\n        display: {\n          text: 'Delete',\n          icon: 'delete',\n        },\n      },\n      {\n        _id: '1',\n        display: {\n          text: 'Edit',\n        },\n      },\n    ];\n    ```\n\n### Cell Types\n\n- The Data Table accepts `number`, `string`, `booleans`, `ModusDataTableCellBadge` and `ModusDataTableCellLink` as data.\n  - `ModusDataTableCellBadge` displays a Modus Badge in the center of the cell. You must pass `badge` as the data's `_type` property. This cell type accepts all properties to configure a Modus Badge (see Types below).\n    ```ts\n    const data = [{ badgeColumnId: { _type: 'badge', text: 'Some badge text' } }];\n    ```\n  - `ModusDataTableCellLink` displays a Link in the cell. You must pass `link` as the data's `_type` property, similarly to the badge above. This cell type accepts `display` and `url` (see Types below).\n    ```ts\n    const data = [\n      {\n        linkColumnId: {\n          _type: 'link',\n          display: 'Some link text',\n          url: 'https://www.google.com',\n        },\n      },\n    ];\n    ```\n\n### Types\n\n```ts\ntype TCell = number | string | boolean | ModusDataTableCellBadge | ModusDataTableCellLink;\ntype TRow = {\n  [key: string]: TCell;\n} & {\n  _id?: string;\n  _selected?: boolean;\n};\n\ninterface TColumn {\n  align?: 'left' | 'right';\n  display: string;\n  id?: string;\n  readonly?: boolean;\n  width?: string;\n}\n\ninterface ModusDataTableCellBadge {\n  _type: 'badge'; // Used internally to identify the type of cell. Does not set the badge's type.\n  color?: 'danger' | 'dark' | 'primary' | 'secondary' | 'success' | 'tertiary' | 'warning';\n  text: string;\n  type?: 'counter' | 'default' | 'text';\n}\n\ninterface ModusDataTableCellLink {\n  _type: 'link';\n  display: string;\n  url: string;\n}\n\ninterface ModusDataTableSort {\n  columnId: string;\n  direction: 'asc' | 'desc' | 'none';\n}\n\ninterface ModusDataTableSortEvent extends ModusDataTableSort {}\ninterface ModusDataTableRowActionClickEvent {\n  actionId: string;\n  rowId: string;\n}\n\ninterface ModusDataTableDisplayOptions {\n  animateRowActionsDropdown?: boolean;\n  borderless?: boolean;\n  cellBorderless?: boolean;\n  rowStripe?: boolean;\n  size?: 'small' | 'large';\n}\n\ninterface ModusDataTableRowAction {\n  _id: string;\n  display: {\n    icon?: string;\n    text: string;\n  };\n}\n\ninterface ModusDataTableSelectionOptions {\n  canSelect: boolean;\n  checkboxSelection: boolean;\n}\n\ninterface ModusDataTableSortOptions {\n  canSort: boolean;\n  serverSide: boolean;\n}\n```\n\n### Properties\n\n| Property               | Attribute | Description                                | Type                             | Default                                                                                                         |\n| ---------------------- | --------- | ------------------------------------------ | -------------------------------- | --------------------------------------------------------------------------------------------------------------- |\n| `columns` _(required)_ | --        |                                            | `TColumn[], string[]`            | `undefined`                                                                                                     |\n| `data` _(required)_    | --        |                                            | `TCell[][], TRow[]`              | `undefined`                                                                                                     |\n| `displayOptions`       | --        | Options for data table display.            | `ModusDataTableDisplayOptions`   | `{ animateRowActionsDropdown: false, borderless: true, cellBorderless: true, rowStripe: false, size: 'large' }` |\n| `rowActions`           | --        | Actions that can be performed on each row. | `ModusDataTableRowAction[]`      | `[]`                                                                                                            |\n| `selectionOptions`     | --        | Options for data table item selection.     | `ModusDataTableSelectionOptions` | `{ canSelect: false, checkboxSelection: false, }`                                                               |\n| `sortOptions`          | --        | Options for data table column sort.        | `ModusDataTableSortOptions`      | `{ canSort: false, serverSide: false, }`                                                                        |\n\n### Events\n\n| Event            | Description                                       | Type                                                |\n| ---------------- | ------------------------------------------------- | --------------------------------------------------- |\n| `cellLinkClick`  | An event that fires on cell link click.           | `CustomEvent<ModusDataTableCellLink>`               |\n| `rowActionClick` | An event that fires when a row action is clicked. | `CustomEvent<{ actionId: string; rowId: string; }>` |\n| `rowDoubleClick` | An event that fires on row double click.          | `CustomEvent<string>`                               |\n| `selection`      | An event that fires on selection change.          | `CustomEvent<string[]>`                             |\n| `sort`           | An event that fires on column sort.               | `CustomEvent<ModusDataTableSortEvent>`              |\n",
  "storybook_content": "\n\n--- modus-data-table.stories.tsx ---\n\nimport { html } from 'lit-html';\n// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-data-table-storybook-docs.mdx';\nimport { withActions } from '@storybook/addon-actions/decorator';\n\nexport default {\n  title: 'Components/Data Table',\n  argTypes: {},\n  parameters: {\n    controls: { disable: true, expanded: true, sort: 'alpha' },\n    actions: {\n      handles: ['cellLinkClick', 'rowDoubleClick', 'selection', 'sort', 'rowActionClick'],\n    },\n    docs: {\n      inlineStories: false,\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n    },\n    design: {\n      type: 'figma',\n      url: 'https://www.figma.com/design/wyfVJUHWRMkeCfdB38HFEE/Modus---Web?node-id=2072-16701&m=dev',\n    },\n  },\n  decorators: [withActions],\n};\n\nexport const Default = () => html`\n  <div style=\"width: 800px\">\n    <modus-data-table />\n  </div>\n  ${setDataTable()}\n`;\n\nexport const RowActions = () => html`\n  <div style=\"width: 800px\">\n    <modus-data-table />\n  </div>\n  ${setDataTableRowActions()}\n`;\n\n// The <script> tag cannot be used in the MDX file, so we use this method to\n// set the data table data for the default story.\nconst setDataTable = () => {\n  const tag = document.createElement('script');\n  tag.innerHTML = `\n    document.querySelector('modus-data-table').columns = [{ display: 'Name', width: '33%'}, { display: 'Age', width: '33%' }, { display: 'Contacted', width: '33%' }];\n    document.querySelector('modus-data-table').data = [['John', 25, false], ['Jane', 26, false], ['Joe', 27, true]];\n  `;\n\n  return tag;\n};\n\nconst setDataTableRowActions = () => {\n  const tag = document.createElement('script');\n  tag.innerHTML = `\n    document.querySelector('modus-data-table').columns = [\n      { display: 'Name', width: '100px' },\n      { display: 'Age', align: 'right', width: '34px' },\n      { display: 'Status', align: 'center' },\n      { display: 'Email' }\n    ];\n    document.querySelector('modus-data-table').data = [\n      {\n        _id: '0',\n        name: 'Joe',\n        age: 27,\n        status: {\n          _type: 'badge',\n          text: 'Complete'\n        },\n        email: {\n          _type: 'link',\n          display: 'joe@example.com',\n          url: 'mailto:joe@example.com',\n        },\n      },\n      {\n        _id: '1',\n        name: 'Jane',\n        age: 34,\n        status: {\n          _type: 'badge',\n          text: 'Complete'\n        },\n        email: {\n          _type: 'link',\n          display: 'jane@example.com',\n          url: 'mailto:jane@example.com',\n        },\n      },\n      {\n        _id: '2',\n        name: 'William',\n        age: 28,\n        status: {\n          _type: 'badge',\n          text: 'Incomplete',\n          color: 'warning'\n        },\n        email: {\n          _type: 'link',\n          display: 'william@example.com',\n          url: 'mailto:william@example.com',\n        },\n      },\n    ];\n    document.querySelector('modus-data-table').sortOptions = { canSort: true, serverSide: false };\n    document.querySelector('modus-data-table').selectionOptions = { canSelect: true, checkboxSelection: true };\n    document.querySelector('modus-data-table').rowActions = [\n      {\n        _id: '0',\n        display: {\n          text: 'Delete',\n          icon: 'delete'\n        }\n      }\n    ];\n  `;\n\n  return tag;\n};\n",
  "storybook": {
    "examples": [
      "<modus-data-table />",
      "<modus-data-table />",
      "\n  <div style=\"width: 800px\">\n    <modus-data-table />\n  </div>\n  ${setDataTable()}\n",
      "\n  <div style=\"width: 800px\">\n    <modus-data-table />\n  </div>\n  ${setDataTableRowActions()}\n"
    ],
    "variants": [],
    "prop_usage": {
      "style": [
        "width: 800px"
      ]
    }
  },
  "tag_name": "modus-data-table"
}
{
  "component_name": "modus-autocomplete",
  "version": "v1",
  "props": [
    {
      "name": "multiple",
      "description": "/** When enabled, multiple options can be selected in the component. And selected options are shown as chips in the input. */",
      "type": "boolean"
    },
    {
      "name": "ariaLabel",
      "description": "/** When enabled, multiple options can be selected in the component. And selected options are shown as chips in the input. */",
      "type": "string | null"
    },
    {
      "name": "clearable",
      "description": "/** When enabled, multiple options can be selected in the component. And selected options are shown as chips in the input. */",
      "type": "'clearable-icon' : ''}`}>\n          {this.includeSearchIcon ? <IconSearch size"
    },
    {
      "name": "disabled",
      "description": "/** When enabled, multiple options can be selected in the component. And selected options are shown as chips in the input. */",
      "type": "boolean"
    },
    {
      "name": "disableCloseOnSelect",
      "description": "/** When enabled, multiple options can be selected in the component. And selected options are shown as chips in the input. */",
      "type": "boolean"
    },
    {
      "name": "dropdownMaxHeight",
      "description": "/** When enabled, multiple options can be selected in the component. And selected options are shown as chips in the input. */",
      "type": ""
    },
    {
      "name": "dropdownZIndex",
      "description": "/** When enabled, multiple options can be selected in the component. And selected options are shown as chips in the input. */",
      "type": ""
    },
    {
      "name": "errorText",
      "description": "/** When enabled, multiple options can be selected in the component. And selected options are shown as chips in the input. */",
      "type": "string"
    },
    {
      "name": "includeSearchIcon",
      "description": "/** When enabled, multiple options can be selected in the component. And selected options are shown as chips in the input. */",
      "type": "<IconSearch size"
    },
    {
      "name": "label",
      "description": "/** When enabled, multiple options can be selected in the component. And selected options are shown as chips in the input. */",
      "type": "string"
    },
    {
      "name": "noResultsFoundText",
      "description": "/** When enabled, multiple options can be selected in the component. And selected options are shown as chips in the input. */",
      "type": ""
    },
    {
      "name": "noResultsFoundSubtext",
      "description": "/** When enabled, multiple options can be selected in the component. And selected options are shown as chips in the input. */",
      "type": ""
    },
    {
      "name": "options",
      "description": "/** When enabled, multiple options can be selected in the component. And selected options are shown as chips in the input. */",
      "type": "ModusAutocompleteOption[] | string[]"
    },
    {
      "name": "filterOptions",
      "description": "/** When enabled, multiple options can be selected in the component. And selected options are shown as chips in the input. */",
      "type": "(search: string)"
    },
    {
      "name": "loading",
      "description": "/** When enabled, multiple options can be selected in the component. And selected options are shown as chips in the input. */",
      "type": "(\n            <LoadingSpinner />\n          ) : (\n            this.displayNoResults() && <NoResultsFound text"
    },
    {
      "name": "showOptionsOnFocus",
      "description": "/** When enabled, multiple options can be selected in the component. And selected options are shown as chips in the input. */",
      "type": "boolean"
    },
    {
      "name": "placeholder",
      "description": "/** When enabled, multiple options can be selected in the component. And selected options are shown as chips in the input. */",
      "type": "string"
    },
    {
      "name": "readOnly",
      "description": "/** When enabled, multiple options can be selected in the component. And selected options are shown as chips in the input. */",
      "type": "boolean"
    },
    {
      "name": "required",
      "description": "/** When enabled, multiple options can be selected in the component. And selected options are shown as chips in the input. */",
      "type": "boolean"
    },
    {
      "name": "showNoResultsFoundMessage",
      "description": "/** When enabled, multiple options can be selected in the component. And selected options are shown as chips in the input. */",
      "type": ""
    },
    {
      "name": "size",
      "description": "/** When enabled, multiple options can be selected in the component. And selected options are shown as chips in the input. */",
      "type": "'medium' | 'large'"
    },
    {
      "name": "value",
      "description": "/** When enabled, multiple options can be selected in the component. And selected options are shown as chips in the input. */",
      "type": "string"
    }
  ],
  "events": [],
  "slots": [],
  "default_values": {
    "clearable": "false",
    "disabled": "{this.disabled}\n      readOnly={this.readOnly}\n      aria-autocomplete=\"list\"\n      aria-controls={this.listId}\n      aria-expanded={this.displayOptions()}\n    />\n  )",
    "dropdownMaxHeight": "'300px'",
    "dropdownZIndex": "'1'",
    "errorText": "''",
    "includeSearchIcon": "true",
    "label": "{this.ariaLabel || undefined}\n        aria-readonly={this.readOnly ? 'true' : undefined}\n        aria-required={this.required}\n        class={classes}\n        onFocusin={() => {\n          if (this.hasFocus) {\n            return",
    "noResultsFoundText": "'No results found'",
    "noResultsFoundSubtext": "'Check spelling or try a different keyword'",
    "options": "> ({\n      id: option,\n      value: option,\n    }))",
    "filterOptions": "> Promise<ModusAutocompleteOption[] | string[]>",
    "loading": "false",
    "placeholder": "{this.placeholder}\n      size={this.size}\n      type=\"search\"\n      value={this.getValueAsString()}\n      onBlur={this.handleInputBlur}\n      onKeyDown={(e) => this.handleInputKeyDown(e)}\n      role=\"combobox\"\n      disabled={this.disabled}\n      readOnly={this.readOnly}\n      aria-autocomplete=\"list\"\n      aria-controls={this.listId}\n      aria-expanded={this.displayOptions()}\n    />\n  )",
    "readOnly": "{this.readOnly}\n      aria-autocomplete=\"list\"\n      aria-controls={this.listId}\n      aria-expanded={this.displayOptions()}\n    />\n  )",
    "required": "{this.required}\n        class={classes}\n        onFocusin={() => {\n          if (this.hasFocus) {\n            return",
    "showNoResultsFoundMessage": "true",
    "size": "'medium'",
    "value": "> chip.id === value.id)) {\n      return"
  },
  "documentation": "\n\n--- modus-autocomplete-storybook-docs.mdx ---\n\nimport { Story } from '@storybook/blocks';\nimport * as Autocomplete from './modus-autocomplete.stories.tsx';\n\n# Autocomplete\n\n---\n\n[Modus Autocomplete](https://modus.trimble.com/components/web/autocomplete/) web components allow the user to search and select one option\nfrom a set of choices. When the user enters text into the input field, a list of suggestions are provided.\n\n## Overview\n\n- [Implementation Details](#implementation-details)\n- [Types](#types)\n- [Properties](#properties)\n- [Events](#events)\n\n---\n\n### Default\n\n<Story of={Autocomplete.Default} />\n\n### With Option\n\n<Story of={Autocomplete.WithOption} />\n\n### Multiple Selection\n\n<Story of={Autocomplete.MultipleSelection} />\n\n### With Custom Option\n\n<Story of={Autocomplete.WithCustomOption} />\n\n### With Dynamic Options\n\n<Story of={Autocomplete.WithDynamicOptions} />\n\n```html\n<div style=\"width: 500px\">\n  <!-- Default (values set in <script />) -->\n  <modus-autocomplete id=\"default\" label=\"Default Autocomplete\" placeholder=\"Search...\"></modus-autocomplete>\n\n  <!-- With ModusAutocompleteOption model (values set in <script />) -->\n  <modus-autocomplete id=\"with-option\" label=\"Autocomplete using option model\" placeholder=\"Search...\"></modus-autocomplete>\n\n  <!-- With ModusAutocompleteOption model (values set in <script />) where multiple values can be added in the form of chips -->\n  <modus-autocomplete\n    id=\"multiple-selection\"\n    label=\"Autocomplete using option model\"\n    multiple\n    placeholder=\"Search...\"></modus-autocomplete>\n\n  <!-- With custom option slot -->\n  <modus-autocomplete label=\"Employee Search\" clearable placeholder=\"Search...\">\n    <li data-search-value=\"The Git Guru\" data-id=\"1\" style=\"padding: 8px\">\n      <div style=\"font-weight: bold\">The Git Guru</div>\n      <div style=\"font-size: 12px\">Lead DevOps Engineer</div>\n    </li>\n    <li data-search-value=\"Bob the Builder\" data-id=\"2\" style=\"padding: 8px\">\n      <div style=\"font-weight: bold\">Bob the Builder</div>\n      <div style=\"font-size: 12px\">Senior Construction Engineer</div>\n    </li>\n  </modus-autocomplete>\n\n  <!-- With Dynamic Options -->\n  <modus-autocomplete id=\"dynamic-options\" label=\"Dynamic Autocomplete\" placeholder=\"Search...\"></modus-autocomplete>\n</div>\n<script>\n  document.querySelector('#default').options = [\n    'Apple',\n    'Banana',\n    'Orange',\n    'Mango',\n    'Pineapple',\n    'Grapes',\n    'Watermelon',\n    'Strawberry',\n    'Blueberry',\n    'Raspberry',\n    'Blackberry',\n    'Cherry',\n    'Peach',\n    'Pear',\n    'Plum',\n    'Kiwi',\n    'Lemon',\n    'Lime',\n    'Papaya',\n    'Passion Fruit',\n  ];\n  document.querySelector('#with-option').options = [\n    { id: '0', value: 'Apple' },\n    { id: '1', value: 'Banana' },\n    { id: '2', value: 'Orange' },\n    { id: '3', value: 'Mango' },\n    { id: '4', value: 'Pineapple' },\n    { id: '5', value: 'Grapes' },\n    { id: '6', value: 'Watermelon' },\n    { id: '7', value: 'Strawberry' },\n    { id: '8', value: 'Blueberry' },\n    { id: '9', value: 'Raspberry' },\n    { id: '10', value: 'Blackberry' },\n    { id: '11', value: 'Cherry' },\n    { id: '12', value: 'Peach' },\n    { id: '13', value: 'Pear' },\n    { id: '14', value: 'Plum' },\n    { id: '15', value: 'Kiwi' },\n    { id: '16', value: 'Lemon' },\n    { id: '17', value: 'Lime' },\n    { id: '18', value: 'Papaya' },\n    { id: '19', value: 'Passion Fruit' },\n  ];\n  document.querySelector('#multiple-selection').options = [\n    { id: '0', value: 'Apple' },\n    { id: '1', value: 'Banana' },\n    { id: '2', value: 'Orange' },\n    { id: '3', value: 'Mango' },\n    { id: '4', value: 'Pineapple' },\n    { id: '5', value: 'Grapes' },\n    { id: '6', value: 'Watermelon' },\n    { id: '7', value: 'Strawberry' },\n    { id: '8', value: 'Blueberry' },\n    { id: '9', value: 'Raspberry' },\n    { id: '10', value: 'Blackberry' },\n    { id: '11', value: 'Cherry' },\n    { id: '12', value: 'Peach' },\n    { id: '13', value: 'Pear' },\n    { id: '14', value: 'Plum' },\n    { id: '15', value: 'Kiwi' },\n    { id: '16', value: 'Lemon' },\n    { id: '17', value: 'Lime' },\n    { id: '18', value: 'Papaya' },\n    { id: '19', value: 'Passion Fruit' },\n  ];\n\n  // For dynamic options\n  const options = [\n    { id: '0', value: 'Apple' },\n    { id: '1', value: 'Banana' },\n    { id: '2', value: 'Orange' },\n    { id: '3', value: 'Mango' },\n    { id: '4', value: 'Pineapple' },\n  ];\n  const dynamicOptions = [\n    { id: '5', value: 'Grapes' },\n    { id: '6', value: 'Watermelon' },\n    { id: '7', value: 'Strawberry' },\n    { id: '8', value: 'Blueberry' },\n    { id: '9', value: 'Raspberry' },\n    { id: '10', value: 'Blackberry' },\n    { id: '11', value: 'Cherry' },\n    { id: '12', value: 'Peach' },\n    { id: '13', value: 'Pear' },\n    { id: '14', value: 'Plum' },\n    { id: '15', value: 'Kiwi' },\n    { id: '16', value: 'Lemon' },\n    { id: '17', value: 'Lime' },\n    { id: '18', value: 'Papaya' },\n    { id: '19', value: 'Passion Fruit' },\n  ];\n  const modusAutocomplete = document.querySelector('#dynamic-options');\n  if (modusAutocomplete) {\n    modusAutocomplete.filterOptions = filterOptions;\n\n    function filterOptions(value) {\n      modusAutocomplete.loading = true;\n      return new Promise((resolve) => {\n        setTimeout(() => {\n          const filteredOptions = [...options, ...dynamicOptions].filter((option) =>\n            (option.value ?? option).toLowerCase().includes(value.toLowerCase())\n          );\n          resolve(filteredOptions);\n          modusAutocomplete.loading = false;\n        }, 1000);\n      });\n    }\n    modusAutocomplete.options = options;\n    modusAutocomplete.filterOptions = filterOptions;\n  }\n</script>\n```\n\n### Implementation Details\n\n#### Options\n\nThe `options` property of the Autocomplete component can be either a `string[]` or an array of `ModusAutocompleteOption` objects.\n\nIf a `string[]` is passed as the `options` property, it will be converted into an array of `ModusAutocompleteOption` objects,\nwith the `id` and `value` properties both set to the value of each string in the original array.\n\nThe `optionSelected` event emits the `id` of the selected `ModusAutocompleteOption`.\n\n#### Custom Options\n\nTo pass custom markup as an option for the Autocomplete component,\nyou must add the option as a child slot to the `<modus-autocomplete>` element.\nThe `<li>` element passed as the slot must contain two data properties:\n\n- `data-search-value`: This is the value that will be used to filter the option while the user types into the search input.\n- `data-id`: This is the value that will be emitted when the option is clicked on.\n\n### Types\n\n```ts\ninterface ModusAutocompleteOption {\n  id: string;\n  value: string;\n}\n```\n\n### Properties\n\n| Property                    | Attribute                       | Description                                                                                                            | Type                                                    | Default                                       |\n| --------------------------- | ------------------------------- | ---------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------- | --------------------------------------------- |\n| `ariaLabel`                 | `aria-label`                    | The autocomplete's aria label.                                                                                         | `string`                                                | `undefined`                                   |\n| `clearable`                 | `clearable`                     | Whether the input has a clear button.                                                                                  | `boolean`                                               | `false`                                       |\n| `disabled`                  | `disabled`                      | Whether the input is disabled.                                                                                         | `boolean`                                               | `undefined`                                   |\n| `dropdownMaxHeight`         | `dropdown-max-height`           | The autocomplete's dropdown's max height.                                                                              | `string`                                                | `'300px'`                                     |\n| `dropdownZIndex`            | `dropdown-z-index`              | The autocomplete's dropdown z-index.                                                                                   | `string`                                                | `'1'`                                         |\n| `disableCloseOnSelect`      | `disable-close-on-select`       | Whether the autocomplete's options always display on select.                                                           | `boolean`                                               | `false`                                       |\n| `errorText`                 | `error-text`                    | The autocomplete's error text.                                                                                         | `string`                                                | `undefined`                                   |\n| `filterOptions`             | `filter-options`                | If provided, the built-in filtering will be turned off and the returned options will be displayed in the list.         | `(value: string) => Promise<ModusAutocompleteOption[]>` | `undefined`                                   |\n| `includeSearchIcon`         | `include-search-icon`           | Whether the search icon is included.                                                                                   | `boolean`                                               | `true`                                        |\n| `label`                     | `label`                         | The autocomplete's label.                                                                                              | `string`                                                | `undefined`                                   |\n| `loading`                   | `loading`                       | Whether the autocomplete is in a loading state.                                                                        | `boolean`                                               | `false`                                       |\n| `multiple`                  | `multiple`                      | When enabled, multiple options can be selected in the component. And selected options are shown as chips in the input. | `boolean`                                               | `false`                                       |\n| `noResultsFoundSubtext`     | `no-results-found-subtext`      | The autocomplete's no results sub-text.                                                                                | `string`                                                | `'Check spelling or try a different keyword'` |\n| `noResultsFoundText`        | `no-results-found-text`         | The autocomplete's no results text.                                                                                    | `string`                                                | `'No results found'`                          |\n| `options`                   | --                              | The autocomplete's options.                                                                                            | `ModusAutocompleteOption[]                              | string[]`\\| `undefined                        |\n| `placeholder`               | `placeholder`                   | The autocomplete's input placeholder.                                                                                  | `string`                                                | `undefined`                                   |\n| `readOnly`                  | `read-only`                     | Whether the autocomplete is read-only.                                                                                 | `boolean`                                               | `undefined`                                   |\n| `required`                  | `required`                      | Whether the autocomplete is required.                                                                                  | `boolean`                                               | `undefined`                                   |\n| `showNoResultsFoundMessage` | `show-no-results-found-message` | Whether to show the no results found message.                                                                          | `boolean`                                               | `true`                                        |\n| `showOptionsOnFocus`        | `show-options-on-focus`         | Whether to show autocomplete's options when focus                                                                      | `boolean`                                               | `false`                                       |\n| `size`                      | `size`                          | The autocomplete's size.                                                                                               | `\"large\" \\| \"medium\"`                                   | `'medium'`                                    |\n| `value`                     | `value`                         | The autocomplete's search value.                                                                                       | `\"string\" \\| \"string[]\"`                                | `undefined`                                   |\n\n### Events\n\n| Event               | Description                                                                                      | Type                                                        |\n| ------------------- | ------------------------------------------------------------------------------------------------ | ----------------------------------------------------------- |\n| `optionSelected`    | An event that fires when a dropdown option is selected. Emits the option id.                     | `CustomEvent<string>`                                       |\n| `valueChange`       | An event that fires when the input value changes. Emits the value string and an optional reason. | `CustomEvent<{value: string \\| string[]; reason?: string}>` |\n| `selectionsChanged` | An event that fires when an option is selected/removed. Emits the option ids.                    | `CustomEvent<string[]>`                                     |\n\n### valueChange Event Reasons\n\nThe `reason` property in the `valueChange` event object indicates why the value changed. Possible values:\n\n- `input`: The user typed or changed the input value.\n- `selectionChange`: Value change by selecting an option from the list.\n- `clear`: When input gets to be cleared via clear button.\n\n### Methods\n\n| Method name  | Description     | Parameter | Return          |\n| ------------ | --------------- | --------- | --------------- |\n| `focusInput` | Focus the input |           | `Promise<void>` |\n",
  "storybook_content": "\n\n--- modus-autocomplete.stories.tsx ---\n\nimport { html } from 'lit-html';\n// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-autocomplete-storybook-docs.mdx';\nimport { withActions } from '@storybook/addon-actions/decorator';\n\nexport default {\n  title: 'User Inputs/Autocomplete',\n  argTypes: {\n    ariaLabel: {\n      name: 'aria-label',\n      description: \"The autocomplete's aria-label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    clearable: {\n      description: 'Whether the autocomplete is clearable',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    disabled: {\n      description: 'Whether the autocomplete is disabled',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    dropdownMaxHeight: {\n      name: 'dropdown-max-height',\n      description: 'The maximum height of the dropdown',\n      table: {\n        defaultValue: { summary: '300px' },\n        type: { summary: 'string' },\n      },\n    },\n    dropdownZIndex: {\n      name: 'dropdown-z-index',\n      description: \"The dropdown's z-index\",\n      table: {\n        defaultValue: { summary: '1' },\n        type: { summary: 'string' },\n      },\n    },\n    disableCloseOnSelect: {\n      name: 'disable-close-on-select',\n      description: 'Whether the autocomplete options always display on select',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    errorText: {\n      name: 'error-text',\n      description: \"The autocomplete's error text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    filterOptions: {\n      name: 'filter-options',\n      description: 'Function to filter options',\n      table: {\n        type: { summary: 'function' },\n      },\n    },\n    includeSearchIcon: {\n      name: 'include-search-icon',\n      description: 'Whether to include the search icon',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    label: {\n      description: \"The autocomplete's label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    loading: {\n      description: 'Whether the autocomplete is in a loading state',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    noResultsFoundText: {\n      name: 'no-results-found-text',\n      description: \"The autocomplete's no results found text\",\n      table: {\n        defaultValue: { summary: 'No results found' },\n        type: { summary: 'string' },\n      },\n    },\n    noResultsFoundSubtext: {\n      name: 'no-results-found-subtext',\n      description: \"The autocomplete's no results found subtext\",\n      table: {\n        defaultValue: { summary: 'Check spelling or try a different keyword' },\n        type: { summary: 'string' },\n      },\n    },\n    placeholder: {\n      description: \"The autocomplete's placeholder text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    readOnly: {\n      name: 'read-only',\n      description: 'Whether the autocomplete is read-only',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    required: {\n      description: 'Whether the autocomplete is required',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    showNoResultsFoundMessage: {\n      name: 'show-no-results-found-message',\n      description: 'Whether to show the no results found message when no results are found',\n      table: {\n        defaultValue: { summary: true },\n        type: { summary: 'boolean' },\n      },\n    },\n    showOptionsOnFocus: {\n      name: 'show-options-on-focus',\n      description: 'Whether to show autocomplete options when focus',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    size: {\n      options: ['medium', 'large'],\n      type: 'select',\n      description: 'The size of the autocomplete',\n      table: {\n        defaultValue: { summary: \"'medium'\" },\n        type: { summary: \"'medium' | 'large'\" },\n      },\n    },\n    value: {\n      description: \"The autocomplete's value\",\n      table: {\n        type: { summary: 'string | string[]' },\n      },\n    },\n    multiple: {\n      description:\n        'When enabled, multiple options can be selected in the component. And selected options are shown as chips in the input',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n  },\n  parameters: {\n    controls: { expanded: true, sort: 'requiredFirst' },\n    actions: {\n      handles: ['valueChange', 'optionSelected', 'selectionsChanged'],\n    },\n    docs: {\n      inlineStories: true,\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n    },\n    design: {\n      type: 'figma',\n      url: 'https://www.figma.com/design/wyfVJUHWRMkeCfdB38HFEE/Modus---Web?node-id=5799-22364&m=dev',\n    },\n  },\n  decorators: [withActions],\n};\n\nconst Template = ({\n  ariaLabel,\n  clearable,\n  disabled,\n  dropdownMaxHeight,\n  dropdownZIndex,\n  disableCloseOnSelect,\n  errorText,\n  includeSearchIcon,\n  label,\n  multiple,\n  noResultsFoundText,\n  noResultsFoundSubtext,\n  placeholder,\n  readOnly,\n  required,\n  showNoResultsFoundMessage,\n  showOptionsOnFocus,\n  size,\n  value,\n  options,\n}) => html`\n  <div style=\"width: 600px\">\n    <modus-autocomplete\n      id=\"autocomplete-default\"\n      aria-label=${ariaLabel}\n      clearable=${clearable}\n      ?disabled=${disabled}\n      disable-close-on-select=${disableCloseOnSelect}\n      dropdown-max-height=${dropdownMaxHeight}\n      dropdown-z-index=${dropdownZIndex}\n      error-text=${errorText}\n      include-search-icon=${includeSearchIcon}\n      label=${label}\n      multiple=${multiple}\n      no-results-found-text=${noResultsFoundText}\n      no-results-found-subtext=${noResultsFoundSubtext}\n      placeholder=${placeholder}\n      read-only=${readOnly}\n      ?required=${required}\n      show-no-results-found-message=${showNoResultsFoundMessage}\n      show-options-on-focus=${showOptionsOnFocus}\n      size=${size}\n      .value=${value}\n      .options=${options}>\n    </modus-autocomplete>\n  </div>\n`;\n\nconst defaultOptions = [\n  'Apple',\n  'Banana',\n  'Orange',\n  'Mango',\n  'Pineapple',\n  'Grapes',\n  'Watermelon',\n  'Strawberry',\n  'Blueberry',\n  'Raspberry',\n  'Blackberry',\n  'Cherry',\n  'Peach',\n  'Pear',\n  'Plum',\n  'Kiwi',\n  'Lemon',\n  'Lime',\n  'Papaya',\n  'Passion Fruit',\n];\n\nconst defaultArgs = {\n  ariaLabel: 'autocomplete',\n  clearable: false,\n  disabled: false,\n  disableCloseOnSelect: false,\n  dropdownMaxHeight: '300px',\n  dropdownZIndex: '1',\n  errorText: '',\n  includeSearchIcon: true,\n  label: 'Default Autocomplete',\n  multiple: false,\n  noResultsFoundText: 'No results found',\n  noResultsFoundSubtext: 'Check spelling or try a different keyword',\n  placeholder: 'Search...',\n  readOnly: false,\n  required: false,\n  showNoResultsFoundMessage: true,\n  showOptionsOnFocus: false,\n  size: 'medium',\n  value: '',\n  options: defaultOptions,\n};\n\nconst customOptions = [\n  { id: 'ID0', value: 'Apple' },\n  { id: 'ID1', value: 'Banana' },\n  { id: 'ID2', value: 'Orange' },\n];\n\nexport const Default = Template.bind({});\nDefault.args = defaultArgs;\n\nexport const WithOption = Template.bind({});\nWithOption.args = { ...defaultArgs, label: 'Autocomplete using option model' };\n\nexport const MultipleSelection = Template.bind({});\nMultipleSelection.args = {\n  ...defaultArgs,\n  label: 'Autocomplete with multiple selection',\n  multiple: true,\n  value: ['Apple', 'Banana'],\n  options: customOptions,\n};\n\nexport const WithCustomOption = ({\n  ariaLabel,\n  clearable,\n  disabled,\n  dropdownMaxHeight,\n  dropdownZIndex,\n  disableCloseOnSelect,\n  errorText,\n  includeSearchIcon,\n  label,\n  multiple,\n  noResultsFoundText,\n  noResultsFoundSubtext,\n  placeholder,\n  readOnly,\n  required,\n  showNoResultsFoundMessage,\n  showOptionsOnFocus,\n  size,\n  value,\n}) => html`\n  <div style=\"width: 600px\">\n    <modus-autocomplete\n      aria-label=${ariaLabel}\n      clearable=${clearable}\n      disabled=${disabled}\n      dropdown-max-height=${dropdownMaxHeight}\n      dropdown-z-index=${dropdownZIndex}\n      disable-close-on-select=${disableCloseOnSelect}\n      error-text=${errorText}\n      include-search-icon=${includeSearchIcon}\n      label=${label}\n      multiple=${multiple}\n      no-results-found-text=${noResultsFoundText}\n      no-results-found-subtext=${noResultsFoundSubtext}\n      placeholder=${placeholder}\n      read-only=${readOnly}\n      required=${required}\n      show-no-results-found-message=${showNoResultsFoundMessage}\n      show-options-on-focus=${showOptionsOnFocus}\n      size=${size}\n      value=${value}>\n      <li data-search-value=\"The Git Guru\" data-id=\"1\" style=\"padding: 8px\">\n        <div style=\"font-weight: bold\">The Git Guru</div>\n        <div style=\"font-size: 12px\">Lead DevOps Engineer</div>\n      </li>\n      <li data-search-value=\"Bob the Builder\" data-id=\"2\" style=\"padding: 8px\">\n        <div style=\"font-weight: bold\">Bob the Builder</div>\n        <div style=\"font-size: 12px\">Senior Construction Engineer</div>\n      </li>\n    </modus-autocomplete>\n  </div>\n`;\n\nWithCustomOption.args = {\n  ariaLabel: 'autocomplete',\n  clearable: false,\n  disabled: false,\n  dropdownMaxHeight: '300px',\n  dropdownZIndex: '1',\n  disableCloseOnSelect: false,\n  errorText: '',\n  includeSearchIcon: true,\n  label: 'Employee Search',\n  multiple: false,\n  noResultsFoundText: 'No results found',\n  noResultsFoundSubtext: 'Check spelling or try a different keyword',\n  placeholder: 'Search...',\n  readOnly: false,\n  required: false,\n  showNoResultsFoundMessage: true,\n  showOptionsOnFocus: false,\n  size: 'medium',\n  value: '',\n};\n\nexport const WithDynamicOptions = ({\n  ariaLabel,\n  clearable,\n  disabled,\n  dropdownMaxHeight,\n  dropdownZIndex,\n  disableCloseOnSelect,\n  errorText,\n  includeSearchIcon,\n  label,\n  loading,\n  multiple,\n  noResultsFoundText,\n  noResultsFoundSubtext,\n  placeholder,\n  readOnly,\n  required,\n  showNoResultsFoundMessage,\n  showOptionsOnFocus,\n  size,\n  value,\n}) => html`\n  <div style=\"width: 600px\">\n    <modus-autocomplete\n      aria-label=${ariaLabel}\n      clearable=${clearable}\n      disabled=${disabled}\n      dropdown-max-height=${dropdownMaxHeight}\n      dropdown-z-index=${dropdownZIndex}\n      disable-close-on-select=${disableCloseOnSelect}\n      error-text=${errorText}\n      include-search-icon=${includeSearchIcon}\n      id=\"dynamic-options\"\n      label=${label}\n      loading=${loading}\n      multiple=${multiple}\n      no-results-found-text=${noResultsFoundText}\n      no-results-found-subtext=${noResultsFoundSubtext}\n      placeholder=${placeholder}\n      read-only=${readOnly}\n      required=${required}\n      show-no-results-found-message=${showNoResultsFoundMessage}\n      show-options-on-focus=${showOptionsOnFocus}\n      size=${size}\n      .value=${value}>\n    </modus-autocomplete>\n  </div>\n  ${setDynamicOptions()}\n`;\nWithDynamicOptions.args = {\n  ariaLabel: 'autocomplete',\n  clearable: false,\n  disabled: false,\n  dropdownMaxHeight: '300px',\n  dropdownZIndex: '1',\n  disableCloseOnSelect: false,\n  errorText: '',\n  includeSearchIcon: true,\n  label: 'Dynamic Autocomplete',\n  loading: false,\n  multiple: false,\n  noResultsFoundText: 'No results found',\n  noResultsFoundSubtext: 'Check spelling or try a different keyword',\n  placeholder: 'Search...',\n  readOnly: false,\n  required: false,\n  showNoResultsFoundMessage: true,\n  showOptionsOnFocus: false,\n  size: 'medium',\n  value: '',\n};\nconst setDynamicOptions = () => {\n  const tag = document.createElement('script');\n  tag.innerHTML = `\n        (function () {\n          const modusAutocomplete = document.querySelector('#dynamic-options');\n          if (modusAutocomplete) {\n            const options = [\n              { id: '0', value: 'Apple' },\n              { id: '1', value: 'Banana' },\n              { id: '2', value: 'Orange' },\n              { id: '3', value: 'Mango' },\n              { id: '4', value: 'Pineapple' },\n            ];\n            const dynamicOptions = [\n              { id: '5', value: 'Grapes' },\n              { id: '6', value: 'Watermelon' },\n              { id: '7', value: 'Strawberry' },\n              { id: '8', value: 'Blueberry' },\n              { id: '9', value: 'Raspberry' },\n              { id: '10', value: 'Blackberry' },\n              { id: '11', value: 'Cherry' },\n              { id: '12', value: 'Peach' },\n              { id: '13', value: 'Pear' },\n              { id: '14', value: 'Plum' },\n              { id: '15', value: 'Kiwi' },\n              { id: '16', value: 'Lemon' },\n              { id: '17', value: 'Lime' },\n              { id: '18', value: 'Papaya' },\n              { id: '19', value: 'Passion Fruit' },\n            ];\n            function getFilteredOptions(value) {\n              modusAutocomplete.loading = true;\n              return new Promise((resolve) => {\n                setTimeout(() => {\n                  const filteredOptions = [...options, ...dynamicOptions].filter((option) =>\n                    (option.value ?? option).toLowerCase().includes(value.toLowerCase())\n                  );\n                  resolve(filteredOptions);\n                  modusAutocomplete.loading = false;\n                }, 1500);\n              });\n            }\n            modusAutocomplete.options = options;\n            modusAutocomplete.filterOptions = getFilteredOptions;\n          }\n        }())\n  `;\n\n  return tag;\n};\n",
  "storybook": {
    "examples": [
      "<modus-autocomplete\n      id=\"autocomplete-default\"\n      aria-label=${ariaLabel}\n      clearable=${clearable}\n      ?disabled=${disabled}\n      disable-close-on-select=${disableCloseOnSelect}\n      dropdown-max-height=${dropdownMaxHeight}\n      dropdown-z-index=${dropdownZIndex}\n      error-text=${errorText}\n      include-search-icon=${includeSearchIcon}\n      label=${label}\n      multiple=${multiple}\n      no-results-found-text=${noResultsFoundText}\n      no-results-found-subtext=${noResultsFoundSubtext}\n      placeholder=${placeholder}\n      read-only=${readOnly}\n      ?required=${required}\n      show-no-results-found-message=${showNoResultsFoundMessage}\n      show-options-on-focus=${showOptionsOnFocus}\n      size=${size}\n      .value=${value}\n      .options=${options}>\n    </modus-autocomplete>",
      "<modus-autocomplete\n      aria-label=${ariaLabel}\n      clearable=${clearable}\n      disabled=${disabled}\n      dropdown-max-height=${dropdownMaxHeight}\n      dropdown-z-index=${dropdownZIndex}\n      disable-close-on-select=${disableCloseOnSelect}\n      error-text=${errorText}\n      include-search-icon=${includeSearchIcon}\n      id=\"dynamic-options\"\n      label=${label}\n      loading=${loading}\n      multiple=${multiple}\n      no-results-found-text=${noResultsFoundText}\n      no-results-found-subtext=${noResultsFoundSubtext}\n      placeholder=${placeholder}\n      read-only=${readOnly}\n      required=${required}\n      show-no-results-found-message=${showNoResultsFoundMessage}\n      show-options-on-focus=${showOptionsOnFocus}\n      size=${size}\n      .value=${value}>\n    </modus-autocomplete>",
      "\n  <div style=\"width: 600px\">\n    <modus-autocomplete\n      id=\"autocomplete-default\"\n      aria-label=${ariaLabel}\n      clearable=${clearable}\n      ?disabled=${disabled}\n      disable-close-on-select=${disableCloseOnSelect}\n      dropdown-max-height=${dropdownMaxHeight}\n      dropdown-z-index=${dropdownZIndex}\n      error-text=${errorText}\n      include-search-icon=${includeSearchIcon}\n      label=${label}\n      multiple=${multiple}\n      no-results-found-text=${noResultsFoundText}\n      no-results-found-subtext=${noResultsFoundSubtext}\n      placeholder=${placeholder}\n      read-only=${readOnly}\n      ?required=${required}\n      show-no-results-found-message=${showNoResultsFoundMessage}\n      show-options-on-focus=${showOptionsOnFocus}\n      size=${size}\n      .value=${value}\n      .options=${options}>\n    </modus-autocomplete>\n  </div>\n",
      "\n  <div style=\"width: 600px\">\n    <modus-autocomplete\n      aria-label=${ariaLabel}\n      clearable=${clearable}\n      disabled=${disabled}\n      dropdown-max-height=${dropdownMaxHeight}\n      dropdown-z-index=${dropdownZIndex}\n      disable-close-on-select=${disableCloseOnSelect}\n      error-text=${errorText}\n      include-search-icon=${includeSearchIcon}\n      label=${label}\n      multiple=${multiple}\n      no-results-found-text=${noResultsFoundText}\n      no-results-found-subtext=${noResultsFoundSubtext}\n      placeholder=${placeholder}\n      read-only=${readOnly}\n      required=${required}\n      show-no-results-found-message=${showNoResultsFoundMessage}\n      show-options-on-focus=${showOptionsOnFocus}\n      size=${size}\n      value=${value}>\n      <li data-search-value=\"The Git Guru\" data-id=\"1\" style=\"padding: 8px\">\n        <div style=\"font-weight: bold\">The Git Guru</div>\n        <div style=\"font-size: 12px\">Lead DevOps Engineer</div>\n      </li>\n      <li data-search-value=\"Bob the Builder\" data-id=\"2\" style=\"padding: 8px\">\n        <div style=\"font-weight: bold\">Bob the Builder</div>\n        <div style=\"font-size: 12px\">Senior Construction Engineer</div>\n      </li>\n    </modus-autocomplete>\n  </div>\n",
      "\n  <div style=\"width: 600px\">\n    <modus-autocomplete\n      aria-label=${ariaLabel}\n      clearable=${clearable}\n      disabled=${disabled}\n      dropdown-max-height=${dropdownMaxHeight}\n      dropdown-z-index=${dropdownZIndex}\n      disable-close-on-select=${disableCloseOnSelect}\n      error-text=${errorText}\n      include-search-icon=${includeSearchIcon}\n      id=\"dynamic-options\"\n      label=${label}\n      loading=${loading}\n      multiple=${multiple}\n      no-results-found-text=${noResultsFoundText}\n      no-results-found-subtext=${noResultsFoundSubtext}\n      placeholder=${placeholder}\n      read-only=${readOnly}\n      required=${required}\n      show-no-results-found-message=${showNoResultsFoundMessage}\n      show-options-on-focus=${showOptionsOnFocus}\n      size=${size}\n      .value=${value}>\n    </modus-autocomplete>\n  </div>\n  ${setDynamicOptions()}\n"
    ],
    "variants": [],
    "prop_usage": {
      "style": [
        "width: 600px",
        "padding: 8px",
        "font-weight: bold",
        "font-size: 12px"
      ],
      "id": [
        "autocomplete-default",
        "1",
        "2",
        "dynamic-options"
      ],
      "value": [
        "The Git Guru",
        "Bob the Builder"
      ]
    }
  },
  "tag_name": "modus-autocomplete"
}
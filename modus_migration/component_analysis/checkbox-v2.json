{
  "component_name": "modus-wc-checkbox",
  "version": "v2",
  "props": [
    {
      "name": "customClass",
      "description": "/**\n * A customizable checkbox component\n */\n@Component({\n  tag: 'modus-wc-checkbox',\n  styleUrl: 'modus-wc-checkbox.scss',\n  shadow: false,\n})\nexport class ModusWcCheckbox {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */",
      "type": ": string"
    },
    {
      "name": "disabled",
      "description": "/**\n * A customizable checkbox component\n */\n@Component({\n  tag: 'modus-wc-checkbox',\n  styleUrl: 'modus-wc-checkbox.scss',\n  shadow: false,\n})\nexport class ModusWcCheckbox {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */",
      "type": ": boolean"
    },
    {
      "name": "indeterminate",
      "description": "/**\n * A customizable checkbox component\n */\n@Component({\n  tag: 'modus-wc-checkbox',\n  styleUrl: 'modus-wc-checkbox.scss',\n  shadow: false,\n})\nexport class ModusWcCheckbox {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */",
      "type": "boolean"
    },
    {
      "name": "inputId",
      "description": "/**\n * A customizable checkbox component\n */\n@Component({\n  tag: 'modus-wc-checkbox',\n  styleUrl: 'modus-wc-checkbox.scss',\n  shadow: false,\n})\nexport class ModusWcCheckbox {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */",
      "type": ": string"
    },
    {
      "name": "inputTabIndex",
      "description": "/**\n * A customizable checkbox component\n */\n@Component({\n  tag: 'modus-wc-checkbox',\n  styleUrl: 'modus-wc-checkbox.scss',\n  shadow: false,\n})\nexport class ModusWcCheckbox {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */",
      "type": ": number"
    },
    {
      "name": "label",
      "description": "/**\n * A customizable checkbox component\n */\n@Component({\n  tag: 'modus-wc-checkbox',\n  styleUrl: 'modus-wc-checkbox.scss',\n  shadow: false,\n})\nexport class ModusWcCheckbox {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */",
      "type": ": string"
    },
    {
      "name": "name",
      "description": "/**\n * A customizable checkbox component\n */\n@Component({\n  tag: 'modus-wc-checkbox',\n  styleUrl: 'modus-wc-checkbox.scss',\n  shadow: false,\n})\nexport class ModusWcCheckbox {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */",
      "type": ": string"
    },
    {
      "name": "required",
      "description": "/**\n * A customizable checkbox component\n */\n@Component({\n  tag: 'modus-wc-checkbox',\n  styleUrl: 'modus-wc-checkbox.scss',\n  shadow: false,\n})\nexport class ModusWcCheckbox {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */",
      "type": ": boolean"
    },
    {
      "name": "size",
      "description": "/**\n * A customizable checkbox component\n */\n@Component({\n  tag: 'modus-wc-checkbox',\n  styleUrl: 'modus-wc-checkbox.scss',\n  shadow: false,\n})\nexport class ModusWcCheckbox {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */",
      "type": ": ModusSize"
    },
    {
      "name": "value",
      "description": "/**\n * A customizable checkbox component\n */\n@Component({\n  tag: 'modus-wc-checkbox',\n  styleUrl: 'modus-wc-checkbox.scss',\n  shadow: false,\n})\nexport class ModusWcCheckbox {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */",
      "type": "boolean"
    }
  ],
  "events": [
    {
      "name": "inputBlur",
      "description": "/**\n * A customizable checkbox component\n */\n@Component({\n  tag: 'modus-wc-checkbox',\n  styleUrl: 'modus-wc-checkbox.scss',\n  shadow: false,\n})\nexport class ModusWcCheckbox {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */\n  @Prop() customClass?: string = '';\n\n  /** The disabled state of the checkbox. */\n  @Prop() disabled?: boolean = false;\n\n  /** The indeterminate state of the checkbox. */\n  @Prop({ reflect: true, mutable: true }) indeterminate: boolean = false;\n\n  /** The ID of the input element. */\n  @Prop() inputId?: string;\n\n  /** The tabindex of the input. */\n  @Prop() inputTabIndex?: number;\n\n  /** The text to display within the label. */\n  @Prop() label?: string;\n\n  /** Name of the form control. Submitted with the form as part of a name/value pair. */\n  @Prop() name?: string = '';\n\n  /** A value is required for the form to be submittable. */\n  @Prop() required?: boolean = false;\n\n  /** The size of the input. */\n  @Prop() size?: ModusSize = 'md';\n\n  /** The value of the checkbox. */\n  @Prop({ mutable: true, reflect: true }) value: boolean = false;\n\n  /** Emitted when the input loses focus. */"
    },
    {
      "name": "inputChange",
      "description": "/**\n * A customizable checkbox component\n */\n@Component({\n  tag: 'modus-wc-checkbox',\n  styleUrl: 'modus-wc-checkbox.scss',\n  shadow: false,\n})\nexport class ModusWcCheckbox {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */\n  @Prop() customClass?: string = '';\n\n  /** The disabled state of the checkbox. */\n  @Prop() disabled?: boolean = false;\n\n  /** The indeterminate state of the checkbox. */\n  @Prop({ reflect: true, mutable: true }) indeterminate: boolean = false;\n\n  /** The ID of the input element. */\n  @Prop() inputId?: string;\n\n  /** The tabindex of the input. */\n  @Prop() inputTabIndex?: number;\n\n  /** The text to display within the label. */\n  @Prop() label?: string;\n\n  /** Name of the form control. Submitted with the form as part of a name/value pair. */\n  @Prop() name?: string = '';\n\n  /** A value is required for the form to be submittable. */\n  @Prop() required?: boolean = false;\n\n  /** The size of the input. */\n  @Prop() size?: ModusSize = 'md';\n\n  /** The value of the checkbox. */\n  @Prop({ mutable: true, reflect: true }) value: boolean = false;\n\n  /** Emitted when the input loses focus. */"
    },
    {
      "name": "inputFocus",
      "description": "/**\n * A customizable checkbox component\n */\n@Component({\n  tag: 'modus-wc-checkbox',\n  styleUrl: 'modus-wc-checkbox.scss',\n  shadow: false,\n})\nexport class ModusWcCheckbox {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the inner div. */\n  @Prop() customClass?: string = '';\n\n  /** The disabled state of the checkbox. */\n  @Prop() disabled?: boolean = false;\n\n  /** The indeterminate state of the checkbox. */\n  @Prop({ reflect: true, mutable: true }) indeterminate: boolean = false;\n\n  /** The ID of the input element. */\n  @Prop() inputId?: string;\n\n  /** The tabindex of the input. */\n  @Prop() inputTabIndex?: number;\n\n  /** The text to display within the label. */\n  @Prop() label?: string;\n\n  /** Name of the form control. Submitted with the form as part of a name/value pair. */\n  @Prop() name?: string = '';\n\n  /** A value is required for the form to be submittable. */\n  @Prop() required?: boolean = false;\n\n  /** The size of the input. */\n  @Prop() size?: ModusSize = 'md';\n\n  /** The value of the checkbox. */\n  @Prop({ mutable: true, reflect: true }) value: boolean = false;\n\n  /** Emitted when the input loses focus. */"
    }
  ],
  "slots": [],
  "default_values": {
    "customClass": "''",
    "disabled": "false",
    "indeterminate": "false",
    "name": "''",
    "required": "false",
    "size": "'md'",
    "value": "false"
  },
  "documentation": "\n\n--- modus-wc-checkbox.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { ModusSize } from '../types';\n\ninterface CheckboxArgs {\n  'custom-class'?: string;\n  disabled?: boolean;\n  indeterminate?: boolean;\n  'input-id'?: string;\n  'input-tab-index'?: number;\n  label?: string;\n  name?: string;\n  required?: boolean;\n  size?: ModusSize;\n  value: boolean;\n}\n\nconst meta: Meta<CheckboxArgs> = {\n  title: 'Components/Forms/Checkbox',\n  component: 'modus-wc-checkbox',\n  args: {\n    'custom-class': '',\n    disabled: false,\n    indeterminate: false,\n    label: 'Label',\n    name: '',\n    required: false,\n    size: 'md',\n    value: true,\n  },\n  argTypes: {\n    size: {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg'],\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['inputBlur', 'inputChange', 'inputFocus'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<CheckboxArgs>;\n\nexport const Default: Story = {\n  render: (args) => {\n    return html`\n      <modus-wc-checkbox\n        aria-label=\"Checkbox\"\n        custom-class=${ifDefined(args['custom-class'])}\n        ?disabled=${args.disabled}\n        .indeterminate=${args.indeterminate}\n        input-id=${ifDefined(args['input-id'])}\n        input-tab-index=${ifDefined(args['input-tab-index'])}\n        label=${ifDefined(args.label)}\n        name=${ifDefined(args.name)}\n        ?required=${args.required}\n        size=${ifDefined(args.size)}\n        .value=${args.value}\n      ></modus-wc-checkbox>\n    `;\n  },\n};\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - In 1.0 input state was maintained by the component. 2.0 components encourage users to follow a controlled\n  input model. See the Form Inputs [documentation]([Angular](?path=/docs/documentation-form-inputs--docs) for\n  additional info and examples.\n  - The \\`checked\\` prop is now \\`value\\` in 2.0.\n  - The \\`checkboxClick\\` event is now \\`inputChange\\` in 2.0.\n  - Size values have changed from verbose names (\\`small\\`, \\`medium\\`) to abbreviations (\\`sm\\`, \\`md\\`, \\`lg\\`).\n\n#### Prop Mapping\n\n| 1.0 Prop         | 2.0 Prop      | Notes                                   |\n|------------------|---------------|-----------------------------------------|\n| aria-label       | aria-label    |                                         |\n| checked          | value         |                                         |\n| disabled         | disabled      |                                         |\n| indeterminate    | indeterminate |                                         |\n| label            | label         |                                         |\n| size             | size          | \\`small\\` \u2192 \\`sm\\`, \\`medium\\` \u2192 \\`md\\` |\n| stop-propagation |               | Not carried over                        |\n\n#### Event Mapping\n\n| 1.0 Event     | 2.0 Event   | Notes                                                 |\n|---------------|-------------|-------------------------------------------------------|\n| checkboxClick | inputChange | Event now emits \\`InputEvent\\` instead of \\`boolean\\` |\n        `,\n      },\n    },\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  render: () => html`<div></div>`,\n};\n",
  "storybook": {
    "examples": [
      "<modus-wc-checkbox\n        aria-label=\"Checkbox\"\n        custom-class=${ifDefined(args['custom-class'])}\n        ?disabled=${args.disabled}\n        .indeterminate=${args.indeterminate}\n        input-id=${ifDefined(args['input-id'])}\n        input-tab-index=${ifDefined(args['input-tab-index'])}\n        label=${ifDefined(args.label)}\n        name=${ifDefined(args.name)}\n        ?required=${args.required}\n        size=${ifDefined(args.size)}\n        .value=${args.value}\n      ></modus-wc-checkbox>",
      "\n      <modus-wc-checkbox\n        aria-label=\"Checkbox\"\n        custom-class=${ifDefined(args['custom-class'])}\n        ?disabled=${args.disabled}\n        .indeterminate=${args.indeterminate}\n        input-id=${ifDefined(args['input-id'])}\n        input-tab-index=${ifDefined(args['input-tab-index'])}\n        label=${ifDefined(args.label)}\n        name=${ifDefined(args.name)}\n        ?required=${args.required}\n        size=${ifDefined(args.size)}\n        .value=${args.value}\n      ></modus-wc-checkbox>\n    "
    ],
    "variants": [],
    "prop_usage": {
      "label": [
        "Checkbox"
      ]
    }
  },
  "tag_name": "modus-wc-checkbox"
}
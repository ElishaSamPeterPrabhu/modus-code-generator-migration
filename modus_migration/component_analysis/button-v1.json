{
  "component_name": "modus-button",
  "version": "v1",
  "props": [
    {
      "name": "ariaDisabled",
      "description": "/** (optional) The button's aria-disabled state. */",
      "type": "string | null"
    },
    {
      "name": "ariaLabel",
      "description": "/** (optional) The button's aria-disabled state. */",
      "type": "string | null"
    },
    {
      "name": "buttonStyle",
      "description": "/** (optional) The button's aria-disabled state. */",
      "type": "ButtonStyle"
    },
    {
      "name": "color",
      "description": "/** (optional) The button's aria-disabled state. */",
      "type": "ButtonColor"
    },
    {
      "name": "disabled",
      "description": "/** (optional) The button's aria-disabled state. */",
      "type": "boolean"
    },
    {
      "name": "iconOnly",
      "description": "/** (optional) The button's aria-disabled state. */",
      "type": "string"
    },
    {
      "name": "leftIcon",
      "description": "/** (optional) The button's aria-disabled state. */",
      "type": "string"
    },
    {
      "name": "rightIcon",
      "description": "/** (optional) The button's aria-disabled state. */",
      "type": "string"
    },
    {
      "name": "size",
      "description": "/** (optional) The button's aria-disabled state. */",
      "type": "ButtonSize"
    },
    {
      "name": "showCaret",
      "description": "/** (optional) The button's aria-disabled state. */",
      "type": "boolean"
    },
    {
      "name": "type",
      "description": "/** (optional) The button's aria-disabled state. */",
      "type": "ButtonType"
    },
    {
      "name": "criticalAction",
      "description": "/** (optional) The button's aria-disabled state. */",
      "type": "boolean"
    }
  ],
  "events": [],
  "slots": [],
  "default_values": {
    "ariaDisabled": "{\n          this.isCriticalAction()\n            ? 'This is a critical action button. Press and hold to confirm.'\n            : this.ariaLabel || undefined\n        }\n        aria-pressed={this.pressed ? 'true' : undefined}\n        class={className}\n        disabled={this.disabled}\n        onClick={() => {\n          if (!this.disabled && !this.isCriticalAction()) {\n            this.buttonClick.emit()",
    "buttonStyle": "'fill'",
    "color": "'primary'",
    "disabled": "{this.ariaDisabled ? this.ariaDisabled : this.disabled ? 'true' : undefined}\n        aria-label={\n          this.isCriticalAction()\n            ? 'This is a critical action button. Press and hold to confirm.'\n            : this.ariaLabel || undefined\n        }\n        aria-pressed={this.pressed ? 'true' : undefined}\n        class={className}\n        disabled={this.disabled}\n        onClick={() => {\n          if (!this.disabled && !this.isCriticalAction()) {\n            this.buttonClick.emit()",
    "iconOnly": "\"24\" icon=\"caret_down\"></ModusIconMap>}\n        {this.isCriticalAction() && (\n          <span class=\"progress-live-region\" aria-live=\"polite\" aria-atomic=\"true\" role=\"status\">\n            {this.progressState.progressWidth > 0 && `${Math.floor(this.progressState.progressWidth)}% complete`}\n          </span>\n        )}\n      </button>\n    )",
    "size": "'medium'",
    "type": "'button'"
  },
  "documentation": "\n\n--- modus-button-storybook-docs.mdx ---\n\nimport { Anchor } from '@storybook/addon-docs';\n\n# Button\n\n---\n\n[Modus Button](https://modus.trimble.com/components/web/buttons/) web components are wrappers around native `<button>` elements. They are referenced using the `<modus-button>` custom HTML element.\nThis component utilizes the slot element, allowing you to render your own HTML in the button.\n\n#### Implementation Details\n\nFor Text Buttons and Icon with Text Buttons,\n\n- Solid buttons supports all the given colors.\n- Outline buttons only support `primary` and `secondary` colors.\n- Borderless buttons only support `primary` color.\n\nFor Icon only Buttons,\n\n- Outline buttons only support `primary` and `secondary` colors.\n\n<Anchor storyId=\"components-button--default\" />\n\n### Default\n\n<modus-button color=\"primary\">Primary</modus-button>\n<modus-button color=\"secondary\">Secondary</modus-button>\n<modus-button color=\"tertiary\">Tertiary</modus-button>\n\n<modus-button size=\"small\" color=\"primary\">Small</modus-button>\n<modus-button size=\"large\" color=\"primary\">Large</modus-button>\n\n### Loading Button\n\n<modus-button color=\"primary\" disabled>\n  <div style={{ display: 'flex', alignItems: 'center', gap: '2px' }}>\n    <modus-spinner color=\"white\" size=\".6rem\"></modus-spinner>\n    &nbsp;Loading...\n  </div>\n</modus-button>\n\n<Anchor storyId=\"components-button--borderless\" />\n\n### Borderless\n\n<modus-button button-style=\"borderless\">Borderless</modus-button>\n\n<Anchor storyId=\"components-button--outline\" />\n\n### Outline\n\n<modus-button button-style=\"outline\" color=\"primary\">Outline</modus-button>\n<modus-button button-style=\"outline\" color=\"secondary\">Outline</modus-button>\n\n```html\n<modus-button color=\"primary\">Primary</modus-button>\n<modus-button color=\"secondary\">Secondary</modus-button>\n<modus-button color=\"tertiary\">Tertiary</modus-button>\n\n<modus-button size=\"small\" color=\"primary\">Small</modus-button>\n<modus-button size=\"large\" color=\"primary\">Large</modus-button>\n\n<modus-button color=\"primary\" disabled>\n  <modus-spinner color=\"white\" size=\".5rem\"></modus-spinner>\n  &nbsp;Loading...\n</modus-button>\n\n<modus-button button-style=\"borderless\">Borderless</modus-button>\n\n<modus-button button-style=\"outline\" color=\"primary\">Outline</modus-button>\n<modus-button button-style=\"outline\" color=\"secondary\">Outline</modus-button>\n```\n\n<Anchor storyId=\"components-button--icon-with-text\" />\n\n### Icon with Text Button\n\n<modus-button size=\"small\" left-icon=\"notifications\">Primary</modus-button>\n<modus-button color=\"secondary\" right-icon=\"notifications\">Secondary</modus-button>\n<modus-button size=\"large\" left-icon=\"notifications\" color=\"tertiary\" right-icon=\"notifications\">Tertiary</modus-button>\n\n<Anchor storyId=\"components-button--icon-only\" />\n\n### Icon Only Button\n\n#### Solid\n\n<modus-button size=\"small\" color=\"primary\" icon-only=\"notifications\" aria-label=\"Notifications\"></modus-button>\n<modus-button color=\"secondary\" icon-only=\"notifications\" aria-label=\"Notifications\"></modus-button>\n<modus-button size=\"large\" color=\"tertiary\" icon-only=\"notifications\" aria-label=\"Notifications\"></modus-button>\n\n#### Outline\n\n<modus-button button-style=\"outline\" color=\"primary\" icon-only=\"notifications\" aria-label=\"Notifications\"></modus-button>\n<modus-button button-style=\"outline\" color=\"secondary\" icon-only=\"notifications\" aria-label=\"Notifications\"></modus-button>\n\n#### Borderless\n\n<modus-button button-style=\"borderless\" color=\"primary\" icon-only=\"notifications\" aria-label=\"Notifications\"></modus-button>\n<modus-button button-style=\"borderless\" color=\"secondary\" icon-only=\"notifications\" aria-label=\"Notifications\"></modus-button>\n<modus-button button-style=\"borderless\" color=\"tertiary\" icon-only=\"notifications\" aria-label=\"Notifications\"></modus-button>\n\n```html\n<!-- Icon with Text Buttons -->\n<modus-button size=\"small\" left-icon=\"notifications\">Primary</modus-button>\n<modus-button color=\"secondary\" right-icon=\"notifications\">Secondary</modus-button>\n<modus-button size=\"large\" left-icon=\"notifications\" color=\"tertiary\" right-icon=\"notifications\">Tertiary</modus-button>\n\n<!-- Icon only Buttons - Default(Fill) -->\n<modus-button size=\"small\" color=\"primary\" icon-only=\"notifications\" aria-label=\"Notifications\"></modus-button>\n<modus-button color=\"secondary\" icon-only=\"notifications\" aria-label=\"Notifications\"></modus-button>\n<modus-button size=\"large\" color=\"tertiary\" icon-only=\"notifications\" aria-label=\"Notifications\"></modus-button>\n\n<!-- Icon only Buttons - Outline -->\n<modus-button button-style=\"outline\" color=\"primary\" icon-only=\"notifications\" aria-label=\"Notifications\"></modus-button>\n<modus-button button-style=\"outline\" color=\"secondary\" icon-only=\"notifications\" aria-label=\"Notifications\"></modus-button>\n\n<!-- Icon only Buttons - Borderless -->\n<modus-button button-style=\"borderless\" color=\"primary\" icon-only=\"notifications\" aria-label=\"Notifications\"></modus-button>\n<modus-button\n  button-style=\"borderless\"\n  color=\"secondary\"\n  icon-only=\"notifications\"\n  aria-label=\"Notifications\"></modus-button>\n<modus-button button-style=\"borderless\" color=\"tertiary\" icon-only=\"notifications\" aria-label=\"Notifications\"></modus-button>\n```\n\n<Anchor storyId=\"components-button--with-caret\" />\n\n### With Caret Icon\n\nUsers can choose to show a caret icon at the right side of the button using `show-caret`. Note: Only one icon should be added to the right position, which means if `show-caret` is `true`, `right-icon` will not be effective.\n\n<modus-button color=\"primary\" show-caret=\"true\">Primary</modus-button>\n<modus-button color=\"secondary\" button-style=\"borderless\"  icon-only=\"notifications\" show-caret=\"true\"></modus-button>\n\n```html\n<modus-button color=\"primary\" show-caret=\"true\">Primary</modus-button>\n<modus-button color=\"secondary\" button-style=\"borderless\" icon-only=\"notifications\" show-caret=\"true\"></modus-button>\n```\n\n### Special Button\n\nOnly use in special cases and sparingly within an otherwise blue/gray UI in order to bring more attention to a particular action. It should not be used with primary or danger buttons. It does not support borderless or outline variants.\n\n<modus-button color=\"special\" >Button</modus-button>\n<modus-button disabled color=\"special\">Disabled</modus-button>\n\n```html\n<modus-button color=\"special\">Button</modus-button> <modus-button disabled color=\"special\">Disabled</modus-button>\n```\n\n### Danger Button\n\nThe danger color variant is used for alerting or critical actions. It does not support borderless or outline variants.\n\n<modus-button color=\"danger\" >Button</modus-button>\n<modus-button disabled color=\"danger\">Disabled</modus-button>\n\n```html\n<modus-button color=\"danger\">Button</modus-button> <modus-button disabled color=\"danger\">Disabled</modus-button>\n```\n\n### Critical Action Button\n\nCritical action buttons require users to press and hold for 3 seconds in order to trigger a critical action that should only be performed with clear intent. Only supported with a color of `danger` and `fill` variant. It has a progress animation when pressed and held.\n\n<modus-button color=\"danger\" critical-action>Critical Action</modus-button>\n<modus-button disabled color=\"danger\" critical-action>Disabled</modus-button>\n\n```html\n<modus-button color=\"danger\" critical-action>Critical Action</modus-button>\n<modus-button disabled color=\"danger\" critical-action>Disabled</modus-button>\n```\n\n#### Accessibility Warning:\n\nThe critical action button is currently not accessible on touch screen devices as it does not respond to taps or long presses.\n\n### Properties\n\n| Property         | Attribute         | Description                                                                                | Type                                                      | Default     |\n| ---------------- | ----------------- | ------------------------------------------------------------------------------------------ | --------------------------------------------------------- | ----------- |\n| `ariaDisabled`   | `aria-disabled`   | (optional) The button's `aria-disabled` state.                                             | `string`                                                  | `undefined` |\n| `ariaLabel`      | `aria-label`      | (optional) The button's aria-label.                                                        | `string`                                                  | `undefined` |\n| `buttonStyle`    | `button-style`    | (optional) The style of the button                                                         | `\"borderless\", \"fill\", \"outline\"`                         | `'fill'`    |\n| `color`          | `color`           | (optional) The color of the button                                                         | `\"danger\", \"primary\", \"secondary\", \"tertiary\", \"special\"` | `'primary'` |\n| `criticalAction` | `critical-action` | (optional) Enable progress animation for danger button                                     | `boolean`                                                 | `undefined` |\n| `disabled`       | `disabled`        | (optional) Disables the button.                                                            | `boolean`                                                 | `undefined` |\n| `iconOnly`       | `icon-only`       | (optional) Takes the icon name and renders an icon-only button.                            | `string`                                                  | `undefined` |\n| `leftIcon`       | `left-icon`       | (optional) Takes the icon name and shows the icon aligned to the left of the button text.  | `string`                                                  | `undefined` |\n| `rightIcon`      | `right-icon`      | (optional) Takes the icon name and shows the icon aligned to the right of the button text. | `string`                                                  | `undefined` |\n| `showCaret`      | `show-caret`      | (optional) Shows a caret icon right side of the button.                                    | `boolean`                                                 | `undefined` |\n| `size`           | `size`            | (optional) The size of the button.                                                         | `\"large\", \"medium\", \"small\"`                              | `'medium'`  |\n| `type`           | `type`            | (optional) The type of the button.                                                         | `\"button\", \"reset\", \"submit\"`                             | `'button'`  |\n\n### DOM Events\n\n| Event         | Description                          | Type               |\n| ------------- | ------------------------------------ | ------------------ |\n| `buttonClick` | An event that fires on button click. | `CustomEvent<any>` |\n\n### Methods\n\n| Method name   | Description      | Parameter | Return          |\n| ------------- | ---------------- | --------- | --------------- |\n| `focusButton` | Focus the Button |           | `Promise<void>` |\n\n### Accessibility\n\n- Button gets an `aria-label` provided by the `aria-label` property input.\n- Button gets an `aria-disabled` set to whether Button is disabled.\n- Button gets an `aria-pressed` set to whether Button is pressed.\n- When Button has focus, <kbd>Space</kbd> or <kbd>Enter</kbd> emit `buttonClick` event.\n",
  "storybook_content": "\n\n--- modus-button.stories.tsx ---\n\nimport { html } from 'lit-html';\n// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-button-storybook-docs.mdx';\n\nimport { withActions } from '@storybook/addon-actions/decorator';\n\nexport default {\n  title: 'Components/Button',\n  argTypes: {\n    ariaDisabled: {\n      name: 'aria-disabled',\n      description: \"The button's aria-disabled state\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    ariaLabel: {\n      name: 'aria-label',\n      description: \"The button's aria-label\",\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'string' },\n      },\n    },\n    buttonStyle: {\n      name: 'button-style',\n      options: ['borderless', 'fill', 'outline'],\n      type: 'select',\n      description: 'The style of the button',\n      table: {\n        defaultValue: { summary: `'fill'` },\n        type: { summary: `'borderless' | 'fill' | 'outline'` },\n      },\n    },\n    color: {\n      options: ['danger', 'primary', 'secondary', 'tertiary', 'special'],\n      type: 'select',\n      description: 'The color of the button',\n      table: {\n        defaultValue: { summary: `'primary'` },\n        type: { summary: `'danger' | 'primary' | 'secondary' | 'tertiary' | 'special'` },\n      },\n    },\n    criticalAction: {\n      name: 'critical-action',\n      description: 'Enable the progress animation for danger button',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    disabled: {\n      description: 'Whether the button is disabled',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    size: {\n      options: ['small', 'medium', 'large'],\n      type: 'select',\n      description: 'The size of the button',\n      table: {\n        defaultValue: { summary: `'medium'` },\n        type: { summary: `'small' | 'medium' | 'large'` },\n      },\n    },\n    showCaret: {\n      description: 'Shows a caret icon right side of the button',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    iconOnly: {\n      name: 'icon-only',\n      description: 'Takes the icon name and renders an icon-only button',\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    leftIcon: {\n      name: 'left-icon',\n      description: 'Takes the icon name and shows the icon aligned to the left of the button text',\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    rightIcon: {\n      name: 'right-icon',\n      description: 'Takes the icon name and shows the icon aligned to the right of the button text',\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n  },\n  parameters: {\n    controls: { expanded: true, sort: 'alpha' },\n    actions: {\n      handles: ['buttonClick modus-button'],\n    },\n    docs: {\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n    },\n    design: {\n      type: 'figma',\n      url: 'https://www.figma.com/design/wyfVJUHWRMkeCfdB38HFEE/Modus---Web?node-id=1346-14&m=dev',\n    },\n  },\n  decorators: [withActions],\n};\n\nconst DefaultTemplate = ({\n  ariaDisabled,\n  ariaLabel,\n  buttonStyle,\n  color,\n  criticalAction,\n  disabled,\n  size,\n  leftIcon,\n  rightIcon,\n  iconOnly,\n  showCaret,\n  label,\n}) => html`\n  <modus-button\n    aria-disabled=${ariaDisabled}\n    aria-label=${ariaLabel}\n    button-style=${buttonStyle}\n    color=${color}\n    ?disabled=${disabled}\n    critical-action=${criticalAction}\n    size=${size}\n    left-icon=${leftIcon}\n    right-icon=${rightIcon}\n    icon-only=${iconOnly}\n    show-caret=${showCaret}>\n    ${label}\n  </modus-button>\n`;\n\nconst DefaultTemplateArgs = {\n  ariaDisabled: 'false',\n  ariaLabel: '',\n  buttonStyle: 'fill',\n  color: 'primary',\n  disabled: false,\n  size: 'medium',\n  leftIcon: '',\n  rightIcon: '',\n  iconOnly: '',\n  showCaret: false,\n  label: 'Default',\n  criticalAction: false,\n};\n\nexport const Default = DefaultTemplate.bind({});\nDefault.args = { ...DefaultTemplateArgs };\n\nexport const Borderless = DefaultTemplate.bind({});\nBorderless.args = { ...DefaultTemplateArgs, buttonStyle: 'borderless', label: 'Borderless' };\n\nexport const Outline = DefaultTemplate.bind({});\nOutline.args = { ...DefaultTemplateArgs, buttonStyle: 'outline', label: 'Outline' };\n\nexport const IconWithText = DefaultTemplate.bind({});\nIconWithText.args = { ...DefaultTemplateArgs, label: 'Default', leftIcon: 'notifications' };\n\nexport const IconOnly = DefaultTemplate.bind({});\nIconOnly.args = {\n  ...DefaultTemplateArgs,\n  ariaLabel: 'Notifications',\n  ariaDisabled: false,\n  label: '',\n  buttonStyle: 'borderless',\n  color: 'secondary',\n  size: 'large',\n  iconOnly: 'notifications',\n  showCaret: false,\n};\n\nexport const WithCaret = DefaultTemplate.bind({});\nWithCaret.args = { ...DefaultTemplateArgs, label: 'Primary', color: 'primary', disabled: false, showCaret: true };\n\nexport const SpecialButton = DefaultTemplate.bind({});\nSpecialButton.args = { ...DefaultTemplateArgs, label: 'Button', color: 'special' };\n\nexport const DangerButton = DefaultTemplate.bind({});\nDangerButton.args = { ...DefaultTemplateArgs, label: 'Danger', color: 'danger' };\n\nexport const CriticalActionButton = DefaultTemplate.bind({});\nCriticalActionButton.args = { ...DefaultTemplateArgs, label: 'Critical Action', color: 'danger', criticalAction: true };\n",
  "storybook": {
    "examples": [
      "<modus-button\n    aria-disabled=${ariaDisabled}\n    aria-label=${ariaLabel}\n    button-style=${buttonStyle}\n    color=${color}\n    ?disabled=${disabled}\n    critical-action=${criticalAction}\n    size=${size}\n    left-icon=${leftIcon}\n    right-icon=${rightIcon}\n    icon-only=${iconOnly}\n    show-caret=${showCaret}>\n    ${label}\n  </modus-button>",
      "\n  <modus-button\n    aria-disabled=${ariaDisabled}\n    aria-label=${ariaLabel}\n    button-style=${buttonStyle}\n    color=${color}\n    ?disabled=${disabled}\n    critical-action=${criticalAction}\n    size=${size}\n    left-icon=${leftIcon}\n    right-icon=${rightIcon}\n    icon-only=${iconOnly}\n    show-caret=${showCaret}>\n    ${label}\n  </modus-button>\n"
    ],
    "variants": [],
    "prop_usage": {}
  },
  "tag_name": "modus-button"
}
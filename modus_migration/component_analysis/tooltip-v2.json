{
  "component_name": "modus-wc-tooltip",
  "version": "v2",
  "props": [
    {
      "name": "content",
      "description": "/**\n * A customizable tooltip component used to create tooltips with different content.\n *\n * The tooltip can be dismissed by pressing the Escape key when hovering over it.\n * When forceOpen is enabled, the tooltip will remain open and can only be closed by setting forceOpen to false.\n */\n@Component({\n  tag: 'modus-wc-tooltip',\n  styleUrl: 'modus-wc-tooltip.scss',\n  shadow: false,\n})\nexport class ModusWcTooltip {\n  private inheritedAttributes: Attributes = {};\n  private popperInstance: PopperInstance | null = null;\n  private tooltipElement: HTMLDivElement | null = null;\n  private triggerElement: HTMLElement | null = null;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The text content of the tooltip. */",
      "type": "string"
    },
    {
      "name": "customClass",
      "description": "/**\n * A customizable tooltip component used to create tooltips with different content.\n *\n * The tooltip can be dismissed by pressing the Escape key when hovering over it.\n * When forceOpen is enabled, the tooltip will remain open and can only be closed by setting forceOpen to false.\n */\n@Component({\n  tag: 'modus-wc-tooltip',\n  styleUrl: 'modus-wc-tooltip.scss',\n  shadow: false,\n})\nexport class ModusWcTooltip {\n  private inheritedAttributes: Attributes = {};\n  private popperInstance: PopperInstance | null = null;\n  private tooltipElement: HTMLDivElement | null = null;\n  private triggerElement: HTMLElement | null = null;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The text content of the tooltip. */",
      "type": ": string"
    },
    {
      "name": "disabled",
      "description": "/**\n * A customizable tooltip component used to create tooltips with different content.\n *\n * The tooltip can be dismissed by pressing the Escape key when hovering over it.\n * When forceOpen is enabled, the tooltip will remain open and can only be closed by setting forceOpen to false.\n */\n@Component({\n  tag: 'modus-wc-tooltip',\n  styleUrl: 'modus-wc-tooltip.scss',\n  shadow: false,\n})\nexport class ModusWcTooltip {\n  private inheritedAttributes: Attributes = {};\n  private popperInstance: PopperInstance | null = null;\n  private tooltipElement: HTMLDivElement | null = null;\n  private triggerElement: HTMLElement | null = null;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The text content of the tooltip. */",
      "type": ": boolean"
    },
    {
      "name": "forceOpen",
      "description": "/**\n * A customizable tooltip component used to create tooltips with different content.\n *\n * The tooltip can be dismissed by pressing the Escape key when hovering over it.\n * When forceOpen is enabled, the tooltip will remain open and can only be closed by setting forceOpen to false.\n */\n@Component({\n  tag: 'modus-wc-tooltip',\n  styleUrl: 'modus-wc-tooltip.scss',\n  shadow: false,\n})\nexport class ModusWcTooltip {\n  private inheritedAttributes: Attributes = {};\n  private popperInstance: PopperInstance | null = null;\n  private tooltipElement: HTMLDivElement | null = null;\n  private triggerElement: HTMLElement | null = null;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The text content of the tooltip. */",
      "type": ": boolean"
    },
    {
      "name": "tooltipId",
      "description": "/**\n * A customizable tooltip component used to create tooltips with different content.\n *\n * The tooltip can be dismissed by pressing the Escape key when hovering over it.\n * When forceOpen is enabled, the tooltip will remain open and can only be closed by setting forceOpen to false.\n */\n@Component({\n  tag: 'modus-wc-tooltip',\n  styleUrl: 'modus-wc-tooltip.scss',\n  shadow: false,\n})\nexport class ModusWcTooltip {\n  private inheritedAttributes: Attributes = {};\n  private popperInstance: PopperInstance | null = null;\n  private tooltipElement: HTMLDivElement | null = null;\n  private triggerElement: HTMLElement | null = null;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The text content of the tooltip. */",
      "type": ": string"
    },
    {
      "name": "position",
      "description": "/**\n * A customizable tooltip component used to create tooltips with different content.\n *\n * The tooltip can be dismissed by pressing the Escape key when hovering over it.\n * When forceOpen is enabled, the tooltip will remain open and can only be closed by setting forceOpen to false.\n */\n@Component({\n  tag: 'modus-wc-tooltip',\n  styleUrl: 'modus-wc-tooltip.scss',\n  shadow: false,\n})\nexport class ModusWcTooltip {\n  private inheritedAttributes: Attributes = {};\n  private popperInstance: PopperInstance | null = null;\n  private tooltipElement: HTMLDivElement | null = null;\n  private triggerElement: HTMLElement | null = null;\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** The text content of the tooltip. */",
      "type": ": 'auto' | 'top' | 'right' | 'bottom' | 'left'"
    }
  ],
  "events": [],
  "slots": [],
  "default_values": {
    "content": "''",
    "customClass": "''",
    "disabled": "false",
    "position": "'auto'"
  },
  "documentation": "\n\n--- modus-wc-tooltip.stories.ts ---\n\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\n\ninterface TooltipArgs {\n  content?: string;\n  'custom-class'?: string;\n  disabled?: boolean;\n  'force-open'?: boolean;\n  'tooltip-id'?: string;\n  position: 'auto' | 'top' | 'right' | 'bottom' | 'left';\n}\n\nconst meta: Meta<TooltipArgs> = {\n  title: 'Components/Tooltip',\n  component: 'modus-wc-tooltip',\n  args: {\n    content: 'Tooltip content',\n    position: 'auto',\n  },\n  argTypes: {\n    position: {\n      control: { type: 'select' },\n      options: ['auto', 'top', 'right', 'left', 'bottom'],\n    },\n  },\n  parameters: {\n    docs: {\n      description: {\n        component: `\nA customizable tooltip component used to create tooltips with different content.\n\n### Features\n- **Escape Key Dismissal**: Tooltips can be dismissed by pressing the Escape key\n- **Auto-positioning**: Automatically positions the tooltip to avoid viewport edges\n- **Customizable**: Supports custom CSS classes and positioning\n\n### Keyboard Interaction\n- Press **Escape** to dismiss the tooltip while it's visible\n- The tooltip will automatically re-enable on mouse enter\n        `,\n      },\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<TooltipArgs>;\n\nconst Template: Story = {\n  parameters: {\n    actions: {\n      handles: ['dismissEscape'],\n    },\n  },\n  render: (args) => {\n    // prettier-ignore\n    return html`\n      <modus-wc-tooltip\n        content=${ifDefined(args.content)}\n        custom-class=\"${ifDefined(args['custom-class'])}\"\n        ?disabled=\"${args.disabled}\"\n        ?force-open=\"${args['force-open']}\"\n        tooltip-id=\"${ifDefined(args['tooltip-id'])}\"\n        position=${ifDefined(args.position)}\n      >\n        <modus-wc-badge>Hover</modus-wc-badge>\n      </modus-wc-tooltip>\n    `;\n  },\n};\n\nexport const Default: Story = { ...Template };\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - In 1.0 tooltip positioning was handled by Popper.js. In 2.0, positioning is handled using CSS.\n  - The \\`text\\` prop has been renamed to \\`content\\`.\n\n#### Prop Mapping\n\n| 1.0 Prop    | 2.0 Prop    | Notes                                    |\n|-------------|-------------|------------------------------------------|\n| aria-label  | aria-label  |                                          |\n| disabled    | disabled    |                                          |\n| position    | position    | Added \\`auto\\` option as default value   |\n| text        | content     |                                          |\n        `,\n      },\n    },\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  render: () => html`<div></div>`,\n};\n",
  "storybook": {
    "examples": [
      "<modus-wc-badge>Hover</modus-wc-badge>",
      "\n      <modus-wc-tooltip\n        content=${ifDefined(args.content)}\n        custom-class=\"${ifDefined(args['custom-class'])}\"\n        ?disabled=\"${args.disabled}\"\n        ?force-open=\"${args['force-open']}\"\n        tooltip-id=\"${ifDefined(args['tooltip-id'])}\"\n        position=${ifDefined(args.position)}\n      >\n        <modus-wc-badge>Hover</modus-wc-badge>\n      </modus-wc-tooltip>\n    "
    ],
    "variants": [],
    "prop_usage": {
      "class": [
        "${ifDefined(args["
      ],
      "disabled": [
        "${args.disabled}"
      ],
      "open": [
        "${args["
      ],
      "id": [
        "${ifDefined(args["
      ]
    }
  },
  "tag_name": "modus-wc-tooltip"
}
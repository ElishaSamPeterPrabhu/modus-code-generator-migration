{
  "component_name": "modus-wc-date",
  "version": "v2",
  "props": [
    {
      "name": "bordered",
      "description": "/**\n * A customizable date picker component used to create date inputs.\n *\n * Adheres to WCAG 2.2 standards.\n */\n@Component({\n  tag: 'modus-wc-date',\n  styleUrl: 'modus-wc-date.scss',\n  shadow: false,\n})\nexport class ModusWcDate {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */",
      "type": ": boolean"
    },
    {
      "name": "customClass",
      "description": "/**\n * A customizable date picker component used to create date inputs.\n *\n * Adheres to WCAG 2.2 standards.\n */\n@Component({\n  tag: 'modus-wc-date',\n  styleUrl: 'modus-wc-date.scss',\n  shadow: false,\n})\nexport class ModusWcDate {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */",
      "type": ": string"
    },
    {
      "name": "disabled",
      "description": "/**\n * A customizable date picker component used to create date inputs.\n *\n * Adheres to WCAG 2.2 standards.\n */\n@Component({\n  tag: 'modus-wc-date',\n  styleUrl: 'modus-wc-date.scss',\n  shadow: false,\n})\nexport class ModusWcDate {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */",
      "type": ": boolean"
    },
    {
      "name": "feedback",
      "description": "/**\n * A customizable date picker component used to create date inputs.\n *\n * Adheres to WCAG 2.2 standards.\n */\n@Component({\n  tag: 'modus-wc-date',\n  styleUrl: 'modus-wc-date.scss',\n  shadow: false,\n})\nexport class ModusWcDate {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */",
      "type": ": IInputFeedbackProp"
    },
    {
      "name": "inputId",
      "description": "/**\n * A customizable date picker component used to create date inputs.\n *\n * Adheres to WCAG 2.2 standards.\n */\n@Component({\n  tag: 'modus-wc-date',\n  styleUrl: 'modus-wc-date.scss',\n  shadow: false,\n})\nexport class ModusWcDate {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */",
      "type": ": string"
    },
    {
      "name": "inputTabIndex",
      "description": "/**\n * A customizable date picker component used to create date inputs.\n *\n * Adheres to WCAG 2.2 standards.\n */\n@Component({\n  tag: 'modus-wc-date',\n  styleUrl: 'modus-wc-date.scss',\n  shadow: false,\n})\nexport class ModusWcDate {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */",
      "type": ": number"
    },
    {
      "name": "label",
      "description": "/**\n * A customizable date picker component used to create date inputs.\n *\n * Adheres to WCAG 2.2 standards.\n */\n@Component({\n  tag: 'modus-wc-date',\n  styleUrl: 'modus-wc-date.scss',\n  shadow: false,\n})\nexport class ModusWcDate {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */",
      "type": ": string"
    },
    {
      "name": "max",
      "description": "/**\n * A customizable date picker component used to create date inputs.\n *\n * Adheres to WCAG 2.2 standards.\n */\n@Component({\n  tag: 'modus-wc-date',\n  styleUrl: 'modus-wc-date.scss',\n  shadow: false,\n})\nexport class ModusWcDate {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */",
      "type": ": string"
    },
    {
      "name": "min",
      "description": "/**\n * A customizable date picker component used to create date inputs.\n *\n * Adheres to WCAG 2.2 standards.\n */\n@Component({\n  tag: 'modus-wc-date',\n  styleUrl: 'modus-wc-date.scss',\n  shadow: false,\n})\nexport class ModusWcDate {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */",
      "type": ": string"
    },
    {
      "name": "name",
      "description": "/**\n * A customizable date picker component used to create date inputs.\n *\n * Adheres to WCAG 2.2 standards.\n */\n@Component({\n  tag: 'modus-wc-date',\n  styleUrl: 'modus-wc-date.scss',\n  shadow: false,\n})\nexport class ModusWcDate {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */",
      "type": ": string"
    },
    {
      "name": "readOnly",
      "description": "/**\n * A customizable date picker component used to create date inputs.\n *\n * Adheres to WCAG 2.2 standards.\n */\n@Component({\n  tag: 'modus-wc-date',\n  styleUrl: 'modus-wc-date.scss',\n  shadow: false,\n})\nexport class ModusWcDate {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */",
      "type": ": boolean"
    },
    {
      "name": "required",
      "description": "/**\n * A customizable date picker component used to create date inputs.\n *\n * Adheres to WCAG 2.2 standards.\n */\n@Component({\n  tag: 'modus-wc-date',\n  styleUrl: 'modus-wc-date.scss',\n  shadow: false,\n})\nexport class ModusWcDate {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */",
      "type": ": boolean"
    },
    {
      "name": "size",
      "description": "/**\n * A customizable date picker component used to create date inputs.\n *\n * Adheres to WCAG 2.2 standards.\n */\n@Component({\n  tag: 'modus-wc-date',\n  styleUrl: 'modus-wc-date.scss',\n  shadow: false,\n})\nexport class ModusWcDate {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */",
      "type": ": ModusSize"
    },
    {
      "name": "value",
      "description": "/**\n * A customizable date picker component used to create date inputs.\n *\n * Adheres to WCAG 2.2 standards.\n */\n@Component({\n  tag: 'modus-wc-date',\n  styleUrl: 'modus-wc-date.scss',\n  shadow: false,\n})\nexport class ModusWcDate {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */",
      "type": "string"
    }
  ],
  "events": [
    {
      "name": "inputBlur",
      "description": "/**\n * A customizable date picker component used to create date inputs.\n *\n * Adheres to WCAG 2.2 standards.\n */\n@Component({\n  tag: 'modus-wc-date',\n  styleUrl: 'modus-wc-date.scss',\n  shadow: false,\n})\nexport class ModusWcDate {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */\n  @Prop() bordered?: boolean = true;\n\n  /** Custom CSS class to apply to the input. */\n  @Prop() customClass?: string = '';\n\n  /** Whether the form control is disabled. */\n  @Prop() disabled?: boolean = false;\n\n  /** Feedback to render below the input. */\n  @Prop() feedback?: IInputFeedbackProp;\n\n  /** The ID of the input element. */\n  @Prop() inputId?: string;\n\n  /** Determine the control's relative ordering for sequential focus navigation (typically with the Tab key). */\n  @Prop() inputTabIndex?: number;\n\n  /** The text to display within the label. */\n  @Prop() label?: string;\n\n  /** Maximum date value. */\n  @Prop() max?: string;\n\n  /** Minimum date value. */\n  @Prop() min?: string;\n\n  /** Name of the form control. Submitted with the form as part of a name/value pair. */\n  @Prop() name?: string;\n\n  /** Whether the value is editable. */\n  @Prop() readOnly?: boolean = false;\n\n  /** A value is required or must be checked for the form to be submittable. */\n  @Prop() required?: boolean = false;\n\n  /** The size of the input. */\n  @Prop() size?: ModusSize = 'md';\n\n  /** The value of the control (yyyy-mm-dd). */\n  @Prop({ mutable: true, reflect: true }) value: string = '';\n\n  /** Event emitted when the input loses focus. */"
    },
    {
      "name": "inputChange",
      "description": "/**\n * A customizable date picker component used to create date inputs.\n *\n * Adheres to WCAG 2.2 standards.\n */\n@Component({\n  tag: 'modus-wc-date',\n  styleUrl: 'modus-wc-date.scss',\n  shadow: false,\n})\nexport class ModusWcDate {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */\n  @Prop() bordered?: boolean = true;\n\n  /** Custom CSS class to apply to the input. */\n  @Prop() customClass?: string = '';\n\n  /** Whether the form control is disabled. */\n  @Prop() disabled?: boolean = false;\n\n  /** Feedback to render below the input. */\n  @Prop() feedback?: IInputFeedbackProp;\n\n  /** The ID of the input element. */\n  @Prop() inputId?: string;\n\n  /** Determine the control's relative ordering for sequential focus navigation (typically with the Tab key). */\n  @Prop() inputTabIndex?: number;\n\n  /** The text to display within the label. */\n  @Prop() label?: string;\n\n  /** Maximum date value. */\n  @Prop() max?: string;\n\n  /** Minimum date value. */\n  @Prop() min?: string;\n\n  /** Name of the form control. Submitted with the form as part of a name/value pair. */\n  @Prop() name?: string;\n\n  /** Whether the value is editable. */\n  @Prop() readOnly?: boolean = false;\n\n  /** A value is required or must be checked for the form to be submittable. */\n  @Prop() required?: boolean = false;\n\n  /** The size of the input. */\n  @Prop() size?: ModusSize = 'md';\n\n  /** The value of the control (yyyy-mm-dd). */\n  @Prop({ mutable: true, reflect: true }) value: string = '';\n\n  /** Event emitted when the input loses focus. */"
    },
    {
      "name": "inputFocus",
      "description": "/**\n * A customizable date picker component used to create date inputs.\n *\n * Adheres to WCAG 2.2 standards.\n */\n@Component({\n  tag: 'modus-wc-date',\n  styleUrl: 'modus-wc-date.scss',\n  shadow: false,\n})\nexport class ModusWcDate {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Indicates that the input should have a border. */\n  @Prop() bordered?: boolean = true;\n\n  /** Custom CSS class to apply to the input. */\n  @Prop() customClass?: string = '';\n\n  /** Whether the form control is disabled. */\n  @Prop() disabled?: boolean = false;\n\n  /** Feedback to render below the input. */\n  @Prop() feedback?: IInputFeedbackProp;\n\n  /** The ID of the input element. */\n  @Prop() inputId?: string;\n\n  /** Determine the control's relative ordering for sequential focus navigation (typically with the Tab key). */\n  @Prop() inputTabIndex?: number;\n\n  /** The text to display within the label. */\n  @Prop() label?: string;\n\n  /** Maximum date value. */\n  @Prop() max?: string;\n\n  /** Minimum date value. */\n  @Prop() min?: string;\n\n  /** Name of the form control. Submitted with the form as part of a name/value pair. */\n  @Prop() name?: string;\n\n  /** Whether the value is editable. */\n  @Prop() readOnly?: boolean = false;\n\n  /** A value is required or must be checked for the form to be submittable. */\n  @Prop() required?: boolean = false;\n\n  /** The size of the input. */\n  @Prop() size?: ModusSize = 'md';\n\n  /** The value of the control (yyyy-mm-dd). */\n  @Prop({ mutable: true, reflect: true }) value: string = '';\n\n  /** Event emitted when the input loses focus. */"
    }
  ],
  "slots": [],
  "default_values": {
    "bordered": "true",
    "customClass": "''",
    "disabled": "false",
    "max": "{this.max}\n          min={this.min}\n          name={this.name}\n          onBlur={this.handleBlur}\n          onFocus={this.handleFocus}\n          onInput={this.handleInput}\n          readonly={this.readOnly}\n          required={this.required}\n          tabIndex={this.inputTabIndex}\n          type=\"date\"\n          value={this.value}\n          {...this.inheritedAttributes}\n        />\n        {this.feedback && (\n          <modus-wc-input-feedback\n            level={this.feedback.level}\n            message={this.feedback.message}\n            size={this.size}\n          />\n        )}\n      </Host>\n    )",
    "min": "{this.min}\n          name={this.name}\n          onBlur={this.handleBlur}\n          onFocus={this.handleFocus}\n          onInput={this.handleInput}\n          readonly={this.readOnly}\n          required={this.required}\n          tabIndex={this.inputTabIndex}\n          type=\"date\"\n          value={this.value}\n          {...this.inheritedAttributes}\n        />\n        {this.feedback && (\n          <modus-wc-input-feedback\n            level={this.feedback.level}\n            message={this.feedback.message}\n            size={this.size}\n          />\n        )}\n      </Host>\n    )",
    "name": "{this.name}\n          onBlur={this.handleBlur}\n          onFocus={this.handleFocus}\n          onInput={this.handleInput}\n          readonly={this.readOnly}\n          required={this.required}\n          tabIndex={this.inputTabIndex}\n          type=\"date\"\n          value={this.value}\n          {...this.inheritedAttributes}\n        />\n        {this.feedback && (\n          <modus-wc-input-feedback\n            level={this.feedback.level}\n            message={this.feedback.message}\n            size={this.size}\n          />\n        )}\n      </Host>\n    )",
    "readOnly": "false",
    "required": "false",
    "size": "'md'",
    "value": "''"
  },
  "documentation": "\n\n--- modus-wc-date.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { IInputFeedbackProp, ModusSize } from '../types';\n\ninterface DateArgs {\n  bordered?: boolean;\n  'custom-class'?: string;\n  disabled?: boolean;\n  feedback?: IInputFeedbackProp;\n  'input-id'?: string;\n  'input-tab-index'?: number;\n  label?: string;\n  max?: string;\n  min?: string;\n  name?: string;\n  placeholder?: string;\n  'read-only'?: boolean;\n  required?: boolean;\n  size?: ModusSize;\n  value: string;\n}\n\nconst meta: Meta<DateArgs> = {\n  title: 'Components/Forms/Date',\n  component: 'modus-wc-date',\n  args: {\n    bordered: true,\n    'custom-class': '',\n    disabled: false,\n    label: 'Label',\n    'read-only': false,\n    required: false,\n    size: 'md',\n    value: '',\n  },\n  argTypes: {\n    feedback: {\n      description: 'Feedback prop for input components',\n      table: {\n        type: {\n          detail: `\n            Interface: IInputFeedbackProp\n            Properties:\n            - level ('error' | 'info' | 'success' | 'warning'): The feedback level\n            - message (string, optional): The feedback message\n          `,\n        },\n      },\n    },\n    size: {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg'],\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['inputBlur', 'inputChange', 'inputFocus'],\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<DateArgs>;\n\nexport const Default: Story = {\n  render: (args) => {\n    return html`\n      <modus-wc-date\n        aria-label=\"Date input\"\n        ?bordered=${args.bordered}\n        custom-class=${ifDefined(args['custom-class'])}\n        ?disabled=${args.disabled}\n        .feedback=${args.feedback}\n        input-id=${ifDefined(args['input-id'])}\n        input-tab-index=${ifDefined(args['input-tab-index'])}\n        label=${ifDefined(args.label)}\n        max=${ifDefined(args.max)}\n        min=${ifDefined(args.min)}\n        name=${ifDefined(args.name)}\n        placeholder=${ifDefined(args.placeholder)}\n        ?read-only=${args['read-only']}\n        ?required=${args.required}\n        size=${ifDefined(args.size)}\n        .value=${args.value}\n      ></modus-wc-date>\n    `;\n  },\n};\n\nconst errorFeedback: IInputFeedbackProp = {\n  level: 'error',\n  message: 'Value is required.',\n};\n\nexport const WithErrorFeedback: Story = {\n  render: (args) => html`\n    <modus-wc-date\n      aria-label=\"Date input\"\n      .feedback=${errorFeedback}\n      label=${ifDefined(args.label)}\n      ?required=${true}\n      .value=${args.value}\n    ></modus-wc-date>\n  `,\n};\n\nexport const Migration: Story = {\n  parameters: {\n    docs: {\n      description: {\n        story: `\n#### Breaking Changes\n\n  - In 1.0 input state was maintained by the component. 2.0 components encourage users to follow a controlled\n  input model. See the Form Inputs [documentation]([Angular](?path=/docs/documentation-form-inputs--docs) for\n  additional info and examples.\n  - Format handling is no longer supported. The component now uses the standard HTML date input format (ISO 8601 \\`yyyy-mm-dd\\`).\n  - Size values have changed from verbose names (\\`medium\\`, \\`large\\`) to abbreviations (\\`sm\\`, \\`md\\`, \\`lg\\`).\n\n#### Prop Mapping\n\n| 1.0 Prop           | 2.0 Prop         | Notes                                   |\n|--------------------|------------------|-----------------------------------------|\n| allow-chars-regex  |                  | Not carried over                        |\n| alt-formats        |                  | Not carried over                        |\n| aria-label         | aria-label       |                                         |\n| auto-focus-input   |                  | Not carried over                        |\n| disabled           | disabled         |                                         |\n| disable-validation |                  | Not carried over                        |\n| error-text         | feedback.message | Use \\`feedback\\` level                  |\n| filler-date        |                  | Not carried over                        |\n| format             |                  | Not carried over                        |\n| helper-text        |                  | Not carried over                        |\n| label              | label            |                                         |\n| max                | max              |                                         |\n| min                | min              |                                         |\n| placeholder        |                  | Not carried over                        |\n| read-only          | read-only        |                                         |\n| required           | required         |                                         |\n| show-calendar-icon |                  | Not carried over                        |\n| size               | size             | \\`medium\\` \u2192 \\`md\\`, \\`large\\` \u2192 \\`lg\\` |\n| type               |                  | Not carried over                        |\n| valid-text         | feedback.message | Use \\`feedback\\` level                  |\n| value              | value            |                                         |\n\n#### Event Mapping\n\n| 1.0 Event           | 2.0 Event   | Notes            |\n|---------------------|-------------|------------------|\n| calendarIconClicked |             | Not carried over |\n| dateInputBlur       | inputBlur   |                  |\n| valueChange         | inputChange |                  |\n| valueError          |             | Not carried over |\n        `,\n      },\n    },\n    controls: { disable: true },\n    canvas: { disable: true },\n  },\n  render: () => html`<div></div>`,\n};\n",
  "storybook": {
    "examples": [
      "<modus-wc-date\n        aria-label=\"Date input\"\n        ?bordered=${args.bordered}\n        custom-class=${ifDefined(args['custom-class'])}\n        ?disabled=${args.disabled}\n        .feedback=${args.feedback}\n        input-id=${ifDefined(args['input-id'])}\n        input-tab-index=${ifDefined(args['input-tab-index'])}\n        label=${ifDefined(args.label)}\n        max=${ifDefined(args.max)}\n        min=${ifDefined(args.min)}\n        name=${ifDefined(args.name)}\n        placeholder=${ifDefined(args.placeholder)}\n        ?read-only=${args['read-only']}\n        ?required=${args.required}\n        size=${ifDefined(args.size)}\n        .value=${args.value}\n      ></modus-wc-date>",
      "<modus-wc-date\n      aria-label=\"Date input\"\n      .feedback=${errorFeedback}\n      label=${ifDefined(args.label)}\n      ?required=${true}\n      .value=${args.value}\n    ></modus-wc-date>",
      "\n      <modus-wc-date\n        aria-label=\"Date input\"\n        ?bordered=${args.bordered}\n        custom-class=${ifDefined(args['custom-class'])}\n        ?disabled=${args.disabled}\n        .feedback=${args.feedback}\n        input-id=${ifDefined(args['input-id'])}\n        input-tab-index=${ifDefined(args['input-tab-index'])}\n        label=${ifDefined(args.label)}\n        max=${ifDefined(args.max)}\n        min=${ifDefined(args.min)}\n        name=${ifDefined(args.name)}\n        placeholder=${ifDefined(args.placeholder)}\n        ?read-only=${args['read-only']}\n        ?required=${args.required}\n        size=${ifDefined(args.size)}\n        .value=${args.value}\n      ></modus-wc-date>\n    ",
      "\n    <modus-wc-date\n      aria-label=\"Date input\"\n      .feedback=${errorFeedback}\n      label=${ifDefined(args.label)}\n      ?required=${true}\n      .value=${args.value}\n    ></modus-wc-date>\n  "
    ],
    "variants": [],
    "prop_usage": {
      "label": [
        "Date input"
      ]
    }
  },
  "tag_name": "modus-wc-date"
}
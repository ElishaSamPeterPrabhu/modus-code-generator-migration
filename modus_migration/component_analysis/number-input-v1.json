{
  "component_name": "modus-number-input",
  "version": "v1",
  "props": [
    {
      "name": "ariaLabel",
      "description": "/** Displayed only when the input is not focused. */\n  @State() formattedValue = this.getFormattedValue();\n\n  /** (optional) The input's aria-label. */",
      "type": "string | null"
    },
    {
      "name": "currency",
      "description": "/** Displayed only when the input is not focused. */\n  @State() formattedValue = this.getFormattedValue();\n\n  /** (optional) The input's aria-label. */",
      "type": "string"
    },
    {
      "name": "disabled",
      "description": "/** Displayed only when the input is not focused. */\n  @State() formattedValue = this.getFormattedValue();\n\n  /** (optional) The input's aria-label. */",
      "type": "boolean"
    },
    {
      "name": "errorText",
      "description": "/** Displayed only when the input is not focused. */\n  @State() formattedValue = this.getFormattedValue();\n\n  /** (optional) The input's aria-label. */",
      "type": "string"
    },
    {
      "name": "helperText",
      "description": "/** Displayed only when the input is not focused. */\n  @State() formattedValue = this.getFormattedValue();\n\n  /** (optional) The input's aria-label. */",
      "type": "string"
    },
    {
      "name": "label",
      "description": "/** Displayed only when the input is not focused. */\n  @State() formattedValue = this.getFormattedValue();\n\n  /** (optional) The input's aria-label. */",
      "type": "string"
    },
    {
      "name": "locale",
      "description": "/** Displayed only when the input is not focused. */\n  @State() formattedValue = this.getFormattedValue();\n\n  /** (optional) The input's aria-label. */",
      "type": "string"
    },
    {
      "name": "maxValue",
      "description": "/** Displayed only when the input is not focused. */\n  @State() formattedValue = this.getFormattedValue();\n\n  /** (optional) The input's aria-label. */",
      "type": "number"
    },
    {
      "name": "minValue",
      "description": "/** Displayed only when the input is not focused. */\n  @State() formattedValue = this.getFormattedValue();\n\n  /** (optional) The input's aria-label. */",
      "type": "number"
    },
    {
      "name": "placeholder",
      "description": "/** Displayed only when the input is not focused. */\n  @State() formattedValue = this.getFormattedValue();\n\n  /** (optional) The input's aria-label. */",
      "type": "string"
    },
    {
      "name": "readOnly",
      "description": "/** Displayed only when the input is not focused. */\n  @State() formattedValue = this.getFormattedValue();\n\n  /** (optional) The input's aria-label. */",
      "type": "boolean"
    },
    {
      "name": "required",
      "description": "/** Displayed only when the input is not focused. */\n  @State() formattedValue = this.getFormattedValue();\n\n  /** (optional) The input's aria-label. */",
      "type": "boolean"
    },
    {
      "name": "size",
      "description": "/** Displayed only when the input is not focused. */\n  @State() formattedValue = this.getFormattedValue();\n\n  /** (optional) The input's aria-label. */",
      "type": "'medium' | 'large'"
    },
    {
      "name": "step",
      "description": "/** Displayed only when the input is not focused. */\n  @State() formattedValue = this.getFormattedValue();\n\n  /** (optional) The input's aria-label. */",
      "type": "number"
    },
    {
      "name": "textAlign",
      "description": "/** Displayed only when the input is not focused. */\n  @State() formattedValue = this.getFormattedValue();\n\n  /** (optional) The input's aria-label. */",
      "type": "'left' | 'right'"
    },
    {
      "name": "validText",
      "description": "/** Displayed only when the input is not focused. */\n  @State() formattedValue = this.getFormattedValue();\n\n  /** (optional) The input's aria-label. */",
      "type": "string"
    },
    {
      "name": "value",
      "description": "/** Displayed only when the input is not focused. */\n  @State() formattedValue = this.getFormattedValue();\n\n  /** (optional) The input's aria-label. */",
      "type": "string"
    }
  ],
  "events": [],
  "slots": [],
  "default_values": {
    "disabled": "{this.disabled}\n            max={this.maxValue}\n            min={this.minValue}\n            onInput={() => this.handleOnInput()}\n            onFocusin={this.handleOnFocus}\n            onBlur={this.handleOnBlur}\n            placeholder={this.placeholder}\n            readonly={this.readOnly}\n            ref={(el) => (this.input = el as HTMLInputElement)}\n            step={this.step}\n            tabIndex={0}\n            type={inputType}\n            value={inputType === 'text' ? this.formattedValue : this.value}\n            {...inputAriaProps}></input>\n        </div>\n        {this.errorText ? (\n          <label class=\"sub-text error\">{this.errorText}</label>\n        ) : this.validText ? (\n          <label class=\"sub-text valid\">{this.validText}</label>\n        ) : null}\n      </div>\n    )",
    "errorText": "\"sub-text error\">{this.errorText}</label>\n        ) : this.validText ? (\n          <label class=\"sub-text valid\">{this.validText}</label>\n        ) : null}\n      </div>\n    )",
    "helperText": "\"sub-text helper\">{this.helperText}</label> : null}\n          </div>\n        ) : null}\n        <div class={buildInputContainerClassNames()} part=\"input-container\">\n          <input\n            id={this.inputId}\n            aria-label={this.ariaLabel}\n            aria-invalid={!!this.errorText}\n            aria-required={this.required?.toString()}\n            class={textAlignClassName}\n            disabled={this.disabled}\n            max={this.maxValue}\n            min={this.minValue}\n            onInput={() => this.handleOnInput()}\n            onFocusin={this.handleOnFocus}\n            onBlur={this.handleOnBlur}\n            placeholder={this.placeholder}\n            readonly={this.readOnly}\n            ref={(el) => (this.input = el as HTMLInputElement)}\n            step={this.step}\n            tabIndex={0}\n            type={inputType}\n            value={inputType === 'text' ? this.formattedValue : this.value}\n            {...inputAriaProps}></input>\n        </div>\n        {this.errorText ? (\n          <label class=\"sub-text error\">{this.errorText}</label>\n        ) : this.validText ? (\n          <label class=\"sub-text valid\">{this.validText}</label>\n        ) : null}\n      </div>\n    )",
    "label": "{this.inputId}>{this.label}</label> : null}\n            {this.required ? <span class=\"required\">*</span> : null}\n            {this.helperText ? <label class=\"sub-text helper\">{this.helperText}</label> : null}\n          </div>\n        ) : null}\n        <div class={buildInputContainerClassNames()} part=\"input-container\">\n          <input\n            id={this.inputId}\n            aria-label={this.ariaLabel}\n            aria-invalid={!!this.errorText}\n            aria-required={this.required?.toString()}\n            class={textAlignClassName}\n            disabled={this.disabled}\n            max={this.maxValue}\n            min={this.minValue}\n            onInput={() => this.handleOnInput()}\n            onFocusin={this.handleOnFocus}\n            onBlur={this.handleOnBlur}\n            placeholder={this.placeholder}\n            readonly={this.readOnly}\n            ref={(el) => (this.input = el as HTMLInputElement)}\n            step={this.step}\n            tabIndex={0}\n            type={inputType}\n            value={inputType === 'text' ? this.formattedValue : this.value}\n            {...inputAriaProps}></input>\n        </div>\n        {this.errorText ? (\n          <label class=\"sub-text error\">{this.errorText}</label>\n        ) : this.validText ? (\n          <label class=\"sub-text valid\">{this.validText}</label>\n        ) : null}\n      </div>\n    )",
    "maxValue": "= undefined ? this.maxValue.toString() : undefined,\n            ariaValuemin: this.minValue !== undefined ? this.minValue.toString() : undefined,\n            ariaValuenow: this.value ? parseFloat(this.value).toString() : undefined,\n          }\n        : {}",
    "minValue": "= undefined ? this.minValue.toString() : undefined,\n            ariaValuenow: this.value ? parseFloat(this.value).toString() : undefined,\n          }\n        : {}",
    "placeholder": "{this.placeholder}\n            readonly={this.readOnly}\n            ref={(el) => (this.input = el as HTMLInputElement)}\n            step={this.step}\n            tabIndex={0}\n            type={inputType}\n            value={inputType === 'text' ? this.formattedValue : this.value}\n            {...inputAriaProps}></input>\n        </div>\n        {this.errorText ? (\n          <label class=\"sub-text error\">{this.errorText}</label>\n        ) : this.validText ? (\n          <label class=\"sub-text valid\">{this.validText}</label>\n        ) : null}\n      </div>\n    )",
    "required": "\"label-container\">\n            {this.label ? <label htmlFor={this.inputId}>{this.label}</label> : null}\n            {this.required ? <span class=\"required\">*</span> : null}\n            {this.helperText ? <label class=\"sub-text helper\">{this.helperText}</label> : null}\n          </div>\n        ) : null}\n        <div class={buildInputContainerClassNames()} part=\"input-container\">\n          <input\n            id={this.inputId}\n            aria-label={this.ariaLabel}\n            aria-invalid={!!this.errorText}\n            aria-required={this.required?.toString()}\n            class={textAlignClassName}\n            disabled={this.disabled}\n            max={this.maxValue}\n            min={this.minValue}\n            onInput={() => this.handleOnInput()}\n            onFocusin={this.handleOnFocus}\n            onBlur={this.handleOnBlur}\n            placeholder={this.placeholder}\n            readonly={this.readOnly}\n            ref={(el) => (this.input = el as HTMLInputElement)}\n            step={this.step}\n            tabIndex={0}\n            type={inputType}\n            value={inputType === 'text' ? this.formattedValue : this.value}\n            {...inputAriaProps}></input>\n        </div>\n        {this.errorText ? (\n          <label class=\"sub-text error\">{this.errorText}</label>\n        ) : this.validText ? (\n          <label class=\"sub-text valid\">{this.validText}</label>\n        ) : null}\n      </div>\n    )",
    "size": "'medium'",
    "step": "{this.step}\n            tabIndex={0}\n            type={inputType}\n            value={inputType === 'text' ? this.formattedValue : this.value}\n            {...inputAriaProps}></input>\n        </div>\n        {this.errorText ? (\n          <label class=\"sub-text error\">{this.errorText}</label>\n        ) : this.validText ? (\n          <label class=\"sub-text valid\">{this.validText}</label>\n        ) : null}\n      </div>\n    )",
    "textAlign": "'left'",
    "validText": "\"sub-text valid\">{this.validText}</label>\n        ) : null}\n      </div>\n    )",
    "value": "this.input.value"
  },
  "documentation": "\n\n--- modus-number-input-storybook-docs.mdx ---\n\n# Number Input\n\n---\n\n[Modus Number Input](https://modus.trimble.com/components/inputs/) web components are wrappers around native `<input type=\"number\">` elements. They are referenced using the `<modus-number-input>` custom HTML element.\n\nThis component is compatible with Angular reactive forms. This can be achieved through the implementation of a simple directive.\n\n### Default\n\n<modus-number-input label=\"Number Input Demo 1\" placeholder=\"Placeholder\" required=\"true\"></modus-number-input><br />\n<modus-number-input disabled=\"true\" label=\"Number Input Demo 2\" placeholder=\"Placeholder\" required=\"true\"></modus-number-input><br />\n<modus-number-input helper-text=\"Helper demo\" label=\"Number Input Demo 3\" placeholder=\"Placeholder\"></modus-number-input><br />\n<modus-number-input error-text=\"Error demo\" label=\"Number Input Demo 4\" placeholder=\"Placeholder\"></modus-number-input><br />\n<modus-number-input valid-text=\"Valid demo\" label=\"Number Input Demo 5\" placeholder=\"Placeholder\"></modus-number-input><br />\n<modus-number-input label=\"Text Input Demo 6\" placeholder=\"Placeholder\" size=\"large\" value=\"100\"></modus-number-input>\n\n```html\n<modus-number-input label=\"Number Input Demo 1\" placeholder=\"Placeholder\" required=\"true\"></modus-number-input>\n<modus-number-input\n  disabled=\"true\"\n  label=\"Number Input Demo 2\"\n  placeholder=\"Placeholder\"\n  required=\"true\"></modus-number-input>\n<modus-number-input helper-text=\"Helper demo\" label=\"Number Input Demo 3\" placeholder=\"Placeholder\"></modus-number-input>\n<modus-number-input error-text=\"Error demo\" label=\"Number Input Demo 4\" placeholder=\"Placeholder\"></modus-number-input>\n<modus-number-input valid-text=\"Valid demo\" label=\"Number Input Demo 5\" placeholder=\"Placeholder\"></modus-number-input>\n<modus-number-input label=\"Text Input Demo 6\" placeholder=\"Placeholder\" size=\"large\" value=\"100\"></modus-number-input>\n```\n\n### Currency and Locale\n\nThe number Input uses Intl.NumberFormat to format the value based on the currency and locale provided.\n\n- Follow the currency codes from [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) for the `currency` property.\n- Follow the locale codes from [BCP 47](https://tools.ietf.org/html/bcp47) for the `locale` property.\n\n<modus-number-input label=\"With Currency\" currency=\"USD\" placeholder=\"Placeholder\" value=\"2400\" ></modus-number-input><br />\n<modus-number-input label=\"With Locale\" locale=\"en-IN\" placeholder=\"Placeholder\"  value=\"2400\" ></modus-number-input><br />\n\n```html\n<modus-number-input label=\"With Currency\" currency=\"USD\" placeholder=\"Placeholder\" value=\"2400\"></modus-number-input>\n<modus-number-input label=\"With Locale\" locale=\"en-IN\" placeholder=\"Placeholder\" value=\"2400\"></modus-number-input>\n```\n\n### Properties\n\n| Property      | Attribute     | Description                                          | Type                  | Default     |\n| ------------- | ------------- | ---------------------------------------------------- | --------------------- | ----------- |\n| `ariaLabel`   | `aria-label`  | (optional) The input's aria-label.                   | `string`              | `undefined` |\n| `currency`    | `currency`    | (optional) The input's currency.                     | `string`              | `''`        |\n| `locale`      | `locale`      | (optional) The input's locale                        | `string`              | `undefined` |\n| `disabled`    | `disabled`    | (optional) Whether the input is disabled.            | `boolean`             | `undefined` |\n| `errorText`   | `error-text`  | (optional) The input's error state text.             | `string`              | `undefined` |\n| `helperText`  | `helper-text` | (optional) The input's helper text displayed below.  | `string`              | `undefined` |\n| `label`       | `label`       | (optional) The input's label.                        | `string`              | `undefined` |\n| `maxValue`    | `max-value`   | (optional) The input's maximum value.                | `number`              | `undefined` |\n| `minValue`    | `min-value`   | (optional) The input's minimum value.                | `number`              | `undefined` |\n| `placeholder` | `placeholder` | (optional) The input's placeholder text.             | `string`              | `undefined` |\n| `readOnly`    | `read-only`   | (optional) Whether the input's content is read-only. | `boolean`             | `undefined` |\n| `required`    | `required`    | (optional) Whether the input is required.            | `boolean`             | `undefined` |\n| `size`        | `size`        | (optional) The input's size.                         | `\"large\" \\| \"medium\"` | `'medium'`  |\n| `step`        | `step`        | (optional) The input's step.                         | `number`              | `undefined` |\n| `textAlign`   | `text-align`  | (optional) The input's text alignment.               | `\"left\" \\| \"right\"`   | `'left'`    |\n| `validText`   | `valid-text`  | (optional) The input's valid state text.             | `string`              | `undefined` |\n| `value`       | `value`       | (optional) The input's value.                        | `string`              | `undefined` |\n\n### DOM Events\n\n| Event         | Description                                | Type                  |\n| ------------- | ------------------------------------------ | --------------------- |\n| `valueChange` | An event that fires on input value change. | `CustomEvent<string>` |\n\n### Methods\n\n| Method name  | Description     | Parameter | Return          |\n| ------------ | --------------- | --------- | --------------- |\n| `focusInput` | Focus the input |           | `Promise<void>` |\n\n### Accessibility\n\n- Number Input gets an `aria-label` provided by the `aria-label` property input.\n- It is recommended to pass `aria-label` when there is no label used so the input is accessible to screen readers.\n- Number Input gets an `aria-disabled` set to whether Number Input is disabled.\n- Number Input gets an `aria-placeholder` provided by the `placeholder` property input.\n- Number Input gets an `aria-invalid` set to whether Number Input is invalid.\n- Number Input gets an `aria-readonly` set to whether Number Input is readonly.\n- Number Input gets an `aria-required` set to whether Number Input is required.\n- Number Input gets a `aria-valuemax` provided by the `max-value` property input.\n- Number Input gets a `aria-valuemin` provided by the `min-value` property input.\n- Number Input gets a `aria-valuenow` set to Number Input's current value.\n",
  "storybook_content": "\n\n--- modus-number-input.stories.tsx ---\n\n// modus-number-input.stories.tsx\n\n// @ts-ignore: JSX/MDX with Stencil\nimport docs from './modus-number-input-storybook-docs.mdx';\nimport { html } from 'lit-html';\nimport { withActions } from '@storybook/addon-actions/decorator';\n\nexport default {\n  title: 'User Inputs/Number Input',\n  argTypes: {\n    ariaLabel: {\n      name: 'aria-label',\n      description: \"The number input's aria-label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    currency: {\n      name: 'currency',\n      description:\n        'The currency symbol.\\nNote: Follow the currency codes from [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) for the `currencySymbol` property.\\n',\n      table: {\n        type: { summary: 'string' },\n        defaultValue: { summary: \"''\" },\n      },\n    },\n    locale: {\n      name: 'locale',\n      description:\n        'The locale of the selected currency. Note: Follow the locale codes from [BCP 47](https://tools.ietf.org/html/bcp47) for the `locale` property.',\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    disabled: {\n      description: 'Whether the number input is disabled',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    errorText: {\n      name: 'error-text',\n      description: \"The number input's error text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    helperText: {\n      name: 'helper-text',\n      description: \"The number input's helper text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    label: {\n      description: \"The number input's label\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    maxValue: {\n      name: 'max-value',\n      description: \"The number input's maximum value\",\n      table: {\n        type: { summary: 'number' },\n      },\n    },\n    minValue: {\n      name: 'min-value',\n      description: \"The number input's minimum value\",\n      table: {\n        type: { summary: 'number' },\n      },\n    },\n    placeholder: {\n      description: \"The number input's placeholder text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    readOnly: {\n      name: 'read-only',\n      description: 'Whether the number input is read-only',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    required: {\n      description: 'Whether the number input is required',\n      table: {\n        defaultValue: { summary: false },\n        type: { summary: 'boolean' },\n      },\n    },\n    size: {\n      options: ['medium', 'large'],\n      type: 'select',\n      description: 'The size of the number input',\n      table: {\n        defaultValue: { summary: `'medium'` },\n        type: { summary: `'large' | 'medium'` },\n      },\n    },\n    step: {\n      description: \"The number input's step\",\n      table: {\n        type: { summary: 'number' },\n      },\n    },\n    textAlign: {\n      name: 'text-align',\n      options: ['left', 'right'],\n      type: 'select',\n      description: 'text alignment for the number input.',\n      table: {\n        defaultValue: { summary: \"'left'\" },\n        type: {\n          summary: \"'left' | 'right'\",\n        },\n      },\n    },\n    validText: {\n      name: 'valid-text',\n      description: \"The number input's valid text\",\n      table: {\n        type: { summary: 'string' },\n      },\n    },\n    value: {\n      description: \"The number input's value\",\n      table: {\n        type: { summary: 'number' },\n      },\n    },\n  },\n  parameters: {\n    actions: {\n      handles: ['valueChange'],\n    },\n    controls: { expanded: true, sort: 'requiredFirst' },\n    docs: {\n      page: docs,\n    },\n    options: {\n      isToolshown: true,\n    },\n    design: {\n      type: 'figma',\n      url: 'https://www.figma.com/design/wyfVJUHWRMkeCfdB38HFEE/Modus---Web?node-id=1346-5&m=dev',\n    },\n  },\n  decorators: [withActions],\n};\n\nconst Template = ({\n  ariaLabel,\n  currency,\n  locale,\n  disabled,\n  errorText,\n  helperText,\n  label,\n  maxValue,\n  minValue,\n  placeholder,\n  readOnly,\n  required,\n  size,\n  step,\n  textAlign,\n  validText,\n  value,\n}) => html`\n  <modus-number-input\n    aria-label=${ariaLabel}\n    currency=${currency}\n    locale=${locale}\n    ?disabled=${disabled}\n    error-text=${errorText}\n    helper-text=${helperText}\n    label=${label}\n    max-value=${maxValue}\n    min-value=${minValue}\n    placeholder=${placeholder}\n    ?read-only=${readOnly}\n    ?required=${required}\n    size=${size}\n    step=${step}\n    text-align=${textAlign}\n    valid-text=${validText}\n    value=${value}></modus-number-input>\n`;\n\nexport const Default = Template.bind({});\nDefault.args = {\n  ariaLabel: '',\n  currency: '',\n  locale: '',\n  disabled: false,\n  errorText: '',\n  helperText: '',\n  label: 'Number Input',\n  maxValue: 100000,\n  minValue: 0,\n  placeholder: '',\n  readOnly: false,\n  required: false,\n  size: 'medium',\n  step: 1,\n  textAlign: 'left',\n  validText: '',\n  value: 100000,\n};\n",
  "storybook": {
    "examples": [
      "<modus-number-input\n    aria-label=${ariaLabel}\n    currency=${currency}\n    locale=${locale}\n    ?disabled=${disabled}\n    error-text=${errorText}\n    helper-text=${helperText}\n    label=${label}\n    max-value=${maxValue}\n    min-value=${minValue}\n    placeholder=${placeholder}\n    ?read-only=${readOnly}\n    ?required=${required}\n    size=${size}\n    step=${step}\n    text-align=${textAlign}\n    valid-text=${validText}\n    value=${value}></modus-number-input>",
      "\n  <modus-number-input\n    aria-label=${ariaLabel}\n    currency=${currency}\n    locale=${locale}\n    ?disabled=${disabled}\n    error-text=${errorText}\n    helper-text=${helperText}\n    label=${label}\n    max-value=${maxValue}\n    min-value=${minValue}\n    placeholder=${placeholder}\n    ?read-only=${readOnly}\n    ?required=${required}\n    size=${size}\n    step=${step}\n    text-align=${textAlign}\n    valid-text=${validText}\n    value=${value}></modus-number-input>\n"
    ],
    "variants": [],
    "prop_usage": {}
  },
  "tag_name": "modus-number-input"
}
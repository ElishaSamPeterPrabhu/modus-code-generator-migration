{
  "component_name": "modus-wc-stepper",
  "version": "v2",
  "props": [
    {
      "name": "customClass",
      "description": "/** The color theme of the step */\n  color?:\n    | 'primary'\n    | 'secondary'\n    | 'accent'\n    | 'info'\n    | 'success'\n    | 'warning'\n    | 'error'\n    | 'neutral';\n  /** Custom content to display in the step indicator */\n  content?: string;\n  /** Custom CSS class to apply to the step */\n  customClass?: string;\n  /** Text label for the step */\n  label?: string;\n}\n\n/**\n * Used to show a list of steps in a process.\n */\n@Component({\n  tag: 'modus-wc-stepper',\n  styleUrl: 'modus-wc-stepper.scss',\n  shadow: false,\n})\nexport class ModusWcStepper {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the steps element. */",
      "type": ": string"
    },
    {
      "name": "orientation",
      "description": "/** The color theme of the step */\n  color?:\n    | 'primary'\n    | 'secondary'\n    | 'accent'\n    | 'info'\n    | 'success'\n    | 'warning'\n    | 'error'\n    | 'neutral';\n  /** Custom content to display in the step indicator */\n  content?: string;\n  /** Custom CSS class to apply to the step */\n  customClass?: string;\n  /** Text label for the step */\n  label?: string;\n}\n\n/**\n * Used to show a list of steps in a process.\n */\n@Component({\n  tag: 'modus-wc-stepper',\n  styleUrl: 'modus-wc-stepper.scss',\n  shadow: false,\n})\nexport class ModusWcStepper {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the steps element. */",
      "type": ": Orientation"
    },
    {
      "name": "steps",
      "description": "/** The color theme of the step */\n  color?:\n    | 'primary'\n    | 'secondary'\n    | 'accent'\n    | 'info'\n    | 'success'\n    | 'warning'\n    | 'error'\n    | 'neutral';\n  /** Custom content to display in the step indicator */\n  content?: string;\n  /** Custom CSS class to apply to the step */\n  customClass?: string;\n  /** Text label for the step */\n  label?: string;\n}\n\n/**\n * Used to show a list of steps in a process.\n */\n@Component({\n  tag: 'modus-wc-stepper',\n  styleUrl: 'modus-wc-stepper.scss',\n  shadow: false,\n})\nexport class ModusWcStepper {\n  private inheritedAttributes: Attributes = {};\n\n  /** Reference to the host element */\n  @Element() el!: HTMLElement;\n\n  /** Custom CSS class to apply to the steps element. */",
      "type": "IStepperItem[]"
    }
  ],
  "events": [],
  "slots": [],
  "default_values": {
    "customClass": "''",
    "steps": "[]"
  },
  "documentation": "\n\n--- modus-wc-stepper.stories.ts ---\n\nimport { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { Orientation } from '../types';\n\ninterface StepperArgs {\n  'custom-class'?: string;\n  orientation: Orientation;\n  steps?: IStepperItem[];\n}\n\ninterface IStepperItem {\n  color?:\n    | 'primary'\n    | 'secondary'\n    | 'accent'\n    | 'info'\n    | 'success'\n    | 'warning'\n    | 'error'\n    | 'neutral';\n  content?: string;\n  customClass?: string;\n  label?: string;\n}\n\nconst meta: Meta<StepperArgs> = {\n  title: 'Components/Stepper',\n  component: 'modus-wc-stepper',\n  args: {\n    steps: [\n      { label: 'Scale', color: 'primary' },\n      { label: 'Belong', color: 'primary' },\n      { label: 'Grow', color: 'warning' },\n      { label: 'Innovate', content: '\ud83d\ude80' },\n    ],\n  },\n  argTypes: {\n    'custom-class': {\n      control: 'text',\n    },\n    orientation: {\n      control: { type: 'select' },\n      options: ['horizontal', 'vertical'],\n    },\n    steps: {\n      description: 'Array of step objects defining the steps to display',\n      table: {\n        type: {\n          detail: `\n            Interface: IStepperItem\n            Properties:\n            - color ('primary' | 'secondary' | 'accent' | 'info' | 'success' | 'warning' | 'error' | 'neutral', optional): The color theme of the step\n            - content (string, optional): Custom content to display in the step indicator\n            - customClass (string, optional): Custom CSS class to apply to the step\n            - label (string, optional): Text label for the step\n          `,\n        },\n      },\n    },\n  },\n  parameters: {\n    layout: 'padded',\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<StepperArgs>;\n\nconst Template: Story = {\n  // prettier-ignore\n  render: (args) => html`\n<modus-wc-stepper\n  custom-class=\"${ifDefined(args['custom-class'])}\"\n  orientation=\"${ifDefined(args.orientation)}\"\n  .steps=\"${args.steps}\"\n>\n</modus-wc-stepper>\n  `,\n};\n\nexport const Default: Story = { ...Template };\n",
  "storybook": {
    "examples": [
      "<modus-wc-stepper\n  custom-class=\"${ifDefined(args['custom-class'])}\"\n  orientation=\"${ifDefined(args.orientation)}\"\n  .steps=\"${args.steps}\"\n>\n</modus-wc-stepper>",
      "\n<modus-wc-stepper\n  custom-class=\"${ifDefined(args['custom-class'])}\"\n  orientation=\"${ifDefined(args.orientation)}\"\n  .steps=\"${args.steps}\"\n>\n</modus-wc-stepper>\n  "
    ],
    "variants": [],
    "prop_usage": {
      "class": [
        "${ifDefined(args["
      ],
      "orientation": [
        "${ifDefined(args.orientation)}"
      ],
      "steps": [
        "${args.steps}"
      ]
    }
  },
  "tag_name": "modus-wc-stepper"
}
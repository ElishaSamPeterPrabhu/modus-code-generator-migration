{
  "component_name": "modus-wc-utility-panel",
  "version": "v2",
  "props": [
    {
      "name": "expanded",
      "description": "/** The panel is expanded or closed */",
      "type": ""
    },
    {
      "name": "pushContent",
      "description": "/** The panel is expanded or closed */",
      "type": ""
    },
    {
      "name": "targetElement",
      "description": "/** The panel is expanded or closed */",
      "type": ": HTMLElement"
    }
  ],
  "events": [],
  "slots": [
    "header",
    "body",
    "footer"
  ],
  "default_values": {
    "expanded": "false",
    "pushContent": "false"
  },
  "documentation": "\n\n--- modus-wc-utility-panel.stories.ts ---\n\nimport { withActions } from '@storybook/addon-actions/decorator';\nimport type { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\n\ninterface UtilityPanelArgs {\n  expanded: boolean;\n  'push-content': boolean;\n}\n\nconst meta: Meta<UtilityPanelArgs> = {\n  title: 'Components/Utility Panel',\n  component: 'modus-wc-utility-panel',\n  args: {\n    expanded: false,\n    'push-content': true,\n  },\n  argTypes: {\n    expanded: {\n      control: { type: 'boolean' },\n    },\n    'push-content': {\n      control: { type: 'boolean' },\n    },\n  },\n  decorators: [withActions],\n  parameters: {\n    actions: {\n      handles: ['panelOpened', 'panelClosed'],\n    },\n    docs: {\n      description: {\n        component:\n          'A utility panel component that slides in from the right side of the screen. It can either push content or display as an overlay.',\n      },\n    },\n    layout: 'fullscreen',\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<UtilityPanelArgs>;\n\nexport const Default: Story = {\n  render: (args) => {\n    const { expanded, 'push-content': pushContent } = args;\n\n    // Set element reference immediately on first update\n    requestAnimationFrame(() => {\n      const contentElement = document.getElementById('main-content');\n      const panel = document.querySelector('modus-wc-utility-panel');\n      if (panel && contentElement) {\n        panel.targetElement = contentElement;\n      }\n    });\n\n    return html`\n      <style>\n        .demo-container {\n          height: 100vh;\n          display: flex;\n          flex-direction: column;\n          overflow: hidden;\n          background: white;\n        }\n\n        modus-wc-navbar {\n          flex-shrink: 0;\n        }\n\n        .main-content-wrapper {\n          flex: 1;\n          overflow: hidden;\n          position: relative;\n          background: var(--modus-wc-color-base-page);\n        }\n\n        .main-content {\n          height: 100%;\n          padding: 20px;\n          background: var(--modus-wc-color-base-page);\n          overflow: auto;\n        }\n\n        .modus-wc-utility-panel-header {\n          font-size: 18px;\n          font-weight: 600;\n        }\n\n        .modus-wc-utility-panel-body {\n          padding: 20px 0;\n        }\n\n        .modus-wc-utility-panel-footer {\n          display: flex;\n          gap: 10px;\n          justify-content: flex-end;\n        }\n      </style>\n\n      <div class=\"demo-container\">\n        <modus-wc-navbar id=\"navbar-default\" .visibility=${{ user: false }}>\n          <div slot=\"end\">\n            <modus-wc-tooltip content=\"Toggle Utility Panel\" position=\"left\">\n              <modus-wc-button\n                color=\"primary\"\n                size=\"sm\"\n                variant=\"outlined\"\n                onclick=\"const panel = this.closest('.demo-container').querySelector('modus-wc-utility-panel'); panel.expanded = !panel.expanded\"\n              >\n                <modus-wc-icon name=\"menu\"></modus-wc-icon>\n              </modus-wc-button>\n            </modus-wc-tooltip>\n          </div>\n        </modus-wc-navbar>\n\n        <div class=\"main-content-wrapper\">\n          <div id=\"main-content\" class=\"main-content\">\n            <h1>Main Content Area</h1>\n            <p>\n              This is the main content area below the navbar. When the utility\n              panel opens with pushContent=true, this content will be pushed to\n              the left.\n            </p>\n            <p>\n              This is an example of how the utility panel interacts with the\n              main content. When the panel opens with push content enabled, this\n              area will shift to the left to make room for the panel.\n            </p>\n            <p>\n              The content area maintains its full functionality while the panel\n              is open. Users can continue to interact with the main content\n              while accessing the utility panel features.\n            </p>\n          </div>\n\n          <modus-wc-utility-panel\n            ?expanded=\"${expanded}\"\n            ?push-content=\"${pushContent}\"\n          >\n            <div slot=\"header\" class=\"modus-wc-utility-panel-header\">\n              Utility Panel Header\n            </div>\n\n            <div slot=\"body\" class=\"modus-wc-utility-panel-body\">\n              <p>This is the utility panel body content.</p>\n              <p>\n                You can add any content here including forms, lists, or other\n                components.\n              </p>\n              <modus-wc-text-input\n                label=\"Example Input\"\n                placeholder=\"Enter text...\"\n              >\n              </modus-wc-text-input>\n            </div>\n\n            <div slot=\"footer\" class=\"modus-wc-utility-panel-footer\">\n              <modus-wc-button color=\"tertiary\" size=\"sm\"\n                >Cancel</modus-wc-button\n              >\n              <modus-wc-button color=\"primary\" size=\"sm\">Save</modus-wc-button>\n            </div>\n          </modus-wc-utility-panel>\n        </div>\n      </div>\n    `;\n  },\n};\n\nexport const Expanded: Story = {\n  render: (args) => {\n    const { expanded, 'push-content': pushContent } = args;\n\n    return html`\n      <style>\n        .demo-container {\n          height: 100vh;\n          display: flex;\n          flex-direction: column;\n          overflow: hidden;\n          background: white;\n        }\n\n        modus-wc-navbar {\n          flex-shrink: 0;\n        }\n\n        .main-content-wrapper {\n          flex: 1;\n          overflow: hidden;\n          position: relative;\n          background: var(--modus-wc-color-base-page);\n        }\n\n        .main-content {\n          height: 100%;\n          padding: 20px;\n          background: var(--modus-wc-color-base-page);\n          overflow: auto;\n        }\n\n        .modus-wc-utility-panel-header {\n          font-size: 18px;\n          font-weight: 600;\n        }\n\n        .modus-wc-utility-panel-body {\n          padding: 20px 0;\n          background: var(--modus-wc-color-base-100);\n        }\n\n        .modus-wc-utility-panel-footer {\n          display: flex;\n          gap: 10px;\n          justify-content: flex-end;\n        }\n      </style>\n\n      <div class=\"demo-container\">\n        <modus-wc-navbar id=\"navbar-expanded\" .visibility=${{ user: false }}>\n          <div slot=\"end\">\n            <modus-wc-button\n              color=\"primary\"\n              size=\"sm\"\n              variant=\"outlined\"\n              onclick=\"const panel = this.closest('.demo-container').querySelector('modus-wc-utility-panel'); panel.expanded = !panel.expanded\"\n            >\n              <modus-wc-icon name=\"menu\"></modus-wc-icon>\n            </modus-wc-button>\n          </div>\n        </modus-wc-navbar>\n\n        <div class=\"main-content-wrapper\">\n          <div id=\"main-content-expanded\" class=\"main-content\">\n            <h1>Main Content Area (Expanded Story)</h1>\n            <p>\n              This story shows the panel already expanded. The content should be\n              pushed to the left.\n            </p>\n            <p>\n              The utility panel provides quick access to additional tools and\n              information. It can be used for settings, filters, or any\n              supplementary content that enhances the main application.\n            </p>\n          </div>\n\n          <modus-wc-utility-panel\n            id=\"panel-expanded\"\n            ?expanded=\"${expanded}\"\n            ?push-content=\"${pushContent}\"\n          >\n            <div slot=\"header\" class=\"modus-wc-utility-panel-header\">\n              Expanded Panel Header\n            </div>\n\n            <div slot=\"body\" class=\"modus-wc-utility-panel-body\">\n              <p>This panel starts in the expanded state.</p>\n            </div>\n\n            <div slot=\"footer\" class=\"modus-wc-utility-panel-footer\">\n              <modus-wc-button color=\"tertiary\" size=\"sm\"\n                >Cancel</modus-wc-button\n              >\n              <modus-wc-button color=\"primary\" size=\"sm\">Save</modus-wc-button>\n            </div>\n          </modus-wc-utility-panel>\n        </div>\n      </div>\n    `;\n  },\n  args: {\n    expanded: true,\n    'push-content': true,\n  },\n};\n\nexport const OverlayMode: Story = {\n  render: (args) => {\n    const { expanded, 'push-content': pushContent } = args;\n\n    // Set element reference after render\n    requestAnimationFrame(() => {\n      const contentElement = document.getElementById('main-content-overlay');\n      const panel = document.querySelector('#panel-overlay') as HTMLElement & {\n        targetElement: HTMLElement;\n      };\n      if (panel && contentElement) {\n        panel.targetElement = contentElement;\n      }\n    });\n\n    return html`\n      <style>\n        .demo-container {\n          height: 100vh;\n          display: flex;\n          flex-direction: column;\n          overflow: hidden;\n          background: white;\n        }\n\n        modus-wc-navbar {\n          flex-shrink: 0;\n        }\n\n        .main-content-wrapper {\n          flex: 1;\n          overflow: hidden;\n          position: relative;\n          background: var(--modus-wc-color-base-page);\n        }\n\n        .main-content {\n          height: 100%;\n          padding: 20px;\n          background: var(--modus-wc-color-base-page);\n          overflow: auto;\n        }\n\n        .modus-wc-utility-panel-header {\n          font-size: 18px;\n          font-weight: 600;\n        }\n\n        .modus-wc-utility-panel-body {\n          padding: 20px 0;\n        }\n\n        .modus-wc-utility-panel-footer {\n          display: flex;\n          gap: 10px;\n          justify-content: flex-end;\n        }\n      </style>\n\n      <div class=\"demo-container\">\n        <modus-wc-navbar id=\"navbar-overlay\" .visibility=${{ user: false }}>\n          <div slot=\"end\">\n            <modus-wc-button\n              color=\"primary\"\n              size=\"sm\"\n              variant=\"outlined\"\n              onclick=\"const panel = document.getElementById('panel-overlay'); panel.expanded = !panel.expanded\"\n            >\n              <modus-wc-icon name=\"menu\"></modus-wc-icon>\n            </modus-wc-button>\n          </div>\n        </modus-wc-navbar>\n\n        <div class=\"main-content-wrapper\">\n          <div id=\"main-content-overlay\" class=\"main-content\">\n            <h1>Main Content Area (Overlay Mode)</h1>\n            <p>\n              In overlay mode, the panel appears over the content without\n              pushing it.\n            </p>\n            <p>\n              This example demonstrates the overlay mode where the panel appears\n              on top of the content without pushing it aside. This is useful\n              when you want to preserve the layout of the main content area.\n            </p>\n          </div>\n\n          <modus-wc-utility-panel\n            id=\"panel-overlay\"\n            ?expanded=\"${expanded}\"\n            ?push-content=\"${pushContent}\"\n          >\n            <div slot=\"header\" class=\"modus-wc-utility-panel-header\">\n              Overlay Panel Header\n            </div>\n\n            <div slot=\"body\" class=\"modus-wc-utility-panel-body\">\n              <p>This panel overlays the content without pushing it.</p>\n            </div>\n\n            <div slot=\"footer\" class=\"modus-wc-utility-panel-footer\">\n              <modus-wc-button color=\"tertiary\" size=\"sm\"\n                >Cancel</modus-wc-button\n              >\n              <modus-wc-button color=\"primary\" size=\"sm\">Save</modus-wc-button>\n            </div>\n          </modus-wc-utility-panel>\n        </div>\n      </div>\n    `;\n  },\n  args: {\n    expanded: true,\n    'push-content': false,\n  },\n};\n\nexport const WithoutHeaderFooter: Story = {\n  render: (args: UtilityPanelArgs) => {\n    const { expanded, 'push-content': pushContent } = args;\n\n    // Set element reference after render\n    requestAnimationFrame(() => {\n      const contentElement = document.getElementById('main-content-2');\n      const panel = document.querySelector('#panel-simple') as HTMLElement & {\n        targetElement: HTMLElement;\n      };\n      if (panel && contentElement) {\n        panel.targetElement = contentElement;\n      }\n    });\n    return html`\n      <style>\n        .demo-container {\n          height: 100vh;\n          position: relative;\n          overflow: hidden;\n          background: var(--modus-wc-color-base-page);\n        }\n\n        .main-content {\n          height: 100%;\n          padding: 20px;\n          background: var(--modus-wc-color-base-page);\n        }\n      </style>\n\n      <div class=\"demo-container\">\n        <div id=\"main-content-2\" class=\"main-content\">\n          <h1>Main Content Area</h1>\n          <modus-wc-button\n            onclick=\"const panel = this.closest('.demo-container').querySelector('modus-wc-utility-panel'); panel.expanded = !panel.expanded\"\n          >\n            Toggle Panel\n          </modus-wc-button>\n        </div>\n\n        <modus-wc-utility-panel\n          id=\"panel-simple\"\n          ?expanded=\"${expanded}\"\n          ?push-content=\"${pushContent}\"\n        >\n          <div slot=\"body\">\n            <h3>Simple Body Content</h3>\n            <p>This panel only has body content without header or footer.</p>\n          </div>\n        </modus-wc-utility-panel>\n      </div>\n    `;\n  },\n  args: {\n    expanded: false,\n    'push-content': true,\n  },\n};\n",
  "storybook": {
    "examples": [
      "<modus-wc-icon name=\"menu\"></modus-wc-icon>",
      "<modus-wc-text-input\n                label=\"Example Input\"\n                placeholder=\"Enter text...\"\n              >\n              </modus-wc-text-input>",
      "<modus-wc-button color=\"tertiary\" size=\"sm\"\n                >Cancel</modus-wc-button\n              >",
      "<modus-wc-button color=\"primary\" size=\"sm\">Save</modus-wc-button>",
      "<modus-wc-icon name=\"menu\"></modus-wc-icon>"
    ],
    "variants": [
      "outlined"
    ],
    "prop_usage": {
      "class": [
        "demo-container",
        "main-content-wrapper",
        "main-content",
        "modus-wc-utility-panel-header",
        "modus-wc-utility-panel-body",
        "modus-wc-utility-panel-footer"
      ],
      "id": [
        "navbar-default",
        "main-content",
        "navbar-expanded",
        "main-content-expanded",
        "panel-expanded",
        "navbar-overlay",
        "main-content-overlay",
        "panel-overlay",
        "main-content-2",
        "panel-simple"
      ],
      "slot": [
        "end",
        "header",
        "body",
        "footer"
      ],
      "content": [
        "Toggle Utility Panel",
        "${pushContent}"
      ],
      "position": [
        "left"
      ],
      "color": [
        "primary",
        "tertiary"
      ],
      "size": [
        "sm"
      ],
      "variant": [
        "outlined"
      ],
      "onclick": [
        "const panel = this.closest(",
        "const panel = document.getElementById("
      ],
      "name": [
        "menu"
      ],
      "expanded": [
        "${expanded}"
      ],
      "label": [
        "Example Input"
      ],
      "placeholder": [
        "Enter text..."
      ]
    }
  },
  "tag_name": "modus-wc-utility-panel"
}